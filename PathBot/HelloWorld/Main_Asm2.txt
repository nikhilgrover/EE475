
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
$d():
       0:	00 00 03 20 d1 01 00 00 3d 08 00 00 15 08 00 00     ... ....=.......
      10:	15 08 00 00 15 08 00 00 15 08 00 00 15 08 00 00     ................
      20:	15 08 00 00 15 08 00 00 15 08 00 00 3d 08 00 00     ............=...
      30:	3d 08 00 00 15 08 00 00 3d 08 00 00 05 08 00 00     =.......=.......
      40:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
      50:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
      60:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
      70:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
      80:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
      90:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
      a0:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
      b0:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 1a 00 00     =...=...=...=...
      c0:	3d 08 00 00 b5 20 00 00 3d 08 00 00 21 25 00 00     =.... ..=...!%..
      d0:	3d 08 00 00 0d 2a 00 00 3d 08 00 00 3d 08 00 00     =....*..=...=...
      e0:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
      f0:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
     100:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
     110:	3d 08 00 00 4d 37 00 00 3d 08 00 00 3d 08 00 00     =...M7..=...=...
     120:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
     130:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
     140:	3d 08 00 00 3d 08 00 00 45 2e 00 00 3d 08 00 00     =...=...E...=...
     150:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
     160:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
     170:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
     180:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
     190:	3d 08 00 00 3d 08 00 00 51 33 00 00 3d 08 00 00     =...=...Q3..=...
     1a0:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
     1b0:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
     1c0:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...

000001d0 <ResetHandler>:
ResetHandler():
C:\Teensy\Projects\HelloWorld/mk20dx128.c:381
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	4b59      	ldr	r3, [pc, #356]	; (338 <ResetHandler+0x168>)
     1d2:	f24c 5220 	movw	r2, #50464	; 0xc520
C:\Teensy\Projects\HelloWorld/mk20dx128.c:371
__attribute__ ((optimize("-Os")))
#else
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/mk20dx128.c:381
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	801a      	strh	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/mk20dx128.c:382
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	f64d 1228 	movw	r2, #55592	; 0xd928
     1de:	801a      	strh	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/mk20dx128.c:383
	__asm__ volatile ("nop");
     1e0:	bf00      	nop
C:\Teensy\Projects\HelloWorld/mk20dx128.c:384
	__asm__ volatile ("nop");
     1e2:	bf00      	nop
C:\Teensy\Projects\HelloWorld/mk20dx128.c:388
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	f000 fb2d 	bl	842 <startup_early_hook>
C:\Teensy\Projects\HelloWorld/mk20dx128.c:393

	// enable clocks to always-used peripherals


	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	4b54      	ldr	r3, [pc, #336]	; (33c <ResetHandler+0x16c>)
     1ea:	f04f 6230 	mov.w	r2, #184549376	; 0xb000000
     1ee:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/mk20dx128.c:394
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	4a53      	ldr	r2, [pc, #332]	; (340 <ResetHandler+0x170>)
     1f2:	609a      	str	r2, [r3, #8]
C:\Teensy\Projects\HelloWorld/mk20dx128.c:395
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	4a53      	ldr	r2, [pc, #332]	; (344 <ResetHandler+0x174>)
     1f6:	60da      	str	r2, [r3, #12]
C:\Teensy\Projects\HelloWorld/mk20dx128.c:402
	//GPIOC_PDDR |= (1<<5);
	//GPIOC_PSOR = (1<<5);
	//while (1);


	SCB_CPACR = 0x00F00000;
     1f8:	4b53      	ldr	r3, [pc, #332]	; (348 <ResetHandler+0x178>)
     1fa:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
     1fe:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/mk20dx128.c:404

	LMEM_PCCCR = 0x85000003;
     200:	4b52      	ldr	r3, [pc, #328]	; (34c <ResetHandler+0x17c>)
     202:	4a53      	ldr	r2, [pc, #332]	; (350 <ResetHandler+0x180>)
     204:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/mk20dx128.c:409


#ifdef KINETISK
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     206:	4b53      	ldr	r3, [pc, #332]	; (354 <ResetHandler+0x184>)
     208:	681a      	ldr	r2, [r3, #0]
     20a:	f412 7280 	ands.w	r2, r2, #256	; 0x100
     20e:	d104      	bne.n	21a <ResetHandler+0x4a>
C:\Teensy\Projects\HelloWorld/mk20dx128.c:410
		RTC_SR = 0;
     210:	4951      	ldr	r1, [pc, #324]	; (358 <ResetHandler+0x188>)
     212:	600a      	str	r2, [r1, #0]
C:\Teensy\Projects\HelloWorld/mk20dx128.c:411
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     214:	f44f 52a8 	mov.w	r2, #5376	; 0x1500
     218:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/mk20dx128.c:415
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     21a:	4b50      	ldr	r3, [pc, #320]	; (35c <ResetHandler+0x18c>)
     21c:	781a      	ldrb	r2, [r3, #0]
     21e:	0711      	lsls	r1, r2, #28
     220:	d503      	bpl.n	22a <ResetHandler+0x5a>
C:\Teensy\Projects\HelloWorld/mk20dx128.c:415 (discriminator 1)
     222:	781a      	ldrb	r2, [r3, #0]
     224:	f042 0208 	orr.w	r2, r2, #8
     228:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/mk20dx128.c:420

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed

	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22a:	4b4d      	ldr	r3, [pc, #308]	; (360 <ResetHandler+0x190>)
     22c:	22aa      	movs	r2, #170	; 0xaa
     22e:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/mk20dx128.c:423

	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     230:	2300      	movs	r3, #0
     232:	4a4c      	ldr	r2, [pc, #304]	; (364 <ResetHandler+0x194>)
C:\Teensy\Projects\HelloWorld/mk20dx128.c:423 (discriminator 1)
     234:	494c      	ldr	r1, [pc, #304]	; (368 <ResetHandler+0x198>)
     236:	1898      	adds	r0, r3, r2
     238:	4288      	cmp	r0, r1
     23a:	d204      	bcs.n	246 <ResetHandler+0x76>
C:\Teensy\Projects\HelloWorld/mk20dx128.c:423 (discriminator 2)
     23c:	494b      	ldr	r1, [pc, #300]	; (36c <ResetHandler+0x19c>)
     23e:	5859      	ldr	r1, [r3, r1]
     240:	5099      	str	r1, [r3, r2]
     242:	3304      	adds	r3, #4
     244:	e7f5      	b.n	232 <ResetHandler+0x62>
C:\Teensy\Projects\HelloWorld/mk20dx128.c:423
     246:	4a4a      	ldr	r2, [pc, #296]	; (370 <ResetHandler+0x1a0>)
C:\Teensy\Projects\HelloWorld/mk20dx128.c:425 (discriminator 1)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     248:	4b4a      	ldr	r3, [pc, #296]	; (374 <ResetHandler+0x1a4>)
     24a:	429a      	cmp	r2, r3
     24c:	f04f 0300 	mov.w	r3, #0
     250:	d202      	bcs.n	258 <ResetHandler+0x88>
C:\Teensy\Projects\HelloWorld/mk20dx128.c:425 (discriminator 2)
     252:	f842 3b04 	str.w	r3, [r2], #4
     256:	e7f7      	b.n	248 <ResetHandler+0x78>
C:\Teensy\Projects\HelloWorld/mk20dx128.c:428 (discriminator 2)

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     258:	4947      	ldr	r1, [pc, #284]	; (378 <ResetHandler+0x1a8>)
     25a:	4a48      	ldr	r2, [pc, #288]	; (37c <ResetHandler+0x1ac>)
     25c:	5859      	ldr	r1, [r3, r1]
     25e:	5099      	str	r1, [r3, r2]
     260:	3304      	adds	r3, #4
     262:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
     266:	d1f7      	bne.n	258 <ResetHandler+0x88>
C:\Teensy\Projects\HelloWorld/mk20dx128.c:428
     268:	4b45      	ldr	r3, [pc, #276]	; (380 <ResetHandler+0x1b0>)
C:\Teensy\Projects\HelloWorld/mk20dx128.c:429 (discriminator 2)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     26a:	2180      	movs	r1, #128	; 0x80
     26c:	f803 1b01 	strb.w	r1, [r3], #1
     270:	4944      	ldr	r1, [pc, #272]	; (384 <ResetHandler+0x1b4>)
     272:	428b      	cmp	r3, r1
     274:	d1f9      	bne.n	26a <ResetHandler+0x9a>
C:\Teensy\Projects\HelloWorld/mk20dx128.c:430
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     276:	4b44      	ldr	r3, [pc, #272]	; (388 <ResetHandler+0x1b8>)
     278:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/mk20dx128.c:439
	//  C1[IREFS] bit is written to 1
	//  C6[PLLS] bit is written to 0
// MCG_SC[FCDIV] defaults to divide by two for internal ref clock

    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     27a:	4b44      	ldr	r3, [pc, #272]	; (38c <ResetHandler+0x1bc>)
     27c:	228a      	movs	r2, #138	; 0x8a
     27e:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/mk20dx128.c:441
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     280:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     284:	2224      	movs	r2, #36	; 0x24
     286:	705a      	strb	r2, [r3, #1]
C:\Teensy\Projects\HelloWorld/mk20dx128.c:443
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     288:	22a0      	movs	r2, #160	; 0xa0
     28a:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/mk20dx128.c:445 (discriminator 1)
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     28c:	799a      	ldrb	r2, [r3, #6]
     28e:	0792      	lsls	r2, r2, #30
     290:	d5fc      	bpl.n	28c <ResetHandler+0xbc>
C:\Teensy\Projects\HelloWorld/mk20dx128.c:447
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     292:	799a      	ldrb	r2, [r3, #6]
     294:	06d4      	lsls	r4, r2, #27
     296:	d4fc      	bmi.n	292 <ResetHandler+0xc2>
C:\Teensy\Projects\HelloWorld/mk20dx128.c:449
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     298:	4b3d      	ldr	r3, [pc, #244]	; (390 <ResetHandler+0x1c0>)
     29a:	799a      	ldrb	r2, [r3, #6]
     29c:	f002 020c 	and.w	r2, r2, #12
     2a0:	2a08      	cmp	r2, #8
     2a2:	d1f9      	bne.n	298 <ResetHandler+0xc8>
C:\Teensy\Projects\HelloWorld/mk20dx128.c:489
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(5);
    #elif F_CPU == 144000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(2);
    #elif F_CPU == 120000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2a4:	2201      	movs	r2, #1
     2a6:	711a      	strb	r2, [r3, #4]
C:\Teensy\Projects\HelloWorld/mk20dx128.c:490
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(14);
     2a8:	224e      	movs	r2, #78	; 0x4e
     2aa:	715a      	strb	r2, [r3, #5]
C:\Teensy\Projects\HelloWorld/mk20dx128.c:501 (discriminator 1)
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(2);
    #elif F_CPU > 16000000
    #error "MK66FX1M0 does not support this clock speed yet...."
    #endif
	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2ac:	799a      	ldrb	r2, [r3, #6]
     2ae:	0690      	lsls	r0, r2, #26
     2b0:	d5fc      	bpl.n	2ac <ResetHandler+0xdc>
C:\Teensy\Projects\HelloWorld/mk20dx128.c:503
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2b2:	4b37      	ldr	r3, [pc, #220]	; (390 <ResetHandler+0x1c0>)
     2b4:	799a      	ldrb	r2, [r3, #6]
     2b6:	0651      	lsls	r1, r2, #25
     2b8:	d5fb      	bpl.n	2b2 <ResetHandler+0xe2>
C:\Teensy\Projects\HelloWorld/mk20dx128.c:574
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(2);
#elif F_CPU == 120000000
	// config divisors: 120 MHz core, 60 MHz bus, 24 MHz flash, USB = 128 * 2 / 5
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(4);
     2ba:	4a36      	ldr	r2, [pc, #216]	; (394 <ResetHandler+0x1c4>)
     2bc:	f04f 7182 	mov.w	r1, #17039360	; 0x1040000
     2c0:	6011      	str	r1, [r2, #0]
C:\Teensy\Projects\HelloWorld/mk20dx128.c:580
	#elif F_BUS == 120000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(4);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
     2c2:	2109      	movs	r1, #9
     2c4:	6051      	str	r1, [r2, #4]
C:\Teensy\Projects\HelloWorld/mk20dx128.c:659
#error "Error, F_CPU must be 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2c6:	2220      	movs	r2, #32
     2c8:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/mk20dx128.c:661 (discriminator 1)
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ca:	4b31      	ldr	r3, [pc, #196]	; (390 <ResetHandler+0x1c0>)
     2cc:	799b      	ldrb	r3, [r3, #6]
     2ce:	f003 030c 	and.w	r3, r3, #12
     2d2:	2b0c      	cmp	r3, #12
     2d4:	d1f9      	bne.n	2ca <ResetHandler+0xfa>
C:\Teensy\Projects\HelloWorld/mk20dx128.c:668
	// USB uses PLL clock, trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 216000000 || F_CPU == 180000000
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2d6:	4b30      	ldr	r3, [pc, #192]	; (398 <ResetHandler+0x1c8>)
     2d8:	4a30      	ldr	r2, [pc, #192]	; (39c <ResetHandler+0x1cc>)
     2da:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/mk20dx128.c:690
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2dc:	4b30      	ldr	r3, [pc, #192]	; (3a0 <ResetHandler+0x1d0>)
     2de:	4a31      	ldr	r2, [pc, #196]	; (3a4 <ResetHandler+0x1d4>)
     2e0:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/mk20dx128.c:691
	SYST_CVR = 0;
     2e2:	2200      	movs	r2, #0
     2e4:	605a      	str	r2, [r3, #4]
C:\Teensy\Projects\HelloWorld/mk20dx128.c:692
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2e6:	2207      	movs	r2, #7
     2e8:	f843 2c04 	str.w	r2, [r3, #-4]
C:\Teensy\Projects\HelloWorld/mk20dx128.c:693
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2ec:	4a2e      	ldr	r2, [pc, #184]	; (3a8 <ResetHandler+0x1d8>)
     2ee:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
C:\Teensy\Projects\HelloWorld/mk20dx128.c:696

	//init_pins();
	__enable_irq();
     2f2:	b662      	cpsie	i
C:\Teensy\Projects\HelloWorld/mk20dx128.c:698

	_init_Teensyduino_internal_();
     2f4:	f001 f82f 	bl	1356 <_init_Teensyduino_internal_>
C:\Teensy\Projects\HelloWorld/mk20dx128.c:702

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2f8:	4b17      	ldr	r3, [pc, #92]	; (358 <ResetHandler+0x188>)
     2fa:	681b      	ldr	r3, [r3, #0]
     2fc:	07da      	lsls	r2, r3, #31
     2fe:	d505      	bpl.n	30c <ResetHandler+0x13c>
C:\Teensy\Projects\HelloWorld/mk20dx128.c:710
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     300:	482a      	ldr	r0, [pc, #168]	; (3ac <ResetHandler+0x1dc>)
     302:	f000 fc79 	bl	bf8 <rtc_set>
C:\Teensy\Projects\HelloWorld/mk20dx128.c:714
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     306:	4b2a      	ldr	r3, [pc, #168]	; (3b0 <ResetHandler+0x1e0>)
     308:	4a2a      	ldr	r2, [pc, #168]	; (3b4 <ResetHandler+0x1e4>)
     30a:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/mk20dx128.c:716
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     30c:	4b2a      	ldr	r3, [pc, #168]	; (3b8 <ResetHandler+0x1e8>)
     30e:	781b      	ldrb	r3, [r3, #0]
     310:	065b      	lsls	r3, r3, #25
     312:	d509      	bpl.n	328 <ResetHandler+0x158>
C:\Teensy\Projects\HelloWorld/mk20dx128.c:716 (discriminator 1)
     314:	4c26      	ldr	r4, [pc, #152]	; (3b0 <ResetHandler+0x1e0>)
     316:	4a27      	ldr	r2, [pc, #156]	; (3b4 <ResetHandler+0x1e4>)
     318:	6823      	ldr	r3, [r4, #0]
     31a:	4293      	cmp	r3, r2
     31c:	d104      	bne.n	328 <ResetHandler+0x158>
C:\Teensy\Projects\HelloWorld/mk20dx128.c:724
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     31e:	4823      	ldr	r0, [pc, #140]	; (3ac <ResetHandler+0x1dc>)
     320:	f000 fc6a 	bl	bf8 <rtc_set>
C:\Teensy\Projects\HelloWorld/mk20dx128.c:728
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     324:	2300      	movs	r3, #0
     326:	6023      	str	r3, [r4, #0]
C:\Teensy\Projects\HelloWorld/mk20dx128.c:732
	}
#endif

	__libc_init_array();
     328:	f006 f976 	bl	6618 <__libc_init_array>
C:\Teensy\Projects\HelloWorld/mk20dx128.c:734

	startup_late_hook();
     32c:	f000 fa90 	bl	850 <startup_late_hook>
C:\Teensy\Projects\HelloWorld/mk20dx128.c:735
	main();
     330:	f004 fa7e 	bl	4830 <main>
     334:	e7fe      	b.n	334 <ResetHandler+0x164>
     336:	bf00      	nop
     338:	4005200e 	.word	0x4005200e
     33c:	40048030 	.word	0x40048030
     340:	00043f82 	.word	0x00043f82
     344:	2b000001 	.word	0x2b000001
     348:	e000ed88 	.word	0xe000ed88
     34c:	e0082000 	.word	0xe0082000
     350:	85000003 	.word	0x85000003
     354:	4003d010 	.word	0x4003d010
     358:	4003d014 	.word	0x4003d014
     35c:	4007d002 	.word	0x4007d002
     360:	4007e000 	.word	0x4007e000
     364:	1fff0760 	.word	0x1fff0760
     368:	1fff0b54 	.word	0x1fff0b54
     36c:	0000a698 	.word	0x0000a698
     370:	1fff0b54 	.word	0x1fff0b54
     374:	1fff10f4 	.word	0x1fff10f4
     378:	00000000 	.word	0x00000000
     37c:	1fff0200 	.word	0x1fff0200
     380:	e000e400 	.word	0xe000e400
     384:	e000e464 	.word	0xe000e464
     388:	e000ed08 	.word	0xe000ed08
     38c:	40065000 	.word	0x40065000
     390:	40064000 	.word	0x40064000
     394:	40048044 	.word	0x40048044
     398:	40048004 	.word	0x40048004
     39c:	000510c0 	.word	0x000510c0
     3a0:	e000e014 	.word	0xe000e014
     3a4:	0001d4bf 	.word	0x0001d4bf
     3a8:	20200000 	.word	0x20200000
     3ac:	00000000 	.word	0x00000000
     3b0:	4003e01c 	.word	0x4003e01c
     3b4:	5a94c3a5 	.word	0x5a94c3a5
     3b8:	4007f000 	.word	0x4007f000
$d():
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
$t():
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
$d():
     428:	1fff0b54 	.word	0x1fff0b54
     42c:	00000000 	.word	0x00000000
     430:	0000a698 	.word	0x0000a698

00000434 <frame_dummy>:
$t():
     434:	b508      	push	{r3, lr}
     436:	4b06      	ldr	r3, [pc, #24]	; (450 <frame_dummy+0x1c>)
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4806      	ldr	r0, [pc, #24]	; (454 <frame_dummy+0x20>)
     43c:	4906      	ldr	r1, [pc, #24]	; (458 <frame_dummy+0x24>)
     43e:	f3af 8000 	nop.w
     442:	4806      	ldr	r0, [pc, #24]	; (45c <frame_dummy+0x28>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b113      	cbz	r3, 44e <frame_dummy+0x1a>
     448:	4b05      	ldr	r3, [pc, #20]	; (460 <frame_dummy+0x2c>)
     44a:	b103      	cbz	r3, 44e <frame_dummy+0x1a>
     44c:	4798      	blx	r3
     44e:	bd08      	pop	{r3, pc}
$d():
     450:	00000000 	.word	0x00000000
     454:	0000a698 	.word	0x0000a698
     458:	1fff0b58 	.word	0x1fff0b58
     45c:	1fff0b54 	.word	0x1fff0b54
     460:	00000000 	.word	0x00000000

00000464 <wait_for_cal>:
wait_for_cal():
C:\Teensy\Projects\HelloWorld/analog.c:209
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
     464:	b5f0      	push	{r4, r5, r6, r7, lr}
C:\Teensy\Projects\HelloWorld/analog.c:214 (discriminator 1)
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
     466:	4b30      	ldr	r3, [pc, #192]	; (528 <wait_for_cal+0xc4>)
     468:	681b      	ldr	r3, [r3, #0]
     46a:	061b      	lsls	r3, r3, #24
     46c:	d4fb      	bmi.n	466 <wait_for_cal+0x2>
C:\Teensy\Projects\HelloWorld/analog.c:214 (discriminator 2)
     46e:	4b2f      	ldr	r3, [pc, #188]	; (52c <wait_for_cal+0xc8>)
     470:	681b      	ldr	r3, [r3, #0]
     472:	f013 0280 	ands.w	r2, r3, #128	; 0x80
     476:	d1f6      	bne.n	466 <wait_for_cal+0x2>
C:\Teensy\Projects\HelloWorld/analog.c:222
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
     478:	b672      	cpsid	i
C:\Teensy\Projects\HelloWorld/analog.c:223
	if (calibrating) {
     47a:	4b2d      	ldr	r3, [pc, #180]	; (530 <wait_for_cal+0xcc>)
     47c:	7819      	ldrb	r1, [r3, #0]
     47e:	2900      	cmp	r1, #0
     480:	d050      	beq.n	524 <wait_for_cal+0xc0>
C:\Teensy\Projects\HelloWorld/analog.c:225
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
     482:	492c      	ldr	r1, [pc, #176]	; (534 <wait_for_cal+0xd0>)
     484:	6808      	ldr	r0, [r1, #0]
     486:	684f      	ldr	r7, [r1, #4]
     488:	688e      	ldr	r6, [r1, #8]
     48a:	68cd      	ldr	r5, [r1, #12]
     48c:	690c      	ldr	r4, [r1, #16]
     48e:	4438      	add	r0, r7
     490:	3114      	adds	r1, #20
     492:	4430      	add	r0, r6
     494:	6809      	ldr	r1, [r1, #0]
     496:	4428      	add	r0, r5
     498:	4420      	add	r0, r4
     49a:	4408      	add	r0, r1
C:\Teensy\Projects\HelloWorld/analog.c:226
		sum = (sum / 2) | 0x8000;
     49c:	f3c0 004e 	ubfx	r0, r0, #1, #15
C:\Teensy\Projects\HelloWorld/analog.c:227
		ADC0_PG = sum;
     4a0:	4925      	ldr	r1, [pc, #148]	; (538 <wait_for_cal+0xd4>)
     4a2:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
     4a6:	6008      	str	r0, [r1, #0]
C:\Teensy\Projects\HelloWorld/analog.c:231
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
     4a8:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
     4aa:	6b0f      	ldr	r7, [r1, #48]	; 0x30
     4ac:	6b4e      	ldr	r6, [r1, #52]	; 0x34
     4ae:	6b8d      	ldr	r5, [r1, #56]	; 0x38
     4b0:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
     4b2:	4438      	add	r0, r7
     4b4:	3140      	adds	r1, #64	; 0x40
     4b6:	4430      	add	r0, r6
     4b8:	6809      	ldr	r1, [r1, #0]
     4ba:	4428      	add	r0, r5
     4bc:	4420      	add	r0, r4
     4be:	4408      	add	r0, r1
C:\Teensy\Projects\HelloWorld/analog.c:232
		sum = (sum / 2) | 0x8000;
     4c0:	f3c0 004e 	ubfx	r0, r0, #1, #15
C:\Teensy\Projects\HelloWorld/analog.c:233
		ADC0_MG = sum;
     4c4:	491d      	ldr	r1, [pc, #116]	; (53c <wait_for_cal+0xd8>)
     4c6:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
     4ca:	6008      	str	r0, [r1, #0]
C:\Teensy\Projects\HelloWorld/analog.c:238
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
     4cc:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
     4d0:	3114      	adds	r1, #20
     4d2:	f851 0c14 	ldr.w	r0, [r1, #-20]
     4d6:	f851 7c10 	ldr.w	r7, [r1, #-16]
     4da:	f851 6c0c 	ldr.w	r6, [r1, #-12]
     4de:	f851 5c08 	ldr.w	r5, [r1, #-8]
     4e2:	f851 4c04 	ldr.w	r4, [r1, #-4]
     4e6:	6809      	ldr	r1, [r1, #0]
     4e8:	4438      	add	r0, r7
     4ea:	4430      	add	r0, r6
     4ec:	4428      	add	r0, r5
     4ee:	4420      	add	r0, r4
     4f0:	4408      	add	r0, r1
C:\Teensy\Projects\HelloWorld/analog.c:239
		sum = (sum / 2) | 0x8000;
     4f2:	f3c0 004e 	ubfx	r0, r0, #1, #15
C:\Teensy\Projects\HelloWorld/analog.c:240
		ADC1_PG = sum;
     4f6:	4912      	ldr	r1, [pc, #72]	; (540 <wait_for_cal+0xdc>)
     4f8:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
     4fc:	6008      	str	r0, [r1, #0]
C:\Teensy\Projects\HelloWorld/analog.c:241
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
     4fe:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
     500:	6b0f      	ldr	r7, [r1, #48]	; 0x30
     502:	6b4e      	ldr	r6, [r1, #52]	; 0x34
     504:	6b8d      	ldr	r5, [r1, #56]	; 0x38
     506:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
     508:	4438      	add	r0, r7
     50a:	3140      	adds	r1, #64	; 0x40
     50c:	4430      	add	r0, r6
     50e:	6809      	ldr	r1, [r1, #0]
     510:	4428      	add	r0, r5
     512:	4420      	add	r0, r4
     514:	4408      	add	r0, r1
C:\Teensy\Projects\HelloWorld/analog.c:242
		sum = (sum / 2) | 0x8000;
     516:	f3c0 004e 	ubfx	r0, r0, #1, #15
C:\Teensy\Projects\HelloWorld/analog.c:243
		ADC1_MG = sum;
     51a:	490a      	ldr	r1, [pc, #40]	; (544 <wait_for_cal+0xe0>)
     51c:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
     520:	6008      	str	r0, [r1, #0]
C:\Teensy\Projects\HelloWorld/analog.c:245
#endif
		calibrating = 0;
     522:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/analog.c:247
	}
	__enable_irq();
     524:	b662      	cpsie	i
     526:	bdf0      	pop	{r4, r5, r6, r7, pc}
     528:	4003b024 	.word	0x4003b024
     52c:	400bb024 	.word	0x400bb024
     530:	1fff0b70 	.word	0x1fff0b70
     534:	4003b038 	.word	0x4003b038
     538:	4003b02c 	.word	0x4003b02c
     53c:	4003b030 	.word	0x4003b030
     540:	400bb02c 	.word	0x400bb02c
     544:	400bb030 	.word	0x400bb030

00000548 <analog_init>:
analog_init():
C:\Teensy\Projects\HelloWorld/analog.c:134
#else
#error "F_BUS must be 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
     548:	b530      	push	{r4, r5, lr}
C:\Teensy\Projects\HelloWorld/analog.c:137
	uint32_t num;

	VREF_TRM = 0x60;
     54a:	4b21      	ldr	r3, [pc, #132]	; (5d0 <analog_init+0x88>)
C:\Teensy\Projects\HelloWorld/analog.c:140
	VREF_SC = 0xE1;		// enable 1.2 volt ref

	if (analog_config_bits == 8) {
     54c:	4d21      	ldr	r5, [pc, #132]	; (5d4 <analog_init+0x8c>)
     54e:	4822      	ldr	r0, [pc, #136]	; (5d8 <analog_init+0x90>)
     550:	4922      	ldr	r1, [pc, #136]	; (5dc <analog_init+0x94>)
C:\Teensy\Projects\HelloWorld/analog.c:137

void analog_init(void)
{
	uint32_t num;

	VREF_TRM = 0x60;
     552:	2260      	movs	r2, #96	; 0x60
     554:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/analog.c:138
	VREF_SC = 0xE1;		// enable 1.2 volt ref
     556:	22e1      	movs	r2, #225	; 0xe1
     558:	705a      	strb	r2, [r3, #1]
C:\Teensy\Projects\HelloWorld/analog.c:140

	if (analog_config_bits == 8) {
     55a:	782c      	ldrb	r4, [r5, #0]
     55c:	4a20      	ldr	r2, [pc, #128]	; (5e0 <analog_init+0x98>)
     55e:	f503 238e 	add.w	r3, r3, #290816	; 0x47000
     562:	2c08      	cmp	r4, #8
     564:	f103 030c 	add.w	r3, r3, #12
     568:	d101      	bne.n	56e <analog_init+0x26>
C:\Teensy\Projects\HelloWorld/analog.c:141
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
     56a:	2421      	movs	r4, #33	; 0x21
     56c:	e002      	b.n	574 <analog_init+0x2c>
C:\Teensy\Projects\HelloWorld/analog.c:147
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
     56e:	2c0a      	cmp	r4, #10
     570:	d103      	bne.n	57a <analog_init+0x32>
C:\Teensy\Projects\HelloWorld/analog.c:148
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
     572:	2439      	movs	r4, #57	; 0x39
     574:	6004      	str	r4, [r0, #0]
C:\Teensy\Projects\HelloWorld/analog.c:149
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
     576:	2013      	movs	r0, #19
     578:	e005      	b.n	586 <analog_init+0x3e>
C:\Teensy\Projects\HelloWorld/analog.c:154
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
     57a:	2c0c      	cmp	r4, #12
C:\Teensy\Projects\HelloWorld/analog.c:155
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
     57c:	bf0c      	ite	eq
     57e:	2435      	moveq	r4, #53	; 0x35
C:\Teensy\Projects\HelloWorld/analog.c:162
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
     580:	245d      	movne	r4, #93	; 0x5d
     582:	6004      	str	r4, [r0, #0]
C:\Teensy\Projects\HelloWorld/analog.c:163
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
     584:	2012      	movs	r0, #18
     586:	6008      	str	r0, [r1, #0]
C:\Teensy\Projects\HelloWorld/analog.c:165
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
     588:	6014      	str	r4, [r2, #0]
C:\Teensy\Projects\HelloWorld/analog.c:170
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	}

	if (analog_reference_internal) {
     58a:	4a16      	ldr	r2, [pc, #88]	; (5e4 <analog_init+0x9c>)
C:\Teensy\Projects\HelloWorld/analog.c:166
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
     58c:	6018      	str	r0, [r3, #0]
C:\Teensy\Projects\HelloWorld/analog.c:170
		#endif
	}

	if (analog_reference_internal) {
     58e:	7853      	ldrb	r3, [r2, #1]
     590:	4915      	ldr	r1, [pc, #84]	; (5e8 <analog_init+0xa0>)
     592:	4610      	mov	r0, r2
     594:	4a15      	ldr	r2, [pc, #84]	; (5ec <analog_init+0xa4>)
     596:	b103      	cbz	r3, 59a <analog_init+0x52>
C:\Teensy\Projects\HelloWorld/analog.c:171
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
     598:	2301      	movs	r3, #1
C:\Teensy\Projects\HelloWorld/analog.c:174
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
     59a:	600b      	str	r3, [r1, #0]
C:\Teensy\Projects\HelloWorld/analog.c:175
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
     59c:	6013      	str	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/analog.c:178
	}

	num = analog_num_average;
     59e:	7869      	ldrb	r1, [r5, #1]
     5a0:	4a13      	ldr	r2, [pc, #76]	; (5f0 <analog_init+0xa8>)
     5a2:	4b14      	ldr	r3, [pc, #80]	; (5f4 <analog_init+0xac>)
C:\Teensy\Projects\HelloWorld/analog.c:179
	if (num <= 1) {
     5a4:	2901      	cmp	r1, #1
     5a6:	d801      	bhi.n	5ac <analog_init+0x64>
C:\Teensy\Projects\HelloWorld/analog.c:180
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
     5a8:	2180      	movs	r1, #128	; 0x80
     5aa:	e00b      	b.n	5c4 <analog_init+0x7c>
C:\Teensy\Projects\HelloWorld/analog.c:184
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
     5ac:	2904      	cmp	r1, #4
     5ae:	d801      	bhi.n	5b4 <analog_init+0x6c>
C:\Teensy\Projects\HelloWorld/analog.c:185
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
     5b0:	2184      	movs	r1, #132	; 0x84
     5b2:	e007      	b.n	5c4 <analog_init+0x7c>
C:\Teensy\Projects\HelloWorld/analog.c:189
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
     5b4:	2908      	cmp	r1, #8
     5b6:	d801      	bhi.n	5bc <analog_init+0x74>
C:\Teensy\Projects\HelloWorld/analog.c:190
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
     5b8:	2185      	movs	r1, #133	; 0x85
     5ba:	e003      	b.n	5c4 <analog_init+0x7c>
C:\Teensy\Projects\HelloWorld/analog.c:194
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
     5bc:	2910      	cmp	r1, #16
C:\Teensy\Projects\HelloWorld/analog.c:195
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
     5be:	bf94      	ite	ls
     5c0:	2186      	movls	r1, #134	; 0x86
C:\Teensy\Projects\HelloWorld/analog.c:200
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
     5c2:	2187      	movhi	r1, #135	; 0x87
     5c4:	6011      	str	r1, [r2, #0]
C:\Teensy\Projects\HelloWorld/analog.c:202
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
     5c6:	6019      	str	r1, [r3, #0]
C:\Teensy\Projects\HelloWorld/analog.c:205
		#endif
	}
	calibrating = 1;
     5c8:	2301      	movs	r3, #1
     5ca:	7003      	strb	r3, [r0, #0]
     5cc:	bd30      	pop	{r4, r5, pc}
     5ce:	bf00      	nop
     5d0:	40074000 	.word	0x40074000
     5d4:	1fff0848 	.word	0x1fff0848
     5d8:	4003b008 	.word	0x4003b008
     5dc:	4003b00c 	.word	0x4003b00c
     5e0:	400bb008 	.word	0x400bb008
     5e4:	1fff0b70 	.word	0x1fff0b70
     5e8:	4003b020 	.word	0x4003b020
     5ec:	400bb020 	.word	0x400bb020
     5f0:	4003b024 	.word	0x4003b024
     5f4:	400bb024 	.word	0x400bb024

000005f8 <analogReference>:
analogReference():
C:\Teensy\Projects\HelloWorld/analog.c:262
#define INTERNAL1V2     2
#define INTERNAL1V1     2
#define EXTERNAL        0

void analogReference(uint8_t type)
{
     5f8:	4b0d      	ldr	r3, [pc, #52]	; (630 <analogReference+0x38>)
C:\Teensy\Projects\HelloWorld/analog.c:265
	if (type) {
		// internal reference requested
		if (!analog_reference_internal) {
     5fa:	785a      	ldrb	r2, [r3, #1]
C:\Teensy\Projects\HelloWorld/analog.c:263
#define INTERNAL1V1     2
#define EXTERNAL        0

void analogReference(uint8_t type)
{
	if (type) {
     5fc:	b158      	cbz	r0, 616 <analogReference+0x1e>
C:\Teensy\Projects\HelloWorld/analog.c:265
		// internal reference requested
		if (!analog_reference_internal) {
     5fe:	b9aa      	cbnz	r2, 62c <analogReference+0x34>
C:\Teensy\Projects\HelloWorld/analog.c:266
			analog_reference_internal = 1;
     600:	2101      	movs	r1, #1
     602:	7059      	strb	r1, [r3, #1]
C:\Teensy\Projects\HelloWorld/analog.c:267
			if (calibrating) {
     604:	781b      	ldrb	r3, [r3, #0]
     606:	b123      	cbz	r3, 612 <analogReference+0x1a>
C:\Teensy\Projects\HelloWorld/analog.c:268
				ADC0_SC3 = 0; // cancel cal
     608:	4b0a      	ldr	r3, [pc, #40]	; (634 <analogReference+0x3c>)
     60a:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/analog.c:270
#ifdef HAS_KINETIS_ADC1
				ADC1_SC3 = 0; // cancel cal
     60c:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
     610:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/analog.c:273
#endif
			}
			analog_init();
     612:	f7ff bf99 	b.w	548 <analog_init>
C:\Teensy\Projects\HelloWorld/analog.c:277
		}
	} else {
		// vcc or external reference requested
		if (analog_reference_internal) {
     616:	b14a      	cbz	r2, 62c <analogReference+0x34>
C:\Teensy\Projects\HelloWorld/analog.c:278
			analog_reference_internal = 0;
     618:	7058      	strb	r0, [r3, #1]
C:\Teensy\Projects\HelloWorld/analog.c:279
			if (calibrating) {
     61a:	781b      	ldrb	r3, [r3, #0]
     61c:	2b00      	cmp	r3, #0
     61e:	d0f8      	beq.n	612 <analogReference+0x1a>
C:\Teensy\Projects\HelloWorld/analog.c:280
				ADC0_SC3 = 0; // cancel cal
     620:	4b04      	ldr	r3, [pc, #16]	; (634 <analogReference+0x3c>)
     622:	6018      	str	r0, [r3, #0]
C:\Teensy\Projects\HelloWorld/analog.c:282
#ifdef HAS_KINETIS_ADC1
				ADC1_SC3 = 0; // cancel cal
     624:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
     628:	6018      	str	r0, [r3, #0]
     62a:	e7f2      	b.n	612 <analogReference+0x1a>
     62c:	4770      	bx	lr
     62e:	bf00      	nop
     630:	1fff0b70 	.word	0x1fff0b70
     634:	4003b024 	.word	0x4003b024

00000638 <analogReadRes>:
analogReadRes():
C:\Teensy\Projects\HelloWorld/analog.c:295

void analogReadRes(unsigned int bits)
{
	unsigned int config;

	if (bits >= 13) {
     638:	280c      	cmp	r0, #12
C:\Teensy\Projects\HelloWorld/analog.c:292
	}
}


void analogReadRes(unsigned int bits)
{
     63a:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/analog.c:295
	unsigned int config;

	if (bits >= 13) {
     63c:	d904      	bls.n	648 <analogReadRes+0x10>
     63e:	2810      	cmp	r0, #16
     640:	bf28      	it	cs
     642:	2010      	movcs	r0, #16
C:\Teensy\Projects\HelloWorld/analog.c:297
		if (bits > 16) bits = 16;
		config = 16;
     644:	2310      	movs	r3, #16
     646:	e007      	b.n	658 <analogReadRes+0x20>
C:\Teensy\Projects\HelloWorld/analog.c:298
	} else if (bits >= 11) {
     648:	280a      	cmp	r0, #10
     64a:	d804      	bhi.n	656 <analogReadRes+0x1e>
C:\Teensy\Projects\HelloWorld/analog.c:301
		config = 12;
	} else if (bits >= 9) {
		config = 10;
     64c:	2809      	cmp	r0, #9
     64e:	bf34      	ite	cc
     650:	2308      	movcc	r3, #8
     652:	230a      	movcs	r3, #10
     654:	e000      	b.n	658 <analogReadRes+0x20>
C:\Teensy\Projects\HelloWorld/analog.c:299

	if (bits >= 13) {
		if (bits > 16) bits = 16;
		config = 16;
	} else if (bits >= 11) {
		config = 12;
     656:	230c      	movs	r3, #12
C:\Teensy\Projects\HelloWorld/analog.c:305
	} else if (bits >= 9) {
		config = 10;
	} else {
		config = 8;
	}
	analog_right_shift = config - bits;
     658:	b2dc      	uxtb	r4, r3
     65a:	4a0a      	ldr	r2, [pc, #40]	; (684 <analogReadRes+0x4c>)
C:\Teensy\Projects\HelloWorld/analog.c:306
	if (config != analog_config_bits) {
     65c:	490a      	ldr	r1, [pc, #40]	; (688 <analogReadRes+0x50>)
C:\Teensy\Projects\HelloWorld/analog.c:305
	} else if (bits >= 9) {
		config = 10;
	} else {
		config = 8;
	}
	analog_right_shift = config - bits;
     65e:	1a20      	subs	r0, r4, r0
     660:	7090      	strb	r0, [r2, #2]
C:\Teensy\Projects\HelloWorld/analog.c:306
	if (config != analog_config_bits) {
     662:	7808      	ldrb	r0, [r1, #0]
     664:	4283      	cmp	r3, r0
     666:	d00c      	beq.n	682 <analogReadRes+0x4a>
C:\Teensy\Projects\HelloWorld/analog.c:308
		analog_config_bits = config;
		if (calibrating) {
     668:	7813      	ldrb	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/analog.c:307
	} else {
		config = 8;
	}
	analog_right_shift = config - bits;
	if (config != analog_config_bits) {
		analog_config_bits = config;
     66a:	700c      	strb	r4, [r1, #0]
C:\Teensy\Projects\HelloWorld/analog.c:308
		if (calibrating) {
     66c:	b12b      	cbz	r3, 67a <analogReadRes+0x42>
C:\Teensy\Projects\HelloWorld/analog.c:309
			ADC0_SC3 = 0; // cancel cal
     66e:	4a07      	ldr	r2, [pc, #28]	; (68c <analogReadRes+0x54>)
     670:	2300      	movs	r3, #0
     672:	6013      	str	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/analog.c:311
			#ifdef HAS_KINETIS_ADC1
			ADC1_SC3 = 0;
     674:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
     678:	6013      	str	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/analog.c:316
			#endif
		}
		analog_init();
	}
}
     67a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
C:\Teensy\Projects\HelloWorld/analog.c:314
			ADC0_SC3 = 0; // cancel cal
			#ifdef HAS_KINETIS_ADC1
			ADC1_SC3 = 0;
			#endif
		}
		analog_init();
     67e:	f7ff bf63 	b.w	548 <analog_init>
     682:	bd10      	pop	{r4, pc}
     684:	1fff0b70 	.word	0x1fff0b70
     688:	1fff0848 	.word	0x1fff0848
     68c:	4003b024 	.word	0x4003b024

00000690 <analogReadAveraging>:
analogReadAveraging():
C:\Teensy\Projects\HelloWorld/analog.c:319
	}
}

void analogReadAveraging(unsigned int num)
{
     690:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/analog.c:321

	if (calibrating) wait_for_cal();
     692:	4b11      	ldr	r3, [pc, #68]	; (6d8 <analogReadAveraging+0x48>)
     694:	781b      	ldrb	r3, [r3, #0]
C:\Teensy\Projects\HelloWorld/analog.c:319
		analog_init();
	}
}

void analogReadAveraging(unsigned int num)
{
     696:	4604      	mov	r4, r0
C:\Teensy\Projects\HelloWorld/analog.c:321

	if (calibrating) wait_for_cal();
     698:	b10b      	cbz	r3, 69e <analogReadAveraging+0xe>
C:\Teensy\Projects\HelloWorld/analog.c:321 (discriminator 1)
     69a:	f7ff fee3 	bl	464 <wait_for_cal>
C:\Teensy\Projects\HelloWorld/analog.c:322
	if (num <= 1) {
     69e:	2c01      	cmp	r4, #1
     6a0:	4a0e      	ldr	r2, [pc, #56]	; (6dc <analogReadAveraging+0x4c>)
     6a2:	d801      	bhi.n	6a8 <analogReadAveraging+0x18>
C:\Teensy\Projects\HelloWorld/analog.c:324
		num = 0;
		ADC0_SC3 = 0;
     6a4:	2300      	movs	r3, #0
     6a6:	e002      	b.n	6ae <analogReadAveraging+0x1e>
C:\Teensy\Projects\HelloWorld/analog.c:325
	} else if (num <= 4) {
     6a8:	2c04      	cmp	r4, #4
     6aa:	d802      	bhi.n	6b2 <analogReadAveraging+0x22>
C:\Teensy\Projects\HelloWorld/analog.c:327
		num = 4;
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(0);
     6ac:	2304      	movs	r3, #4
     6ae:	6013      	str	r3, [r2, #0]
     6b0:	e00e      	b.n	6d0 <analogReadAveraging+0x40>
C:\Teensy\Projects\HelloWorld/analog.c:328
	} else if (num <= 8) {
     6b2:	2c08      	cmp	r4, #8
     6b4:	d803      	bhi.n	6be <analogReadAveraging+0x2e>
C:\Teensy\Projects\HelloWorld/analog.c:330
		num = 8;
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(1);
     6b6:	2305      	movs	r3, #5
     6b8:	6013      	str	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/analog.c:329
		ADC0_SC3 = 0;
	} else if (num <= 4) {
		num = 4;
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(0);
	} else if (num <= 8) {
		num = 8;
     6ba:	2308      	movs	r3, #8
     6bc:	e008      	b.n	6d0 <analogReadAveraging+0x40>
C:\Teensy\Projects\HelloWorld/analog.c:331
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(1);
	} else if (num <= 16) {
     6be:	2c10      	cmp	r4, #16
     6c0:	d803      	bhi.n	6ca <analogReadAveraging+0x3a>
C:\Teensy\Projects\HelloWorld/analog.c:333
		num = 16;
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(2);
     6c2:	2306      	movs	r3, #6
     6c4:	6013      	str	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/analog.c:332
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(0);
	} else if (num <= 8) {
		num = 8;
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(1);
	} else if (num <= 16) {
		num = 16;
     6c6:	2310      	movs	r3, #16
     6c8:	e002      	b.n	6d0 <analogReadAveraging+0x40>
C:\Teensy\Projects\HelloWorld/analog.c:336
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(2);
	} else {
		num = 32;
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(3);
     6ca:	2307      	movs	r3, #7
     6cc:	6013      	str	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/analog.c:335
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(1);
	} else if (num <= 16) {
		num = 16;
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(2);
	} else {
		num = 32;
     6ce:	2320      	movs	r3, #32
C:\Teensy\Projects\HelloWorld/analog.c:338
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(3);
	}
	analog_num_average = num;
     6d0:	4a03      	ldr	r2, [pc, #12]	; (6e0 <analogReadAveraging+0x50>)
     6d2:	7053      	strb	r3, [r2, #1]
     6d4:	bd10      	pop	{r4, pc}
     6d6:	bf00      	nop
     6d8:	1fff0b70 	.word	0x1fff0b70
     6dc:	4003b024 	.word	0x4003b024
     6e0:	1fff0848 	.word	0x1fff0848

000006e4 <analogRead>:
analogRead():
C:\Teensy\Projects\HelloWorld/analog.c:375
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
     6e4:	2847      	cmp	r0, #71	; 0x47
C:\Teensy\Projects\HelloWorld/analog.c:368
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
     6e6:	b538      	push	{r3, r4, r5, lr}
C:\Teensy\Projects\HelloWorld/analog.c:375
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
     6e8:	d847      	bhi.n	77a <analogRead+0x96>
C:\Teensy\Projects\HelloWorld/analog.c:376
	channel = pin2sc1a[pin];
     6ea:	4b25      	ldr	r3, [pc, #148]	; (780 <analogRead+0x9c>)
     6ec:	5c1d      	ldrb	r5, [r3, r0]
C:\Teensy\Projects\HelloWorld/analog.c:377
	if (channel == 255) return 0;
     6ee:	2dff      	cmp	r5, #255	; 0xff
     6f0:	d043      	beq.n	77a <analogRead+0x96>
C:\Teensy\Projects\HelloWorld/analog.c:379

	if (calibrating) wait_for_cal();
     6f2:	4c24      	ldr	r4, [pc, #144]	; (784 <analogRead+0xa0>)
     6f4:	7823      	ldrb	r3, [r4, #0]
     6f6:	b10b      	cbz	r3, 6fc <analogRead+0x18>
C:\Teensy\Projects\HelloWorld/analog.c:379 (discriminator 1)
     6f8:	f7ff feb4 	bl	464 <wait_for_cal>
C:\Teensy\Projects\HelloWorld/analog.c:382

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
     6fc:	0629      	lsls	r1, r5, #24
     6fe:	d416      	bmi.n	72e <analogRead+0x4a>
C:\Teensy\Projects\HelloWorld/analog.c:385
#endif

	__disable_irq();
     700:	b672      	cpsid	i
C:\Teensy\Projects\HelloWorld/analog.c:388
startADC0:
	//serial_print("startADC0\n");
	ADC0_SC1A = channel;
     702:	4b21      	ldr	r3, [pc, #132]	; (788 <analogRead+0xa4>)
     704:	601d      	str	r5, [r3, #0]
C:\Teensy\Projects\HelloWorld/analog.c:389
	analogReadBusyADC0 = 1;
     706:	2301      	movs	r3, #1
     708:	70e3      	strb	r3, [r4, #3]
C:\Teensy\Projects\HelloWorld/analog.c:390
	__enable_irq();
     70a:	b662      	cpsie	i
C:\Teensy\Projects\HelloWorld/analog.c:392
	while (1) {
		__disable_irq();
     70c:	b672      	cpsid	i
C:\Teensy\Projects\HelloWorld/analog.c:393
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
     70e:	4b1e      	ldr	r3, [pc, #120]	; (788 <analogRead+0xa4>)
     710:	681b      	ldr	r3, [r3, #0]
     712:	061a      	lsls	r2, r3, #24
     714:	d504      	bpl.n	720 <analogRead+0x3c>
C:\Teensy\Projects\HelloWorld/analog.c:394
			result = ADC0_RA;
     716:	4b1d      	ldr	r3, [pc, #116]	; (78c <analogRead+0xa8>)
     718:	6818      	ldr	r0, [r3, #0]
C:\Teensy\Projects\HelloWorld/analog.c:395
			analogReadBusyADC0 = 0;
     71a:	2300      	movs	r3, #0
     71c:	70e3      	strb	r3, [r4, #3]
     71e:	e021      	b.n	764 <analogRead+0x80>
C:\Teensy\Projects\HelloWorld/analog.c:403
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
     720:	78e3      	ldrb	r3, [r4, #3]
     722:	2b00      	cmp	r3, #0
     724:	d0ed      	beq.n	702 <analogRead+0x1e>
C:\Teensy\Projects\HelloWorld/analog.c:404
		__enable_irq();
     726:	b662      	cpsie	i
C:\Teensy\Projects\HelloWorld/analog.c:405
		yield();
     728:	f004 ff12 	bl	5550 <yield>
C:\Teensy\Projects\HelloWorld/analog.c:406
	}
     72c:	e7ee      	b.n	70c <analogRead+0x28>
C:\Teensy\Projects\HelloWorld/analog.c:410

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
     72e:	b672      	cpsid	i
     730:	4b17      	ldr	r3, [pc, #92]	; (790 <analogRead+0xac>)
C:\Teensy\Projects\HelloWorld/analog.c:415
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
     732:	681a      	ldr	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/analog.c:414
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
     734:	f015 0f40 	tst.w	r5, #64	; 0x40
C:\Teensy\Projects\HelloWorld/analog.c:415
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
     738:	bf14      	ite	ne
     73a:	f022 0210 	bicne.w	r2, r2, #16
C:\Teensy\Projects\HelloWorld/analog.c:417
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
     73e:	f042 0210 	orreq.w	r2, r2, #16
     742:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/analog.c:419
	}
	ADC1_SC1A = channel & 0x3F;
     744:	4b13      	ldr	r3, [pc, #76]	; (794 <analogRead+0xb0>)
     746:	f005 023f 	and.w	r2, r5, #63	; 0x3f
     74a:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/analog.c:420
	analogReadBusyADC1 = 1;
     74c:	2301      	movs	r3, #1
     74e:	7123      	strb	r3, [r4, #4]
C:\Teensy\Projects\HelloWorld/analog.c:421
	__enable_irq();
     750:	b662      	cpsie	i
C:\Teensy\Projects\HelloWorld/analog.c:423
	while (1) {
		__disable_irq();
     752:	b672      	cpsid	i
C:\Teensy\Projects\HelloWorld/analog.c:424
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
     754:	4b0f      	ldr	r3, [pc, #60]	; (794 <analogRead+0xb0>)
     756:	681b      	ldr	r3, [r3, #0]
     758:	061b      	lsls	r3, r3, #24
     75a:	d507      	bpl.n	76c <analogRead+0x88>
C:\Teensy\Projects\HelloWorld/analog.c:425
			result = ADC1_RA;
     75c:	4b0e      	ldr	r3, [pc, #56]	; (798 <analogRead+0xb4>)
     75e:	6818      	ldr	r0, [r3, #0]
C:\Teensy\Projects\HelloWorld/analog.c:426
			analogReadBusyADC1 = 0;
     760:	2300      	movs	r3, #0
     762:	7123      	strb	r3, [r4, #4]
C:\Teensy\Projects\HelloWorld/analog.c:427
			__enable_irq();
     764:	b662      	cpsie	i
C:\Teensy\Projects\HelloWorld/analog.c:428
			result >>= analog_right_shift;
     766:	78a3      	ldrb	r3, [r4, #2]
     768:	4118      	asrs	r0, r3
C:\Teensy\Projects\HelloWorld/analog.c:429
			return result;
     76a:	bd38      	pop	{r3, r4, r5, pc}
C:\Teensy\Projects\HelloWorld/analog.c:434
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
     76c:	7923      	ldrb	r3, [r4, #4]
     76e:	2b00      	cmp	r3, #0
     770:	d0de      	beq.n	730 <analogRead+0x4c>
C:\Teensy\Projects\HelloWorld/analog.c:435
		__enable_irq();
     772:	b662      	cpsie	i
C:\Teensy\Projects\HelloWorld/analog.c:436
		yield();
     774:	f004 feec 	bl	5550 <yield>
C:\Teensy\Projects\HelloWorld/analog.c:437
	}
     778:	e7eb      	b.n	752 <analogRead+0x6e>
C:\Teensy\Projects\HelloWorld/analog.c:375
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
     77a:	2000      	movs	r0, #0
C:\Teensy\Projects\HelloWorld/analog.c:439
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
     77c:	bd38      	pop	{r3, r4, r5, pc}
     77e:	bf00      	nop
     780:	00009e16 	.word	0x00009e16
     784:	1fff0b70 	.word	0x1fff0b70
     788:	4003b000 	.word	0x4003b000
     78c:	4003b010 	.word	0x4003b010
     790:	400bb00c 	.word	0x400bb00c
     794:	400bb000 	.word	0x400bb000
     798:	400bb010 	.word	0x400bb010

0000079c <analogWriteDAC0>:
analogWriteDAC0():
C:\Teensy\Projects\HelloWorld/analog.c:445



void analogWriteDAC0(int val)
{
	SIM_SCGC2 |= SIM_SCGC2_DAC0;
     79c:	4b08      	ldr	r3, [pc, #32]	; (7c0 <analogWriteDAC0+0x24>)
     79e:	681a      	ldr	r2, [r3, #0]
     7a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
     7a4:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/analog.c:446
	if (analog_reference_internal) {
     7a6:	4b07      	ldr	r3, [pc, #28]	; (7c4 <analogWriteDAC0+0x28>)
     7a8:	785a      	ldrb	r2, [r3, #1]
     7aa:	4b07      	ldr	r3, [pc, #28]	; (7c8 <analogWriteDAC0+0x2c>)
     7ac:	b10a      	cbz	r2, 7b2 <analogWriteDAC0+0x16>
C:\Teensy\Projects\HelloWorld/analog.c:447
		DAC0_C0 = DAC_C0_DACEN;  // 1.2V ref is DACREF_1
     7ae:	2280      	movs	r2, #128	; 0x80
     7b0:	e000      	b.n	7b4 <analogWriteDAC0+0x18>
C:\Teensy\Projects\HelloWorld/analog.c:449
	} else {
		DAC0_C0 = DAC_C0_DACEN | DAC_C0_DACRFS; // 3.3V VDDA is DACREF_2
     7b2:	22c0      	movs	r2, #192	; 0xc0
     7b4:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/analog.c:453
	}
	if (val < 0) val = 0;  // TODO: saturate instruction?
	else if (val > 4095) val = 4095;
	*(int16_t *)&(DAC0_DAT0L) = val;
     7b6:	4b05      	ldr	r3, [pc, #20]	; (7cc <analogWriteDAC0+0x30>)
     7b8:	f380 000c 	usat	r0, #12, r0
     7bc:	8018      	strh	r0, [r3, #0]
     7be:	4770      	bx	lr
     7c0:	4004802c 	.word	0x4004802c
     7c4:	1fff0b70 	.word	0x1fff0b70
     7c8:	400cc021 	.word	0x400cc021
     7cc:	400cc000 	.word	0x400cc000

000007d0 <analogWriteDAC1>:
analogWriteDAC1():
C:\Teensy\Projects\HelloWorld/analog.c:458

}
void analogWriteDAC1(int val)
{
	SIM_SCGC2 |= SIM_SCGC2_DAC1;
     7d0:	4b08      	ldr	r3, [pc, #32]	; (7f4 <analogWriteDAC1+0x24>)
     7d2:	681a      	ldr	r2, [r3, #0]
     7d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     7d8:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/analog.c:459
	if (analog_reference_internal) {
     7da:	4b07      	ldr	r3, [pc, #28]	; (7f8 <analogWriteDAC1+0x28>)
     7dc:	785a      	ldrb	r2, [r3, #1]
     7de:	4b07      	ldr	r3, [pc, #28]	; (7fc <analogWriteDAC1+0x2c>)
     7e0:	b10a      	cbz	r2, 7e6 <analogWriteDAC1+0x16>
C:\Teensy\Projects\HelloWorld/analog.c:460
		DAC1_C0 = DAC_C0_DACEN;  // 1.2V ref is DACREF_1
     7e2:	2280      	movs	r2, #128	; 0x80
     7e4:	e000      	b.n	7e8 <analogWriteDAC1+0x18>
C:\Teensy\Projects\HelloWorld/analog.c:462
	} else {
		DAC1_C0 = DAC_C0_DACEN | DAC_C0_DACRFS; // 3.3V VDDA is DACREF_2
     7e6:	22c0      	movs	r2, #192	; 0xc0
     7e8:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/analog.c:466
	}
	if (val < 0) val = 0;  // TODO: saturate instruction?
	else if (val > 4095) val = 4095;
	*(int16_t *)&(DAC1_DAT0L) = val;
     7ea:	4b05      	ldr	r3, [pc, #20]	; (800 <analogWriteDAC1+0x30>)
     7ec:	f380 000c 	usat	r0, #12, r0
     7f0:	8018      	strh	r0, [r3, #0]
     7f2:	4770      	bx	lr
     7f4:	4004802c 	.word	0x4004802c
     7f8:	1fff0b70 	.word	0x1fff0b70
     7fc:	400cd021 	.word	0x400cd021
     800:	400cd000 	.word	0x400cd000

00000804 <systick_default_isr>:
systick_default_isr():
C:\Teensy\Projects\HelloWorld/mk20dx128.c:91
}

extern volatile uint32_t systick_millis_count;
void systick_default_isr(void)
{
	systick_millis_count++;
     804:	4b02      	ldr	r3, [pc, #8]	; (810 <systick_default_isr+0xc>)
     806:	681a      	ldr	r2, [r3, #0]
     808:	3201      	adds	r2, #1
     80a:	601a      	str	r2, [r3, #0]
     80c:	4770      	bx	lr
     80e:	bf00      	nop
     810:	1fff0b78 	.word	0x1fff0b78

00000814 <fault_isr>:
fault_isr():
C:\Teensy\Projects\HelloWorld/mk20dx128.c:71
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
     814:	b508      	push	{r3, lr}
C:\Teensy\Projects\HelloWorld/mk20dx128.c:77

	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		//if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
     816:	4c08      	ldr	r4, [pc, #32]	; (838 <fault_isr+0x24>)
     818:	6823      	ldr	r3, [r4, #0]
     81a:	0559      	lsls	r1, r3, #21
     81c:	d501      	bpl.n	822 <fault_isr+0xe>
C:\Teensy\Projects\HelloWorld/mk20dx128.c:77 (discriminator 1)
     81e:	f001 f90d 	bl	1a3c <uart0_status_isr>
C:\Teensy\Projects\HelloWorld/mk20dx128.c:78
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
     822:	6823      	ldr	r3, [r4, #0]
     824:	051a      	lsls	r2, r3, #20
     826:	d501      	bpl.n	82c <fault_isr+0x18>
C:\Teensy\Projects\HelloWorld/mk20dx128.c:78 (discriminator 1)
     828:	f001 fc44 	bl	20b4 <uart1_status_isr>
C:\Teensy\Projects\HelloWorld/mk20dx128.c:79
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
     82c:	6823      	ldr	r3, [r4, #0]
     82e:	04db      	lsls	r3, r3, #19
     830:	d5f1      	bpl.n	816 <fault_isr+0x2>
C:\Teensy\Projects\HelloWorld/mk20dx128.c:79 (discriminator 1)
     832:	f001 fe75 	bl	2520 <uart2_status_isr>
     836:	e7ee      	b.n	816 <fault_isr+0x2>
     838:	40048034 	.word	0x40048034

0000083c <unused_isr>:
unused_isr():
C:\Teensy\Projects\HelloWorld/mk20dx128.c:84
	}
}

void unused_isr(void)
{
     83c:	b508      	push	{r3, lr}
C:\Teensy\Projects\HelloWorld/mk20dx128.c:85
	fault_isr();
     83e:	f7ff ffe9 	bl	814 <fault_isr>

00000842 <startup_early_hook>:
startup_default_early_hook():
C:\Teensy\Projects\HelloWorld/mk20dx128.c:354
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
     842:	4b02      	ldr	r3, [pc, #8]	; (84c <startup_early_hook+0xa>)
     844:	2210      	movs	r2, #16
     846:	801a      	strh	r2, [r3, #0]
     848:	4770      	bx	lr
     84a:	bf00      	nop
     84c:	40052000 	.word	0x40052000

00000850 <startup_late_hook>:
startup_default_late_hook():
C:\Teensy\Projects\HelloWorld/mk20dx128.c:359
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
     850:	4770      	bx	lr

00000852 <_sbrk>:
_sbrk():
C:\Teensy\Projects\HelloWorld/mk20dx128.c:743

char *__brkval = (char *)&_ebss;

void * _sbrk(int incr)
{
	char *prev = __brkval;
     852:	4a03      	ldr	r2, [pc, #12]	; (860 <_sbrk+0xe>)
     854:	6813      	ldr	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/mk20dx128.c:744
	__brkval += incr;
     856:	4418      	add	r0, r3
     858:	6010      	str	r0, [r2, #0]
C:\Teensy\Projects\HelloWorld/mk20dx128.c:746
	return prev;
}
     85a:	4618      	mov	r0, r3
     85c:	4770      	bx	lr
     85e:	bf00      	nop
     860:	1fff084c 	.word	0x1fff084c

00000864 <_read>:
_read():
C:\Teensy\Projects\HelloWorld/mk20dx128.c:752

__attribute__((weak)) 
int _read(int file, char *ptr, int len)
{
	return 0;
}
     864:	2000      	movs	r0, #0
     866:	4770      	bx	lr

00000868 <_close>:
_close():
C:\Teensy\Projects\HelloWorld/mk20dx128.c:758

__attribute__((weak)) 
int _close(int fd)
{
	return -1;
}
     868:	f04f 30ff 	mov.w	r0, #4294967295
     86c:	4770      	bx	lr

0000086e <_fstat>:
_fstat():
C:\Teensy\Projects\HelloWorld/mk20dx128.c:765
#include <sys/stat.h>

__attribute__((weak)) 
int _fstat(int fd, struct stat *st)
{
	st->st_mode = S_IFCHR;
     86e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     872:	604b      	str	r3, [r1, #4]
C:\Teensy\Projects\HelloWorld/mk20dx128.c:767
	return 0;
}
     874:	2000      	movs	r0, #0
     876:	4770      	bx	lr

00000878 <_isatty>:
_isatty():
C:\Teensy\Projects\HelloWorld/mk20dx128.c:773

__attribute__((weak)) 
int _isatty(int fd)
{
	return 1;
}
     878:	2001      	movs	r0, #1
     87a:	4770      	bx	lr

0000087c <_lseek>:
_lseek():
C:\Teensy\Projects\HelloWorld/mk20dx128.c:779

__attribute__((weak)) 
int _lseek(int fd, long long offset, int whence)
{
	return -1;
}
     87c:	f04f 30ff 	mov.w	r0, #4294967295
     880:	4770      	bx	lr

00000882 <_exit>:
_exit():
C:\Teensy\Projects\HelloWorld/mk20dx128.c:783

__attribute__((weak)) 
void _exit(int status)
{
     882:	e7fe      	b.n	882 <_exit>

00000884 <__cxa_pure_virtual>:
__cxa_pure_virtual():
C:\Teensy\Projects\HelloWorld/mk20dx128.c:789
	while (1);
}

__attribute__((weak)) 
void __cxa_pure_virtual()
{
     884:	e7fe      	b.n	884 <__cxa_pure_virtual>

00000886 <__cxa_guard_acquire>:
__cxa_guard_acquire():
C:\Teensy\Projects\HelloWorld/mk20dx128.c:796
}

__attribute__((weak)) 
int __cxa_guard_acquire (char *g) 
{
	return !(*g);
     886:	7800      	ldrb	r0, [r0, #0]
C:\Teensy\Projects\HelloWorld/mk20dx128.c:797
}
     888:	f1d0 0001 	rsbs	r0, r0, #1
     88c:	bf38      	it	cc
     88e:	2000      	movcc	r0, #0
     890:	4770      	bx	lr

00000892 <__cxa_guard_release>:
__cxa_guard_release():
C:\Teensy\Projects\HelloWorld/mk20dx128.c:802

__attribute__((weak)) 
void __cxa_guard_release(char *g)
{
	*g = 1;
     892:	2301      	movs	r3, #1
     894:	7003      	strb	r3, [r0, #0]
     896:	4770      	bx	lr

00000898 <nvic_execution_priority>:
nvic_execution_priority():
C:\Teensy\Projects\HelloWorld/mk20dx128.c:812
	int priority=256;
	uint32_t primask, faultmask, basepri, ipsr;

	// full algorithm in ARM DDI0403D, page B1-639
	// this isn't quite complete, but hopefully good enough
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
     898:	f3ef 8313 	mrs	r3, FAULTMASK
C:\Teensy\Projects\HelloWorld/mk20dx128.c:813
	if (faultmask) return -1;
     89c:	b99b      	cbnz	r3, 8c6 <nvic_execution_priority+0x2e>
C:\Teensy\Projects\HelloWorld/mk20dx128.c:814
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
     89e:	f3ef 8010 	mrs	r0, PRIMASK
C:\Teensy\Projects\HelloWorld/mk20dx128.c:815
	if (primask) return 0;
     8a2:	b998      	cbnz	r0, 8cc <nvic_execution_priority+0x34>
C:\Teensy\Projects\HelloWorld/mk20dx128.c:816
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
     8a4:	f3ef 8305 	mrs	r3, IPSR
C:\Teensy\Projects\HelloWorld/mk20dx128.c:817
	if (ipsr) {
     8a8:	b123      	cbz	r3, 8b4 <nvic_execution_priority+0x1c>
C:\Teensy\Projects\HelloWorld/mk20dx128.c:818
		if (ipsr < 16) priority = 0; // could be non-zero
     8aa:	2b0f      	cmp	r3, #15
     8ac:	d904      	bls.n	8b8 <nvic_execution_priority+0x20>
C:\Teensy\Projects\HelloWorld/mk20dx128.c:819
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
     8ae:	4a08      	ldr	r2, [pc, #32]	; (8d0 <nvic_execution_priority+0x38>)
     8b0:	5c98      	ldrb	r0, [r3, r2]
     8b2:	e001      	b.n	8b8 <nvic_execution_priority+0x20>
C:\Teensy\Projects\HelloWorld/mk20dx128.c:807
	*g = 1;
}

int nvic_execution_priority(void)
{
	int priority=256;
     8b4:	f44f 7080 	mov.w	r0, #256	; 0x100
C:\Teensy\Projects\HelloWorld/mk20dx128.c:821
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
	if (ipsr) {
		if (ipsr < 16) priority = 0; // could be non-zero
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
	}
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
     8b8:	f3ef 8311 	mrs	r3, BASEPRI
C:\Teensy\Projects\HelloWorld/mk20dx128.c:822
	if (basepri > 0 && basepri < priority) priority = basepri;
     8bc:	b13b      	cbz	r3, 8ce <nvic_execution_priority+0x36>
C:\Teensy\Projects\HelloWorld/mk20dx128.c:822 (discriminator 1)
     8be:	4283      	cmp	r3, r0
     8c0:	bf38      	it	cc
     8c2:	4618      	movcc	r0, r3
     8c4:	4770      	bx	lr
C:\Teensy\Projects\HelloWorld/mk20dx128.c:813
	uint32_t primask, faultmask, basepri, ipsr;

	// full algorithm in ARM DDI0403D, page B1-639
	// this isn't quite complete, but hopefully good enough
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
	if (faultmask) return -1;
     8c6:	f04f 30ff 	mov.w	r0, #4294967295
     8ca:	4770      	bx	lr
C:\Teensy\Projects\HelloWorld/mk20dx128.c:815
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
	if (primask) return 0;
     8cc:	4618      	mov	r0, r3
C:\Teensy\Projects\HelloWorld/mk20dx128.c:824
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
	}
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
	if (basepri > 0 && basepri < priority) priority = basepri;
	return priority;
}
     8ce:	4770      	bx	lr
     8d0:	e000e3f0 	.word	0xe000e3f0

000008d4 <ultoa>:
ultoa():
C:\Teensy\Projects\HelloWorld/nonstd.c:38
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
     8d4:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/nonstd.c:40
	unsigned digit;
	int i=0, j;
     8d6:	2300      	movs	r3, #0
C:\Teensy\Projects\HelloWorld/nonstd.c:44
	char t;

	while (1) {
		digit = val % radix;
     8d8:	fbb0 f4f2 	udiv	r4, r0, r2
     8dc:	fb02 0014 	mls	r0, r2, r4, r0
C:\Teensy\Projects\HelloWorld/nonstd.c:45
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
     8e0:	2809      	cmp	r0, #9
     8e2:	bf94      	ite	ls
     8e4:	3030      	addls	r0, #48	; 0x30
     8e6:	3037      	addhi	r0, #55	; 0x37
     8e8:	b2c0      	uxtb	r0, r0
     8ea:	54c8      	strb	r0, [r1, r3]
C:\Teensy\Projects\HelloWorld/nonstd.c:47
		val /= radix;
		if (val == 0) break;
     8ec:	4620      	mov	r0, r4
     8ee:	b10c      	cbz	r4, 8f4 <ultoa+0x20>
C:\Teensy\Projects\HelloWorld/nonstd.c:48
		i++;
     8f0:	3301      	adds	r3, #1
C:\Teensy\Projects\HelloWorld/nonstd.c:49
	}
     8f2:	e7f1      	b.n	8d8 <ultoa+0x4>
C:\Teensy\Projects\HelloWorld/nonstd.c:50
	buf[i + 1] = 0;
     8f4:	18ca      	adds	r2, r1, r3
     8f6:	7054      	strb	r4, [r2, #1]
C:\Teensy\Projects\HelloWorld/nonstd.c:51
	for (j=0; j < i; j++, i--) {
     8f8:	4622      	mov	r2, r4
C:\Teensy\Projects\HelloWorld/nonstd.c:51 (discriminator 1)
     8fa:	429a      	cmp	r2, r3
     8fc:	da06      	bge.n	90c <ultoa+0x38>
C:\Teensy\Projects\HelloWorld/nonstd.c:52 (discriminator 2)
		t = buf[j];
     8fe:	5c88      	ldrb	r0, [r1, r2]
C:\Teensy\Projects\HelloWorld/nonstd.c:53 (discriminator 2)
		buf[j] = buf[i];
     900:	5ccc      	ldrb	r4, [r1, r3]
     902:	548c      	strb	r4, [r1, r2]
C:\Teensy\Projects\HelloWorld/nonstd.c:54 (discriminator 2)
		buf[i] = t;
     904:	54c8      	strb	r0, [r1, r3]
C:\Teensy\Projects\HelloWorld/nonstd.c:51 (discriminator 2)
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
     906:	3201      	adds	r2, #1
     908:	3b01      	subs	r3, #1
     90a:	e7f6      	b.n	8fa <ultoa+0x26>
C:\Teensy\Projects\HelloWorld/nonstd.c:57
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
     90c:	4608      	mov	r0, r1
     90e:	bd10      	pop	{r4, pc}

00000910 <ltoa>:
ltoa():
C:\Teensy\Projects\HelloWorld/nonstd.c:61

char * ltoa(long val, char *buf, int radix)
{
	if (val >= 0) {
     910:	1e03      	subs	r3, r0, #0
C:\Teensy\Projects\HelloWorld/nonstd.c:60
	}
	return buf;
}

char * ltoa(long val, char *buf, int radix)
{
     912:	b510      	push	{r4, lr}
     914:	460c      	mov	r4, r1
C:\Teensy\Projects\HelloWorld/nonstd.c:61
	if (val >= 0) {
     916:	db03      	blt.n	920 <ltoa+0x10>
C:\Teensy\Projects\HelloWorld/nonstd.c:68
	} else {
		buf[0] = '-';
		ultoa(-val, buf + 1, radix);
		return buf;
	}
}
     918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
C:\Teensy\Projects\HelloWorld/nonstd.c:62
}

char * ltoa(long val, char *buf, int radix)
{
	if (val >= 0) {
		return ultoa(val, buf, radix);
     91c:	f7ff bfda 	b.w	8d4 <ultoa>
C:\Teensy\Projects\HelloWorld/nonstd.c:64
	} else {
		buf[0] = '-';
     920:	202d      	movs	r0, #45	; 0x2d
     922:	f801 0b01 	strb.w	r0, [r1], #1
C:\Teensy\Projects\HelloWorld/nonstd.c:65
		ultoa(-val, buf + 1, radix);
     926:	4258      	negs	r0, r3
     928:	f7ff ffd4 	bl	8d4 <ultoa>
C:\Teensy\Projects\HelloWorld/nonstd.c:68
		return buf;
	}
}
     92c:	4620      	mov	r0, r4
     92e:	bd10      	pop	{r4, pc}

00000930 <dtostrf>:
dtostrf():
C:\Teensy\Projects\HelloWorld/nonstd.c:77
char * fcvtf(float, int, int *, int *);
int isnanf (float x);
int isinff (float x);

char * dtostrf(float val, int width, unsigned int precision, char *buf)
{
     930:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
     934:	4688      	mov	r8, r1
C:\Teensy\Projects\HelloWorld/nonstd.c:82
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
     936:	ea81 75e1 	eor.w	r5, r1, r1, asr #31
     93a:	eba5 75e1 	sub.w	r5, r5, r1, asr #31
C:\Teensy\Projects\HelloWorld/nonstd.c:83
	if (isnanf(val)) {
     93e:	4601      	mov	r1, r0
C:\Teensy\Projects\HelloWorld/nonstd.c:77
char * fcvtf(float, int, int *, int *);
int isnanf (float x);
int isinff (float x);

char * dtostrf(float val, int width, unsigned int precision, char *buf)
{
     940:	4606      	mov	r6, r0
     942:	4691      	mov	r9, r2
     944:	461c      	mov	r4, r3
C:\Teensy\Projects\HelloWorld/nonstd.c:83
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
     946:	f005 fe17 	bl	6578 <__aeabi_fcmpun>
     94a:	b388      	cbz	r0, 9b0 <dtostrf+0x80>
C:\Teensy\Projects\HelloWorld/nonstd.c:84
		int ndigs = (val<0) ? 4 : 3;
     94c:	4630      	mov	r0, r6
     94e:	2100      	movs	r1, #0
     950:	f005 fdea 	bl	6528 <__aeabi_fcmplt>
     954:	2800      	cmp	r0, #0
     956:	bf14      	ite	ne
     958:	2004      	movne	r0, #4
     95a:	2003      	moveq	r0, #3
C:\Teensy\Projects\HelloWorld/nonstd.c:85
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
     95c:	4285      	cmp	r5, r0
     95e:	bfcc      	ite	gt
     960:	ebc0 0505 	rsbgt	r5, r0, r5
     964:	2500      	movle	r5, #0
C:\Teensy\Projects\HelloWorld/nonstd.c:86
		if (width<0) {
     966:	f1b8 0f00 	cmp.w	r8, #0
     96a:	da07      	bge.n	97c <dtostrf+0x4c>
     96c:	4425      	add	r5, r4
C:\Teensy\Projects\HelloWorld/nonstd.c:87 (discriminator 1)
			while (awidth) {
     96e:	42ac      	cmp	r4, r5
     970:	d003      	beq.n	97a <dtostrf+0x4a>
C:\Teensy\Projects\HelloWorld/nonstd.c:88
				*buf++ = ' ';
     972:	2320      	movs	r3, #32
     974:	f804 3b01 	strb.w	r3, [r4], #1
     978:	e7f9      	b.n	96e <dtostrf+0x3e>
     97a:	2500      	movs	r5, #0
C:\Teensy\Projects\HelloWorld/nonstd.c:92
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
     97c:	2e00      	cmp	r6, #0
     97e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
     982:	f04f 0100 	mov.w	r1, #0
     986:	bfb8      	it	lt
     988:	486a      	ldrlt	r0, [pc, #424]	; (b34 <dtostrf+0x204>)
     98a:	f005 fdcd 	bl	6528 <__aeabi_fcmplt>
     98e:	b110      	cbz	r0, 996 <dtostrf+0x66>
C:\Teensy\Projects\HelloWorld/nonstd.c:92 (discriminator 1)
     990:	232d      	movs	r3, #45	; 0x2d
     992:	7023      	strb	r3, [r4, #0]
     994:	3401      	adds	r4, #1
C:\Teensy\Projects\HelloWorld/nonstd.c:94
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
     996:	2341      	movs	r3, #65	; 0x41
     998:	224e      	movs	r2, #78	; 0x4e
     99a:	7063      	strb	r3, [r4, #1]
     99c:	1ce3      	adds	r3, r4, #3
     99e:	7022      	strb	r2, [r4, #0]
     9a0:	70a2      	strb	r2, [r4, #2]
     9a2:	1958      	adds	r0, r3, r5
C:\Teensy\Projects\HelloWorld/nonstd.c:98 (discriminator 1)
		} else {
			*buf++ = 'n';  *buf++ = 'a';  *buf++ = 'n';
		}
		while (awidth) {
     9a4:	4283      	cmp	r3, r0
     9a6:	d03e      	beq.n	a26 <dtostrf+0xf6>
C:\Teensy\Projects\HelloWorld/nonstd.c:99
			*buf++ = ' ';
     9a8:	2220      	movs	r2, #32
     9aa:	f803 2b01 	strb.w	r2, [r3], #1
     9ae:	e7f9      	b.n	9a4 <dtostrf+0x74>
C:\Teensy\Projects\HelloWorld/nonstd.c:105
			awidth--;
		}
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
     9b0:	f026 4700 	bic.w	r7, r6, #2147483648	; 0x80000000
     9b4:	4638      	mov	r0, r7
     9b6:	4960      	ldr	r1, [pc, #384]	; (b38 <dtostrf+0x208>)
     9b8:	f005 fdde 	bl	6578 <__aeabi_fcmpun>
     9bc:	bbb0      	cbnz	r0, a2c <dtostrf+0xfc>
     9be:	4638      	mov	r0, r7
     9c0:	495d      	ldr	r1, [pc, #372]	; (b38 <dtostrf+0x208>)
     9c2:	f005 fdbb 	bl	653c <__aeabi_fcmple>
     9c6:	4607      	mov	r7, r0
     9c8:	bb80      	cbnz	r0, a2c <dtostrf+0xfc>
C:\Teensy\Projects\HelloWorld/nonstd.c:106
		int ndigs = (val<0) ? 4 : 3;
     9ca:	4630      	mov	r0, r6
     9cc:	2100      	movs	r1, #0
     9ce:	f005 fdab 	bl	6528 <__aeabi_fcmplt>
     9d2:	2800      	cmp	r0, #0
     9d4:	bf14      	ite	ne
     9d6:	2004      	movne	r0, #4
     9d8:	2003      	moveq	r0, #3
C:\Teensy\Projects\HelloWorld/nonstd.c:107
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
     9da:	4285      	cmp	r5, r0
     9dc:	bfcc      	ite	gt
     9de:	ebc0 0505 	rsbgt	r5, r0, r5
     9e2:	463d      	movle	r5, r7
C:\Teensy\Projects\HelloWorld/nonstd.c:108
		if (width<0) {
     9e4:	f1b8 0f00 	cmp.w	r8, #0
     9e8:	da07      	bge.n	9fa <dtostrf+0xca>
     9ea:	4425      	add	r5, r4
C:\Teensy\Projects\HelloWorld/nonstd.c:109 (discriminator 1)
			while (awidth) {
     9ec:	42ac      	cmp	r4, r5
     9ee:	d003      	beq.n	9f8 <dtostrf+0xc8>
C:\Teensy\Projects\HelloWorld/nonstd.c:110
				*buf++ = ' ';
     9f0:	2320      	movs	r3, #32
     9f2:	f804 3b01 	strb.w	r3, [r4], #1
     9f6:	e7f9      	b.n	9ec <dtostrf+0xbc>
     9f8:	2500      	movs	r5, #0
C:\Teensy\Projects\HelloWorld/nonstd.c:114
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
     9fa:	4630      	mov	r0, r6
     9fc:	2100      	movs	r1, #0
     9fe:	f005 fd93 	bl	6528 <__aeabi_fcmplt>
     a02:	b110      	cbz	r0, a0a <dtostrf+0xda>
C:\Teensy\Projects\HelloWorld/nonstd.c:114 (discriminator 1)
     a04:	232d      	movs	r3, #45	; 0x2d
     a06:	7023      	strb	r3, [r4, #0]
     a08:	3401      	adds	r4, #1
C:\Teensy\Projects\HelloWorld/nonstd.c:116
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
     a0a:	2349      	movs	r3, #73	; 0x49
     a0c:	7023      	strb	r3, [r4, #0]
     a0e:	234e      	movs	r3, #78	; 0x4e
     a10:	7063      	strb	r3, [r4, #1]
     a12:	2246      	movs	r2, #70	; 0x46
     a14:	1ce3      	adds	r3, r4, #3
     a16:	70a2      	strb	r2, [r4, #2]
     a18:	1958      	adds	r0, r3, r5
C:\Teensy\Projects\HelloWorld/nonstd.c:120 (discriminator 1)
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
     a1a:	4283      	cmp	r3, r0
     a1c:	d003      	beq.n	a26 <dtostrf+0xf6>
C:\Teensy\Projects\HelloWorld/nonstd.c:121
			*buf++ = ' ';
     a1e:	2220      	movs	r2, #32
     a20:	f803 2b01 	strb.w	r2, [r3], #1
     a24:	e7f9      	b.n	a1a <dtostrf+0xea>
C:\Teensy\Projects\HelloWorld/nonstd.c:124
			awidth--;
		}
		*buf = 0;
     a26:	2300      	movs	r3, #0
     a28:	7003      	strb	r3, [r0, #0]
C:\Teensy\Projects\HelloWorld/nonstd.c:125
		return buf;
     a2a:	e080      	b.n	b2e <dtostrf+0x1fe>
C:\Teensy\Projects\HelloWorld/nonstd.c:128
	}

	s = fcvtf(val, precision, &decpt, &sign);
     a2c:	4630      	mov	r0, r6
     a2e:	4649      	mov	r1, r9
     a30:	466a      	mov	r2, sp
     a32:	ab01      	add	r3, sp, #4
     a34:	f005 fde3 	bl	65fe <fcvtf>
     a38:	9e00      	ldr	r6, [sp, #0]
     a3a:	4682      	mov	sl, r0
C:\Teensy\Projects\HelloWorld/nonstd.c:129
	if (precision == 0 && decpt == 0) {
     a3c:	f1b9 0f00 	cmp.w	r9, #0
     a40:	d10b      	bne.n	a5a <dtostrf+0x12a>
C:\Teensy\Projects\HelloWorld/nonstd.c:129 (discriminator 1)
     a42:	b956      	cbnz	r6, a5a <dtostrf+0x12a>
C:\Teensy\Projects\HelloWorld/nonstd.c:130
		s = (*s < '5') ? "0" : "1";
     a44:	f890 a000 	ldrb.w	sl, [r0]
     a48:	4b3c      	ldr	r3, [pc, #240]	; (b3c <dtostrf+0x20c>)
     a4a:	4a3d      	ldr	r2, [pc, #244]	; (b40 <dtostrf+0x210>)
     a4c:	2501      	movs	r5, #1
     a4e:	f1ba 0f34 	cmp.w	sl, #52	; 0x34
     a52:	bf8c      	ite	hi
     a54:	4692      	movhi	sl, r2
     a56:	469a      	movls	sl, r3
     a58:	e008      	b.n	a6c <dtostrf+0x13c>
C:\Teensy\Projects\HelloWorld/nonstd.c:133
		reqd = 1;
	} else {
		reqd = strlen(s);
     a5a:	4650      	mov	r0, sl
     a5c:	f005 ff19 	bl	6892 <strlen>
C:\Teensy\Projects\HelloWorld/nonstd.c:134
		if (reqd > decpt) reqd++;
     a60:	42b0      	cmp	r0, r6
C:\Teensy\Projects\HelloWorld/nonstd.c:133
	s = fcvtf(val, precision, &decpt, &sign);
	if (precision == 0 && decpt == 0) {
		s = (*s < '5') ? "0" : "1";
		reqd = 1;
	} else {
		reqd = strlen(s);
     a62:	4605      	mov	r5, r0
C:\Teensy\Projects\HelloWorld/nonstd.c:134
		if (reqd > decpt) reqd++;
     a64:	bfc8      	it	gt
     a66:	1c45      	addgt	r5, r0, #1
C:\Teensy\Projects\HelloWorld/nonstd.c:135
		if (decpt == 0) reqd++;
     a68:	b906      	cbnz	r6, a6c <dtostrf+0x13c>
C:\Teensy\Projects\HelloWorld/nonstd.c:135 (discriminator 1)
     a6a:	3501      	adds	r5, #1
C:\Teensy\Projects\HelloWorld/nonstd.c:137
	}
	if (sign) reqd++;
     a6c:	9901      	ldr	r1, [sp, #4]
     a6e:	b101      	cbz	r1, a72 <dtostrf+0x142>
C:\Teensy\Projects\HelloWorld/nonstd.c:137 (discriminator 1)
     a70:	3501      	adds	r5, #1
C:\Teensy\Projects\HelloWorld/nonstd.c:140
	p = buf;
	e = p + reqd;
	pad = width - reqd;
     a72:	ebc5 0308 	rsb	r3, r5, r8
C:\Teensy\Projects\HelloWorld/nonstd.c:141
	if (pad > 0) {
     a76:	2b00      	cmp	r3, #0
C:\Teensy\Projects\HelloWorld/nonstd.c:139
		if (reqd > decpt) reqd++;
		if (decpt == 0) reqd++;
	}
	if (sign) reqd++;
	p = buf;
	e = p + reqd;
     a78:	eb04 0705 	add.w	r7, r4, r5
C:\Teensy\Projects\HelloWorld/nonstd.c:141
	pad = width - reqd;
	if (pad > 0) {
     a7c:	dd08      	ble.n	a90 <dtostrf+0x160>
C:\Teensy\Projects\HelloWorld/nonstd.c:142
		e += pad;
     a7e:	441f      	add	r7, r3
C:\Teensy\Projects\HelloWorld/nonstd.c:138
		reqd = strlen(s);
		if (reqd > decpt) reqd++;
		if (decpt == 0) reqd++;
	}
	if (sign) reqd++;
	p = buf;
     a80:	4622      	mov	r2, r4
     a82:	4423      	add	r3, r4
C:\Teensy\Projects\HelloWorld/nonstd.c:143 (discriminator 1)
	e = p + reqd;
	pad = width - reqd;
	if (pad > 0) {
		e += pad;
		while (pad-- > 0) *p++ = ' ';
     a84:	429a      	cmp	r2, r3
     a86:	d004      	beq.n	a92 <dtostrf+0x162>
C:\Teensy\Projects\HelloWorld/nonstd.c:143 (discriminator 2)
     a88:	2020      	movs	r0, #32
     a8a:	f802 0b01 	strb.w	r0, [r2], #1
     a8e:	e7f9      	b.n	a84 <dtostrf+0x154>
C:\Teensy\Projects\HelloWorld/nonstd.c:138
		reqd = strlen(s);
		if (reqd > decpt) reqd++;
		if (decpt == 0) reqd++;
	}
	if (sign) reqd++;
	p = buf;
     a90:	4623      	mov	r3, r4
C:\Teensy\Projects\HelloWorld/nonstd.c:145
	pad = width - reqd;
	if (pad > 0) {
		e += pad;
		while (pad-- > 0) *p++ = ' ';
	}
	if (sign) *p++ = '-';
     a92:	b111      	cbz	r1, a9a <dtostrf+0x16a>
C:\Teensy\Projects\HelloWorld/nonstd.c:145 (discriminator 1)
     a94:	222d      	movs	r2, #45	; 0x2d
     a96:	701a      	strb	r2, [r3, #0]
     a98:	3301      	adds	r3, #1
C:\Teensy\Projects\HelloWorld/nonstd.c:146
	if (decpt == 0 && precision > 0) {
     a9a:	2e00      	cmp	r6, #0
     a9c:	d107      	bne.n	aae <dtostrf+0x17e>
C:\Teensy\Projects\HelloWorld/nonstd.c:146 (discriminator 1)
     a9e:	f1b9 0f00 	cmp.w	r9, #0
     aa2:	d01e      	beq.n	ae2 <dtostrf+0x1b2>
C:\Teensy\Projects\HelloWorld/nonstd.c:147
		*p++ = '0';
     aa4:	461a      	mov	r2, r3
     aa6:	2130      	movs	r1, #48	; 0x30
     aa8:	f802 1b02 	strb.w	r1, [r2], #2
     aac:	e027      	b.n	afe <dtostrf+0x1ce>
C:\Teensy\Projects\HelloWorld/nonstd.c:150
		*p++ = '.';
	}
	else if (decpt < 0 && precision > 0) {
     aae:	da18      	bge.n	ae2 <dtostrf+0x1b2>
C:\Teensy\Projects\HelloWorld/nonstd.c:150 (discriminator 1)
     ab0:	f1b9 0f00 	cmp.w	r9, #0
     ab4:	d015      	beq.n	ae2 <dtostrf+0x1b2>
C:\Teensy\Projects\HelloWorld/nonstd.c:151
		*p++ = '0';
     ab6:	4619      	mov	r1, r3
     ab8:	2230      	movs	r2, #48	; 0x30
     aba:	f801 2b02 	strb.w	r2, [r1], #2
C:\Teensy\Projects\HelloWorld/nonstd.c:152
		*p++ = '.';
     abe:	222e      	movs	r2, #46	; 0x2e
     ac0:	705a      	strb	r2, [r3, #1]
C:\Teensy\Projects\HelloWorld/nonstd.c:153
		e++;
     ac2:	3701      	adds	r7, #1
C:\Teensy\Projects\HelloWorld/nonstd.c:154
		while ( decpt < 0 ) {
     ac4:	4632      	mov	r2, r6
     ac6:	1b8b      	subs	r3, r1, r6
C:\Teensy\Projects\HelloWorld/nonstd.c:154 (discriminator 1)
     ac8:	2a00      	cmp	r2, #0
     aca:	f1c6 0000 	rsb	r0, r6, #0
     ace:	4413      	add	r3, r2
     ad0:	da04      	bge.n	adc <dtostrf+0x1ac>
     ad2:	4408      	add	r0, r1
C:\Teensy\Projects\HelloWorld/nonstd.c:156
			decpt++;
			*p++ = '0';
     ad4:	2330      	movs	r3, #48	; 0x30
     ad6:	5483      	strb	r3, [r0, r2]
     ad8:	3201      	adds	r2, #1
     ada:	e7f4      	b.n	ac6 <dtostrf+0x196>
     adc:	9200      	str	r2, [sp, #0]
     ade:	e000      	b.n	ae2 <dtostrf+0x1b2>
C:\Teensy\Projects\HelloWorld/nonstd.c:154 (discriminator 1)
	}
	else if (decpt < 0 && precision > 0) {
		*p++ = '0';
		*p++ = '.';
		e++;
		while ( decpt < 0 ) {
     ae0:	4613      	mov	r3, r2
C:\Teensy\Projects\HelloWorld/nonstd.c:159 (discriminator 1)
			decpt++;
			*p++ = '0';
		}
	}
	while (p < e) {
     ae2:	42bb      	cmp	r3, r7
     ae4:	d20f      	bcs.n	b06 <dtostrf+0x1d6>
C:\Teensy\Projects\HelloWorld/nonstd.c:160
		*p++ = *s++;
     ae6:	1c5a      	adds	r2, r3, #1
     ae8:	f81a 1b01 	ldrb.w	r1, [sl], #1
     aec:	7019      	strb	r1, [r3, #0]
C:\Teensy\Projects\HelloWorld/nonstd.c:161
		if (p == e) break;
     aee:	42ba      	cmp	r2, r7
     af0:	d008      	beq.n	b04 <dtostrf+0x1d4>
C:\Teensy\Projects\HelloWorld/nonstd.c:162
		if (--decpt == 0) *p++ = '.';
     af2:	9900      	ldr	r1, [sp, #0]
     af4:	3901      	subs	r1, #1
     af6:	9100      	str	r1, [sp, #0]
     af8:	2900      	cmp	r1, #0
     afa:	d1f1      	bne.n	ae0 <dtostrf+0x1b0>
C:\Teensy\Projects\HelloWorld/nonstd.c:162 (discriminator 1)
     afc:	1c9a      	adds	r2, r3, #2
     afe:	212e      	movs	r1, #46	; 0x2e
     b00:	7059      	strb	r1, [r3, #1]
     b02:	e7ed      	b.n	ae0 <dtostrf+0x1b0>
C:\Teensy\Projects\HelloWorld/nonstd.c:160
			decpt++;
			*p++ = '0';
		}
	}
	while (p < e) {
		*p++ = *s++;
     b04:	463b      	mov	r3, r7
C:\Teensy\Projects\HelloWorld/nonstd.c:164
		if (p == e) break;
		if (--decpt == 0) *p++ = '.';
	}
	if (width < 0) {
     b06:	f1b8 0f00 	cmp.w	r8, #0
     b0a:	da0d      	bge.n	b28 <dtostrf+0x1f8>
C:\Teensy\Projects\HelloWorld/nonstd.c:165
		pad = (reqd + width) * -1;
     b0c:	4445      	add	r5, r8
     b0e:	426d      	negs	r5, r5
C:\Teensy\Projects\HelloWorld/nonstd.c:166
		while (pad-- > 0) *p++ = ' ';
     b10:	461a      	mov	r2, r3
     b12:	1959      	adds	r1, r3, r5
     b14:	1a89      	subs	r1, r1, r2
C:\Teensy\Projects\HelloWorld/nonstd.c:166 (discriminator 1)
     b16:	2900      	cmp	r1, #0
     b18:	dd03      	ble.n	b22 <dtostrf+0x1f2>
C:\Teensy\Projects\HelloWorld/nonstd.c:166 (discriminator 2)
     b1a:	2120      	movs	r1, #32
     b1c:	f802 1b01 	strb.w	r1, [r2], #1
     b20:	e7f7      	b.n	b12 <dtostrf+0x1e2>
     b22:	2d00      	cmp	r5, #0
     b24:	bfa8      	it	ge
     b26:	195b      	addge	r3, r3, r5
C:\Teensy\Projects\HelloWorld/nonstd.c:168
	}
	*p = 0;
     b28:	2200      	movs	r2, #0
     b2a:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/nonstd.c:173

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
     b2c:	4620      	mov	r0, r4
C:\Teensy\Projects\HelloWorld/nonstd.c:174
}
     b2e:	b002      	add	sp, #8
     b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b34:	bf800000 	.word	0xbf800000
     b38:	7f7fffff 	.word	0x7f7fffff
     b3c:	00009e60 	.word	0x00009e60
     b40:	00009e5e 	.word	0x00009e5e

00000b44 <dummy_isr>:
dummy_isr():
C:\Teensy\Projects\HelloWorld/pins_teensy.c:143
	{((volatile uint8_t *)&CORE_PIN26_PORTREG + (CORE_PIN26_BIT >> 3)), &CORE_PIN26_CONFIG, (1<<(CORE_PIN26_BIT & 7))}
};

#endif

static void dummy_isr() {};
     b44:	4770      	bx	lr

00000b46 <getIsrTable>:
getIsrTable():
C:\Teensy\Projects\HelloWorld/pins_teensy.c:171

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
     b46:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
     b4a:	f5a0 2392 	sub.w	r3, r0, #299008	; 0x49000
     b4e:	2b7c      	cmp	r3, #124	; 0x7c
     b50:	d914      	bls.n	b7c <getIsrTable+0x36>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:172
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
     b52:	f5a0 2394 	sub.w	r3, r0, #303104	; 0x4a000
     b56:	2b7c      	cmp	r3, #124	; 0x7c
     b58:	d912      	bls.n	b80 <getIsrTable+0x3a>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:173
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
     b5a:	f5a0 2396 	sub.w	r3, r0, #307200	; 0x4b000
     b5e:	2b7c      	cmp	r3, #124	; 0x7c
     b60:	d910      	bls.n	b84 <getIsrTable+0x3e>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:174
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
     b62:	f5a0 2398 	sub.w	r3, r0, #311296	; 0x4c000
     b66:	2b7c      	cmp	r3, #124	; 0x7c
     b68:	d906      	bls.n	b78 <getIsrTable+0x32>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:175
	else if(&PORTE_PCR0 <= config && config <= &PORTE_PCR31) isr_table = isr_table_portE;
     b6a:	f5a0 209a 	sub.w	r0, r0, #315392	; 0x4d000
C:\Teensy\Projects\HelloWorld/pins_teensy.c:170
voidFuncPtr isr_table_portE[CORE_MAX_PIN_PORTE+1] = { [0 ... CORE_MAX_PIN_PORTE] = dummy_isr };

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
     b6e:	287d      	cmp	r0, #125	; 0x7d
     b70:	4805      	ldr	r0, [pc, #20]	; (b88 <getIsrTable+0x42>)
     b72:	bf28      	it	cs
     b74:	2000      	movcs	r0, #0
     b76:	4770      	bx	lr
C:\Teensy\Projects\HelloWorld/pins_teensy.c:174
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
     b78:	4804      	ldr	r0, [pc, #16]	; (b8c <getIsrTable+0x46>)
     b7a:	4770      	bx	lr
C:\Teensy\Projects\HelloWorld/pins_teensy.c:171

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
     b7c:	4804      	ldr	r0, [pc, #16]	; (b90 <getIsrTable+0x4a>)
     b7e:	4770      	bx	lr
C:\Teensy\Projects\HelloWorld/pins_teensy.c:172
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
     b80:	4804      	ldr	r0, [pc, #16]	; (b94 <getIsrTable+0x4e>)
     b82:	4770      	bx	lr
C:\Teensy\Projects\HelloWorld/pins_teensy.c:173
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
     b84:	4804      	ldr	r0, [pc, #16]	; (b98 <getIsrTable+0x52>)
C:\Teensy\Projects\HelloWorld/pins_teensy.c:177
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
	else if(&PORTE_PCR0 <= config && config <= &PORTE_PCR31) isr_table = isr_table_portE;
	return isr_table;
}
     b86:	4770      	bx	lr
     b88:	1fff0850 	.word	0x1fff0850
     b8c:	1fff08bc 	.word	0x1fff08bc
     b90:	1fff098c 	.word	0x1fff098c
     b94:	1fff092c 	.word	0x1fff092c
     b98:	1fff08fc 	.word	0x1fff08fc

00000b9c <getPinIndex>:
getPinIndex():
C:\Teensy\Projects\HelloWorld/pins_teensy.c:184
inline uint32_t getPinIndex(volatile uint32_t *config) {
	uintptr_t v = (uintptr_t) config;
	// There are 32 pin config registers for each port, each port starting at a round address.
	// They are spaced 4 bytes apart.
	return (v % 128) / 4;
}
     b9c:	f3c0 0084 	ubfx	r0, r0, #2, #5
     ba0:	4770      	bx	lr

00000ba2 <attachInterruptVector>:
attachInterruptVector():
C:\Teensy\Projects\HelloWorld/pins_teensy.c:193
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
     ba2:	3010      	adds	r0, #16
     ba4:	4b01      	ldr	r3, [pc, #4]	; (bac <attachInterruptVector+0xa>)
     ba6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
     baa:	4770      	bx	lr
     bac:	1fff0200 	.word	0x1fff0200

00000bb0 <detachInterrupt>:
detachInterrupt():
C:\Teensy\Projects\HelloWorld/pins_teensy.c:252

void detachInterrupt(uint8_t pin)
{
	volatile uint32_t *config;

	config = portConfigRegister(pin);
     bb0:	4b0c      	ldr	r3, [pc, #48]	; (be4 <detachInterrupt+0x34>)
     bb2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
C:\Teensy\Projects\HelloWorld/pins_teensy.c:249
	__enable_irq();
#endif
}

void detachInterrupt(uint8_t pin)
{
     bb6:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/pins_teensy.c:252
	volatile uint32_t *config;

	config = portConfigRegister(pin);
     bb8:	6844      	ldr	r4, [r0, #4]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:254
#if defined(KINETISK)
	voidFuncPtr* isr_table = getIsrTable(config);
     bba:	4620      	mov	r0, r4
     bbc:	f7ff ffc3 	bl	b46 <getIsrTable>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:255
	if(!isr_table) return;
     bc0:	b170      	cbz	r0, be0 <detachInterrupt+0x30>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:257
	uint32_t pin_index = getPinIndex(config);
	__disable_irq();
     bc2:	b672      	cpsid	i
C:\Teensy\Projects\HelloWorld/pins_teensy.c:258
	*config = ((*config & ~0x000F0000) | 0x01000000);
     bc4:	6823      	ldr	r3, [r4, #0]
     bc6:	f023 7387 	bic.w	r3, r3, #17694720	; 0x10e0000
     bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
     bce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
     bd2:	6023      	str	r3, [r4, #0]
getPinIndex():
C:\Teensy\Projects\HelloWorld/pins_teensy.c:183

inline uint32_t getPinIndex(volatile uint32_t *config) {
	uintptr_t v = (uintptr_t) config;
	// There are 32 pin config registers for each port, each port starting at a round address.
	// They are spaced 4 bytes apart.
	return (v % 128) / 4;
     bd4:	f3c4 0484 	ubfx	r4, r4, #2, #5
detachInterrupt():
C:\Teensy\Projects\HelloWorld/pins_teensy.c:259
	voidFuncPtr* isr_table = getIsrTable(config);
	if(!isr_table) return;
	uint32_t pin_index = getPinIndex(config);
	__disable_irq();
	*config = ((*config & ~0x000F0000) | 0x01000000);
	isr_table[pin_index] = dummy_isr;
     bd8:	4b03      	ldr	r3, [pc, #12]	; (be8 <detachInterrupt+0x38>)
     bda:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:260
	__enable_irq();
     bde:	b662      	cpsie	i
     be0:	bd10      	pop	{r4, pc}
     be2:	bf00      	nop
     be4:	00009e64 	.word	0x00009e64
     be8:	00000b45 	.word	0x00000b45

00000bec <rtc_get>:
rtc_get():
C:\Teensy\Projects\HelloWorld/pins_teensy.c:341



unsigned long rtc_get(void)
{
	return RTC_TSR;
     bec:	4b01      	ldr	r3, [pc, #4]	; (bf4 <rtc_get+0x8>)
     bee:	6818      	ldr	r0, [r3, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:342
}
     bf0:	4770      	bx	lr
     bf2:	bf00      	nop
     bf4:	4003d000 	.word	0x4003d000

00000bf8 <rtc_set>:
rtc_set():
C:\Teensy\Projects\HelloWorld/pins_teensy.c:346

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
     bf8:	4b04      	ldr	r3, [pc, #16]	; (c0c <rtc_set+0x14>)
C:\Teensy\Projects\HelloWorld/pins_teensy.c:347
	RTC_TPR = 0;
     bfa:	4905      	ldr	r1, [pc, #20]	; (c10 <rtc_set+0x18>)
C:\Teensy\Projects\HelloWorld/pins_teensy.c:346
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
     bfc:	2200      	movs	r2, #0
     bfe:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:347
	RTC_TPR = 0;
     c00:	600a      	str	r2, [r1, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:348
	RTC_TSR = t;
     c02:	4a04      	ldr	r2, [pc, #16]	; (c14 <rtc_set+0x1c>)
     c04:	6010      	str	r0, [r2, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:349
	RTC_SR = RTC_SR_TCE;
     c06:	2210      	movs	r2, #16
     c08:	601a      	str	r2, [r3, #0]
     c0a:	4770      	bx	lr
     c0c:	4003d014 	.word	0x4003d014
     c10:	4003d004 	.word	0x4003d004
     c14:	4003d000 	.word	0x4003d000

00000c18 <rtc_compensate>:
rtc_compensate():
C:\Teensy\Projects\HelloWorld/pins_teensy.c:364
	// This simple approach tries to maximize the interval.
	// Perhaps minimizing TCR would be better, so the
	// compensation is distributed more evenly across
	// many seconds, rather than saving it all up and then
	// altering one second up to +/- 0.38%
	if (adjust >= 0) {
     c18:	2800      	cmp	r0, #0
     c1a:	db0e      	blt.n	c3a <rtc_compensate+0x22>
     c1c:	0202      	lsls	r2, r0, #8
C:\Teensy\Projects\HelloWorld/pins_teensy.c:366
		comp = adjust;
		interval = 256;
     c1e:	f44f 7380 	mov.w	r3, #256	; 0x100
C:\Teensy\Projects\HelloWorld/pins_teensy.c:369
		while (1) {
			tcr = comp * interval;
			if (tcr < 128*256) break;
     c22:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
     c26:	d306      	bcc.n	c36 <rtc_compensate+0x1e>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:370
			if (--interval == 1) break;
     c28:	3b01      	subs	r3, #1
     c2a:	2b01      	cmp	r3, #1
     c2c:	ebc0 0102 	rsb	r1, r0, r2
     c30:	d001      	beq.n	c36 <rtc_compensate+0x1e>
     c32:	460a      	mov	r2, r1
     c34:	e7f5      	b.n	c22 <rtc_compensate+0xa>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:372
		}
		tcr = tcr >> 8;
     c36:	0a12      	lsrs	r2, r2, #8
     c38:	e010      	b.n	c5c <rtc_compensate+0x44>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:374
	} else {
		comp = -adjust;
     c3a:	4240      	negs	r0, r0
     c3c:	0202      	lsls	r2, r0, #8
C:\Teensy\Projects\HelloWorld/pins_teensy.c:375
		interval = 256;
     c3e:	f44f 7380 	mov.w	r3, #256	; 0x100
C:\Teensy\Projects\HelloWorld/pins_teensy.c:378
		while (1) {
			tcr = comp * interval;
			if (tcr < 129*256) break;
     c42:	f5b2 4f01 	cmp.w	r2, #33024	; 0x8100
     c46:	d306      	bcc.n	c56 <rtc_compensate+0x3e>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:379
			if (--interval == 1) break;
     c48:	3b01      	subs	r3, #1
     c4a:	2b01      	cmp	r3, #1
     c4c:	ebc0 0102 	rsb	r1, r0, r2
     c50:	d001      	beq.n	c56 <rtc_compensate+0x3e>
     c52:	460a      	mov	r2, r1
     c54:	e7f5      	b.n	c42 <rtc_compensate+0x2a>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:381
		}
		tcr = tcr >> 8;
     c56:	0a12      	lsrs	r2, r2, #8
C:\Teensy\Projects\HelloWorld/pins_teensy.c:382
		tcr = 256 - tcr;
     c58:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
C:\Teensy\Projects\HelloWorld/pins_teensy.c:384
	}
	RTC_TCR = ((interval - 1) << 8) | tcr;
     c5c:	3b01      	subs	r3, #1
     c5e:	4902      	ldr	r1, [pc, #8]	; (c68 <rtc_compensate+0x50>)
     c60:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
     c64:	600a      	str	r2, [r1, #0]
     c66:	4770      	bx	lr
     c68:	4003d00c 	.word	0x4003d00c

00000c6c <analogWriteRes>:
analogWriteRes():
C:\Teensy\Projects\HelloWorld/pins_teensy.c:767
}


void analogWriteRes(uint32_t bits)
{
	if (bits < 1) {
     c6c:	b118      	cbz	r0, c76 <analogWriteRes+0xa>
     c6e:	2810      	cmp	r0, #16
     c70:	bf28      	it	cs
     c72:	2010      	movcs	r0, #16
     c74:	e000      	b.n	c78 <analogWriteRes+0xc>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:768
		bits = 1;
     c76:	2001      	movs	r0, #1
C:\Teensy\Projects\HelloWorld/pins_teensy.c:772
	} else if (bits > 16) {
		bits = 16;
	}
	analog_write_res = bits;
     c78:	4b01      	ldr	r3, [pc, #4]	; (c80 <analogWriteRes+0x14>)
     c7a:	f883 01b4 	strb.w	r0, [r3, #436]	; 0x1b4
     c7e:	4770      	bx	lr
     c80:	1fff0850 	.word	0x1fff0850

00000c84 <analogWriteFrequency>:
analogWriteFrequency():
C:\Teensy\Projects\HelloWorld/pins_teensy.c:777
}


void analogWriteFrequency(uint8_t pin, float frequency)
{
     c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
C:\Teensy\Projects\HelloWorld/pins_teensy.c:788
	//serial_print(", freq = ");
	//serial_phex32((uint32_t)frequency);
	//serial_print("\n");

#ifdef TPM1_CH0_PIN
	if (pin == TPM1_CH0_PIN || pin == TPM1_CH1_PIN) {
     c88:	f1a0 0910 	sub.w	r9, r0, #16
     c8c:	fa5f f989 	uxtb.w	r9, r9
     c90:	f1b9 0f01 	cmp.w	r9, #1
C:\Teensy\Projects\HelloWorld/pins_teensy.c:777
	analog_write_res = bits;
}


void analogWriteFrequency(uint8_t pin, float frequency)
{
     c94:	4605      	mov	r5, r0
     c96:	460f      	mov	r7, r1
C:\Teensy\Projects\HelloWorld/pins_teensy.c:788
	//serial_print(", freq = ");
	//serial_phex32((uint32_t)frequency);
	//serial_print("\n");

#ifdef TPM1_CH0_PIN
	if (pin == TPM1_CH0_PIN || pin == TPM1_CH1_PIN) {
     c98:	d90d      	bls.n	cb6 <analogWriteFrequency+0x32>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:793
		ftmClockSource = 1;
		ftmClock = 16000000;
	} else
#endif
	if (frequency < (float)(F_TIMER >> 7) / 65536.0f) {
     c9a:	4608      	mov	r0, r1
     c9c:	493d      	ldr	r1, [pc, #244]	; (d94 <analogWriteFrequency+0x110>)
     c9e:	f005 fc43 	bl	6528 <__aeabi_fcmplt>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:798
		// frequency is too low for working with F_TIMER:
		ftmClockSource = 2; 	// Use alternative 31250Hz clock source
		ftmClock = 31250;   	// Set variable for the actual timer clock frequency
	} else {
		ftmClockSource = 1; 	// Use default F_TIMER clock source
     ca2:	4b3d      	ldr	r3, [pc, #244]	; (d98 <analogWriteFrequency+0x114>)
     ca4:	2800      	cmp	r0, #0
     ca6:	f647 2812 	movw	r8, #31250	; 0x7a12
     caa:	bf14      	ite	ne
     cac:	2602      	movne	r6, #2
     cae:	2601      	moveq	r6, #1
     cb0:	bf08      	it	eq
     cb2:	4698      	moveq	r8, r3
     cb4:	e002      	b.n	cbc <analogWriteFrequency+0x38>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:790
	//serial_print("\n");

#ifdef TPM1_CH0_PIN
	if (pin == TPM1_CH0_PIN || pin == TPM1_CH1_PIN) {
		ftmClockSource = 1;
		ftmClock = 16000000;
     cb6:	f8df 8120 	ldr.w	r8, [pc, #288]	; dd8 <analogWriteFrequency+0x154>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:789
	//serial_phex32((uint32_t)frequency);
	//serial_print("\n");

#ifdef TPM1_CH0_PIN
	if (pin == TPM1_CH0_PIN || pin == TPM1_CH1_PIN) {
		ftmClockSource = 1;
     cba:	2601      	movs	r6, #1
C:\Teensy\Projects\HelloWorld/pins_teensy.c:803
		ftmClockSource = 1; 	// Use default F_TIMER clock source
		ftmClock = F_TIMER;	// Set variable for the actual timer clock frequency
	}

	
	for (prescale = 0; prescale < 7; prescale++) {
     cbc:	2400      	movs	r4, #0
C:\Teensy\Projects\HelloWorld/pins_teensy.c:804
		minfreq = (float)(ftmClock >> prescale) / 65536.0f;	//Use ftmClock instead of F_TIMER
     cbe:	fa28 f004 	lsr.w	r0, r8, r4
     cc2:	f005 fa3b 	bl	613c <__aeabi_ui2f>
     cc6:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
     cca:	f005 fa8f 	bl	61ec <__aeabi_fmul>
     cce:	4601      	mov	r1, r0
C:\Teensy\Projects\HelloWorld/pins_teensy.c:805
		if (frequency >= minfreq) break;
     cd0:	4638      	mov	r0, r7
     cd2:	f005 fc3d 	bl	6550 <__aeabi_fcmpge>
     cd6:	b910      	cbnz	r0, cde <analogWriteFrequency+0x5a>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:803
		ftmClockSource = 1; 	// Use default F_TIMER clock source
		ftmClock = F_TIMER;	// Set variable for the actual timer clock frequency
	}

	
	for (prescale = 0; prescale < 7; prescale++) {
     cd8:	3401      	adds	r4, #1
     cda:	2c07      	cmp	r4, #7
     cdc:	d1ef      	bne.n	cbe <analogWriteFrequency+0x3a>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:813
	//serial_phex32(ftmClock >> prescale);
	//serial_print("\n");
	//serial_print("prescale = ");
	//serial_phex(prescale);
	//serial_print("\n");
	mod = (float)(ftmClock >> prescale) / frequency - 0.5f;	//Use ftmClock instead of F_TIMER
     cde:	fa28 f004 	lsr.w	r0, r8, r4
     ce2:	f005 fa2b 	bl	613c <__aeabi_ui2f>
     ce6:	4639      	mov	r1, r7
     ce8:	f005 fb34 	bl	6354 <__aeabi_fdiv>
     cec:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     cf0:	f005 f972 	bl	5fd8 <__aeabi_fsub>
     cf4:	f005 fc56 	bl	65a4 <__aeabi_f2uiz>
     cf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
     cfc:	4298      	cmp	r0, r3
     cfe:	bf28      	it	cs
     d00:	4618      	movcs	r0, r3
C:\Teensy\Projects\HelloWorld/pins_teensy.c:818
	if (mod > 65535) mod = 65535;
	//serial_print("mod = ");
	//serial_phex32(mod);
	//serial_print("\n");
	if (pin == FTM1_CH0_PIN || pin == FTM1_CH1_PIN) {
     d02:	1eeb      	subs	r3, r5, #3
     d04:	2b01      	cmp	r3, #1
     d06:	d806      	bhi.n	d16 <analogWriteFrequency+0x92>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:819
		FTM1_SC = 0;
     d08:	4b24      	ldr	r3, [pc, #144]	; (d9c <analogWriteFrequency+0x118>)
C:\Teensy\Projects\HelloWorld/pins_teensy.c:820
		FTM1_CNT = 0;
     d0a:	4925      	ldr	r1, [pc, #148]	; (da0 <analogWriteFrequency+0x11c>)
C:\Teensy\Projects\HelloWorld/pins_teensy.c:819
	if (mod > 65535) mod = 65535;
	//serial_print("mod = ");
	//serial_phex32(mod);
	//serial_print("\n");
	if (pin == FTM1_CH0_PIN || pin == FTM1_CH1_PIN) {
		FTM1_SC = 0;
     d0c:	2200      	movs	r2, #0
     d0e:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:820
		FTM1_CNT = 0;
     d10:	600a      	str	r2, [r1, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:821
		FTM1_MOD = mod;
     d12:	4a24      	ldr	r2, [pc, #144]	; (da4 <analogWriteFrequency+0x120>)
     d14:	e036      	b.n	d84 <analogWriteFrequency+0x100>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:824
		FTM1_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);	//Use ftmClockSource instead of 1
	} else if (pin == FTM0_CH0_PIN || pin == FTM0_CH1_PIN
	  || pin == FTM0_CH2_PIN || pin == FTM0_CH3_PIN
     d16:	f1a5 0309 	sub.w	r3, r5, #9
     d1a:	2b01      	cmp	r3, #1
     d1c:	d906      	bls.n	d2c <analogWriteFrequency+0xa8>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:825 (discriminator 1)
	  || pin == FTM0_CH4_PIN || pin == FTM0_CH5_PIN
     d1e:	f1a5 0314 	sub.w	r3, r5, #20
     d22:	2b03      	cmp	r3, #3
     d24:	d902      	bls.n	d2c <analogWriteFrequency+0xa8>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:827 (discriminator 1)
#ifdef FTM0_CH6_PIN
	  || pin == FTM0_CH6_PIN || pin == FTM0_CH7_PIN
     d26:	1f6b      	subs	r3, r5, #5
     d28:	2b01      	cmp	r3, #1
     d2a:	d806      	bhi.n	d3a <analogWriteFrequency+0xb6>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:830
#endif
	  ) {
		FTM0_SC = 0;
     d2c:	4b1e      	ldr	r3, [pc, #120]	; (da8 <analogWriteFrequency+0x124>)
C:\Teensy\Projects\HelloWorld/pins_teensy.c:831
		FTM0_CNT = 0;
     d2e:	491f      	ldr	r1, [pc, #124]	; (dac <analogWriteFrequency+0x128>)
C:\Teensy\Projects\HelloWorld/pins_teensy.c:830
	  || pin == FTM0_CH4_PIN || pin == FTM0_CH5_PIN
#ifdef FTM0_CH6_PIN
	  || pin == FTM0_CH6_PIN || pin == FTM0_CH7_PIN
#endif
	  ) {
		FTM0_SC = 0;
     d30:	2200      	movs	r2, #0
     d32:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:831
		FTM0_CNT = 0;
     d34:	600a      	str	r2, [r1, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:832
		FTM0_MOD = mod;
     d36:	4a1e      	ldr	r2, [pc, #120]	; (db0 <analogWriteFrequency+0x12c>)
     d38:	e024      	b.n	d84 <analogWriteFrequency+0x100>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:836
		FTM0_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);	//Use ftmClockSource instead of 1
	}
#ifdef FTM2_CH0_PIN
	  else if (pin == FTM2_CH0_PIN || pin == FTM2_CH1_PIN) {
     d3a:	f1a5 031d 	sub.w	r3, r5, #29
     d3e:	2b01      	cmp	r3, #1
     d40:	d806      	bhi.n	d50 <analogWriteFrequency+0xcc>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:837
		FTM2_SC = 0;
     d42:	4b1c      	ldr	r3, [pc, #112]	; (db4 <analogWriteFrequency+0x130>)
C:\Teensy\Projects\HelloWorld/pins_teensy.c:838
		FTM2_CNT = 0;
     d44:	491c      	ldr	r1, [pc, #112]	; (db8 <analogWriteFrequency+0x134>)
C:\Teensy\Projects\HelloWorld/pins_teensy.c:837
		FTM0_MOD = mod;
		FTM0_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);	//Use ftmClockSource instead of 1
	}
#ifdef FTM2_CH0_PIN
	  else if (pin == FTM2_CH0_PIN || pin == FTM2_CH1_PIN) {
		FTM2_SC = 0;
     d46:	2200      	movs	r2, #0
     d48:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:838
		FTM2_CNT = 0;
     d4a:	600a      	str	r2, [r1, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:839
		FTM2_MOD = mod;
     d4c:	4a1b      	ldr	r2, [pc, #108]	; (dbc <analogWriteFrequency+0x138>)
     d4e:	e019      	b.n	d84 <analogWriteFrequency+0x100>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:844
		FTM2_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);	//Use ftmClockSource instead of 1
	}
#endif
#ifdef FTM3_CH0_PIN
	  else if (pin == FTM3_CH0_PIN || pin == FTM3_CH1_PIN
     d50:	2d02      	cmp	r5, #2
     d52:	d007      	beq.n	d64 <analogWriteFrequency+0xe0>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:844 (discriminator 1)
     d54:	2d0e      	cmp	r5, #14
     d56:	d005      	beq.n	d64 <analogWriteFrequency+0xe0>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:845
	  || pin == FTM3_CH2_PIN || pin == FTM3_CH3_PIN
     d58:	1feb      	subs	r3, r5, #7
     d5a:	2b01      	cmp	r3, #1
     d5c:	d902      	bls.n	d64 <analogWriteFrequency+0xe0>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:846
	  || pin == FTM3_CH4_PIN || pin == FTM3_CH5_PIN
     d5e:	3d23      	subs	r5, #35	; 0x23
     d60:	2d03      	cmp	r5, #3
     d62:	d806      	bhi.n	d72 <analogWriteFrequency+0xee>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:848
	  || pin == FTM3_CH6_PIN || pin == FTM3_CH7_PIN) {
		FTM3_SC = 0;
     d64:	4b16      	ldr	r3, [pc, #88]	; (dc0 <analogWriteFrequency+0x13c>)
C:\Teensy\Projects\HelloWorld/pins_teensy.c:849
		FTM3_CNT = 0;
     d66:	4917      	ldr	r1, [pc, #92]	; (dc4 <analogWriteFrequency+0x140>)
C:\Teensy\Projects\HelloWorld/pins_teensy.c:848
#ifdef FTM3_CH0_PIN
	  else if (pin == FTM3_CH0_PIN || pin == FTM3_CH1_PIN
	  || pin == FTM3_CH2_PIN || pin == FTM3_CH3_PIN
	  || pin == FTM3_CH4_PIN || pin == FTM3_CH5_PIN
	  || pin == FTM3_CH6_PIN || pin == FTM3_CH7_PIN) {
		FTM3_SC = 0;
     d68:	2200      	movs	r2, #0
     d6a:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:849
		FTM3_CNT = 0;
     d6c:	600a      	str	r2, [r1, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:850
		FTM3_MOD = mod;
     d6e:	4a16      	ldr	r2, [pc, #88]	; (dc8 <analogWriteFrequency+0x144>)
     d70:	e008      	b.n	d84 <analogWriteFrequency+0x100>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:855
		FTM3_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);	//Use the new ftmClockSource instead of 1
	}
#endif
#ifdef TPM1_CH0_PIN
	  else if (pin == TPM1_CH0_PIN || pin == TPM1_CH1_PIN) {
     d72:	f1b9 0f01 	cmp.w	r9, #1
     d76:	d80b      	bhi.n	d90 <analogWriteFrequency+0x10c>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:856
		TPM1_SC = 0;
     d78:	4b14      	ldr	r3, [pc, #80]	; (dcc <analogWriteFrequency+0x148>)
C:\Teensy\Projects\HelloWorld/pins_teensy.c:857
		TPM1_CNT = 0;
     d7a:	4915      	ldr	r1, [pc, #84]	; (dd0 <analogWriteFrequency+0x14c>)
C:\Teensy\Projects\HelloWorld/pins_teensy.c:856
		FTM3_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);	//Use the new ftmClockSource instead of 1
	}
#endif
#ifdef TPM1_CH0_PIN
	  else if (pin == TPM1_CH0_PIN || pin == TPM1_CH1_PIN) {
		TPM1_SC = 0;
     d7c:	2200      	movs	r2, #0
     d7e:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:857
		TPM1_CNT = 0;
     d80:	600a      	str	r2, [r1, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:858
		TPM1_MOD = mod;
     d82:	4a14      	ldr	r2, [pc, #80]	; (dd4 <analogWriteFrequency+0x150>)
C:\Teensy\Projects\HelloWorld/pins_teensy.c:859
		TPM1_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);
     d84:	f004 0407 	and.w	r4, r4, #7
     d88:	ea44 06c6 	orr.w	r6, r4, r6, lsl #3
C:\Teensy\Projects\HelloWorld/pins_teensy.c:858
#endif
#ifdef TPM1_CH0_PIN
	  else if (pin == TPM1_CH0_PIN || pin == TPM1_CH1_PIN) {
		TPM1_SC = 0;
		TPM1_CNT = 0;
		TPM1_MOD = mod;
     d8c:	6010      	str	r0, [r2, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:859
		TPM1_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);
     d8e:	601e      	str	r6, [r3, #0]
     d90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     d94:	40e4e1c0 	.word	0x40e4e1c0
     d98:	03938700 	.word	0x03938700
     d9c:	40039000 	.word	0x40039000
     da0:	40039004 	.word	0x40039004
     da4:	40039008 	.word	0x40039008
     da8:	40038000 	.word	0x40038000
     dac:	40038004 	.word	0x40038004
     db0:	40038008 	.word	0x40038008
     db4:	400b8000 	.word	0x400b8000
     db8:	400b8004 	.word	0x400b8004
     dbc:	400b8008 	.word	0x400b8008
     dc0:	400b9000 	.word	0x400b9000
     dc4:	400b9004 	.word	0x400b9004
     dc8:	400b9008 	.word	0x400b9008
     dcc:	400c9000 	.word	0x400c9000
     dd0:	400c9004 	.word	0x400c9004
     dd4:	400c9008 	.word	0x400c9008
     dd8:	00f42400 	.word	0x00f42400

00000ddc <digitalWrite>:
digitalWrite():
C:\Teensy\Projects\HelloWorld/pins_teensy.c:870

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
     ddc:	283f      	cmp	r0, #63	; 0x3f
C:\Teensy\Projects\HelloWorld/pins_teensy.c:869


// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
     dde:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/pins_teensy.c:870
	if (pin >= CORE_NUM_DIGITAL) return;
     de0:	d818      	bhi.n	e14 <digitalWrite+0x38>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:872
#ifdef KINETISK
	if (*portModeRegister(pin)) {
     de2:	4a0d      	ldr	r2, [pc, #52]	; (e18 <digitalWrite+0x3c>)
     de4:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
     de8:	f893 4280 	ldrb.w	r4, [r3, #640]	; 0x280
     dec:	b13c      	cbz	r4, dfe <digitalWrite+0x22>
     dee:	2201      	movs	r2, #1
C:\Teensy\Projects\HelloWorld/pins_teensy.c:873
		if (val) {
     df0:	b111      	cbz	r1, df8 <digitalWrite+0x1c>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:874
			*portSetRegister(pin) = 1;
     df2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
     df6:	bd10      	pop	{r4, pc}
C:\Teensy\Projects\HelloWorld/pins_teensy.c:876
		} else {
			*portClearRegister(pin) = 1;
     df8:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
     dfc:	bd10      	pop	{r4, pc}
C:\Teensy\Projects\HelloWorld/pins_teensy.c:887
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
     dfe:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
     e02:	6843      	ldr	r3, [r0, #4]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:890
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
     e04:	681a      	ldr	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:888
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
     e06:	b111      	cbz	r1, e0e <digitalWrite+0x32>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:890
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
     e08:	f042 0203 	orr.w	r2, r2, #3
     e0c:	e001      	b.n	e12 <digitalWrite+0x36>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:894
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
     e0e:	f022 0202 	bic.w	r2, r2, #2
     e12:	601a      	str	r2, [r3, #0]
     e14:	bd10      	pop	{r4, pc}
     e16:	bf00      	nop
     e18:	00009e64 	.word	0x00009e64

00000e1c <digitalRead>:
digitalRead():
C:\Teensy\Projects\HelloWorld/pins_teensy.c:903

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
     e1c:	283f      	cmp	r0, #63	; 0x3f
     e1e:	d806      	bhi.n	e2e <digitalRead+0x12>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:905
#ifdef KINETISK
	return *portInputRegister(pin);
     e20:	4b04      	ldr	r3, [pc, #16]	; (e34 <digitalRead+0x18>)
     e22:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
     e26:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
     e2a:	b2c0      	uxtb	r0, r0
     e2c:	4770      	bx	lr
C:\Teensy\Projects\HelloWorld/pins_teensy.c:903

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
     e2e:	2000      	movs	r0, #0
C:\Teensy\Projects\HelloWorld/pins_teensy.c:909
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
     e30:	4770      	bx	lr
     e32:	bf00      	nop
     e34:	00009e64 	.word	0x00009e64

00000e38 <pinMode>:
pinMode():
C:\Teensy\Projects\HelloWorld/pins_teensy.c:917

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
     e38:	283f      	cmp	r0, #63	; 0x3f
C:\Teensy\Projects\HelloWorld/pins_teensy.c:914
}



void pinMode(uint8_t pin, uint8_t mode)
{
     e3a:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/pins_teensy.c:917
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
     e3c:	d82b      	bhi.n	e96 <pinMode+0x5e>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:918
	config = portConfigRegister(pin);
     e3e:	4a16      	ldr	r2, [pc, #88]	; (e98 <pinMode+0x60>)
     e40:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
C:\Teensy\Projects\HelloWorld/pins_teensy.c:920

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     e44:	2901      	cmp	r1, #1
C:\Teensy\Projects\HelloWorld/pins_teensy.c:918
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
     e46:	685b      	ldr	r3, [r3, #4]
     e48:	4614      	mov	r4, r2
C:\Teensy\Projects\HelloWorld/pins_teensy.c:920

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     e4a:	d001      	beq.n	e50 <pinMode+0x18>
     e4c:	2904      	cmp	r1, #4
     e4e:	d10f      	bne.n	e70 <pinMode+0x38>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:922
#ifdef KINETISK
		*portModeRegister(pin) = 1;
     e50:	f854 2030 	ldr.w	r2, [r4, r0, lsl #3]
     e54:	2001      	movs	r0, #1
     e56:	f882 0280 	strb.w	r0, [r2, #640]	; 0x280
C:\Teensy\Projects\HelloWorld/pins_teensy.c:926
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
     e5a:	f44f 72a2 	mov.w	r2, #324	; 0x144
     e5e:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:928
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
     e60:	681a      	ldr	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:927
		*portModeRegister(pin) = 1;
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
     e62:	2904      	cmp	r1, #4
C:\Teensy\Projects\HelloWorld/pins_teensy.c:928
		    *config |= PORT_PCR_ODE;
     e64:	bf0c      	ite	eq
     e66:	f042 0220 	orreq.w	r2, r2, #32
C:\Teensy\Projects\HelloWorld/pins_teensy.c:930
		} else {
		    *config &= ~PORT_PCR_ODE;
     e6a:	f022 0220 	bicne.w	r2, r2, #32
     e6e:	e011      	b.n	e94 <pinMode+0x5c>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:934
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
     e70:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
     e74:	2200      	movs	r2, #0
     e76:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
C:\Teensy\Projects\HelloWorld/pins_teensy.c:938
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
     e7a:	b911      	cbnz	r1, e82 <pinMode+0x4a>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:939
			*config = PORT_PCR_MUX(1);
     e7c:	f44f 7280 	mov.w	r2, #256	; 0x100
     e80:	e008      	b.n	e94 <pinMode+0x5c>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:940
		} else if (mode == INPUT_PULLUP) {
     e82:	2902      	cmp	r1, #2
     e84:	d102      	bne.n	e8c <pinMode+0x54>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:941
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
     e86:	f240 1203 	movw	r2, #259	; 0x103
     e8a:	e003      	b.n	e94 <pinMode+0x5c>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:942
		} else if (mode == INPUT_PULLDOWN) {
     e8c:	2903      	cmp	r1, #3
C:\Teensy\Projects\HelloWorld/pins_teensy.c:943
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
     e8e:	bf08      	it	eq
     e90:	f44f 7281 	moveq.w	r2, #258	; 0x102
C:\Teensy\Projects\HelloWorld/pins_teensy.c:945
		} else { // INPUT_DISABLE
			*config = 0;
     e94:	601a      	str	r2, [r3, #0]
     e96:	bd10      	pop	{r4, pc}
     e98:	00009e64 	.word	0x00009e64

00000e9c <attachInterrupt>:
attachInterrupt():
C:\Teensy\Projects\HelloWorld/pins_teensy.c:201
void attachInterrupt(uint8_t pin, void (*function)(void), int mode)
{
	volatile uint32_t *config;
	uint32_t cfg, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
     e9c:	283f      	cmp	r0, #63	; 0x3f
C:\Teensy\Projects\HelloWorld/pins_teensy.c:197
{
	_VectorsRam[irq + 16] = function;
}

void attachInterrupt(uint8_t pin, void (*function)(void), int mode)
{
     e9e:	b570      	push	{r4, r5, r6, lr}
     ea0:	460d      	mov	r5, r1
C:\Teensy\Projects\HelloWorld/pins_teensy.c:201
	volatile uint32_t *config;
	uint32_t cfg, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
     ea2:	d83c      	bhi.n	f1e <attachInterrupt+0x82>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:202
	switch (mode) {
     ea4:	2a04      	cmp	r2, #4
     ea6:	d83a      	bhi.n	f1e <attachInterrupt+0x82>
     ea8:	e8df f002 	tbb	[pc, r2]
     eac:	0b050907 	.word	0x0b050907
     eb0:	03          	.byte	0x03
     eb1:	00          	.byte	0x00
C:\Teensy\Projects\HelloWorld/pins_teensy.c:203
	  case CHANGE:	mask = 0x0B; break;
     eb2:	230b      	movs	r3, #11
     eb4:	e006      	b.n	ec4 <attachInterrupt+0x28>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:205
	  case RISING:	mask = 0x09; break;
	  case FALLING:	mask = 0x0A; break;
     eb6:	230a      	movs	r3, #10
     eb8:	e004      	b.n	ec4 <attachInterrupt+0x28>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:206
	  case LOW:	mask = 0x08; break;
     eba:	2308      	movs	r3, #8
     ebc:	e002      	b.n	ec4 <attachInterrupt+0x28>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:207
	  case HIGH:	mask = 0x0C; break;
     ebe:	230c      	movs	r3, #12
     ec0:	e000      	b.n	ec4 <attachInterrupt+0x28>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:204
	uint32_t cfg, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	switch (mode) {
	  case CHANGE:	mask = 0x0B; break;
	  case RISING:	mask = 0x09; break;
     ec2:	2309      	movs	r3, #9
C:\Teensy\Projects\HelloWorld/pins_teensy.c:210
	  case FALLING:	mask = 0x0A; break;
	  case LOW:	mask = 0x08; break;
	  case HIGH:	mask = 0x0C; break;
	  default: return;
	}
	mask = (mask << 16) | 0x01000000;
     ec4:	041e      	lsls	r6, r3, #16
C:\Teensy\Projects\HelloWorld/pins_teensy.c:211
	config = portConfigRegister(pin);
     ec6:	4b16      	ldr	r3, [pc, #88]	; (f20 <attachInterrupt+0x84>)
     ec8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
     ecc:	685c      	ldr	r4, [r3, #4]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:212
	if ((*config & 0x00000700) == 0) {
     ece:	6821      	ldr	r1, [r4, #0]
     ed0:	f411 61e0 	ands.w	r1, r1, #1792	; 0x700
     ed4:	d101      	bne.n	eda <attachInterrupt+0x3e>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:215
		// for compatibility with programs which depend
		// on AVR hardware default to input mode.
		pinMode(pin, INPUT);
     ed6:	f7ff ffaf 	bl	e38 <pinMode>
attachInterruptVector():
C:\Teensy\Projects\HelloWorld/pins_teensy.c:193
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
     eda:	4b12      	ldr	r3, [pc, #72]	; (f24 <attachInterrupt+0x88>)
     edc:	4a12      	ldr	r2, [pc, #72]	; (f28 <attachInterrupt+0x8c>)
     ede:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
     ee2:	4a12      	ldr	r2, [pc, #72]	; (f2c <attachInterrupt+0x90>)
     ee4:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
     ee8:	4a11      	ldr	r2, [pc, #68]	; (f30 <attachInterrupt+0x94>)
     eea:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
     eee:	4a11      	ldr	r2, [pc, #68]	; (f34 <attachInterrupt+0x98>)
     ef0:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
attachInterrupt():
C:\Teensy\Projects\HelloWorld/pins_teensy.c:223
	attachInterruptVector(IRQ_PORTA, port_A_isr);
	attachInterruptVector(IRQ_PORTB, port_B_isr);
	attachInterruptVector(IRQ_PORTC, port_C_isr);
	attachInterruptVector(IRQ_PORTD, port_D_isr);
	attachInterruptVector(IRQ_PORTE, port_E_isr);
	voidFuncPtr* isr_table = getIsrTable(config);
     ef4:	4620      	mov	r0, r4
attachInterruptVector():
C:\Teensy\Projects\HelloWorld/pins_teensy.c:193
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
     ef6:	4a10      	ldr	r2, [pc, #64]	; (f38 <attachInterrupt+0x9c>)
     ef8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
attachInterrupt():
C:\Teensy\Projects\HelloWorld/pins_teensy.c:223
	attachInterruptVector(IRQ_PORTA, port_A_isr);
	attachInterruptVector(IRQ_PORTB, port_B_isr);
	attachInterruptVector(IRQ_PORTC, port_C_isr);
	attachInterruptVector(IRQ_PORTD, port_D_isr);
	attachInterruptVector(IRQ_PORTE, port_E_isr);
	voidFuncPtr* isr_table = getIsrTable(config);
     efc:	f7ff fe23 	bl	b46 <getIsrTable>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:224
	if(!isr_table) return;
     f00:	b168      	cbz	r0, f1e <attachInterrupt+0x82>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:226
	uint32_t pin_index = getPinIndex(config);
	__disable_irq();
     f02:	b672      	cpsid	i
C:\Teensy\Projects\HelloWorld/pins_teensy.c:227
	cfg = *config;
     f04:	6822      	ldr	r2, [r4, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:228
	cfg &= ~0x000F0000;		// disable any previous interrupt
     f06:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
C:\Teensy\Projects\HelloWorld/pins_teensy.c:229
	*config = cfg;
     f0a:	6022      	str	r2, [r4, #0]
getPinIndex():
C:\Teensy\Projects\HelloWorld/pins_teensy.c:183

inline uint32_t getPinIndex(volatile uint32_t *config) {
	uintptr_t v = (uintptr_t) config;
	// There are 32 pin config registers for each port, each port starting at a round address.
	// They are spaced 4 bytes apart.
	return (v % 128) / 4;
     f0c:	f3c4 0384 	ubfx	r3, r4, #2, #5
attachInterrupt():
C:\Teensy\Projects\HelloWorld/pins_teensy.c:210
	  case FALLING:	mask = 0x0A; break;
	  case LOW:	mask = 0x08; break;
	  case HIGH:	mask = 0x0C; break;
	  default: return;
	}
	mask = (mask << 16) | 0x01000000;
     f10:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
C:\Teensy\Projects\HelloWorld/pins_teensy.c:231
	__disable_irq();
	cfg = *config;
	cfg &= ~0x000F0000;		// disable any previous interrupt
	*config = cfg;
	isr_table[pin_index] = function;	// set the function pointer
	cfg |= mask;
     f14:	4316      	orrs	r6, r2
C:\Teensy\Projects\HelloWorld/pins_teensy.c:230
	uint32_t pin_index = getPinIndex(config);
	__disable_irq();
	cfg = *config;
	cfg &= ~0x000F0000;		// disable any previous interrupt
	*config = cfg;
	isr_table[pin_index] = function;	// set the function pointer
     f16:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:232
	cfg |= mask;
	*config = cfg;			// enable the new interrupt
     f1a:	6026      	str	r6, [r4, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:233
	__enable_irq();
     f1c:	b662      	cpsie	i
     f1e:	bd70      	pop	{r4, r5, r6, pc}
     f20:	00009e64 	.word	0x00009e64
     f24:	1fff0200 	.word	0x1fff0200
     f28:	1fff0819 	.word	0x1fff0819
     f2c:	1fff07e9 	.word	0x1fff07e9
     f30:	1fff07b9 	.word	0x1fff07b9
     f34:	1fff078d 	.word	0x1fff078d
     f38:	1fff0761 	.word	0x1fff0761

00000f3c <analogWrite>:
analogWrite():
C:\Teensy\Projects\HelloWorld/pins_teensy.c:572
void analogWrite(uint8_t pin, int val)
{
	uint32_t cval, max;


	if (pin == A21 || pin == A22) {
     f3c:	f1a0 0342 	sub.w	r3, r0, #66	; 0x42
     f40:	2b01      	cmp	r3, #1
C:\Teensy\Projects\HelloWorld/pins_teensy.c:568
// FTM is clocked by the bus clock, either 24 or 48 MHz
// input capture can be FTM1_CH0, CMP0 or CMP1 or USB start of frame
// 24 MHz with reload 49152 to match Arduino's speed = 488.28125 Hz

void analogWrite(uint8_t pin, int val)
{
     f42:	b570      	push	{r4, r5, r6, lr}
     f44:	460a      	mov	r2, r1
     f46:	4604      	mov	r4, r0
     f48:	4b7c      	ldr	r3, [pc, #496]	; (113c <analogWrite+0x200>)
C:\Teensy\Projects\HelloWorld/pins_teensy.c:572
	uint32_t cval, max;


	if (pin == A21 || pin == A22) {
     f4a:	d818      	bhi.n	f7e <analogWrite+0x42>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:573
		uint8_t res = analog_write_res;
     f4c:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
C:\Teensy\Projects\HelloWorld/pins_teensy.c:574
		if (res < 12) {
     f50:	2b0b      	cmp	r3, #11
     f52:	d804      	bhi.n	f5e <analogWrite+0x22>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:575
			val <<= 12 - res;
     f54:	f1c3 030c 	rsb	r3, r3, #12
     f58:	fa01 f203 	lsl.w	r2, r1, r3
     f5c:	e004      	b.n	f68 <analogWrite+0x2c>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:576
		} else if (res > 12) {
     f5e:	2b0c      	cmp	r3, #12
C:\Teensy\Projects\HelloWorld/pins_teensy.c:577
			val >>= res - 12;
     f60:	bf1c      	itt	ne
     f62:	3b0c      	subne	r3, #12
     f64:	fa41 f203 	asrne.w	r2, r1, r3
C:\Teensy\Projects\HelloWorld/pins_teensy.c:579
		}
		if (pin == A21) analogWriteDAC0(val);
     f68:	2c42      	cmp	r4, #66	; 0x42
     f6a:	4610      	mov	r0, r2
     f6c:	d103      	bne.n	f76 <analogWrite+0x3a>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:762 (discriminator 1)
#endif
	  default:
		digitalWrite(pin, (val > 127) ? HIGH : LOW);
		pinMode(pin, OUTPUT);
	}
}
     f6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
C:\Teensy\Projects\HelloWorld/pins_teensy.c:579 (discriminator 1)
		if (res < 12) {
			val <<= 12 - res;
		} else if (res > 12) {
			val >>= res - 12;
		}
		if (pin == A21) analogWriteDAC0(val);
     f72:	f7ff bc13 	b.w	79c <analogWriteDAC0>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:762
#endif
	  default:
		digitalWrite(pin, (val > 127) ? HIGH : LOW);
		pinMode(pin, OUTPUT);
	}
}
     f76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
C:\Teensy\Projects\HelloWorld/pins_teensy.c:580
			val <<= 12 - res;
		} else if (res > 12) {
			val >>= res - 12;
		}
		if (pin == A21) analogWriteDAC0(val);
		else analogWriteDAC1(val);
     f7a:	f7ff bc29 	b.w	7d0 <analogWriteDAC1>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:585
		return;
	}


	max = 1 << analog_write_res;
     f7e:	f893 51b4 	ldrb.w	r5, [r3, #436]	; 0x1b4
     f82:	2601      	movs	r6, #1
C:\Teensy\Projects\HelloWorld/pins_teensy.c:586
	if (val <= 0) {
     f84:	2900      	cmp	r1, #0
C:\Teensy\Projects\HelloWorld/pins_teensy.c:585
		else analogWriteDAC1(val);
		return;
	}


	max = 1 << analog_write_res;
     f86:	fa06 f305 	lsl.w	r3, r6, r5
C:\Teensy\Projects\HelloWorld/pins_teensy.c:587
	if (val <= 0) {
		digitalWrite(pin, LOW);
     f8a:	bfd8      	it	le
     f8c:	2100      	movle	r1, #0
C:\Teensy\Projects\HelloWorld/pins_teensy.c:586
		return;
	}


	max = 1 << analog_write_res;
	if (val <= 0) {
     f8e:	dd02      	ble.n	f96 <analogWrite+0x5a>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:590
		digitalWrite(pin, LOW);
		pinMode(pin, OUTPUT);	// TODO: implement OUTPUT_LOW
		return;
	} else if (val >= max) {
     f90:	429a      	cmp	r2, r3
     f92:	d305      	bcc.n	fa0 <analogWrite+0x64>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:591
		digitalWrite(pin, HIGH);
     f94:	4631      	mov	r1, r6
     f96:	f7ff ff21 	bl	ddc <digitalWrite>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:592
		pinMode(pin, OUTPUT);	// TODO: implement OUTPUT_HIGH
     f9a:	4620      	mov	r0, r4
     f9c:	4631      	mov	r1, r6
     f9e:	e0c8      	b.n	1132 <analogWrite+0x1f6>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:603
	//serial_phex32(val);
	//serial_print("\n");
	//serial_print("analog_write_res = ");
	//serial_phex(analog_write_res);
	//serial_print("\n");
	if (pin == FTM1_CH0_PIN || pin == FTM1_CH1_PIN) {
     fa0:	1ec3      	subs	r3, r0, #3
     fa2:	2b01      	cmp	r3, #1
     fa4:	d801      	bhi.n	faa <analogWrite+0x6e>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:604
		cval = ((uint32_t)val * (uint32_t)(FTM1_MOD + 1)) >> analog_write_res;
     fa6:	4b66      	ldr	r3, [pc, #408]	; (1140 <analogWrite+0x204>)
     fa8:	e018      	b.n	fdc <analogWrite+0xa0>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:606
#if defined(FTM2_CH0_PIN)
	} else if (pin == FTM2_CH0_PIN || pin == FTM2_CH1_PIN) {
     faa:	f1a0 031d 	sub.w	r3, r0, #29
     fae:	2b01      	cmp	r3, #1
     fb0:	d801      	bhi.n	fb6 <analogWrite+0x7a>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:607
		cval = ((uint32_t)val * (uint32_t)(FTM2_MOD + 1)) >> analog_write_res;
     fb2:	4b64      	ldr	r3, [pc, #400]	; (1144 <analogWrite+0x208>)
     fb4:	e012      	b.n	fdc <analogWrite+0xa0>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:610
#endif
#if defined(FTM3_CH0_PIN)
	} else if (pin == FTM3_CH0_PIN || pin == FTM3_CH1_PIN || pin == FTM3_CH2_PIN
     fb6:	2802      	cmp	r0, #2
     fb8:	d008      	beq.n	fcc <analogWrite+0x90>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:610 (discriminator 1)
     fba:	280e      	cmp	r0, #14
     fbc:	d006      	beq.n	fcc <analogWrite+0x90>
     fbe:	1fc3      	subs	r3, r0, #7
     fc0:	2b01      	cmp	r3, #1
     fc2:	d903      	bls.n	fcc <analogWrite+0x90>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:611 (discriminator 1)
	  || pin == FTM3_CH3_PIN || pin == FTM3_CH4_PIN || pin == FTM3_CH5_PIN
     fc4:	f1a0 0323 	sub.w	r3, r0, #35	; 0x23
     fc8:	2b03      	cmp	r3, #3
     fca:	d801      	bhi.n	fd0 <analogWrite+0x94>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:613
	  || pin == FTM3_CH6_PIN || pin == FTM3_CH7_PIN) {
		cval = ((uint32_t)val * (uint32_t)(FTM3_MOD + 1)) >> analog_write_res;
     fcc:	4b5e      	ldr	r3, [pc, #376]	; (1148 <analogWrite+0x20c>)
     fce:	e005      	b.n	fdc <analogWrite+0xa0>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:616
#endif
#if defined(TPM1_CH0_PIN)
	} else if (pin == TPM1_CH0_PIN || pin == TPM1_CH1_PIN) {
     fd0:	f1a0 0310 	sub.w	r3, r0, #16
     fd4:	2b01      	cmp	r3, #1
C:\Teensy\Projects\HelloWorld/pins_teensy.c:617
		cval = ((uint32_t)val * (uint32_t)(TPM1_MOD + 1)) >> analog_write_res;
     fd6:	bf94      	ite	ls
     fd8:	4b5c      	ldrls	r3, [pc, #368]	; (114c <analogWrite+0x210>)
C:\Teensy\Projects\HelloWorld/pins_teensy.c:620
#endif
	} else {
		cval = ((uint32_t)val * (uint32_t)(FTM0_MOD + 1)) >> analog_write_res;
     fda:	4b5d      	ldrhi	r3, [pc, #372]	; (1150 <analogWrite+0x214>)
     fdc:	681b      	ldr	r3, [r3, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:625
	}
	//serial_print("cval = ");
	//serial_phex32(cval);
	//serial_print("\n");
	switch (pin) {
     fde:	1ea1      	subs	r1, r4, #2
C:\Teensy\Projects\HelloWorld/pins_teensy.c:620
#if defined(TPM1_CH0_PIN)
	} else if (pin == TPM1_CH0_PIN || pin == TPM1_CH1_PIN) {
		cval = ((uint32_t)val * (uint32_t)(TPM1_MOD + 1)) >> analog_write_res;
#endif
	} else {
		cval = ((uint32_t)val * (uint32_t)(FTM0_MOD + 1)) >> analog_write_res;
     fe0:	fb03 2302 	mla	r3, r3, r2, r2
     fe4:	40eb      	lsrs	r3, r5
C:\Teensy\Projects\HelloWorld/pins_teensy.c:625
	}
	//serial_print("cval = ");
	//serial_phex32(cval);
	//serial_print("\n");
	switch (pin) {
     fe6:	2924      	cmp	r1, #36	; 0x24
     fe8:	f200 809a 	bhi.w	1120 <analogWrite+0x1e4>
     fec:	e8df f001 	tbb	[pc, r1]
     ff0:	3d49435b 	.word	0x3d49435b
     ff4:	1f6d672b 	.word	0x1f6d672b
     ff8:	98989825 	.word	0x98989825
     ffc:	918b9861 	.word	0x918b9861
    1000:	37319898 	.word	0x37319898
    1004:	98981913 	.word	0x98981913
    1008:	4f989898 	.word	0x4f989898
    100c:	98989855 	.word	0x98989855
    1010:	7f797398 	.word	0x7f797398
    1014:	85          	.byte	0x85
    1015:	00          	.byte	0x00
C:\Teensy\Projects\HelloWorld/pins_teensy.c:628
#ifdef FTM0_CH0_PIN
	  case FTM0_CH0_PIN: // PTC1, FTM0_CH0
		FTM0_C0V = cval;
    1016:	4a4f      	ldr	r2, [pc, #316]	; (1154 <analogWrite+0x218>)
    1018:	6013      	str	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:629
		FTM_PINCFG(FTM0_CH0_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    101a:	f240 4244 	movw	r2, #1092	; 0x444
    101e:	4b4e      	ldr	r3, [pc, #312]	; (1158 <analogWrite+0x21c>)
    1020:	e07c      	b.n	111c <analogWrite+0x1e0>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:634
		break;
#endif
#ifdef FTM0_CH1_PIN
	  case FTM0_CH1_PIN: // PTC2, FTM0_CH1
		FTM0_C1V = cval;
    1022:	4a4e      	ldr	r2, [pc, #312]	; (115c <analogWrite+0x220>)
    1024:	6013      	str	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:635
		FTM_PINCFG(FTM0_CH1_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    1026:	f240 4244 	movw	r2, #1092	; 0x444
    102a:	4b4d      	ldr	r3, [pc, #308]	; (1160 <analogWrite+0x224>)
    102c:	e076      	b.n	111c <analogWrite+0x1e0>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:640
		break;
#endif
#ifdef FTM0_CH2_PIN
	  case FTM0_CH2_PIN: // PTC3, FTM0_CH2
		FTM0_C2V = cval;
    102e:	4a4d      	ldr	r2, [pc, #308]	; (1164 <analogWrite+0x228>)
    1030:	6013      	str	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:641
		FTM_PINCFG(FTM0_CH2_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    1032:	f240 4244 	movw	r2, #1092	; 0x444
    1036:	4b4c      	ldr	r3, [pc, #304]	; (1168 <analogWrite+0x22c>)
    1038:	e070      	b.n	111c <analogWrite+0x1e0>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:646
		break;
#endif
#ifdef FTM0_CH3_PIN
	  case FTM0_CH3_PIN: // PTC4, FTM0_CH3
		FTM0_C3V = cval;
    103a:	4a4c      	ldr	r2, [pc, #304]	; (116c <analogWrite+0x230>)
    103c:	6013      	str	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:647
		FTM_PINCFG(FTM0_CH3_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    103e:	f240 4244 	movw	r2, #1092	; 0x444
    1042:	4b4b      	ldr	r3, [pc, #300]	; (1170 <analogWrite+0x234>)
    1044:	e06a      	b.n	111c <analogWrite+0x1e0>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:652
		break;
#endif
#ifdef FTM0_CH4_PIN
	  case FTM0_CH4_PIN: // PTD4, FTM0_CH4
		FTM0_C4V = cval;
    1046:	4a4b      	ldr	r2, [pc, #300]	; (1174 <analogWrite+0x238>)
    1048:	6013      	str	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:653
		FTM_PINCFG(FTM0_CH4_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    104a:	f240 4244 	movw	r2, #1092	; 0x444
    104e:	4b4a      	ldr	r3, [pc, #296]	; (1178 <analogWrite+0x23c>)
    1050:	e064      	b.n	111c <analogWrite+0x1e0>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:658
		break;
#endif
#ifdef FTM0_CH5_PIN
	  case FTM0_CH5_PIN: // PTD5, FTM0_CH5
		FTM0_C5V = cval;
    1052:	4a4a      	ldr	r2, [pc, #296]	; (117c <analogWrite+0x240>)
    1054:	6013      	str	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:659
		FTM_PINCFG(FTM0_CH5_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    1056:	f240 4244 	movw	r2, #1092	; 0x444
    105a:	4b49      	ldr	r3, [pc, #292]	; (1180 <analogWrite+0x244>)
    105c:	e05e      	b.n	111c <analogWrite+0x1e0>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:664
		break;
#endif
#ifdef FTM0_CH6_PIN
	  case FTM0_CH6_PIN: // PTD6, FTM0_CH6
		FTM0_C6V = cval;
    105e:	4a49      	ldr	r2, [pc, #292]	; (1184 <analogWrite+0x248>)
    1060:	6013      	str	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:665
		FTM_PINCFG(FTM0_CH6_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    1062:	f240 4244 	movw	r2, #1092	; 0x444
    1066:	4b48      	ldr	r3, [pc, #288]	; (1188 <analogWrite+0x24c>)
    1068:	e058      	b.n	111c <analogWrite+0x1e0>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:670
		break;
#endif
#ifdef FTM0_CH7_PIN
	  case FTM0_CH7_PIN: // PTD7, FTM0_CH7
		FTM0_C7V = cval;
    106a:	4a48      	ldr	r2, [pc, #288]	; (118c <analogWrite+0x250>)
    106c:	6013      	str	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:671
		FTM_PINCFG(FTM0_CH7_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    106e:	f240 4244 	movw	r2, #1092	; 0x444
    1072:	4b47      	ldr	r3, [pc, #284]	; (1190 <analogWrite+0x254>)
    1074:	e052      	b.n	111c <analogWrite+0x1e0>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:676
		break;
#endif
#ifdef FTM1_CH0_PIN
	  case FTM1_CH0_PIN: // PTA12, FTM1_CH0
		FTM1_C0V = cval;
    1076:	4a47      	ldr	r2, [pc, #284]	; (1194 <analogWrite+0x258>)
    1078:	6013      	str	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:677
		FTM_PINCFG(FTM1_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    107a:	f44f 7251 	mov.w	r2, #836	; 0x344
    107e:	4b46      	ldr	r3, [pc, #280]	; (1198 <analogWrite+0x25c>)
    1080:	e04c      	b.n	111c <analogWrite+0x1e0>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:682
		break;
#endif
#ifdef FTM1_CH1_PIN
	  case FTM1_CH1_PIN: // PTA13, FTM1_CH1
		FTM1_C1V = cval;
    1082:	4a46      	ldr	r2, [pc, #280]	; (119c <analogWrite+0x260>)
    1084:	6013      	str	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:683
		FTM_PINCFG(FTM1_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    1086:	f44f 7251 	mov.w	r2, #836	; 0x344
    108a:	4b45      	ldr	r3, [pc, #276]	; (11a0 <analogWrite+0x264>)
    108c:	e046      	b.n	111c <analogWrite+0x1e0>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:688
		break;
#endif
#ifdef FTM2_CH0_PIN
	  case FTM2_CH0_PIN: // PTB18, FTM2_CH0
		FTM2_C0V = cval;
    108e:	4a45      	ldr	r2, [pc, #276]	; (11a4 <analogWrite+0x268>)
    1090:	6013      	str	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:689
		FTM_PINCFG(FTM2_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    1092:	f44f 7251 	mov.w	r2, #836	; 0x344
    1096:	4b44      	ldr	r3, [pc, #272]	; (11a8 <analogWrite+0x26c>)
    1098:	e040      	b.n	111c <analogWrite+0x1e0>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:694
		break;
#endif
#ifdef FTM2_CH1_PIN
	  case FTM2_CH1_PIN: // PTB19, FTM1_CH1
		FTM2_C1V = cval;
    109a:	4a44      	ldr	r2, [pc, #272]	; (11ac <analogWrite+0x270>)
    109c:	6013      	str	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:695
		FTM_PINCFG(FTM2_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    109e:	f44f 7251 	mov.w	r2, #836	; 0x344
    10a2:	4b43      	ldr	r3, [pc, #268]	; (11b0 <analogWrite+0x274>)
    10a4:	e03a      	b.n	111c <analogWrite+0x1e0>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:700
		break;
#endif
#ifdef FTM3_CH0_PIN
	  case FTM3_CH0_PIN:
		FTM3_C0V = cval;
    10a6:	4a43      	ldr	r2, [pc, #268]	; (11b4 <analogWrite+0x278>)
    10a8:	6013      	str	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:701
		FTM_PINCFG(FTM3_CH0_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    10aa:	f240 4244 	movw	r2, #1092	; 0x444
    10ae:	4b42      	ldr	r3, [pc, #264]	; (11b8 <analogWrite+0x27c>)
    10b0:	e034      	b.n	111c <analogWrite+0x1e0>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:706
		break;
#endif
#ifdef FTM3_CH1_PIN
	  case FTM3_CH1_PIN:
		FTM3_C1V = cval;
    10b2:	4a42      	ldr	r2, [pc, #264]	; (11bc <analogWrite+0x280>)
    10b4:	6013      	str	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:707
		FTM_PINCFG(FTM3_CH1_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    10b6:	f240 4244 	movw	r2, #1092	; 0x444
    10ba:	4b41      	ldr	r3, [pc, #260]	; (11c0 <analogWrite+0x284>)
    10bc:	e02e      	b.n	111c <analogWrite+0x1e0>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:712
		break;
#endif
#ifdef FTM3_CH2_PIN
	  case FTM3_CH2_PIN:
		FTM3_C2V = cval;
    10be:	4a41      	ldr	r2, [pc, #260]	; (11c4 <analogWrite+0x288>)
    10c0:	6013      	str	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:713
		FTM_PINCFG(FTM3_CH2_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    10c2:	f240 4244 	movw	r2, #1092	; 0x444
    10c6:	4b40      	ldr	r3, [pc, #256]	; (11c8 <analogWrite+0x28c>)
    10c8:	e028      	b.n	111c <analogWrite+0x1e0>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:718
		break;
#endif
#ifdef FTM3_CH3_PIN
	  case FTM3_CH3_PIN:
		FTM3_C3V = cval;
    10ca:	4a40      	ldr	r2, [pc, #256]	; (11cc <analogWrite+0x290>)
    10cc:	6013      	str	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:719
		FTM_PINCFG(FTM3_CH3_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    10ce:	f240 4244 	movw	r2, #1092	; 0x444
    10d2:	4b3f      	ldr	r3, [pc, #252]	; (11d0 <analogWrite+0x294>)
    10d4:	e022      	b.n	111c <analogWrite+0x1e0>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:724
		break;
#endif
#ifdef FTM3_CH4_PIN
	  case FTM3_CH4_PIN:
		FTM3_C4V = cval;
    10d6:	4a3f      	ldr	r2, [pc, #252]	; (11d4 <analogWrite+0x298>)
    10d8:	6013      	str	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:725
		FTM_PINCFG(FTM3_CH4_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    10da:	f44f 7251 	mov.w	r2, #836	; 0x344
    10de:	4b3e      	ldr	r3, [pc, #248]	; (11d8 <analogWrite+0x29c>)
    10e0:	e01c      	b.n	111c <analogWrite+0x1e0>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:730
		break;
#endif
#ifdef FTM3_CH5_PIN
	  case FTM3_CH5_PIN:
		FTM3_C5V = cval;
    10e2:	4a3e      	ldr	r2, [pc, #248]	; (11dc <analogWrite+0x2a0>)
    10e4:	6013      	str	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:731
		FTM_PINCFG(FTM3_CH5_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    10e6:	f44f 7251 	mov.w	r2, #836	; 0x344
    10ea:	4b3d      	ldr	r3, [pc, #244]	; (11e0 <analogWrite+0x2a4>)
    10ec:	e016      	b.n	111c <analogWrite+0x1e0>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:736
		break;
#endif
#ifdef FTM3_CH6_PIN
	  case FTM3_CH6_PIN:
		FTM3_C6V = cval;
    10ee:	4a3d      	ldr	r2, [pc, #244]	; (11e4 <analogWrite+0x2a8>)
    10f0:	6013      	str	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:737
		FTM_PINCFG(FTM3_CH6_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    10f2:	f44f 7251 	mov.w	r2, #836	; 0x344
    10f6:	4b3c      	ldr	r3, [pc, #240]	; (11e8 <analogWrite+0x2ac>)
    10f8:	e010      	b.n	111c <analogWrite+0x1e0>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:742
		break;
#endif
#ifdef FTM3_CH7_PIN
	  case FTM3_CH7_PIN:
		FTM3_C7V = cval;
    10fa:	4a3c      	ldr	r2, [pc, #240]	; (11ec <analogWrite+0x2b0>)
    10fc:	6013      	str	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:743
		FTM_PINCFG(FTM3_CH7_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    10fe:	f44f 7251 	mov.w	r2, #836	; 0x344
    1102:	4b3b      	ldr	r3, [pc, #236]	; (11f0 <analogWrite+0x2b4>)
    1104:	e00a      	b.n	111c <analogWrite+0x1e0>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:748
		break;
#endif
#ifdef TPM1_CH0_PIN
	  case TPM1_CH0_PIN:
		TPM1_C0V = cval;
    1106:	4a3b      	ldr	r2, [pc, #236]	; (11f4 <analogWrite+0x2b8>)
    1108:	6013      	str	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:749
		FTM_PINCFG(TPM1_CH0_PIN) = PORT_PCR_MUX(6) | PORT_PCR_DSE | PORT_PCR_SRE;
    110a:	f240 6244 	movw	r2, #1604	; 0x644
    110e:	4b3a      	ldr	r3, [pc, #232]	; (11f8 <analogWrite+0x2bc>)
    1110:	e004      	b.n	111c <analogWrite+0x1e0>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:754
		break;
#endif
#ifdef TPM1_CH1_PIN
	  case TPM1_CH1_PIN:
		TPM1_C1V = cval;
    1112:	4a3a      	ldr	r2, [pc, #232]	; (11fc <analogWrite+0x2c0>)
    1114:	6013      	str	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:755
		FTM_PINCFG(TPM1_CH1_PIN) = PORT_PCR_MUX(6) | PORT_PCR_DSE | PORT_PCR_SRE;
    1116:	4b3a      	ldr	r3, [pc, #232]	; (1200 <analogWrite+0x2c4>)
    1118:	f240 6244 	movw	r2, #1604	; 0x644
    111c:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:756
		break;
    111e:	bd70      	pop	{r4, r5, r6, pc}
C:\Teensy\Projects\HelloWorld/pins_teensy.c:759
#endif
	  default:
		digitalWrite(pin, (val > 127) ? HIGH : LOW);
    1120:	2a7f      	cmp	r2, #127	; 0x7f
    1122:	4620      	mov	r0, r4
    1124:	bfd4      	ite	le
    1126:	2100      	movle	r1, #0
    1128:	2101      	movgt	r1, #1
    112a:	f7ff fe57 	bl	ddc <digitalWrite>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:760
		pinMode(pin, OUTPUT);
    112e:	4620      	mov	r0, r4
    1130:	2101      	movs	r1, #1
C:\Teensy\Projects\HelloWorld/pins_teensy.c:762
	}
}
    1132:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
C:\Teensy\Projects\HelloWorld/pins_teensy.c:760
		FTM_PINCFG(TPM1_CH1_PIN) = PORT_PCR_MUX(6) | PORT_PCR_DSE | PORT_PCR_SRE;
		break;
#endif
	  default:
		digitalWrite(pin, (val > 127) ? HIGH : LOW);
		pinMode(pin, OUTPUT);
    1136:	f7ff be7f 	b.w	e38 <pinMode>
    113a:	bf00      	nop
    113c:	1fff0850 	.word	0x1fff0850
    1140:	40039008 	.word	0x40039008
    1144:	400b8008 	.word	0x400b8008
    1148:	400b9008 	.word	0x400b9008
    114c:	400c9008 	.word	0x400c9008
    1150:	40038008 	.word	0x40038008
    1154:	40038010 	.word	0x40038010
    1158:	4004b004 	.word	0x4004b004
    115c:	40038018 	.word	0x40038018
    1160:	4004b008 	.word	0x4004b008
    1164:	40038020 	.word	0x40038020
    1168:	4004b00c 	.word	0x4004b00c
    116c:	40038028 	.word	0x40038028
    1170:	4004b010 	.word	0x4004b010
    1174:	40038030 	.word	0x40038030
    1178:	4004c010 	.word	0x4004c010
    117c:	40038038 	.word	0x40038038
    1180:	4004c014 	.word	0x4004c014
    1184:	40038040 	.word	0x40038040
    1188:	4004c018 	.word	0x4004c018
    118c:	40038048 	.word	0x40038048
    1190:	4004c01c 	.word	0x4004c01c
    1194:	40039010 	.word	0x40039010
    1198:	40049030 	.word	0x40049030
    119c:	40039018 	.word	0x40039018
    11a0:	40049034 	.word	0x40049034
    11a4:	400b8010 	.word	0x400b8010
    11a8:	4004a048 	.word	0x4004a048
    11ac:	400b8018 	.word	0x400b8018
    11b0:	4004a04c 	.word	0x4004a04c
    11b4:	400b9010 	.word	0x400b9010
    11b8:	4004c000 	.word	0x4004c000
    11bc:	400b9018 	.word	0x400b9018
    11c0:	4004c004 	.word	0x4004c004
    11c4:	400b9020 	.word	0x400b9020
    11c8:	4004c008 	.word	0x4004c008
    11cc:	400b9028 	.word	0x400b9028
    11d0:	4004c00c 	.word	0x4004c00c
    11d4:	400b9030 	.word	0x400b9030
    11d8:	4004b020 	.word	0x4004b020
    11dc:	400b9038 	.word	0x400b9038
    11e0:	4004b024 	.word	0x4004b024
    11e4:	400b9040 	.word	0x400b9040
    11e8:	4004b028 	.word	0x4004b028
    11ec:	400b9048 	.word	0x400b9048
    11f0:	4004b02c 	.word	0x4004b02c
    11f4:	400c9010 	.word	0x400c9010
    11f8:	4004a000 	.word	0x4004a000
    11fc:	400c9018 	.word	0x400c9018
    1200:	4004a004 	.word	0x4004a004

00001204 <shiftOut_lsbFirst>:
shiftOut_lsbFirst():
C:\Teensy\Projects\HelloWorld/pins_teensy.c:961
                shiftOut_msbFirst(dataPin, clockPin, value);
        }
}

void shiftOut_lsbFirst(uint8_t dataPin, uint8_t clockPin, uint8_t value)
{
    1204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1208:	4607      	mov	r7, r0
    120a:	460e      	mov	r6, r1
    120c:	4690      	mov	r8, r2
    120e:	2408      	movs	r4, #8
C:\Teensy\Projects\HelloWorld/pins_teensy.c:963
        uint8_t mask;
        for (mask=0x01; mask; mask <<= 1) {
    1210:	2501      	movs	r5, #1
C:\Teensy\Projects\HelloWorld/pins_teensy.c:964 (discriminator 2)
                digitalWrite(dataPin, value & mask);
    1212:	ea05 0108 	and.w	r1, r5, r8
    1216:	4638      	mov	r0, r7
    1218:	f7ff fde0 	bl	ddc <digitalWrite>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:965 (discriminator 2)
                digitalWrite(clockPin, HIGH);
    121c:	4630      	mov	r0, r6
    121e:	2101      	movs	r1, #1
    1220:	f7ff fddc 	bl	ddc <digitalWrite>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:966 (discriminator 2)
                digitalWrite(clockPin, LOW);
    1224:	4630      	mov	r0, r6
    1226:	2100      	movs	r1, #0
    1228:	f7ff fdd8 	bl	ddc <digitalWrite>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:963 (discriminator 2)
}

void shiftOut_lsbFirst(uint8_t dataPin, uint8_t clockPin, uint8_t value)
{
        uint8_t mask;
        for (mask=0x01; mask; mask <<= 1) {
    122c:	006d      	lsls	r5, r5, #1
    122e:	3c01      	subs	r4, #1
    1230:	b2ed      	uxtb	r5, r5
    1232:	d1ee      	bne.n	1212 <shiftOut_lsbFirst+0xe>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:968
                digitalWrite(dataPin, value & mask);
                digitalWrite(clockPin, HIGH);
                digitalWrite(clockPin, LOW);
        }
}
    1234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00001238 <shiftOut_msbFirst>:
shiftOut_msbFirst():
C:\Teensy\Projects\HelloWorld/pins_teensy.c:971

void shiftOut_msbFirst(uint8_t dataPin, uint8_t clockPin, uint8_t value)
{
    1238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    123c:	4607      	mov	r7, r0
    123e:	460e      	mov	r6, r1
    1240:	4690      	mov	r8, r2
    1242:	2408      	movs	r4, #8
C:\Teensy\Projects\HelloWorld/pins_teensy.c:973
        uint8_t mask;
        for (mask=0x80; mask; mask >>= 1) {
    1244:	2580      	movs	r5, #128	; 0x80
C:\Teensy\Projects\HelloWorld/pins_teensy.c:974 (discriminator 2)
                digitalWrite(dataPin, value & mask);
    1246:	ea05 0108 	and.w	r1, r5, r8
    124a:	4638      	mov	r0, r7
    124c:	f7ff fdc6 	bl	ddc <digitalWrite>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:975 (discriminator 2)
                digitalWrite(clockPin, HIGH);
    1250:	4630      	mov	r0, r6
    1252:	2101      	movs	r1, #1
    1254:	f7ff fdc2 	bl	ddc <digitalWrite>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:976 (discriminator 2)
                digitalWrite(clockPin, LOW);
    1258:	4630      	mov	r0, r6
    125a:	2100      	movs	r1, #0
    125c:	f7ff fdbe 	bl	ddc <digitalWrite>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:973 (discriminator 2)
}

void shiftOut_msbFirst(uint8_t dataPin, uint8_t clockPin, uint8_t value)
{
        uint8_t mask;
        for (mask=0x80; mask; mask >>= 1) {
    1260:	3c01      	subs	r4, #1
    1262:	ea4f 0555 	mov.w	r5, r5, lsr #1
    1266:	d1ee      	bne.n	1246 <shiftOut_msbFirst+0xe>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:978
                digitalWrite(dataPin, value & mask);
                digitalWrite(clockPin, HIGH);
                digitalWrite(clockPin, LOW);
        }
}
    1268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000126c <_shiftOut>:
_shiftOut():
C:\Teensy\Projects\HelloWorld/pins_teensy.c:953
}


void _shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t value)
{
        if (bitOrder == LSBFIRST) {
    126c:	b912      	cbnz	r2, 1274 <_shiftOut+0x8>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:954
                shiftOut_lsbFirst(dataPin, clockPin, value);
    126e:	461a      	mov	r2, r3
    1270:	f7ff bfc8 	b.w	1204 <shiftOut_lsbFirst>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:956
        } else {
                shiftOut_msbFirst(dataPin, clockPin, value);
    1274:	461a      	mov	r2, r3
    1276:	f7ff bfdf 	b.w	1238 <shiftOut_msbFirst>

0000127a <shiftIn_lsbFirst>:
shiftIn_lsbFirst():
C:\Teensy\Projects\HelloWorld/pins_teensy.c:990
                return shiftIn_msbFirst(dataPin, clockPin);
        }
}

uint8_t shiftIn_lsbFirst(uint8_t dataPin, uint8_t clockPin)
{
    127a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    127e:	4680      	mov	r8, r0
    1280:	460f      	mov	r7, r1
    1282:	2408      	movs	r4, #8
C:\Teensy\Projects\HelloWorld/pins_teensy.c:991
        uint8_t mask, value=0;
    1284:	2500      	movs	r5, #0
C:\Teensy\Projects\HelloWorld/pins_teensy.c:992
        for (mask=0x01; mask; mask <<= 1) {
    1286:	2601      	movs	r6, #1
C:\Teensy\Projects\HelloWorld/pins_teensy.c:993
                digitalWrite(clockPin, HIGH);
    1288:	4638      	mov	r0, r7
    128a:	2101      	movs	r1, #1
    128c:	f7ff fda6 	bl	ddc <digitalWrite>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:994
                if (digitalRead(dataPin)) value |= mask;
    1290:	4640      	mov	r0, r8
    1292:	f7ff fdc3 	bl	e1c <digitalRead>
    1296:	b100      	cbz	r0, 129a <shiftIn_lsbFirst+0x20>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:994 (discriminator 1)
    1298:	4335      	orrs	r5, r6
C:\Teensy\Projects\HelloWorld/pins_teensy.c:995
                digitalWrite(clockPin, LOW);
    129a:	4638      	mov	r0, r7
    129c:	2100      	movs	r1, #0
    129e:	f7ff fd9d 	bl	ddc <digitalWrite>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:992
}

uint8_t shiftIn_lsbFirst(uint8_t dataPin, uint8_t clockPin)
{
        uint8_t mask, value=0;
        for (mask=0x01; mask; mask <<= 1) {
    12a2:	0076      	lsls	r6, r6, #1
    12a4:	3c01      	subs	r4, #1
    12a6:	b2f6      	uxtb	r6, r6
    12a8:	d1ee      	bne.n	1288 <shiftIn_lsbFirst+0xe>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:998
                digitalWrite(clockPin, HIGH);
                if (digitalRead(dataPin)) value |= mask;
                digitalWrite(clockPin, LOW);
        }
        return value;
}
    12aa:	4628      	mov	r0, r5
    12ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000012b0 <shiftIn_msbFirst>:
shiftIn_msbFirst():
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1001

uint8_t shiftIn_msbFirst(uint8_t dataPin, uint8_t clockPin)
{
    12b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    12b4:	4680      	mov	r8, r0
    12b6:	460f      	mov	r7, r1
    12b8:	2408      	movs	r4, #8
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1002
        uint8_t mask, value=0;
    12ba:	2500      	movs	r5, #0
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1003
        for (mask=0x80; mask; mask >>= 1) {
    12bc:	2680      	movs	r6, #128	; 0x80
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1004
                digitalWrite(clockPin, HIGH);
    12be:	4638      	mov	r0, r7
    12c0:	2101      	movs	r1, #1
    12c2:	f7ff fd8b 	bl	ddc <digitalWrite>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1005
                if (digitalRead(dataPin)) value |= mask;
    12c6:	4640      	mov	r0, r8
    12c8:	f7ff fda8 	bl	e1c <digitalRead>
    12cc:	b100      	cbz	r0, 12d0 <shiftIn_msbFirst+0x20>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1005 (discriminator 1)
    12ce:	4335      	orrs	r5, r6
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1006
                digitalWrite(clockPin, LOW);
    12d0:	4638      	mov	r0, r7
    12d2:	2100      	movs	r1, #0
    12d4:	f7ff fd82 	bl	ddc <digitalWrite>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1003
}

uint8_t shiftIn_msbFirst(uint8_t dataPin, uint8_t clockPin)
{
        uint8_t mask, value=0;
        for (mask=0x80; mask; mask >>= 1) {
    12d8:	3c01      	subs	r4, #1
    12da:	ea4f 0656 	mov.w	r6, r6, lsr #1
    12de:	d1ee      	bne.n	12be <shiftIn_msbFirst+0xe>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1009
                digitalWrite(clockPin, HIGH);
                if (digitalRead(dataPin)) value |= mask;
                digitalWrite(clockPin, LOW);
        }
        return value;
}
    12e0:	4628      	mov	r0, r5
    12e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000012e6 <_shiftIn>:
_shiftIn():
C:\Teensy\Projects\HelloWorld/pins_teensy.c:982
        }
}

uint8_t _shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder)
{
        if (bitOrder == LSBFIRST) {
    12e6:	b90a      	cbnz	r2, 12ec <_shiftIn+0x6>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:983
                return shiftIn_lsbFirst(dataPin, clockPin);
    12e8:	f7ff bfc7 	b.w	127a <shiftIn_lsbFirst>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:985
        } else {
                return shiftIn_msbFirst(dataPin, clockPin);
    12ec:	f7ff bfe0 	b.w	12b0 <shiftIn_msbFirst>

000012f0 <micros>:
micros():
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1022

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    12f0:	b672      	cpsid	i
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1023
	current = SYST_CVR;
    12f2:	4b0b      	ldr	r3, [pc, #44]	; (1320 <micros+0x30>)
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1025
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    12f4:	490b      	ldr	r1, [pc, #44]	; (1324 <micros+0x34>)
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1023
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    12f6:	681a      	ldr	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1024
	count = systick_millis_count;
    12f8:	4b0b      	ldr	r3, [pc, #44]	; (1328 <micros+0x38>)
    12fa:	681b      	ldr	r3, [r3, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1025
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    12fc:	6809      	ldr	r1, [r1, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1026
	__enable_irq();
    12fe:	b662      	cpsie	i
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1030
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    1300:	0149      	lsls	r1, r1, #5
    1302:	d502      	bpl.n	130a <micros+0x1a>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1030 (discriminator 1)
    1304:	2a32      	cmp	r2, #50	; 0x32
    1306:	bf88      	it	hi
    1308:	3301      	addhi	r3, #1
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1031
	current = ((F_CPU / 1000) - 1) - current;
    130a:	f5c2 32ea 	rsb	r2, r2, #119808	; 0x1d400
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1037
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    130e:	2178      	movs	r1, #120	; 0x78
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1031
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
	current = ((F_CPU / 1000) - 1) - current;
    1310:	32bf      	adds	r2, #191	; 0xbf
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1037
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    1312:	fbb2 f2f1 	udiv	r2, r2, r1
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1038
}
    1316:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    131a:	fb00 2003 	mla	r0, r0, r3, r2
    131e:	4770      	bx	lr
    1320:	e000e018 	.word	0xe000e018
    1324:	e000ed04 	.word	0xe000ed04
    1328:	1fff0b78 	.word	0x1fff0b78

0000132c <delay>:
delay():
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1041

void delay(uint32_t ms)
{
    132c:	b538      	push	{r3, r4, r5, lr}
    132e:	4604      	mov	r4, r0
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1042
	uint32_t start = micros();
    1330:	f7ff ffde 	bl	12f0 <micros>
    1334:	4605      	mov	r5, r0
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1044

	if (ms > 0) {
    1336:	b924      	cbnz	r4, 1342 <delay+0x16>
    1338:	bd38      	pop	{r3, r4, r5, pc}
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1048
		while (1) {
			while ((micros() - start) >= 1000) {
				ms--;
				if (ms == 0) return;
    133a:	3c01      	subs	r4, #1
    133c:	d00a      	beq.n	1354 <delay+0x28>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1049
				start += 1000;
    133e:	f505 757a 	add.w	r5, r5, #1000	; 0x3e8
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1046 (discriminator 1)
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    1342:	f7ff ffd5 	bl	12f0 <micros>
    1346:	1b40      	subs	r0, r0, r5
    1348:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
    134c:	d2f5      	bcs.n	133a <delay+0xe>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1051
				ms--;
				if (ms == 0) return;
				start += 1000;
			}
			yield();
    134e:	f004 f8ff 	bl	5550 <yield>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1052
		}
    1352:	e7f6      	b.n	1342 <delay+0x16>
    1354:	bd38      	pop	{r3, r4, r5, pc}

00001356 <_init_Teensyduino_internal_>:
_init_Teensyduino_internal_():
C:\Teensy\Projects\HelloWorld/pins_teensy.c:469
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{

	NVIC_ENABLE_IRQ(IRQ_PORTA);
    1356:	4b36      	ldr	r3, [pc, #216]	; (1430 <_init_Teensyduino_internal_+0xda>)
C:\Teensy\Projects\HelloWorld/pins_teensy.c:479

	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    1358:	4936      	ldr	r1, [pc, #216]	; (1434 <_init_Teensyduino_internal_+0xde>)
C:\Teensy\Projects\HelloWorld/pins_teensy.c:469
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{

	NVIC_ENABLE_IRQ(IRQ_PORTA);
    135a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
C:\Teensy\Projects\HelloWorld/pins_teensy.c:467
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    135e:	b570      	push	{r4, r5, r6, lr}
C:\Teensy\Projects\HelloWorld/pins_teensy.c:469

	NVIC_ENABLE_IRQ(IRQ_PORTA);
    1360:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:470
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    1362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1366:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:471
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    1368:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    136c:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:472
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    136e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1372:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:473
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    1374:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    1378:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:477

	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    137a:	4b2f      	ldr	r3, [pc, #188]	; (1438 <_init_Teensyduino_internal_+0xe2>)
C:\Teensy\Projects\HelloWorld/pins_teensy.c:490

	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;


	FTM3_C0SC = 0x28;
    137c:	4d2f      	ldr	r5, [pc, #188]	; (143c <_init_Teensyduino_internal_+0xe6>)
C:\Teensy\Projects\HelloWorld/pins_teensy.c:491
	FTM3_C1SC = 0x28;
    137e:	4c30      	ldr	r4, [pc, #192]	; (1440 <_init_Teensyduino_internal_+0xea>)
C:\Teensy\Projects\HelloWorld/pins_teensy.c:499
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;

	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    1380:	4e30      	ldr	r6, [pc, #192]	; (1444 <_init_Teensyduino_internal_+0xee>)
C:\Teensy\Projects\HelloWorld/pins_teensy.c:477
	NVIC_ENABLE_IRQ(IRQ_PORTD);
	NVIC_ENABLE_IRQ(IRQ_PORTE);

	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    1382:	2200      	movs	r2, #0
C:\Teensy\Projects\HelloWorld/pins_teensy.c:478
	FTM0_MOD = DEFAULT_FTM_MOD;
    1384:	f64e 70ff 	movw	r0, #61439	; 0xefff
C:\Teensy\Projects\HelloWorld/pins_teensy.c:477
	NVIC_ENABLE_IRQ(IRQ_PORTD);
	NVIC_ENABLE_IRQ(IRQ_PORTE);

	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    1388:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:478
	FTM0_MOD = DEFAULT_FTM_MOD;
    138a:	6058      	str	r0, [r3, #4]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:479
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    138c:	2328      	movs	r3, #40	; 0x28
    138e:	600b      	str	r3, [r1, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:480
	FTM0_C1SC = 0x28;
    1390:	608b      	str	r3, [r1, #8]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:481
	FTM0_C2SC = 0x28;
    1392:	610b      	str	r3, [r1, #16]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:482
	FTM0_C3SC = 0x28;
    1394:	618b      	str	r3, [r1, #24]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:483
	FTM0_C4SC = 0x28;
    1396:	620b      	str	r3, [r1, #32]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:484
	FTM0_C5SC = 0x28;
    1398:	628b      	str	r3, [r1, #40]	; 0x28
C:\Teensy\Projects\HelloWorld/pins_teensy.c:486

	FTM0_C6SC = 0x28;
    139a:	630b      	str	r3, [r1, #48]	; 0x30
C:\Teensy\Projects\HelloWorld/pins_teensy.c:487
	FTM0_C7SC = 0x28;
    139c:	638b      	str	r3, [r1, #56]	; 0x38
C:\Teensy\Projects\HelloWorld/pins_teensy.c:481
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    139e:	3110      	adds	r1, #16
C:\Teensy\Projects\HelloWorld/pins_teensy.c:492
	FTM0_C7SC = 0x28;


	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    13a0:	f501 2101 	add.w	r1, r1, #528384	; 0x81000
C:\Teensy\Projects\HelloWorld/pins_teensy.c:490

	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;


	FTM3_C0SC = 0x28;
    13a4:	602b      	str	r3, [r5, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:491
	FTM3_C1SC = 0x28;
    13a6:	6023      	str	r3, [r4, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:492
	FTM3_C2SC = 0x28;
    13a8:	600b      	str	r3, [r1, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:493
	FTM3_C3SC = 0x28;
    13aa:	608b      	str	r3, [r1, #8]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:494
	FTM3_C4SC = 0x28;
    13ac:	610b      	str	r3, [r1, #16]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:495
	FTM3_C5SC = 0x28;
    13ae:	618b      	str	r3, [r1, #24]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:496
	FTM3_C6SC = 0x28;
    13b0:	620b      	str	r3, [r1, #32]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:497
	FTM3_C7SC = 0x28;
    13b2:	628b      	str	r3, [r1, #40]	; 0x28
C:\Teensy\Projects\HelloWorld/pins_teensy.c:499

	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    13b4:	2109      	movs	r1, #9
    13b6:	6031      	str	r1, [r6, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:500
	FTM1_CNT = 0;
    13b8:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
    13bc:	3604      	adds	r6, #4
    13be:	6032      	str	r2, [r6, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:501
	FTM1_MOD = DEFAULT_FTM_MOD;
    13c0:	6070      	str	r0, [r6, #4]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:502
	FTM1_C0SC = 0x28;
    13c2:	60b3      	str	r3, [r6, #8]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:503
	FTM1_C1SC = 0x28;
    13c4:	6133      	str	r3, [r6, #16]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:504
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    13c6:	f846 1c04 	str.w	r1, [r6, #-4]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:506

	FTM2_CNT = 0;
    13ca:	f506 26fe 	add.w	r6, r6, #520192	; 0x7f000
    13ce:	6032      	str	r2, [r6, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:507
	FTM2_MOD = DEFAULT_FTM_MOD;
    13d0:	6070      	str	r0, [r6, #4]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:508
	FTM2_C0SC = 0x28;
    13d2:	60b3      	str	r3, [r6, #8]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:509
	FTM2_C1SC = 0x28;
    13d4:	6133      	str	r3, [r6, #16]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:510
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    13d6:	f846 1c04 	str.w	r1, [r6, #-4]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:512

	FTM3_CNT = 0;
    13da:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
    13de:	6032      	str	r2, [r6, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:513
	FTM3_MOD = DEFAULT_FTM_MOD;
    13e0:	6070      	str	r0, [r6, #4]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:516
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    13e2:	4819      	ldr	r0, [pc, #100]	; (1448 <_init_Teensyduino_internal_+0xf2>)
C:\Teensy\Projects\HelloWorld/pins_teensy.c:514
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);

	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    13e4:	602b      	str	r3, [r5, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:515
	FTM3_C1SC = 0x28;
    13e6:	6023      	str	r3, [r4, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:516
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    13e8:	6001      	str	r1, [r0, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:518

	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    13ea:	4918      	ldr	r1, [pc, #96]	; (144c <_init_Teensyduino_internal_+0xf6>)
    13ec:	6808      	ldr	r0, [r1, #0]
    13ee:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    13f2:	6008      	str	r0, [r1, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:519
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    13f4:	f851 0c28 	ldr.w	r0, [r1, #-40]
    13f8:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
    13fc:	f841 0c28 	str.w	r0, [r1, #-40]
    1400:	3928      	subs	r1, #40	; 0x28
C:\Teensy\Projects\HelloWorld/pins_teensy.c:520
	TPM1_CNT = 0;
    1402:	f501 2101 	add.w	r1, r1, #528384	; 0x81000
    1406:	600a      	str	r2, [r1, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:521
	TPM1_MOD = 32767;
    1408:	4a11      	ldr	r2, [pc, #68]	; (1450 <_init_Teensyduino_internal_+0xfa>)
    140a:	f647 71ff 	movw	r1, #32767	; 0x7fff
    140e:	6011      	str	r1, [r2, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:522
	TPM1_C0SC = 0x28;
    1410:	6053      	str	r3, [r2, #4]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:523
	TPM1_C1SC = 0x28;
    1412:	60d3      	str	r3, [r2, #12]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:524
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    1414:	4b0f      	ldr	r3, [pc, #60]	; (1454 <_init_Teensyduino_internal_+0xfe>)
    1416:	2208      	movs	r2, #8
    1418:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/pins_teensy.c:526

	analog_init();
    141a:	f7ff f895 	bl	548 <analog_init>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:530
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
	delay(400);
    141e:	f44f 70c8 	mov.w	r0, #400	; 0x190
    1422:	f7ff ff83 	bl	132c <delay>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:532
	usb_init();
}
    1426:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
C:\Teensy\Projects\HelloWorld/pins_teensy.c:531
	analog_init();
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
	delay(400);
	usb_init();
    142a:	f002 bcd1 	b.w	3dd0 <usb_init>
    142e:	bf00      	nop
    1430:	e000e104 	.word	0xe000e104
    1434:	4003800c 	.word	0x4003800c
    1438:	40038004 	.word	0x40038004
    143c:	400b900c 	.word	0x400b900c
    1440:	400b9014 	.word	0x400b9014
    1444:	40038000 	.word	0x40038000
    1448:	400b9000 	.word	0x400b9000
    144c:	4004802c 	.word	0x4004802c
    1450:	400c9008 	.word	0x400c9008
    1454:	400c9000 	.word	0x400c9000

00001458 <pulseIn_high>:
pulseIn_high():
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1091
#define PULSEIN_LOOPS_PER_USEC 1
#endif

#if defined(KINETISK)
uint32_t pulseIn_high(volatile uint8_t *reg, uint32_t timeout)
{
    1458:	b570      	push	{r4, r5, r6, lr}
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1092
	uint32_t timeout_count = timeout * PULSEIN_LOOPS_PER_USEC;
    145a:	2412      	movs	r4, #18
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1091
#define PULSEIN_LOOPS_PER_USEC 1
#endif

#if defined(KINETISK)
uint32_t pulseIn_high(volatile uint8_t *reg, uint32_t timeout)
{
    145c:	4605      	mov	r5, r0
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1092
	uint32_t timeout_count = timeout * PULSEIN_LOOPS_PER_USEC;
    145e:	434c      	muls	r4, r1
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1096 (discriminator 1)
	uint32_t usec_start, usec_stop;

	// wait for any previous pulse to end
	while (*reg) {
    1460:	782b      	ldrb	r3, [r5, #0]
    1462:	b12b      	cbz	r3, 1470 <pulseIn_high+0x18>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1097
		if (--timeout_count == 0) return 0;
    1464:	3c01      	subs	r4, #1
    1466:	d1fb      	bne.n	1460 <pulseIn_high+0x8>
    1468:	2000      	movs	r0, #0
    146a:	bd70      	pop	{r4, r5, r6, pc}
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1101
	}
	// wait for the pulse to start
	while (!*reg) {
		if (--timeout_count == 0) return 0;
    146c:	3c01      	subs	r4, #1
    146e:	d0fb      	beq.n	1468 <pulseIn_high+0x10>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1100 (discriminator 1)
	// wait for any previous pulse to end
	while (*reg) {
		if (--timeout_count == 0) return 0;
	}
	// wait for the pulse to start
	while (!*reg) {
    1470:	782b      	ldrb	r3, [r5, #0]
    1472:	2b00      	cmp	r3, #0
    1474:	d0fa      	beq.n	146c <pulseIn_high+0x14>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1103
		if (--timeout_count == 0) return 0;
	}
	usec_start = micros();
    1476:	f7ff ff3b 	bl	12f0 <micros>
    147a:	4606      	mov	r6, r0
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1105 (discriminator 1)
	// wait for the pulse to stop
	while (*reg) {
    147c:	782b      	ldrb	r3, [r5, #0]
    147e:	b113      	cbz	r3, 1486 <pulseIn_high+0x2e>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1106
		if (--timeout_count == 0) return 0;
    1480:	3c01      	subs	r4, #1
    1482:	d1fb      	bne.n	147c <pulseIn_high+0x24>
    1484:	e7f0      	b.n	1468 <pulseIn_high+0x10>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1108
	}
	usec_stop = micros();
    1486:	f7ff ff33 	bl	12f0 <micros>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1109
	return usec_stop - usec_start;
    148a:	1b80      	subs	r0, r0, r6
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1110
}
    148c:	bd70      	pop	{r4, r5, r6, pc}

0000148e <pulseIn_low>:
pulseIn_low():
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1113

uint32_t pulseIn_low(volatile uint8_t *reg, uint32_t timeout)
{
    148e:	b570      	push	{r4, r5, r6, lr}
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1114
	uint32_t timeout_count = timeout * PULSEIN_LOOPS_PER_USEC;
    1490:	2412      	movs	r4, #18
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1113
	usec_stop = micros();
	return usec_stop - usec_start;
}

uint32_t pulseIn_low(volatile uint8_t *reg, uint32_t timeout)
{
    1492:	4605      	mov	r5, r0
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1114
	uint32_t timeout_count = timeout * PULSEIN_LOOPS_PER_USEC;
    1494:	434c      	muls	r4, r1
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1118 (discriminator 1)
	uint32_t usec_start, usec_stop;
	
	// wait for any previous pulse to end
	while (!*reg) {
    1496:	782b      	ldrb	r3, [r5, #0]
    1498:	b92b      	cbnz	r3, 14a6 <pulseIn_low+0x18>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1119
		if (--timeout_count == 0) return 0;
    149a:	3c01      	subs	r4, #1
    149c:	d1fb      	bne.n	1496 <pulseIn_low+0x8>
    149e:	2000      	movs	r0, #0
    14a0:	bd70      	pop	{r4, r5, r6, pc}
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1123
	}
	// wait for the pulse to start
	while (*reg) {
		if (--timeout_count == 0) return 0;
    14a2:	3c01      	subs	r4, #1
    14a4:	d0fb      	beq.n	149e <pulseIn_low+0x10>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1122 (discriminator 1)
	// wait for any previous pulse to end
	while (!*reg) {
		if (--timeout_count == 0) return 0;
	}
	// wait for the pulse to start
	while (*reg) {
    14a6:	782b      	ldrb	r3, [r5, #0]
    14a8:	2b00      	cmp	r3, #0
    14aa:	d1fa      	bne.n	14a2 <pulseIn_low+0x14>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1125
		if (--timeout_count == 0) return 0;
	}
	usec_start = micros();
    14ac:	f7ff ff20 	bl	12f0 <micros>
    14b0:	4606      	mov	r6, r0
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1127 (discriminator 1)
	// wait for the pulse to stop
	while (!*reg) {
    14b2:	782b      	ldrb	r3, [r5, #0]
    14b4:	b913      	cbnz	r3, 14bc <pulseIn_low+0x2e>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1128
		if (--timeout_count == 0) return 0;
    14b6:	3c01      	subs	r4, #1
    14b8:	d1fb      	bne.n	14b2 <pulseIn_low+0x24>
    14ba:	e7f0      	b.n	149e <pulseIn_low+0x10>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1130
	}
	usec_stop = micros();
    14bc:	f7ff ff18 	bl	12f0 <micros>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1131
	return usec_stop - usec_start;
    14c0:	1b80      	subs	r0, r0, r6
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1132
}
    14c2:	bd70      	pop	{r4, r5, r6, pc}

000014c4 <pulseIn>:
pulseIn():
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1137

// TODO: an inline version should handle the common case where state is const
uint32_t pulseIn(uint8_t pin, uint8_t state, uint32_t timeout)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    14c4:	283f      	cmp	r0, #63	; 0x3f
    14c6:	d80b      	bhi.n	14e0 <pulseIn+0x1c>
    14c8:	4b06      	ldr	r3, [pc, #24]	; (14e4 <pulseIn+0x20>)
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1138
	if (state) return pulseIn_high(portInputRegister(pin), timeout);
    14ca:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
    14ce:	f500 7000 	add.w	r0, r0, #512	; 0x200
    14d2:	b111      	cbz	r1, 14da <pulseIn+0x16>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1138 (discriminator 1)
    14d4:	4611      	mov	r1, r2
    14d6:	f7ff bfbf 	b.w	1458 <pulseIn_high>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1139
	return pulseIn_low(portInputRegister(pin), timeout);;
    14da:	4611      	mov	r1, r2
    14dc:	f7ff bfd7 	b.w	148e <pulseIn_low>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:1140
}
    14e0:	2000      	movs	r0, #0
    14e2:	4770      	bx	lr
    14e4:	00009e64 	.word	0x00009e64

000014e8 <serial_begin>:
serial_begin():
C:\Teensy\Projects\HelloWorld/serial1.c:113
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART0;	// turn on clock, TODO: use bitband
    14e8:	4b26      	ldr	r3, [pc, #152]	; (1584 <serial_begin+0x9c>)
    14ea:	681a      	ldr	r2, [r3, #0]
    14ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    14f0:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial1.c:114
	rx_buffer_head = 0;
    14f2:	4b25      	ldr	r3, [pc, #148]	; (1588 <serial_begin+0xa0>)
    14f4:	2200      	movs	r2, #0
    14f6:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial1.c:115
	rx_buffer_tail = 0;
    14f8:	705a      	strb	r2, [r3, #1]
C:\Teensy\Projects\HelloWorld/serial1.c:116
	tx_buffer_head = 0;
    14fa:	709a      	strb	r2, [r3, #2]
C:\Teensy\Projects\HelloWorld/serial1.c:117
	tx_buffer_tail = 0;
    14fc:	70da      	strb	r2, [r3, #3]
C:\Teensy\Projects\HelloWorld/serial1.c:118
	transmitting = 0;
    14fe:	711a      	strb	r2, [r3, #4]
C:\Teensy\Projects\HelloWorld/serial1.c:119
	switch (rx_pin_num) {
    1500:	795b      	ldrb	r3, [r3, #5]
    1502:	2b15      	cmp	r3, #21
    1504:	d006      	beq.n	1514 <serial_begin+0x2c>
    1506:	2b1b      	cmp	r3, #27
    1508:	d008      	beq.n	151c <serial_begin+0x34>
    150a:	b95b      	cbnz	r3, 1524 <serial_begin+0x3c>
C:\Teensy\Projects\HelloWorld/serial1.c:120
		case 0:  CORE_PIN0_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    150c:	f240 3213 	movw	r2, #787	; 0x313
    1510:	4b1e      	ldr	r3, [pc, #120]	; (158c <serial_begin+0xa4>)
    1512:	e006      	b.n	1522 <serial_begin+0x3a>
C:\Teensy\Projects\HelloWorld/serial1.c:121
		case 21: CORE_PIN21_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    1514:	f240 3213 	movw	r2, #787	; 0x313
    1518:	4b1d      	ldr	r3, [pc, #116]	; (1590 <serial_begin+0xa8>)
    151a:	e002      	b.n	1522 <serial_begin+0x3a>
C:\Teensy\Projects\HelloWorld/serial1.c:126
		#if defined(KINETISL)
		case 3:  CORE_PIN3_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(2); break;
		#endif
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 27: CORE_PIN27_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    151c:	4b1d      	ldr	r3, [pc, #116]	; (1594 <serial_begin+0xac>)
    151e:	f240 3213 	movw	r2, #787	; 0x313
    1522:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial1.c:129
		#endif
	}
	switch (tx_pin_num) {
    1524:	4b1c      	ldr	r3, [pc, #112]	; (1598 <serial_begin+0xb0>)
    1526:	781b      	ldrb	r3, [r3, #0]
    1528:	2b05      	cmp	r3, #5
    152a:	d007      	beq.n	153c <serial_begin+0x54>
    152c:	2b1a      	cmp	r3, #26
    152e:	d009      	beq.n	1544 <serial_begin+0x5c>
    1530:	2b01      	cmp	r3, #1
    1532:	d10b      	bne.n	154c <serial_begin+0x64>
C:\Teensy\Projects\HelloWorld/serial1.c:130
		case 1:  CORE_PIN1_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    1534:	f44f 7251 	mov.w	r2, #836	; 0x344
    1538:	4b18      	ldr	r3, [pc, #96]	; (159c <serial_begin+0xb4>)
    153a:	e006      	b.n	154a <serial_begin+0x62>
C:\Teensy\Projects\HelloWorld/serial1.c:131
		case 5:  CORE_PIN5_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    153c:	f44f 7251 	mov.w	r2, #836	; 0x344
    1540:	4b17      	ldr	r3, [pc, #92]	; (15a0 <serial_begin+0xb8>)
    1542:	e002      	b.n	154a <serial_begin+0x62>
C:\Teensy\Projects\HelloWorld/serial1.c:136
		#if defined(KINETISL)
		case 4:  CORE_PIN4_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(2); break;
		#endif
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 26: CORE_PIN26_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    1544:	4b17      	ldr	r3, [pc, #92]	; (15a4 <serial_begin+0xbc>)
    1546:	f44f 7251 	mov.w	r2, #836	; 0x344
    154a:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial1.c:140
		#endif
	}
#if defined(HAS_KINETISK_UART0)
	UART0_BDH = (divisor >> 13) & 0x1F;
    154c:	4b16      	ldr	r3, [pc, #88]	; (15a8 <serial_begin+0xc0>)
    154e:	f3c0 3244 	ubfx	r2, r0, #13, #5
    1552:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial1.c:141
	UART0_BDL = (divisor >> 5) & 0xFF;
    1554:	f3c0 1247 	ubfx	r2, r0, #5, #8
    1558:	705a      	strb	r2, [r3, #1]
C:\Teensy\Projects\HelloWorld/serial1.c:142
	UART0_C4 = divisor & 0x1F;
    155a:	f000 001f 	and.w	r0, r0, #31
C:\Teensy\Projects\HelloWorld/serial1.c:144
#ifdef HAS_KINETISK_UART0_FIFO
	UART0_C1 = UART_C1_ILT;
    155e:	2204      	movs	r2, #4
C:\Teensy\Projects\HelloWorld/serial1.c:145
	UART0_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    1560:	2102      	movs	r1, #2
C:\Teensy\Projects\HelloWorld/serial1.c:142
		#endif
	}
#if defined(HAS_KINETISK_UART0)
	UART0_BDH = (divisor >> 13) & 0x1F;
	UART0_BDL = (divisor >> 5) & 0xFF;
	UART0_C4 = divisor & 0x1F;
    1562:	7298      	strb	r0, [r3, #10]
C:\Teensy\Projects\HelloWorld/serial1.c:144
#ifdef HAS_KINETISK_UART0_FIFO
	UART0_C1 = UART_C1_ILT;
    1564:	709a      	strb	r2, [r3, #2]
C:\Teensy\Projects\HelloWorld/serial1.c:145
	UART0_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    1566:	74d9      	strb	r1, [r3, #19]
C:\Teensy\Projects\HelloWorld/serial1.c:146
	UART0_RWFIFO = 4; // rx watermark, causes S1_RDRF to set
    1568:	755a      	strb	r2, [r3, #21]
C:\Teensy\Projects\HelloWorld/serial1.c:147
	UART0_PFIFO = UART_PFIFO_TXFE | UART_PFIFO_RXFE;
    156a:	2288      	movs	r2, #136	; 0x88
    156c:	741a      	strb	r2, [r3, #16]
C:\Teensy\Projects\HelloWorld/serial1.c:157
#elif defined(HAS_KINETISL_UART0)
	UART0_BDH = (divisor >> 8) & 0x1F;
	UART0_BDL = divisor & 0xFF;
	UART0_C1 = 0;
#endif
	UART0_C2 = C2_TX_INACTIVE;
    156e:	223c      	movs	r2, #60	; 0x3c
    1570:	70da      	strb	r2, [r3, #3]
C:\Teensy\Projects\HelloWorld/serial1.c:158
	NVIC_SET_PRIORITY(IRQ_UART0_STATUS, IRQ_PRIORITY);
    1572:	4b0e      	ldr	r3, [pc, #56]	; (15ac <serial_begin+0xc4>)
    1574:	2240      	movs	r2, #64	; 0x40
    1576:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial1.c:159
	NVIC_ENABLE_IRQ(IRQ_UART0_STATUS);
    1578:	f2a3 331f 	subw	r3, r3, #799	; 0x31f
    157c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    1580:	601a      	str	r2, [r3, #0]
    1582:	4770      	bx	lr
    1584:	40048034 	.word	0x40048034
    1588:	1fff0b7c 	.word	0x1fff0b7c
    158c:	4004a040 	.word	0x4004a040
    1590:	4004c018 	.word	0x4004c018
    1594:	4004903c 	.word	0x4004903c
    1598:	1fff0a08 	.word	0x1fff0a08
    159c:	4004a044 	.word	0x4004a044
    15a0:	4004c01c 	.word	0x4004c01c
    15a4:	40049038 	.word	0x40049038
    15a8:	4006a000 	.word	0x4006a000
    15ac:	e000e41f 	.word	0xe000e41f

000015b0 <serial_format>:
serial_format():
C:\Teensy\Projects\HelloWorld/serial1.c:166

void serial_format(uint32_t format)
{
	uint8_t c;

	c = UART0_C1;
    15b0:	4a19      	ldr	r2, [pc, #100]	; (1618 <serial_format+0x68>)
    15b2:	7893      	ldrb	r3, [r2, #2]
C:\Teensy\Projects\HelloWorld/serial1.c:167
	c = (c & ~0x13) | (format & 0x03);	// configure parity
    15b4:	f000 0103 	and.w	r1, r0, #3
    15b8:	f003 03ec 	and.w	r3, r3, #236	; 0xec
    15bc:	430b      	orrs	r3, r1
C:\Teensy\Projects\HelloWorld/serial1.c:168
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    15be:	0741      	lsls	r1, r0, #29
    15c0:	bf48      	it	mi
    15c2:	f043 0310 	orrmi.w	r3, r3, #16
C:\Teensy\Projects\HelloWorld/serial1.c:169
	UART0_C1 = c;
    15c6:	7093      	strb	r3, [r2, #2]
C:\Teensy\Projects\HelloWorld/serial1.c:170
	if ((format & 0x0F) == 0x04) UART0_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    15c8:	f000 030f 	and.w	r3, r0, #15
    15cc:	2b04      	cmp	r3, #4
C:\Teensy\Projects\HelloWorld/serial1.c:169
	uint8_t c;

	c = UART0_C1;
	c = (c & ~0x13) | (format & 0x03);	// configure parity
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
	UART0_C1 = c;
    15ce:	4912      	ldr	r1, [pc, #72]	; (1618 <serial_format+0x68>)
C:\Teensy\Projects\HelloWorld/serial1.c:170
	if ((format & 0x0F) == 0x04) UART0_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    15d0:	d103      	bne.n	15da <serial_format+0x2a>
C:\Teensy\Projects\HelloWorld/serial1.c:170 (discriminator 1)
    15d2:	798b      	ldrb	r3, [r1, #6]
    15d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    15d8:	718b      	strb	r3, [r1, #6]
C:\Teensy\Projects\HelloWorld/serial1.c:171
	c = UART0_S2 & ~0x10;
    15da:	7952      	ldrb	r2, [r2, #5]
C:\Teensy\Projects\HelloWorld/serial1.c:173
	if (format & 0x10) c |= 0x10;		// rx invert
	UART0_S2 = c;
    15dc:	4b0e      	ldr	r3, [pc, #56]	; (1618 <serial_format+0x68>)
C:\Teensy\Projects\HelloWorld/serial1.c:171
	c = UART0_C1;
	c = (c & ~0x13) | (format & 0x03);	// configure parity
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
	UART0_C1 = c;
	if ((format & 0x0F) == 0x04) UART0_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
	c = UART0_S2 & ~0x10;
    15de:	f002 02ef 	and.w	r2, r2, #239	; 0xef
C:\Teensy\Projects\HelloWorld/serial1.c:172
	if (format & 0x10) c |= 0x10;		// rx invert
    15e2:	06c1      	lsls	r1, r0, #27
    15e4:	bf48      	it	mi
    15e6:	f042 0210 	orrmi.w	r2, r2, #16
C:\Teensy\Projects\HelloWorld/serial1.c:173
	UART0_S2 = c;
    15ea:	715a      	strb	r2, [r3, #5]
C:\Teensy\Projects\HelloWorld/serial1.c:174
	c = UART0_C3 & ~0x10;
    15ec:	799a      	ldrb	r2, [r3, #6]
C:\Teensy\Projects\HelloWorld/serial1.c:175
	if (format & 0x20) c |= 0x10;		// tx invert
    15ee:	f010 0f20 	tst.w	r0, #32
C:\Teensy\Projects\HelloWorld/serial1.c:174
	UART0_C1 = c;
	if ((format & 0x0F) == 0x04) UART0_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
	c = UART0_S2 & ~0x10;
	if (format & 0x10) c |= 0x10;		// rx invert
	UART0_S2 = c;
	c = UART0_C3 & ~0x10;
    15f2:	f002 02ef 	and.w	r2, r2, #239	; 0xef
    15f6:	4619      	mov	r1, r3
C:\Teensy\Projects\HelloWorld/serial1.c:175
	if (format & 0x20) c |= 0x10;		// tx invert
    15f8:	bf18      	it	ne
    15fa:	f042 0210 	orrne.w	r2, r2, #16
C:\Teensy\Projects\HelloWorld/serial1.c:176
	UART0_C3 = c;
    15fe:	718a      	strb	r2, [r1, #6]
C:\Teensy\Projects\HelloWorld/serial1.c:185
	UART0_C4 = c;
	use9Bits = format & 0x80;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(KINETISL)
	// For T3.5/T3.6/TLC See about turning on 2 stop bit mode
	if ( format & 0x100) {
    1600:	05c2      	lsls	r2, r0, #23
C:\Teensy\Projects\HelloWorld/serial1.c:176
	c = UART0_S2 & ~0x10;
	if (format & 0x10) c |= 0x10;		// rx invert
	UART0_S2 = c;
	c = UART0_C3 & ~0x10;
	if (format & 0x20) c |= 0x10;		// tx invert
	UART0_C3 = c;
    1602:	4b05      	ldr	r3, [pc, #20]	; (1618 <serial_format+0x68>)
C:\Teensy\Projects\HelloWorld/serial1.c:185
	UART0_C4 = c;
	use9Bits = format & 0x80;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(KINETISL)
	// For T3.5/T3.6/TLC See about turning on 2 stop bit mode
	if ( format & 0x100) {
    1604:	d506      	bpl.n	1614 <serial_format+0x64>
C:\Teensy\Projects\HelloWorld/serial1.c:186
		uint8_t bdl = UART0_BDL;
    1606:	785a      	ldrb	r2, [r3, #1]
C:\Teensy\Projects\HelloWorld/serial1.c:187
		UART0_BDH |= UART_BDH_SBNS;		// Turn on 2 stop bits - was turned off by set baud
    1608:	7819      	ldrb	r1, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial1.c:186
	use9Bits = format & 0x80;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(KINETISL)
	// For T3.5/T3.6/TLC See about turning on 2 stop bit mode
	if ( format & 0x100) {
		uint8_t bdl = UART0_BDL;
    160a:	b2d2      	uxtb	r2, r2
C:\Teensy\Projects\HelloWorld/serial1.c:187
		UART0_BDH |= UART_BDH_SBNS;		// Turn on 2 stop bits - was turned off by set baud
    160c:	f041 0120 	orr.w	r1, r1, #32
    1610:	7019      	strb	r1, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial1.c:188
		UART0_BDL = bdl;		// Says BDH not acted on until BDL is written
    1612:	705a      	strb	r2, [r3, #1]
    1614:	4770      	bx	lr
    1616:	bf00      	nop
    1618:	4006a000 	.word	0x4006a000

0000161c <serial_end>:
serial_end():
C:\Teensy\Projects\HelloWorld/serial1.c:194
	}
#endif
}

void serial_end(void)
{
    161c:	b508      	push	{r3, lr}
C:\Teensy\Projects\HelloWorld/serial1.c:195
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
    161e:	4b0f      	ldr	r3, [pc, #60]	; (165c <serial_end+0x40>)
    1620:	681b      	ldr	r3, [r3, #0]
    1622:	055b      	lsls	r3, r3, #21
    1624:	d400      	bmi.n	1628 <serial_end+0xc>
    1626:	bd08      	pop	{r3, pc}
C:\Teensy\Projects\HelloWorld/serial1.c:196 (discriminator 1)
	while (transmitting) yield();  // wait for buffered data to send
    1628:	4b0d      	ldr	r3, [pc, #52]	; (1660 <serial_end+0x44>)
    162a:	7919      	ldrb	r1, [r3, #4]
    162c:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    1630:	b111      	cbz	r1, 1638 <serial_end+0x1c>
C:\Teensy\Projects\HelloWorld/serial1.c:196 (discriminator 2)
    1632:	f003 ff8d 	bl	5550 <yield>
    1636:	e7f7      	b.n	1628 <serial_end+0xc>
C:\Teensy\Projects\HelloWorld/serial1.c:197
	NVIC_DISABLE_IRQ(IRQ_UART0_STATUS);
    1638:	490a      	ldr	r1, [pc, #40]	; (1664 <serial_end+0x48>)
    163a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    163e:	6008      	str	r0, [r1, #0]
C:\Teensy\Projects\HelloWorld/serial1.c:198
	UART0_C2 = 0;
    1640:	4909      	ldr	r1, [pc, #36]	; (1668 <serial_end+0x4c>)
C:\Teensy\Projects\HelloWorld/serial1.c:199
	CORE_PIN0_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    1642:	480a      	ldr	r0, [pc, #40]	; (166c <serial_end+0x50>)
C:\Teensy\Projects\HelloWorld/serial1.c:198
void serial_end(void)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
	while (transmitting) yield();  // wait for buffered data to send
	NVIC_DISABLE_IRQ(IRQ_UART0_STATUS);
	UART0_C2 = 0;
    1644:	70ca      	strb	r2, [r1, #3]
C:\Teensy\Projects\HelloWorld/serial1.c:199
	CORE_PIN0_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    1646:	f240 1103 	movw	r1, #259	; 0x103
    164a:	6001      	str	r1, [r0, #0]
C:\Teensy\Projects\HelloWorld/serial1.c:200
	CORE_PIN1_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    164c:	6041      	str	r1, [r0, #4]
C:\Teensy\Projects\HelloWorld/serial1.c:201
	rx_buffer_head = 0;
    164e:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial1.c:202
	rx_buffer_tail = 0;
    1650:	705a      	strb	r2, [r3, #1]
C:\Teensy\Projects\HelloWorld/serial1.c:203
	if (rts_pin) rts_deassert();
    1652:	689b      	ldr	r3, [r3, #8]
    1654:	b10b      	cbz	r3, 165a <serial_end+0x3e>
C:\Teensy\Projects\HelloWorld/serial1.c:203 (discriminator 1)
    1656:	2201      	movs	r2, #1
    1658:	701a      	strb	r2, [r3, #0]
    165a:	bd08      	pop	{r3, pc}
    165c:	40048034 	.word	0x40048034
    1660:	1fff0b7c 	.word	0x1fff0b7c
    1664:	e000e180 	.word	0xe000e180
    1668:	4006a000 	.word	0x4006a000
    166c:	4004a040 	.word	0x4004a040

00001670 <serial_set_transmit_pin>:
serial_set_transmit_pin():
C:\Teensy\Projects\HelloWorld/serial1.c:207
}

void serial_set_transmit_pin(uint8_t pin)
{
    1670:	b570      	push	{r4, r5, r6, lr}
    1672:	4604      	mov	r4, r0
C:\Teensy\Projects\HelloWorld/serial1.c:208 (discriminator 1)
	while (transmitting) ;
    1674:	4d09      	ldr	r5, [pc, #36]	; (169c <serial_set_transmit_pin+0x2c>)
    1676:	792b      	ldrb	r3, [r5, #4]
    1678:	f003 06ff 	and.w	r6, r3, #255	; 0xff
    167c:	2b00      	cmp	r3, #0
    167e:	d1f9      	bne.n	1674 <serial_set_transmit_pin+0x4>
C:\Teensy\Projects\HelloWorld/serial1.c:209
	pinMode(pin, OUTPUT);
    1680:	4620      	mov	r0, r4
    1682:	2101      	movs	r1, #1
    1684:	f7ff fbd8 	bl	e38 <pinMode>
C:\Teensy\Projects\HelloWorld/serial1.c:210
	digitalWrite(pin, LOW);
    1688:	4620      	mov	r0, r4
    168a:	4631      	mov	r1, r6
    168c:	f7ff fba6 	bl	ddc <digitalWrite>
C:\Teensy\Projects\HelloWorld/serial1.c:211
	transmit_pin = portOutputRegister(pin);
    1690:	4b03      	ldr	r3, [pc, #12]	; (16a0 <serial_set_transmit_pin+0x30>)
    1692:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
    1696:	60eb      	str	r3, [r5, #12]
    1698:	bd70      	pop	{r4, r5, r6, pc}
    169a:	bf00      	nop
    169c:	1fff0b7c 	.word	0x1fff0b7c
    16a0:	00009e64 	.word	0x00009e64

000016a4 <serial_set_tx>:
serial_set_tx():
C:\Teensy\Projects\HelloWorld/serial1.c:218
	transmit_mask = digitalPinToBitMask(pin);
	#endif
}

void serial_set_tx(uint8_t pin, uint8_t opendrain)
{
    16a4:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/serial1.c:221
	uint32_t cfg;

	if (opendrain) pin |= 128;
    16a6:	b109      	cbz	r1, 16ac <serial_set_tx+0x8>
C:\Teensy\Projects\HelloWorld/serial1.c:221 (discriminator 1)
    16a8:	f040 0080 	orr.w	r0, r0, #128	; 0x80
C:\Teensy\Projects\HelloWorld/serial1.c:222
	if (pin == tx_pin_num) return;
    16ac:	4a19      	ldr	r2, [pc, #100]	; (1714 <serial_set_tx+0x70>)
    16ae:	7813      	ldrb	r3, [r2, #0]
    16b0:	4298      	cmp	r0, r3
    16b2:	4614      	mov	r4, r2
    16b4:	d02d      	beq.n	1712 <serial_set_tx+0x6e>
C:\Teensy\Projects\HelloWorld/serial1.c:223
	if ((SIM_SCGC4 & SIM_SCGC4_UART0)) {
    16b6:	4a18      	ldr	r2, [pc, #96]	; (1718 <serial_set_tx+0x74>)
    16b8:	6812      	ldr	r2, [r2, #0]
    16ba:	0552      	lsls	r2, r2, #21
    16bc:	d528      	bpl.n	1710 <serial_set_tx+0x6c>
C:\Teensy\Projects\HelloWorld/serial1.c:224
		switch (tx_pin_num & 127) {
    16be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    16c2:	2b05      	cmp	r3, #5
    16c4:	d006      	beq.n	16d4 <serial_set_tx+0x30>
    16c6:	2b1a      	cmp	r3, #26
    16c8:	d007      	beq.n	16da <serial_set_tx+0x36>
    16ca:	2b01      	cmp	r3, #1
    16cc:	d108      	bne.n	16e0 <serial_set_tx+0x3c>
C:\Teensy\Projects\HelloWorld/serial1.c:225
			case 1:  CORE_PIN1_CONFIG = 0; break; // PTB17
    16ce:	2200      	movs	r2, #0
    16d0:	4b12      	ldr	r3, [pc, #72]	; (171c <serial_set_tx+0x78>)
    16d2:	e004      	b.n	16de <serial_set_tx+0x3a>
C:\Teensy\Projects\HelloWorld/serial1.c:226
			case 5:  CORE_PIN5_CONFIG = 0; break; // PTD7
    16d4:	2200      	movs	r2, #0
    16d6:	4b12      	ldr	r3, [pc, #72]	; (1720 <serial_set_tx+0x7c>)
    16d8:	e001      	b.n	16de <serial_set_tx+0x3a>
C:\Teensy\Projects\HelloWorld/serial1.c:232
			#if defined(KINETISL)
			case 4:  CORE_PIN4_CONFIG = 0; break; // PTA2
			case 24: CORE_PIN24_CONFIG = 0; break; // PTE20
			#endif
			#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
			case 26: CORE_PIN26_CONFIG = 0; break; //PTA14
    16da:	4b12      	ldr	r3, [pc, #72]	; (1724 <serial_set_tx+0x80>)
    16dc:	2200      	movs	r2, #0
    16de:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial1.c:236
			#endif
		}
		if (opendrain) {
			cfg = PORT_PCR_DSE | PORT_PCR_ODE;
    16e0:	2900      	cmp	r1, #0
C:\Teensy\Projects\HelloWorld/serial1.c:240
		} else {
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
		}
		switch (pin & 127) {
    16e2:	f000 027f 	and.w	r2, r0, #127	; 0x7f
C:\Teensy\Projects\HelloWorld/serial1.c:236
			#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
			case 26: CORE_PIN26_CONFIG = 0; break; //PTA14
			#endif
		}
		if (opendrain) {
			cfg = PORT_PCR_DSE | PORT_PCR_ODE;
    16e6:	bf0c      	ite	eq
    16e8:	2344      	moveq	r3, #68	; 0x44
    16ea:	2360      	movne	r3, #96	; 0x60
C:\Teensy\Projects\HelloWorld/serial1.c:240
		} else {
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
		}
		switch (pin & 127) {
    16ec:	2a05      	cmp	r2, #5
    16ee:	d007      	beq.n	1700 <serial_set_tx+0x5c>
    16f0:	2a1a      	cmp	r2, #26
    16f2:	d009      	beq.n	1708 <serial_set_tx+0x64>
    16f4:	2a01      	cmp	r2, #1
    16f6:	d10b      	bne.n	1710 <serial_set_tx+0x6c>
C:\Teensy\Projects\HelloWorld/serial1.c:241
			case 1:  CORE_PIN1_CONFIG = cfg | PORT_PCR_MUX(3); break;
    16f8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    16fc:	4a07      	ldr	r2, [pc, #28]	; (171c <serial_set_tx+0x78>)
    16fe:	e006      	b.n	170e <serial_set_tx+0x6a>
C:\Teensy\Projects\HelloWorld/serial1.c:242
			case 5:  CORE_PIN5_CONFIG = cfg | PORT_PCR_MUX(3); break;
    1700:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    1704:	4a06      	ldr	r2, [pc, #24]	; (1720 <serial_set_tx+0x7c>)
    1706:	e002      	b.n	170e <serial_set_tx+0x6a>
C:\Teensy\Projects\HelloWorld/serial1.c:248
			#if defined(KINETISL)
			case 4:  CORE_PIN4_CONFIG = cfg | PORT_PCR_MUX(2); break;
			case 24: CORE_PIN24_CONFIG = cfg | PORT_PCR_MUX(4); break;
			#endif
			#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
			case 26: CORE_PIN26_CONFIG = cfg | PORT_PCR_MUX(3); break;
    1708:	4a06      	ldr	r2, [pc, #24]	; (1724 <serial_set_tx+0x80>)
    170a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    170e:	6013      	str	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial1.c:252
			#endif
		}
	}
	tx_pin_num = pin;
    1710:	7020      	strb	r0, [r4, #0]
    1712:	bd10      	pop	{r4, pc}
    1714:	1fff0a08 	.word	0x1fff0a08
    1718:	40048034 	.word	0x40048034
    171c:	4004a044 	.word	0x4004a044
    1720:	4004c01c 	.word	0x4004c01c
    1724:	40049038 	.word	0x40049038

00001728 <serial_set_rx>:
serial_set_rx():
C:\Teensy\Projects\HelloWorld/serial1.c:257
}

void serial_set_rx(uint8_t pin)
{
	if (pin == rx_pin_num) return;
    1728:	4a14      	ldr	r2, [pc, #80]	; (177c <serial_set_rx+0x54>)
    172a:	7953      	ldrb	r3, [r2, #5]
    172c:	4298      	cmp	r0, r3
    172e:	d023      	beq.n	1778 <serial_set_rx+0x50>
C:\Teensy\Projects\HelloWorld/serial1.c:258
	if ((SIM_SCGC4 & SIM_SCGC4_UART0)) {
    1730:	4913      	ldr	r1, [pc, #76]	; (1780 <serial_set_rx+0x58>)
    1732:	6809      	ldr	r1, [r1, #0]
    1734:	0549      	lsls	r1, r1, #21
    1736:	d51e      	bpl.n	1776 <serial_set_rx+0x4e>
C:\Teensy\Projects\HelloWorld/serial1.c:259
		switch (rx_pin_num) {
    1738:	2b15      	cmp	r3, #21
    173a:	d005      	beq.n	1748 <serial_set_rx+0x20>
    173c:	2b1b      	cmp	r3, #27
    173e:	d006      	beq.n	174e <serial_set_rx+0x26>
    1740:	b943      	cbnz	r3, 1754 <serial_set_rx+0x2c>
C:\Teensy\Projects\HelloWorld/serial1.c:260
			case 0:  CORE_PIN0_CONFIG = 0; break; // PTB16
    1742:	4910      	ldr	r1, [pc, #64]	; (1784 <serial_set_rx+0x5c>)
    1744:	600b      	str	r3, [r1, #0]
    1746:	e005      	b.n	1754 <serial_set_rx+0x2c>
C:\Teensy\Projects\HelloWorld/serial1.c:261
			case 21: CORE_PIN21_CONFIG = 0; break; // PTD6
    1748:	2100      	movs	r1, #0
    174a:	4b0f      	ldr	r3, [pc, #60]	; (1788 <serial_set_rx+0x60>)
    174c:	e001      	b.n	1752 <serial_set_rx+0x2a>
C:\Teensy\Projects\HelloWorld/serial1.c:267
			#if defined(KINETISL)
			case 3:  CORE_PIN3_CONFIG = 0; break; // PTA1
			case 25: CORE_PIN25_CONFIG = 0; break; // PTE21
			#endif
			#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
			case 27: CORE_PIN27_CONFIG = 0; break; // PTA15
    174e:	4b0f      	ldr	r3, [pc, #60]	; (178c <serial_set_rx+0x64>)
    1750:	2100      	movs	r1, #0
    1752:	6019      	str	r1, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial1.c:270
			#endif
		}
		switch (pin) {
    1754:	2815      	cmp	r0, #21
    1756:	d006      	beq.n	1766 <serial_set_rx+0x3e>
    1758:	281b      	cmp	r0, #27
    175a:	d008      	beq.n	176e <serial_set_rx+0x46>
    175c:	b958      	cbnz	r0, 1776 <serial_set_rx+0x4e>
C:\Teensy\Projects\HelloWorld/serial1.c:271
			case 0:  CORE_PIN0_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    175e:	f240 3113 	movw	r1, #787	; 0x313
    1762:	4b08      	ldr	r3, [pc, #32]	; (1784 <serial_set_rx+0x5c>)
    1764:	e006      	b.n	1774 <serial_set_rx+0x4c>
C:\Teensy\Projects\HelloWorld/serial1.c:272
			case 21: CORE_PIN21_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    1766:	f240 3113 	movw	r1, #787	; 0x313
    176a:	4b07      	ldr	r3, [pc, #28]	; (1788 <serial_set_rx+0x60>)
    176c:	e002      	b.n	1774 <serial_set_rx+0x4c>
C:\Teensy\Projects\HelloWorld/serial1.c:278
			#if defined(KINETISL)
			case 3:  CORE_PIN3_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(2); break;
			case 25: CORE_PIN25_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(4); break;
			#endif
			#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
			case 27: CORE_PIN27_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    176e:	4b07      	ldr	r3, [pc, #28]	; (178c <serial_set_rx+0x64>)
    1770:	f240 3113 	movw	r1, #787	; 0x313
    1774:	6019      	str	r1, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial1.c:282
			#endif
		}
	}
	rx_pin_num = pin;
    1776:	7150      	strb	r0, [r2, #5]
    1778:	4770      	bx	lr
    177a:	bf00      	nop
    177c:	1fff0b7c 	.word	0x1fff0b7c
    1780:	40048034 	.word	0x40048034
    1784:	4004a040 	.word	0x4004a040
    1788:	4004c018 	.word	0x4004c018
    178c:	4004903c 	.word	0x4004903c

00001790 <serial_set_rts>:
serial_set_rts():
C:\Teensy\Projects\HelloWorld/serial1.c:289



int serial_set_rts(uint8_t pin)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return 0;
    1790:	4a0d      	ldr	r2, [pc, #52]	; (17c8 <serial_set_rts+0x38>)
C:\Teensy\Projects\HelloWorld/serial1.c:288
}



int serial_set_rts(uint8_t pin)
{
    1792:	b538      	push	{r3, r4, r5, lr}
C:\Teensy\Projects\HelloWorld/serial1.c:289
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return 0;
    1794:	6814      	ldr	r4, [r2, #0]
    1796:	f414 6280 	ands.w	r2, r4, #1024	; 0x400
    179a:	f04f 0400 	mov.w	r4, #0
    179e:	d010      	beq.n	17c2 <serial_set_rts+0x32>
C:\Teensy\Projects\HelloWorld/serial1.c:290
	if (pin < CORE_NUM_DIGITAL) {
    17a0:	283f      	cmp	r0, #63	; 0x3f
    17a2:	4d0a      	ldr	r5, [pc, #40]	; (17cc <serial_set_rts+0x3c>)
    17a4:	d80a      	bhi.n	17bc <serial_set_rts+0x2c>
C:\Teensy\Projects\HelloWorld/serial1.c:291
		rts_pin = portOutputRegister(pin);
    17a6:	4a0a      	ldr	r2, [pc, #40]	; (17d0 <serial_set_rts+0x40>)
C:\Teensy\Projects\HelloWorld/serial1.c:295
		#if defined(KINETISL)
		rts_mask = digitalPinToBitMask(pin);
		#endif
		pinMode(pin, OUTPUT);
    17a8:	2101      	movs	r1, #1
C:\Teensy\Projects\HelloWorld/serial1.c:291

int serial_set_rts(uint8_t pin)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return 0;
	if (pin < CORE_NUM_DIGITAL) {
		rts_pin = portOutputRegister(pin);
    17aa:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
    17ae:	60ab      	str	r3, [r5, #8]
C:\Teensy\Projects\HelloWorld/serial1.c:295
		#if defined(KINETISL)
		rts_mask = digitalPinToBitMask(pin);
		#endif
		pinMode(pin, OUTPUT);
    17b0:	f7ff fb42 	bl	e38 <pinMode>
C:\Teensy\Projects\HelloWorld/serial1.c:296
		rts_assert();
    17b4:	68ab      	ldr	r3, [r5, #8]
    17b6:	701c      	strb	r4, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial1.c:312
		UART0_MODEM &= ~UART_MODEM_RXRTSE;
		return 0;
	}
	UART0_MODEM |= UART_MODEM_RXRTSE;
*/
	return 1;
    17b8:	2001      	movs	r0, #1
    17ba:	bd38      	pop	{r3, r4, r5, pc}
C:\Teensy\Projects\HelloWorld/serial1.c:298
		rts_mask = digitalPinToBitMask(pin);
		#endif
		pinMode(pin, OUTPUT);
		rts_assert();
	} else {
		rts_pin = NULL;
    17bc:	60ac      	str	r4, [r5, #8]
C:\Teensy\Projects\HelloWorld/serial1.c:299
		return 0;
    17be:	4620      	mov	r0, r4
    17c0:	bd38      	pop	{r3, r4, r5, pc}
C:\Teensy\Projects\HelloWorld/serial1.c:289



int serial_set_rts(uint8_t pin)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return 0;
    17c2:	4610      	mov	r0, r2
C:\Teensy\Projects\HelloWorld/serial1.c:313
		return 0;
	}
	UART0_MODEM |= UART_MODEM_RXRTSE;
*/
	return 1;
}
    17c4:	bd38      	pop	{r3, r4, r5, pc}
    17c6:	bf00      	nop
    17c8:	40048034 	.word	0x40048034
    17cc:	1fff0b7c 	.word	0x1fff0b7c
    17d0:	00009e64 	.word	0x00009e64

000017d4 <serial_set_cts>:
serial_set_cts():
C:\Teensy\Projects\HelloWorld/serial1.c:318

int serial_set_cts(uint8_t pin)
{
#if defined(KINETISK)
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return 0;
    17d4:	4b0e      	ldr	r3, [pc, #56]	; (1810 <serial_set_cts+0x3c>)
    17d6:	681b      	ldr	r3, [r3, #0]
    17d8:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
    17dc:	d016      	beq.n	180c <serial_set_cts+0x38>
C:\Teensy\Projects\HelloWorld/serial1.c:319
	if (pin == 18) {
    17de:	2812      	cmp	r0, #18
    17e0:	4b0c      	ldr	r3, [pc, #48]	; (1814 <serial_set_cts+0x40>)
    17e2:	d103      	bne.n	17ec <serial_set_cts+0x18>
C:\Teensy\Projects\HelloWorld/serial1.c:320
		CORE_PIN18_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    17e4:	f240 3102 	movw	r1, #770	; 0x302
    17e8:	4a0b      	ldr	r2, [pc, #44]	; (1818 <serial_set_cts+0x44>)
    17ea:	e004      	b.n	17f6 <serial_set_cts+0x22>
C:\Teensy\Projects\HelloWorld/serial1.c:321
	} else if (pin == 20) {
    17ec:	2814      	cmp	r0, #20
    17ee:	d109      	bne.n	1804 <serial_set_cts+0x30>
C:\Teensy\Projects\HelloWorld/serial1.c:322
		CORE_PIN20_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    17f0:	4a0a      	ldr	r2, [pc, #40]	; (181c <serial_set_cts+0x48>)
    17f2:	f240 3102 	movw	r1, #770	; 0x302
    17f6:	6011      	str	r1, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial1.c:327
	} else {
		UART0_MODEM &= ~UART_MODEM_TXCTSE;
		return 0;
	}
	UART0_MODEM |= UART_MODEM_TXCTSE;
    17f8:	7b5a      	ldrb	r2, [r3, #13]
    17fa:	f042 0201 	orr.w	r2, r2, #1
    17fe:	735a      	strb	r2, [r3, #13]
C:\Teensy\Projects\HelloWorld/serial1.c:328
	return 1;
    1800:	2001      	movs	r0, #1
    1802:	4770      	bx	lr
C:\Teensy\Projects\HelloWorld/serial1.c:324
	if (pin == 18) {
		CORE_PIN18_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
	} else if (pin == 20) {
		CORE_PIN20_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
	} else {
		UART0_MODEM &= ~UART_MODEM_TXCTSE;
    1804:	7b5a      	ldrb	r2, [r3, #13]
    1806:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    180a:	735a      	strb	r2, [r3, #13]
C:\Teensy\Projects\HelloWorld/serial1.c:325
		return 0;
    180c:	2000      	movs	r0, #0
    180e:	4770      	bx	lr
    1810:	40048034 	.word	0x40048034
    1814:	4006a000 	.word	0x4006a000
    1818:	4004a00c 	.word	0x4004a00c
    181c:	4004c014 	.word	0x4004c014

00001820 <serial_putchar>:
serial_putchar():
C:\Teensy\Projects\HelloWorld/serial1.c:335
	return 0;
#endif
}

void serial_putchar(uint32_t c)
{
    1820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:\Teensy\Projects\HelloWorld/serial1.c:338
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
    1822:	4b1b      	ldr	r3, [pc, #108]	; (1890 <serial_putchar+0x70>)
    1824:	681b      	ldr	r3, [r3, #0]
    1826:	055a      	lsls	r2, r3, #21
C:\Teensy\Projects\HelloWorld/serial1.c:335
	return 0;
#endif
}

void serial_putchar(uint32_t c)
{
    1828:	4607      	mov	r7, r0
C:\Teensy\Projects\HelloWorld/serial1.c:338
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
    182a:	d530      	bpl.n	188e <serial_putchar+0x6e>
C:\Teensy\Projects\HelloWorld/serial1.c:339
	if (transmit_pin) transmit_assert();
    182c:	4e19      	ldr	r6, [pc, #100]	; (1894 <serial_putchar+0x74>)
    182e:	68f3      	ldr	r3, [r6, #12]
    1830:	b10b      	cbz	r3, 1836 <serial_putchar+0x16>
    1832:	2201      	movs	r2, #1
    1834:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial1.c:340
	head = tx_buffer_head;
    1836:	78b4      	ldrb	r4, [r6, #2]
C:\Teensy\Projects\HelloWorld/serial1.c:341
	if (++head >= SERIAL1_TX_BUFFER_SIZE) head = 0;
    1838:	3401      	adds	r4, #1
    183a:	2c40      	cmp	r4, #64	; 0x40
    183c:	bf28      	it	cs
    183e:	2400      	movcs	r4, #0
C:\Teensy\Projects\HelloWorld/serial1.c:342
	while (tx_buffer_tail == head) {
    1840:	78f3      	ldrb	r3, [r6, #3]
    1842:	4d14      	ldr	r5, [pc, #80]	; (1894 <serial_putchar+0x74>)
    1844:	42a3      	cmp	r3, r4
    1846:	d118      	bne.n	187a <serial_putchar+0x5a>
C:\Teensy\Projects\HelloWorld/serial1.c:343
		int priority = nvic_execution_priority();
    1848:	f7ff f826 	bl	898 <nvic_execution_priority>
C:\Teensy\Projects\HelloWorld/serial1.c:344
		if (priority <= IRQ_PRIORITY) {
    184c:	2840      	cmp	r0, #64	; 0x40
    184e:	dc0f      	bgt.n	1870 <serial_putchar+0x50>
C:\Teensy\Projects\HelloWorld/serial1.c:345
			if ((UART0_S1 & UART_S1_TDRE)) {
    1850:	4a11      	ldr	r2, [pc, #68]	; (1898 <serial_putchar+0x78>)
    1852:	7913      	ldrb	r3, [r2, #4]
    1854:	061b      	lsls	r3, r3, #24
    1856:	d5f3      	bpl.n	1840 <serial_putchar+0x20>
C:\Teensy\Projects\HelloWorld/serial1.c:346
				uint32_t tail = tx_buffer_tail;
    1858:	78eb      	ldrb	r3, [r5, #3]
C:\Teensy\Projects\HelloWorld/serial1.c:347
				if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    185a:	3301      	adds	r3, #1
    185c:	2b40      	cmp	r3, #64	; 0x40
    185e:	bf28      	it	cs
    1860:	2300      	movcs	r3, #0
C:\Teensy\Projects\HelloWorld/serial1.c:348
				n = tx_buffer[tail];
    1862:	18f1      	adds	r1, r6, r3
C:\Teensy\Projects\HelloWorld/serial1.c:351
				if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
				UART0_D = n;
				tx_buffer_tail = tail;
    1864:	b2db      	uxtb	r3, r3
C:\Teensy\Projects\HelloWorld/serial1.c:348
		int priority = nvic_execution_priority();
		if (priority <= IRQ_PRIORITY) {
			if ((UART0_S1 & UART_S1_TDRE)) {
				uint32_t tail = tx_buffer_tail;
				if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
				n = tx_buffer[tail];
    1866:	7c09      	ldrb	r1, [r1, #16]
    1868:	b2c9      	uxtb	r1, r1
C:\Teensy\Projects\HelloWorld/serial1.c:350
				if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
				UART0_D = n;
    186a:	71d1      	strb	r1, [r2, #7]
C:\Teensy\Projects\HelloWorld/serial1.c:351
				tx_buffer_tail = tail;
    186c:	70f3      	strb	r3, [r6, #3]
    186e:	e7e7      	b.n	1840 <serial_putchar+0x20>
C:\Teensy\Projects\HelloWorld/serial1.c:353
			}
		} else if (priority >= 256) {
    1870:	28ff      	cmp	r0, #255	; 0xff
    1872:	dde5      	ble.n	1840 <serial_putchar+0x20>
C:\Teensy\Projects\HelloWorld/serial1.c:354
			yield();
    1874:	f003 fe6c 	bl	5550 <yield>
    1878:	e7e2      	b.n	1840 <serial_putchar+0x20>
C:\Teensy\Projects\HelloWorld/serial1.c:357
		}
	}
	tx_buffer[head] = c;
    187a:	192b      	adds	r3, r5, r4
    187c:	b2ff      	uxtb	r7, r7
    187e:	741f      	strb	r7, [r3, #16]
C:\Teensy\Projects\HelloWorld/serial1.c:358
	transmitting = 1;
    1880:	2301      	movs	r3, #1
    1882:	712b      	strb	r3, [r5, #4]
C:\Teensy\Projects\HelloWorld/serial1.c:360
	tx_buffer_head = head;
	UART0_C2 = C2_TX_ACTIVE;
    1884:	4b04      	ldr	r3, [pc, #16]	; (1898 <serial_putchar+0x78>)
C:\Teensy\Projects\HelloWorld/serial1.c:359
			yield();
		}
	}
	tx_buffer[head] = c;
	transmitting = 1;
	tx_buffer_head = head;
    1886:	b2e4      	uxtb	r4, r4
C:\Teensy\Projects\HelloWorld/serial1.c:360
	UART0_C2 = C2_TX_ACTIVE;
    1888:	22bc      	movs	r2, #188	; 0xbc
C:\Teensy\Projects\HelloWorld/serial1.c:359
			yield();
		}
	}
	tx_buffer[head] = c;
	transmitting = 1;
	tx_buffer_head = head;
    188a:	70ac      	strb	r4, [r5, #2]
C:\Teensy\Projects\HelloWorld/serial1.c:360
	UART0_C2 = C2_TX_ACTIVE;
    188c:	70da      	strb	r2, [r3, #3]
    188e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1890:	40048034 	.word	0x40048034
    1894:	1fff0b7c 	.word	0x1fff0b7c
    1898:	4006a000 	.word	0x4006a000

0000189c <serial_phex1>:
serial_phex1():
C:\Teensy\Projects\HelloWorld/serial1.c:601
	}
}

static void serial_phex1(uint32_t n)
{
	n &= 15;
    189c:	f000 000f 	and.w	r0, r0, #15
C:\Teensy\Projects\HelloWorld/serial1.c:602
	if (n < 10) {
    18a0:	2809      	cmp	r0, #9
C:\Teensy\Projects\HelloWorld/serial1.c:603
		serial_putchar('0' + n);
    18a2:	bf94      	ite	ls
    18a4:	3030      	addls	r0, #48	; 0x30
C:\Teensy\Projects\HelloWorld/serial1.c:605
	} else {
		serial_putchar('A' - 10 + n);
    18a6:	3037      	addhi	r0, #55	; 0x37
    18a8:	f7ff bfba 	b.w	1820 <serial_putchar>

000018ac <serial_write>:
serial_write():
C:\Teensy\Projects\HelloWorld/serial1.c:365
	UART0_C2 = C2_TX_ACTIVE;
}

#ifdef HAS_KINETISK_UART0_FIFO
void serial_write(const void *buf, unsigned int count)
{
    18ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
C:\Teensy\Projects\HelloWorld/serial1.c:370
	const uint8_t *p = (const uint8_t *)buf;
	const uint8_t *end = p + count;
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
    18b0:	4b23      	ldr	r3, [pc, #140]	; (1940 <serial_write+0x94>)
    18b2:	681b      	ldr	r3, [r3, #0]
    18b4:	055a      	lsls	r2, r3, #21
C:\Teensy\Projects\HelloWorld/serial1.c:365
	UART0_C2 = C2_TX_ACTIVE;
}

#ifdef HAS_KINETISK_UART0_FIFO
void serial_write(const void *buf, unsigned int count)
{
    18b6:	4607      	mov	r7, r0
    18b8:	4689      	mov	r9, r1
C:\Teensy\Projects\HelloWorld/serial1.c:370
	const uint8_t *p = (const uint8_t *)buf;
	const uint8_t *end = p + count;
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
    18ba:	d53e      	bpl.n	193a <serial_write+0x8e>
C:\Teensy\Projects\HelloWorld/serial1.c:371
	if (transmit_pin) transmit_assert();
    18bc:	4c21      	ldr	r4, [pc, #132]	; (1944 <serial_write+0x98>)
    18be:	68e3      	ldr	r3, [r4, #12]
    18c0:	b10b      	cbz	r3, 18c6 <serial_write+0x1a>
C:\Teensy\Projects\HelloWorld/serial1.c:371 (discriminator 1)
    18c2:	2201      	movs	r2, #1
    18c4:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial1.c:382 (discriminator 1)
			do {
				int priority = nvic_execution_priority();
				if (priority <= IRQ_PRIORITY) {
					if ((UART0_S1 & UART_S1_TDRE)) {
						uint32_t tail = tx_buffer_tail;
						if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    18c6:	463e      	mov	r6, r7
C:\Teensy\Projects\HelloWorld/serial1.c:367 (discriminator 1)

#ifdef HAS_KINETISK_UART0_FIFO
void serial_write(const void *buf, unsigned int count)
{
	const uint8_t *p = (const uint8_t *)buf;
	const uint8_t *end = p + count;
    18c8:	eb07 0309 	add.w	r3, r7, r9
C:\Teensy\Projects\HelloWorld/serial1.c:372 (discriminator 1)
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
	if (transmit_pin) transmit_assert();
	while (p < end) {
    18cc:	429e      	cmp	r6, r3
    18ce:	d231      	bcs.n	1934 <serial_write+0x88>
C:\Teensy\Projects\HelloWorld/serial1.c:373
		head = tx_buffer_head;
    18d0:	78a5      	ldrb	r5, [r4, #2]
C:\Teensy\Projects\HelloWorld/serial1.c:375
		if (++head >= SERIAL1_TX_BUFFER_SIZE) head = 0;
		if (tx_buffer_tail == head) {
    18d2:	f894 8003 	ldrb.w	r8, [r4, #3]
C:\Teensy\Projects\HelloWorld/serial1.c:374

	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
	if (transmit_pin) transmit_assert();
	while (p < end) {
		head = tx_buffer_head;
		if (++head >= SERIAL1_TX_BUFFER_SIZE) head = 0;
    18d6:	3501      	adds	r5, #1
    18d8:	2d40      	cmp	r5, #64	; 0x40
    18da:	bf28      	it	cs
    18dc:	2500      	movcs	r5, #0
C:\Teensy\Projects\HelloWorld/serial1.c:375
		if (tx_buffer_tail == head) {
    18de:	fa5f f888 	uxtb.w	r8, r8
    18e2:	45a8      	cmp	r8, r5
    18e4:	d11d      	bne.n	1922 <serial_write+0x76>
C:\Teensy\Projects\HelloWorld/serial1.c:376
			UART0_C2 = C2_TX_ACTIVE;
    18e6:	4b18      	ldr	r3, [pc, #96]	; (1948 <serial_write+0x9c>)
    18e8:	22bc      	movs	r2, #188	; 0xbc
    18ea:	70da      	strb	r2, [r3, #3]
C:\Teensy\Projects\HelloWorld/serial1.c:378
			do {
				int priority = nvic_execution_priority();
    18ec:	f7fe ffd4 	bl	898 <nvic_execution_priority>
C:\Teensy\Projects\HelloWorld/serial1.c:379
				if (priority <= IRQ_PRIORITY) {
    18f0:	2840      	cmp	r0, #64	; 0x40
    18f2:	dc0f      	bgt.n	1914 <serial_write+0x68>
C:\Teensy\Projects\HelloWorld/serial1.c:380
					if ((UART0_S1 & UART_S1_TDRE)) {
    18f4:	4a14      	ldr	r2, [pc, #80]	; (1948 <serial_write+0x9c>)
    18f6:	7913      	ldrb	r3, [r2, #4]
    18f8:	061b      	lsls	r3, r3, #24
    18fa:	d50f      	bpl.n	191c <serial_write+0x70>
C:\Teensy\Projects\HelloWorld/serial1.c:381
						uint32_t tail = tx_buffer_tail;
    18fc:	78e3      	ldrb	r3, [r4, #3]
C:\Teensy\Projects\HelloWorld/serial1.c:382
						if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    18fe:	3301      	adds	r3, #1
    1900:	2b40      	cmp	r3, #64	; 0x40
    1902:	bf28      	it	cs
    1904:	2300      	movcs	r3, #0
C:\Teensy\Projects\HelloWorld/serial1.c:383
						n = tx_buffer[tail];
    1906:	18e1      	adds	r1, r4, r3
C:\Teensy\Projects\HelloWorld/serial1.c:386
						if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
						UART0_D = n;
						tx_buffer_tail = tail;
    1908:	b2db      	uxtb	r3, r3
C:\Teensy\Projects\HelloWorld/serial1.c:383
				int priority = nvic_execution_priority();
				if (priority <= IRQ_PRIORITY) {
					if ((UART0_S1 & UART_S1_TDRE)) {
						uint32_t tail = tx_buffer_tail;
						if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
						n = tx_buffer[tail];
    190a:	7c09      	ldrb	r1, [r1, #16]
    190c:	b2c9      	uxtb	r1, r1
C:\Teensy\Projects\HelloWorld/serial1.c:385
						if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
						UART0_D = n;
    190e:	71d1      	strb	r1, [r2, #7]
C:\Teensy\Projects\HelloWorld/serial1.c:386
						tx_buffer_tail = tail;
    1910:	70e3      	strb	r3, [r4, #3]
    1912:	e003      	b.n	191c <serial_write+0x70>
C:\Teensy\Projects\HelloWorld/serial1.c:388
					}
				} else if (priority >= 256) {
    1914:	28ff      	cmp	r0, #255	; 0xff
    1916:	dd01      	ble.n	191c <serial_write+0x70>
C:\Teensy\Projects\HelloWorld/serial1.c:389
					yield();
    1918:	f003 fe1a 	bl	5550 <yield>
C:\Teensy\Projects\HelloWorld/serial1.c:391
				}
			} while (tx_buffer_tail == head);
    191c:	78e3      	ldrb	r3, [r4, #3]
    191e:	4543      	cmp	r3, r8
    1920:	d0e4      	beq.n	18ec <serial_write+0x40>
C:\Teensy\Projects\HelloWorld/serial1.c:393
		}
		tx_buffer[head] = *p++;
    1922:	1963      	adds	r3, r4, r5
    1924:	f816 2b01 	ldrb.w	r2, [r6], #1
    1928:	741a      	strb	r2, [r3, #16]
C:\Teensy\Projects\HelloWorld/serial1.c:395
		transmitting = 1;
		tx_buffer_head = head;
    192a:	b2ed      	uxtb	r5, r5
C:\Teensy\Projects\HelloWorld/serial1.c:394
					yield();
				}
			} while (tx_buffer_tail == head);
		}
		tx_buffer[head] = *p++;
		transmitting = 1;
    192c:	2301      	movs	r3, #1
    192e:	7123      	strb	r3, [r4, #4]
C:\Teensy\Projects\HelloWorld/serial1.c:395
		tx_buffer_head = head;
    1930:	70a5      	strb	r5, [r4, #2]
    1932:	e7c9      	b.n	18c8 <serial_write+0x1c>
C:\Teensy\Projects\HelloWorld/serial1.c:397
	}
	UART0_C2 = C2_TX_ACTIVE;
    1934:	4b04      	ldr	r3, [pc, #16]	; (1948 <serial_write+0x9c>)
    1936:	22bc      	movs	r2, #188	; 0xbc
    1938:	70da      	strb	r2, [r3, #3]
    193a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    193e:	bf00      	nop
    1940:	40048034 	.word	0x40048034
    1944:	1fff0b7c 	.word	0x1fff0b7c
    1948:	4006a000 	.word	0x4006a000

0000194c <serial_flush>:
serial_flush():
C:\Teensy\Projects\HelloWorld/serial1.c:408
	while (count-- > 0) serial_putchar(*p++);
}
#endif

void serial_flush(void)
{
    194c:	b508      	push	{r3, lr}
C:\Teensy\Projects\HelloWorld/serial1.c:409 (discriminator 1)
	while (transmitting) yield(); // wait
    194e:	4b03      	ldr	r3, [pc, #12]	; (195c <serial_flush+0x10>)
    1950:	791b      	ldrb	r3, [r3, #4]
    1952:	b113      	cbz	r3, 195a <serial_flush+0xe>
C:\Teensy\Projects\HelloWorld/serial1.c:409 (discriminator 2)
    1954:	f003 fdfc 	bl	5550 <yield>
    1958:	e7f9      	b.n	194e <serial_flush+0x2>
C:\Teensy\Projects\HelloWorld/serial1.c:410
}
    195a:	bd08      	pop	{r3, pc}
    195c:	1fff0b7c 	.word	0x1fff0b7c

00001960 <serial_write_buffer_free>:
serial_write_buffer_free():
C:\Teensy\Projects\HelloWorld/serial1.c:416

int serial_write_buffer_free(void)
{
	uint32_t head, tail;

	head = tx_buffer_head;
    1960:	4a05      	ldr	r2, [pc, #20]	; (1978 <serial_write_buffer_free+0x18>)
    1962:	7893      	ldrb	r3, [r2, #2]
C:\Teensy\Projects\HelloWorld/serial1.c:417
	tail = tx_buffer_tail;
    1964:	78d0      	ldrb	r0, [r2, #3]
C:\Teensy\Projects\HelloWorld/serial1.c:416

int serial_write_buffer_free(void)
{
	uint32_t head, tail;

	head = tx_buffer_head;
    1966:	b2db      	uxtb	r3, r3
C:\Teensy\Projects\HelloWorld/serial1.c:417
	tail = tx_buffer_tail;
    1968:	b2c0      	uxtb	r0, r0
C:\Teensy\Projects\HelloWorld/serial1.c:418
	if (head >= tail) return SERIAL1_TX_BUFFER_SIZE - 1 - head + tail;
    196a:	4283      	cmp	r3, r0
    196c:	bf2c      	ite	cs
    196e:	303f      	addcs	r0, #63	; 0x3f
C:\Teensy\Projects\HelloWorld/serial1.c:419
	return tail - head - 1;
    1970:	f100 30ff 	addcc.w	r0, r0, #4294967295
    1974:	1ac0      	subs	r0, r0, r3
C:\Teensy\Projects\HelloWorld/serial1.c:420
}
    1976:	4770      	bx	lr
    1978:	1fff0b7c 	.word	0x1fff0b7c

0000197c <serial_available>:
serial_available():
C:\Teensy\Projects\HelloWorld/serial1.c:426

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    197c:	4a04      	ldr	r2, [pc, #16]	; (1990 <serial_available+0x14>)
    197e:	7810      	ldrb	r0, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial1.c:427
	tail = rx_buffer_tail;
    1980:	7853      	ldrb	r3, [r2, #1]
C:\Teensy\Projects\HelloWorld/serial1.c:426

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    1982:	b2c0      	uxtb	r0, r0
C:\Teensy\Projects\HelloWorld/serial1.c:427
	tail = rx_buffer_tail;
    1984:	b2db      	uxtb	r3, r3
C:\Teensy\Projects\HelloWorld/serial1.c:428
	if (head >= tail) return head - tail;
    1986:	4298      	cmp	r0, r3
C:\Teensy\Projects\HelloWorld/serial1.c:429
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    1988:	bf38      	it	cc
    198a:	3040      	addcc	r0, #64	; 0x40
    198c:	1ac0      	subs	r0, r0, r3
C:\Teensy\Projects\HelloWorld/serial1.c:430
}
    198e:	4770      	bx	lr
    1990:	1fff0b7c 	.word	0x1fff0b7c

00001994 <serial_getchar>:
serial_getchar():
C:\Teensy\Projects\HelloWorld/serial1.c:433

int serial_getchar(void)
{
    1994:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/serial1.c:437
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    1996:	4a0f      	ldr	r2, [pc, #60]	; (19d4 <serial_getchar+0x40>)
    1998:	7811      	ldrb	r1, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial1.c:438
	tail = rx_buffer_tail;
    199a:	7853      	ldrb	r3, [r2, #1]
C:\Teensy\Projects\HelloWorld/serial1.c:437
int serial_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    199c:	b2c9      	uxtb	r1, r1
C:\Teensy\Projects\HelloWorld/serial1.c:438
	tail = rx_buffer_tail;
    199e:	b2db      	uxtb	r3, r3
C:\Teensy\Projects\HelloWorld/serial1.c:439
	if (head == tail) return -1;
    19a0:	4299      	cmp	r1, r3
    19a2:	d014      	beq.n	19ce <serial_getchar+0x3a>
C:\Teensy\Projects\HelloWorld/serial1.c:440
	if (++tail >= SERIAL1_RX_BUFFER_SIZE) tail = 0;
    19a4:	3301      	adds	r3, #1
    19a6:	2b40      	cmp	r3, #64	; 0x40
    19a8:	bf28      	it	cs
    19aa:	2300      	movcs	r3, #0
C:\Teensy\Projects\HelloWorld/serial1.c:441
	c = rx_buffer[tail];
    19ac:	18d0      	adds	r0, r2, r3
C:\Teensy\Projects\HelloWorld/serial1.c:442
	rx_buffer_tail = tail;
    19ae:	b2dc      	uxtb	r4, r3
C:\Teensy\Projects\HelloWorld/serial1.c:441

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL1_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
    19b0:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
C:\Teensy\Projects\HelloWorld/serial1.c:442
	rx_buffer_tail = tail;
    19b4:	7054      	strb	r4, [r2, #1]
C:\Teensy\Projects\HelloWorld/serial1.c:443
	if (rts_pin) {
    19b6:	6892      	ldr	r2, [r2, #8]
C:\Teensy\Projects\HelloWorld/serial1.c:441

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL1_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
    19b8:	b2c0      	uxtb	r0, r0
C:\Teensy\Projects\HelloWorld/serial1.c:443
	rx_buffer_tail = tail;
	if (rts_pin) {
    19ba:	b152      	cbz	r2, 19d2 <serial_getchar+0x3e>
C:\Teensy\Projects\HelloWorld/serial1.c:445
		int avail;
		if (head >= tail) avail = head - tail;
    19bc:	4299      	cmp	r1, r3
C:\Teensy\Projects\HelloWorld/serial1.c:446
		else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    19be:	bf38      	it	cc
    19c0:	3140      	addcc	r1, #64	; 0x40
    19c2:	1acb      	subs	r3, r1, r3
C:\Teensy\Projects\HelloWorld/serial1.c:447
		if (avail <= RTS_LOW_WATERMARK) rts_assert();
    19c4:	2b1a      	cmp	r3, #26
    19c6:	dc04      	bgt.n	19d2 <serial_getchar+0x3e>
C:\Teensy\Projects\HelloWorld/serial1.c:447 (discriminator 1)
    19c8:	2300      	movs	r3, #0
    19ca:	7013      	strb	r3, [r2, #0]
    19cc:	bd10      	pop	{r4, pc}
C:\Teensy\Projects\HelloWorld/serial1.c:439
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    19ce:	f04f 30ff 	mov.w	r0, #4294967295
C:\Teensy\Projects\HelloWorld/serial1.c:450
		if (head >= tail) avail = head - tail;
		else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
		if (avail <= RTS_LOW_WATERMARK) rts_assert();
	}
	return c;
}
    19d2:	bd10      	pop	{r4, pc}
    19d4:	1fff0b7c 	.word	0x1fff0b7c

000019d8 <serial_peek>:
serial_peek():
C:\Teensy\Projects\HelloWorld/serial1.c:456

int serial_peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    19d8:	4a08      	ldr	r2, [pc, #32]	; (19fc <serial_peek+0x24>)
    19da:	7811      	ldrb	r1, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial1.c:457
	tail = rx_buffer_tail;
    19dc:	7853      	ldrb	r3, [r2, #1]
    19de:	b2db      	uxtb	r3, r3
C:\Teensy\Projects\HelloWorld/serial1.c:458
	if (head == tail) return -1;
    19e0:	4299      	cmp	r1, r3
    19e2:	d008      	beq.n	19f6 <serial_peek+0x1e>
C:\Teensy\Projects\HelloWorld/serial1.c:459
	if (++tail >= SERIAL1_RX_BUFFER_SIZE) tail = 0;
    19e4:	3301      	adds	r3, #1
    19e6:	2b40      	cmp	r3, #64	; 0x40
    19e8:	bf28      	it	cs
    19ea:	2300      	movcs	r3, #0
C:\Teensy\Projects\HelloWorld/serial1.c:460
	return rx_buffer[tail];
    19ec:	4413      	add	r3, r2
    19ee:	f893 0050 	ldrb.w	r0, [r3, #80]	; 0x50
    19f2:	b2c0      	uxtb	r0, r0
    19f4:	4770      	bx	lr
C:\Teensy\Projects\HelloWorld/serial1.c:458
{
	uint32_t head, tail;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    19f6:	f04f 30ff 	mov.w	r0, #4294967295
C:\Teensy\Projects\HelloWorld/serial1.c:461
	if (++tail >= SERIAL1_RX_BUFFER_SIZE) tail = 0;
	return rx_buffer[tail];
}
    19fa:	4770      	bx	lr
    19fc:	1fff0b7c 	.word	0x1fff0b7c

00001a00 <serial_clear>:
serial_clear():
C:\Teensy\Projects\HelloWorld/serial1.c:466

void serial_clear(void)
{
#ifdef HAS_KINETISK_UART0_FIFO
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
    1a00:	4b0b      	ldr	r3, [pc, #44]	; (1a30 <serial_clear+0x30>)
    1a02:	681b      	ldr	r3, [r3, #0]
    1a04:	055b      	lsls	r3, r3, #21
    1a06:	d512      	bpl.n	1a2e <serial_clear+0x2e>
C:\Teensy\Projects\HelloWorld/serial1.c:467
	UART0_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    1a08:	4b0a      	ldr	r3, [pc, #40]	; (1a34 <serial_clear+0x34>)
    1a0a:	78da      	ldrb	r2, [r3, #3]
    1a0c:	f002 02cb 	and.w	r2, r2, #203	; 0xcb
    1a10:	70da      	strb	r2, [r3, #3]
C:\Teensy\Projects\HelloWorld/serial1.c:468
	UART0_CFIFO = UART_CFIFO_RXFLUSH;
    1a12:	2240      	movs	r2, #64	; 0x40
    1a14:	745a      	strb	r2, [r3, #17]
C:\Teensy\Projects\HelloWorld/serial1.c:469
	UART0_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    1a16:	78da      	ldrb	r2, [r3, #3]
    1a18:	f042 0234 	orr.w	r2, r2, #52	; 0x34
    1a1c:	70da      	strb	r2, [r3, #3]
C:\Teensy\Projects\HelloWorld/serial1.c:471
#endif
	rx_buffer_head = rx_buffer_tail;
    1a1e:	4b06      	ldr	r3, [pc, #24]	; (1a38 <serial_clear+0x38>)
    1a20:	785a      	ldrb	r2, [r3, #1]
    1a22:	b2d2      	uxtb	r2, r2
    1a24:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial1.c:472
	if (rts_pin) rts_assert();
    1a26:	689b      	ldr	r3, [r3, #8]
    1a28:	b10b      	cbz	r3, 1a2e <serial_clear+0x2e>
C:\Teensy\Projects\HelloWorld/serial1.c:472 (discriminator 1)
    1a2a:	2200      	movs	r2, #0
    1a2c:	701a      	strb	r2, [r3, #0]
    1a2e:	4770      	bx	lr
    1a30:	40048034 	.word	0x40048034
    1a34:	4006a000 	.word	0x4006a000
    1a38:	1fff0b7c 	.word	0x1fff0b7c

00001a3c <uart0_status_isr>:
uart0_status_isr():
C:\Teensy\Projects\HelloWorld/serial1.c:484
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

extern void uart0_status_isr(void)
{
    1a3c:	b530      	push	{r4, r5, lr}
C:\Teensy\Projects\HelloWorld/serial1.c:491
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    1a3e:	4b35      	ldr	r3, [pc, #212]	; (1b14 <uart0_status_isr+0xd8>)
    1a40:	791a      	ldrb	r2, [r3, #4]
    1a42:	f012 0f30 	tst.w	r2, #48	; 0x30
    1a46:	d02f      	beq.n	1aa8 <uart0_status_isr+0x6c>
C:\Teensy\Projects\HelloWorld/serial1.c:492
		__disable_irq();
    1a48:	b672      	cpsid	i
C:\Teensy\Projects\HelloWorld/serial1.c:493
		avail = UART0_RCFIFO;
    1a4a:	7d9a      	ldrb	r2, [r3, #22]
C:\Teensy\Projects\HelloWorld/serial1.c:494
		if (avail == 0) {
    1a4c:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    1a50:	b922      	cbnz	r2, 1a5c <uart0_status_isr+0x20>
C:\Teensy\Projects\HelloWorld/serial1.c:501
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    1a52:	79da      	ldrb	r2, [r3, #7]
C:\Teensy\Projects\HelloWorld/serial1.c:511
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    1a54:	2240      	movs	r2, #64	; 0x40
    1a56:	745a      	strb	r2, [r3, #17]
C:\Teensy\Projects\HelloWorld/serial1.c:512
			__enable_irq();
    1a58:	b662      	cpsie	i
    1a5a:	e025      	b.n	1aa8 <uart0_status_isr+0x6c>
C:\Teensy\Projects\HelloWorld/serial1.c:514
		} else {
			__enable_irq();
    1a5c:	b662      	cpsie	i
C:\Teensy\Projects\HelloWorld/serial1.c:515
			head = rx_buffer_head;
    1a5e:	482e      	ldr	r0, [pc, #184]	; (1b18 <uart0_status_isr+0xdc>)
    1a60:	7803      	ldrb	r3, [r0, #0]
C:\Teensy\Projects\HelloWorld/serial1.c:516
			tail = rx_buffer_tail;
    1a62:	7841      	ldrb	r1, [r0, #1]
C:\Teensy\Projects\HelloWorld/serial1.c:515
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    1a64:	b2db      	uxtb	r3, r3
C:\Teensy\Projects\HelloWorld/serial1.c:516
			tail = rx_buffer_tail;
    1a66:	b2c9      	uxtb	r1, r1
C:\Teensy\Projects\HelloWorld/serial1.c:521
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    1a68:	4a2a      	ldr	r2, [pc, #168]	; (1b14 <uart0_status_isr+0xd8>)
    1a6a:	79d5      	ldrb	r5, [r2, #7]
C:\Teensy\Projects\HelloWorld/serial1.c:523
				}
				newhead = head + 1;
    1a6c:	1c5a      	adds	r2, r3, #1
C:\Teensy\Projects\HelloWorld/serial1.c:524
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    1a6e:	2a40      	cmp	r2, #64	; 0x40
    1a70:	bf28      	it	cs
    1a72:	2200      	movcs	r2, #0
C:\Teensy\Projects\HelloWorld/serial1.c:525
				if (newhead != tail) {
    1a74:	428a      	cmp	r2, r1
C:\Teensy\Projects\HelloWorld/serial1.c:521
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    1a76:	b2ed      	uxtb	r5, r5
C:\Teensy\Projects\HelloWorld/serial1.c:525
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
    1a78:	d003      	beq.n	1a82 <uart0_status_isr+0x46>
C:\Teensy\Projects\HelloWorld/serial1.c:527
					head = newhead;
					rx_buffer[head] = n;
    1a7a:	1883      	adds	r3, r0, r2
    1a7c:	f883 5050 	strb.w	r5, [r3, #80]	; 0x50
    1a80:	4613      	mov	r3, r2
C:\Teensy\Projects\HelloWorld/serial1.c:529
				}
			} while (--avail > 0);
    1a82:	1e62      	subs	r2, r4, #1
    1a84:	f012 04ff 	ands.w	r4, r2, #255	; 0xff
    1a88:	d1ee      	bne.n	1a68 <uart0_status_isr+0x2c>
C:\Teensy\Projects\HelloWorld/serial1.c:530
			rx_buffer_head = head;
    1a8a:	b2da      	uxtb	r2, r3
    1a8c:	7002      	strb	r2, [r0, #0]
C:\Teensy\Projects\HelloWorld/serial1.c:531
			if (rts_pin) {
    1a8e:	6882      	ldr	r2, [r0, #8]
    1a90:	b152      	cbz	r2, 1aa8 <uart0_status_isr+0x6c>
C:\Teensy\Projects\HelloWorld/serial1.c:533
				int avail;
				if (head >= tail) avail = head - tail;
    1a92:	428b      	cmp	r3, r1
C:\Teensy\Projects\HelloWorld/serial1.c:534
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    1a94:	bf36      	itet	cc
    1a96:	f1c1 0140 	rsbcc	r1, r1, #64	; 0x40
C:\Teensy\Projects\HelloWorld/serial1.c:533
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    1a9a:	ebc1 0303 	rsbcs	r3, r1, r3
C:\Teensy\Projects\HelloWorld/serial1.c:534
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    1a9e:	185b      	addcc	r3, r3, r1
C:\Teensy\Projects\HelloWorld/serial1.c:535
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    1aa0:	2b27      	cmp	r3, #39	; 0x27
    1aa2:	bfc4      	itt	gt
    1aa4:	2301      	movgt	r3, #1
    1aa6:	7013      	strbgt	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial1.c:539
			}
		}
	}
	c = UART0_C2;
    1aa8:	4b1a      	ldr	r3, [pc, #104]	; (1b14 <uart0_status_isr+0xd8>)
    1aaa:	78d9      	ldrb	r1, [r3, #3]
    1aac:	b2c9      	uxtb	r1, r1
C:\Teensy\Projects\HelloWorld/serial1.c:540
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    1aae:	060c      	lsls	r4, r1, #24
    1ab0:	d51f      	bpl.n	1af2 <uart0_status_isr+0xb6>
C:\Teensy\Projects\HelloWorld/serial1.c:540 (discriminator 1)
    1ab2:	791b      	ldrb	r3, [r3, #4]
    1ab4:	0618      	lsls	r0, r3, #24
    1ab6:	d51c      	bpl.n	1af2 <uart0_status_isr+0xb6>
C:\Teensy\Projects\HelloWorld/serial1.c:541
		head = tx_buffer_head;
    1ab8:	4a17      	ldr	r2, [pc, #92]	; (1b18 <uart0_status_isr+0xdc>)
    1aba:	7895      	ldrb	r5, [r2, #2]
C:\Teensy\Projects\HelloWorld/serial1.c:542
		tail = tx_buffer_tail;
    1abc:	78d3      	ldrb	r3, [r2, #3]
C:\Teensy\Projects\HelloWorld/serial1.c:541
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    1abe:	b2ed      	uxtb	r5, r5
C:\Teensy\Projects\HelloWorld/serial1.c:542
		tail = tx_buffer_tail;
    1ac0:	b2db      	uxtb	r3, r3
    1ac2:	4610      	mov	r0, r2
C:\Teensy\Projects\HelloWorld/serial1.c:544
		do {
			if (tail == head) break;
    1ac4:	42ab      	cmp	r3, r5
    1ac6:	d00c      	beq.n	1ae2 <uart0_status_isr+0xa6>
C:\Teensy\Projects\HelloWorld/serial1.c:545
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    1ac8:	3301      	adds	r3, #1
C:\Teensy\Projects\HelloWorld/serial1.c:546
			avail = UART0_S1;
    1aca:	4a12      	ldr	r2, [pc, #72]	; (1b14 <uart0_status_isr+0xd8>)
C:\Teensy\Projects\HelloWorld/serial1.c:545
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		do {
			if (tail == head) break;
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    1acc:	2b40      	cmp	r3, #64	; 0x40
    1ace:	bf28      	it	cs
    1ad0:	2300      	movcs	r3, #0
C:\Teensy\Projects\HelloWorld/serial1.c:546
			avail = UART0_S1;
    1ad2:	7914      	ldrb	r4, [r2, #4]
C:\Teensy\Projects\HelloWorld/serial1.c:547
			n = tx_buffer[tail];
    1ad4:	18c4      	adds	r4, r0, r3
    1ad6:	7c24      	ldrb	r4, [r4, #16]
    1ad8:	b2e4      	uxtb	r4, r4
C:\Teensy\Projects\HelloWorld/serial1.c:549
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    1ada:	71d4      	strb	r4, [r2, #7]
C:\Teensy\Projects\HelloWorld/serial1.c:550
		} while (UART0_TCFIFO < 8);
    1adc:	7d12      	ldrb	r2, [r2, #20]
    1ade:	2a07      	cmp	r2, #7
    1ae0:	d9f0      	bls.n	1ac4 <uart0_status_isr+0x88>
C:\Teensy\Projects\HelloWorld/serial1.c:551
		tx_buffer_tail = tail;
    1ae2:	b2db      	uxtb	r3, r3
    1ae4:	70c3      	strb	r3, [r0, #3]
C:\Teensy\Projects\HelloWorld/serial1.c:552
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    1ae6:	4b0b      	ldr	r3, [pc, #44]	; (1b14 <uart0_status_isr+0xd8>)
    1ae8:	791a      	ldrb	r2, [r3, #4]
    1aea:	0612      	lsls	r2, r2, #24
    1aec:	bf44      	itt	mi
    1aee:	227c      	movmi	r2, #124	; 0x7c
    1af0:	70da      	strbmi	r2, [r3, #3]
C:\Teensy\Projects\HelloWorld/serial1.c:580
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    1af2:	064b      	lsls	r3, r1, #25
    1af4:	d50d      	bpl.n	1b12 <uart0_status_isr+0xd6>
C:\Teensy\Projects\HelloWorld/serial1.c:580 (discriminator 1)
    1af6:	4b07      	ldr	r3, [pc, #28]	; (1b14 <uart0_status_isr+0xd8>)
    1af8:	791a      	ldrb	r2, [r3, #4]
    1afa:	f012 0f40 	tst.w	r2, #64	; 0x40
    1afe:	4619      	mov	r1, r3
    1b00:	d007      	beq.n	1b12 <uart0_status_isr+0xd6>
C:\Teensy\Projects\HelloWorld/serial1.c:581
		transmitting = 0;
    1b02:	4b05      	ldr	r3, [pc, #20]	; (1b18 <uart0_status_isr+0xdc>)
    1b04:	2200      	movs	r2, #0
    1b06:	711a      	strb	r2, [r3, #4]
C:\Teensy\Projects\HelloWorld/serial1.c:582
		if (transmit_pin) transmit_deassert();
    1b08:	68db      	ldr	r3, [r3, #12]
    1b0a:	b103      	cbz	r3, 1b0e <uart0_status_isr+0xd2>
C:\Teensy\Projects\HelloWorld/serial1.c:582 (discriminator 1)
    1b0c:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial1.c:583
		UART0_C2 = C2_TX_INACTIVE;
    1b0e:	233c      	movs	r3, #60	; 0x3c
    1b10:	70cb      	strb	r3, [r1, #3]
    1b12:	bd30      	pop	{r4, r5, pc}
    1b14:	4006a000 	.word	0x4006a000
    1b18:	1fff0b7c 	.word	0x1fff0b7c

00001b1c <serial_print>:
serial_print():
C:\Teensy\Projects\HelloWorld/serial1.c:591
}



void serial_print(const char *p)
{
    1b1c:	b538      	push	{r3, r4, r5, lr}
    1b1e:	1e45      	subs	r5, r0, #1
C:\Teensy\Projects\HelloWorld/serial1.c:592 (discriminator 1)
	while (*p) {
    1b20:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    1b24:	b144      	cbz	r4, 1b38 <serial_print+0x1c>
C:\Teensy\Projects\HelloWorld/serial1.c:594
		char c = *p++;
		if (c == '\n') serial_putchar('\r');
    1b26:	2c0a      	cmp	r4, #10
    1b28:	d102      	bne.n	1b30 <serial_print+0x14>
C:\Teensy\Projects\HelloWorld/serial1.c:594 (discriminator 1)
    1b2a:	200d      	movs	r0, #13
    1b2c:	f7ff fe78 	bl	1820 <serial_putchar>
C:\Teensy\Projects\HelloWorld/serial1.c:595
		serial_putchar(c);
    1b30:	4620      	mov	r0, r4
    1b32:	f7ff fe75 	bl	1820 <serial_putchar>
    1b36:	e7f3      	b.n	1b20 <serial_print+0x4>
C:\Teensy\Projects\HelloWorld/serial1.c:597
	}
}
    1b38:	bd38      	pop	{r3, r4, r5, pc}

00001b3a <serial_phex>:
serial_phex():
C:\Teensy\Projects\HelloWorld/serial1.c:610
		serial_putchar('A' - 10 + n);
	}
}

void serial_phex(uint32_t n)
{
    1b3a:	b510      	push	{r4, lr}
    1b3c:	4604      	mov	r4, r0
C:\Teensy\Projects\HelloWorld/serial1.c:611
	serial_phex1(n >> 4);
    1b3e:	0900      	lsrs	r0, r0, #4
    1b40:	f7ff feac 	bl	189c <serial_phex1>
C:\Teensy\Projects\HelloWorld/serial1.c:612
	serial_phex1(n);
    1b44:	4620      	mov	r0, r4
C:\Teensy\Projects\HelloWorld/serial1.c:613
}
    1b46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
C:\Teensy\Projects\HelloWorld/serial1.c:612
}

void serial_phex(uint32_t n)
{
	serial_phex1(n >> 4);
	serial_phex1(n);
    1b4a:	f7ff bea7 	b.w	189c <serial_phex1>

00001b4e <serial_phex16>:
serial_phex16():
C:\Teensy\Projects\HelloWorld/serial1.c:616
}

void serial_phex16(uint32_t n)
{
    1b4e:	b510      	push	{r4, lr}
    1b50:	4604      	mov	r4, r0
C:\Teensy\Projects\HelloWorld/serial1.c:617
	serial_phex(n >> 8);
    1b52:	0a00      	lsrs	r0, r0, #8
    1b54:	f7ff fff1 	bl	1b3a <serial_phex>
C:\Teensy\Projects\HelloWorld/serial1.c:618
	serial_phex(n);
    1b58:	4620      	mov	r0, r4
C:\Teensy\Projects\HelloWorld/serial1.c:619
}
    1b5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
C:\Teensy\Projects\HelloWorld/serial1.c:618
}

void serial_phex16(uint32_t n)
{
	serial_phex(n >> 8);
	serial_phex(n);
    1b5e:	f7ff bfec 	b.w	1b3a <serial_phex>

00001b62 <serial_phex32>:
serial_phex32():
C:\Teensy\Projects\HelloWorld/serial1.c:622
}

void serial_phex32(uint32_t n)
{
    1b62:	b510      	push	{r4, lr}
    1b64:	4604      	mov	r4, r0
C:\Teensy\Projects\HelloWorld/serial1.c:623
	serial_phex(n >> 24);
    1b66:	0e00      	lsrs	r0, r0, #24
    1b68:	f7ff ffe7 	bl	1b3a <serial_phex>
C:\Teensy\Projects\HelloWorld/serial1.c:624
	serial_phex(n >> 16);
    1b6c:	0c20      	lsrs	r0, r4, #16
    1b6e:	f7ff ffe4 	bl	1b3a <serial_phex>
C:\Teensy\Projects\HelloWorld/serial1.c:625
	serial_phex(n >> 8);
    1b72:	0a20      	lsrs	r0, r4, #8
    1b74:	f7ff ffe1 	bl	1b3a <serial_phex>
C:\Teensy\Projects\HelloWorld/serial1.c:626
	serial_phex(n);
    1b78:	4620      	mov	r0, r4
C:\Teensy\Projects\HelloWorld/serial1.c:627
}
    1b7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
C:\Teensy\Projects\HelloWorld/serial1.c:626
void serial_phex32(uint32_t n)
{
	serial_phex(n >> 24);
	serial_phex(n >> 16);
	serial_phex(n >> 8);
	serial_phex(n);
    1b7e:	f7ff bfdc 	b.w	1b3a <serial_phex>
    1b82:	bf00      	nop

00001b84 <serial2_begin>:
serial2_begin():
C:\Teensy\Projects\HelloWorld/serial2.c:114
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial2_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    1b84:	4b20      	ldr	r3, [pc, #128]	; (1c08 <serial2_begin+0x84>)
    1b86:	681a      	ldr	r2, [r3, #0]
    1b88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    1b8c:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial2.c:115
	rx_buffer_head = 0;
    1b8e:	4b1f      	ldr	r3, [pc, #124]	; (1c0c <serial2_begin+0x88>)
    1b90:	2200      	movs	r2, #0
    1b92:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial2.c:116
	rx_buffer_tail = 0;
    1b94:	705a      	strb	r2, [r3, #1]
C:\Teensy\Projects\HelloWorld/serial2.c:117
	tx_buffer_head = 0;
    1b96:	709a      	strb	r2, [r3, #2]
C:\Teensy\Projects\HelloWorld/serial2.c:118
	tx_buffer_tail = 0;
    1b98:	70da      	strb	r2, [r3, #3]
C:\Teensy\Projects\HelloWorld/serial2.c:119
	transmitting = 0;
    1b9a:	711a      	strb	r2, [r3, #4]
C:\Teensy\Projects\HelloWorld/serial2.c:121
#if defined(KINETISK)
	switch (rx_pin_num) {
    1b9c:	4a1c      	ldr	r2, [pc, #112]	; (1c10 <serial2_begin+0x8c>)
    1b9e:	7813      	ldrb	r3, [r2, #0]
    1ba0:	2b09      	cmp	r3, #9
    1ba2:	d005      	beq.n	1bb0 <serial2_begin+0x2c>
    1ba4:	2b3b      	cmp	r3, #59	; 0x3b
    1ba6:	d107      	bne.n	1bb8 <serial2_begin+0x34>
C:\Teensy\Projects\HelloWorld/serial2.c:126
		case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#if defined(__MK20DX128__) || defined(__MK20DX256__)    // T3.0, T3.1, T3.2
		case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)  // T3.5 or T3.6
		case 59: CORE_PIN59_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    1ba8:	f240 3113 	movw	r1, #787	; 0x313
    1bac:	4b19      	ldr	r3, [pc, #100]	; (1c14 <serial2_begin+0x90>)
    1bae:	e002      	b.n	1bb6 <serial2_begin+0x32>
C:\Teensy\Projects\HelloWorld/serial2.c:122
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
#if defined(KINETISK)
	switch (rx_pin_num) {
		case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    1bb0:	4b19      	ldr	r3, [pc, #100]	; (1c18 <serial2_begin+0x94>)
    1bb2:	f240 3113 	movw	r1, #787	; 0x313
C:\Teensy\Projects\HelloWorld/serial2.c:126
		#if defined(__MK20DX128__) || defined(__MK20DX256__)    // T3.0, T3.1, T3.2
		case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)  // T3.5 or T3.6
		case 59: CORE_PIN59_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    1bb6:	6019      	str	r1, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial2.c:129
		#endif
	}
	switch (tx_pin_num) {
    1bb8:	7853      	ldrb	r3, [r2, #1]
    1bba:	2b0a      	cmp	r3, #10
    1bbc:	d005      	beq.n	1bca <serial2_begin+0x46>
    1bbe:	2b3a      	cmp	r3, #58	; 0x3a
    1bc0:	d107      	bne.n	1bd2 <serial2_begin+0x4e>
C:\Teensy\Projects\HelloWorld/serial2.c:134
		case 10: CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		#if defined(__MK20DX128__) || defined(__MK20DX256__)    // T3.0, T3.1, T3.2
		case 31: CORE_PIN31_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)  // T3.5 or T3.6
		case 58: CORE_PIN58_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    1bc2:	f44f 7251 	mov.w	r2, #836	; 0x344
    1bc6:	4b15      	ldr	r3, [pc, #84]	; (1c1c <serial2_begin+0x98>)
    1bc8:	e002      	b.n	1bd0 <serial2_begin+0x4c>
C:\Teensy\Projects\HelloWorld/serial2.c:130
		#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)  // T3.5 or T3.6
		case 59: CORE_PIN59_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#endif
	}
	switch (tx_pin_num) {
		case 10: CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    1bca:	4b15      	ldr	r3, [pc, #84]	; (1c20 <serial2_begin+0x9c>)
    1bcc:	f44f 7251 	mov.w	r2, #836	; 0x344
C:\Teensy\Projects\HelloWorld/serial2.c:134
		#if defined(__MK20DX128__) || defined(__MK20DX256__)    // T3.0, T3.1, T3.2
		case 31: CORE_PIN31_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)  // T3.5 or T3.6
		case 58: CORE_PIN58_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    1bd0:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial2.c:142
#elif defined(KINETISL)
	CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
	CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
#endif
#if defined(HAS_KINETISK_UART1)
	UART1_BDH = (divisor >> 13) & 0x1F;
    1bd2:	4b14      	ldr	r3, [pc, #80]	; (1c24 <serial2_begin+0xa0>)
    1bd4:	f3c0 3244 	ubfx	r2, r0, #13, #5
    1bd8:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial2.c:143
	UART1_BDL = (divisor >> 5) & 0xFF;
    1bda:	f3c0 1247 	ubfx	r2, r0, #5, #8
    1bde:	705a      	strb	r2, [r3, #1]
C:\Teensy\Projects\HelloWorld/serial2.c:146
	UART1_C4 = divisor & 0x1F;
#ifdef HAS_KINETISK_UART1_FIFO
	UART1_C1 = UART_C1_ILT;
    1be0:	2104      	movs	r1, #4
C:\Teensy\Projects\HelloWorld/serial2.c:147
	UART1_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    1be2:	2202      	movs	r2, #2
C:\Teensy\Projects\HelloWorld/serial2.c:144
	CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
#endif
#if defined(HAS_KINETISK_UART1)
	UART1_BDH = (divisor >> 13) & 0x1F;
	UART1_BDL = (divisor >> 5) & 0xFF;
	UART1_C4 = divisor & 0x1F;
    1be4:	f000 001f 	and.w	r0, r0, #31
    1be8:	7298      	strb	r0, [r3, #10]
C:\Teensy\Projects\HelloWorld/serial2.c:146
#ifdef HAS_KINETISK_UART1_FIFO
	UART1_C1 = UART_C1_ILT;
    1bea:	7099      	strb	r1, [r3, #2]
C:\Teensy\Projects\HelloWorld/serial2.c:147
	UART1_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    1bec:	74da      	strb	r2, [r3, #19]
C:\Teensy\Projects\HelloWorld/serial2.c:148
	UART1_RWFIFO = 4; // rx watermark, causes S1_RDRF to set
    1bee:	7559      	strb	r1, [r3, #21]
C:\Teensy\Projects\HelloWorld/serial2.c:149
	UART1_PFIFO = UART_PFIFO_TXFE | UART_PFIFO_RXFE;
    1bf0:	2188      	movs	r1, #136	; 0x88
    1bf2:	7419      	strb	r1, [r3, #16]
C:\Teensy\Projects\HelloWorld/serial2.c:159
#elif defined(HAS_KINETISL_UART1)
	UART1_BDH = (divisor >> 8) & 0x1F;
	UART1_BDL = divisor & 0xFF;
	UART1_C1 = 0;
#endif
	UART1_C2 = C2_TX_INACTIVE;
    1bf4:	213c      	movs	r1, #60	; 0x3c
    1bf6:	70d9      	strb	r1, [r3, #3]
C:\Teensy\Projects\HelloWorld/serial2.c:160
	NVIC_SET_PRIORITY(IRQ_UART1_STATUS, IRQ_PRIORITY);
    1bf8:	4b0b      	ldr	r3, [pc, #44]	; (1c28 <serial2_begin+0xa4>)
    1bfa:	2140      	movs	r1, #64	; 0x40
    1bfc:	7019      	strb	r1, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial2.c:161
	NVIC_ENABLE_IRQ(IRQ_UART1_STATUS);
    1bfe:	f46f 7147 	mvn.w	r1, #796	; 0x31c
    1c02:	440b      	add	r3, r1
    1c04:	601a      	str	r2, [r3, #0]
    1c06:	4770      	bx	lr
    1c08:	40048034 	.word	0x40048034
    1c0c:	1fff0c0c 	.word	0x1fff0c0c
    1c10:	1fff0a09 	.word	0x1fff0a09
    1c14:	4004d004 	.word	0x4004d004
    1c18:	4004b00c 	.word	0x4004b00c
    1c1c:	4004d000 	.word	0x4004d000
    1c20:	4004b010 	.word	0x4004b010
    1c24:	4006b000 	.word	0x4006b000
    1c28:	e000e421 	.word	0xe000e421

00001c2c <serial2_format>:
serial2_format():
C:\Teensy\Projects\HelloWorld/serial2.c:168

void serial2_format(uint32_t format)
{
	uint8_t c;

	c = UART1_C1;
    1c2c:	4a19      	ldr	r2, [pc, #100]	; (1c94 <serial2_format+0x68>)
    1c2e:	7893      	ldrb	r3, [r2, #2]
C:\Teensy\Projects\HelloWorld/serial2.c:169
	c = (c & ~0x13) | (format & 0x03);	// configure parity
    1c30:	f000 0103 	and.w	r1, r0, #3
    1c34:	f003 03ec 	and.w	r3, r3, #236	; 0xec
    1c38:	430b      	orrs	r3, r1
C:\Teensy\Projects\HelloWorld/serial2.c:170
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    1c3a:	0741      	lsls	r1, r0, #29
    1c3c:	bf48      	it	mi
    1c3e:	f043 0310 	orrmi.w	r3, r3, #16
C:\Teensy\Projects\HelloWorld/serial2.c:171
	UART1_C1 = c;
    1c42:	7093      	strb	r3, [r2, #2]
C:\Teensy\Projects\HelloWorld/serial2.c:172
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    1c44:	f000 030f 	and.w	r3, r0, #15
    1c48:	2b04      	cmp	r3, #4
C:\Teensy\Projects\HelloWorld/serial2.c:171
	uint8_t c;

	c = UART1_C1;
	c = (c & ~0x13) | (format & 0x03);	// configure parity
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
	UART1_C1 = c;
    1c4a:	4912      	ldr	r1, [pc, #72]	; (1c94 <serial2_format+0x68>)
C:\Teensy\Projects\HelloWorld/serial2.c:172
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    1c4c:	d103      	bne.n	1c56 <serial2_format+0x2a>
C:\Teensy\Projects\HelloWorld/serial2.c:172 (discriminator 1)
    1c4e:	798b      	ldrb	r3, [r1, #6]
    1c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1c54:	718b      	strb	r3, [r1, #6]
C:\Teensy\Projects\HelloWorld/serial2.c:173
	c = UART1_S2 & ~0x10;
    1c56:	7952      	ldrb	r2, [r2, #5]
C:\Teensy\Projects\HelloWorld/serial2.c:175
	if (format & 0x10) c |= 0x10;		// rx invert
	UART1_S2 = c;
    1c58:	4b0e      	ldr	r3, [pc, #56]	; (1c94 <serial2_format+0x68>)
C:\Teensy\Projects\HelloWorld/serial2.c:173
	c = UART1_C1;
	c = (c & ~0x13) | (format & 0x03);	// configure parity
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
	UART1_C1 = c;
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
	c = UART1_S2 & ~0x10;
    1c5a:	f002 02ef 	and.w	r2, r2, #239	; 0xef
C:\Teensy\Projects\HelloWorld/serial2.c:174
	if (format & 0x10) c |= 0x10;		// rx invert
    1c5e:	06c1      	lsls	r1, r0, #27
    1c60:	bf48      	it	mi
    1c62:	f042 0210 	orrmi.w	r2, r2, #16
C:\Teensy\Projects\HelloWorld/serial2.c:175
	UART1_S2 = c;
    1c66:	715a      	strb	r2, [r3, #5]
C:\Teensy\Projects\HelloWorld/serial2.c:176
	c = UART1_C3 & ~0x10;
    1c68:	799a      	ldrb	r2, [r3, #6]
C:\Teensy\Projects\HelloWorld/serial2.c:177
	if (format & 0x20) c |= 0x10;		// tx invert
    1c6a:	f010 0f20 	tst.w	r0, #32
C:\Teensy\Projects\HelloWorld/serial2.c:176
	UART1_C1 = c;
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
	c = UART1_S2 & ~0x10;
	if (format & 0x10) c |= 0x10;		// rx invert
	UART1_S2 = c;
	c = UART1_C3 & ~0x10;
    1c6e:	f002 02ef 	and.w	r2, r2, #239	; 0xef
    1c72:	4619      	mov	r1, r3
C:\Teensy\Projects\HelloWorld/serial2.c:177
	if (format & 0x20) c |= 0x10;		// tx invert
    1c74:	bf18      	it	ne
    1c76:	f042 0210 	orrne.w	r2, r2, #16
C:\Teensy\Projects\HelloWorld/serial2.c:178
	UART1_C3 = c;
    1c7a:	718a      	strb	r2, [r1, #6]
C:\Teensy\Projects\HelloWorld/serial2.c:187
	UART1_C4 = c;
	use9Bits = format & 0x80;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(KINETISL)
	// For T3.5/T3.6/TLC See about turning on 2 stop bit mode
	if ( format & 0x100) {
    1c7c:	05c2      	lsls	r2, r0, #23
C:\Teensy\Projects\HelloWorld/serial2.c:178
	c = UART1_S2 & ~0x10;
	if (format & 0x10) c |= 0x10;		// rx invert
	UART1_S2 = c;
	c = UART1_C3 & ~0x10;
	if (format & 0x20) c |= 0x10;		// tx invert
	UART1_C3 = c;
    1c7e:	4b05      	ldr	r3, [pc, #20]	; (1c94 <serial2_format+0x68>)
C:\Teensy\Projects\HelloWorld/serial2.c:187
	UART1_C4 = c;
	use9Bits = format & 0x80;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(KINETISL)
	// For T3.5/T3.6/TLC See about turning on 2 stop bit mode
	if ( format & 0x100) {
    1c80:	d506      	bpl.n	1c90 <serial2_format+0x64>
C:\Teensy\Projects\HelloWorld/serial2.c:188
		uint8_t bdl = UART1_BDL;
    1c82:	785a      	ldrb	r2, [r3, #1]
C:\Teensy\Projects\HelloWorld/serial2.c:189
		UART1_BDH |= UART_BDH_SBNS;		// Turn on 2 stop bits - was turned off by set baud
    1c84:	7819      	ldrb	r1, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial2.c:188
	use9Bits = format & 0x80;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(KINETISL)
	// For T3.5/T3.6/TLC See about turning on 2 stop bit mode
	if ( format & 0x100) {
		uint8_t bdl = UART1_BDL;
    1c86:	b2d2      	uxtb	r2, r2
C:\Teensy\Projects\HelloWorld/serial2.c:189
		UART1_BDH |= UART_BDH_SBNS;		// Turn on 2 stop bits - was turned off by set baud
    1c88:	f041 0120 	orr.w	r1, r1, #32
    1c8c:	7019      	strb	r1, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial2.c:190
		UART1_BDL = bdl;		// Says BDH not acted on until BDL is written
    1c8e:	705a      	strb	r2, [r3, #1]
    1c90:	4770      	bx	lr
    1c92:	bf00      	nop
    1c94:	4006b000 	.word	0x4006b000

00001c98 <serial2_end>:
serial2_end():
C:\Teensy\Projects\HelloWorld/serial2.c:196
	}
#endif
}

void serial2_end(void)
{
    1c98:	b508      	push	{r3, lr}
C:\Teensy\Projects\HelloWorld/serial2.c:197
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    1c9a:	4b1a      	ldr	r3, [pc, #104]	; (1d04 <serial2_end+0x6c>)
    1c9c:	681b      	ldr	r3, [r3, #0]
    1c9e:	051b      	lsls	r3, r3, #20
    1ca0:	d400      	bmi.n	1ca4 <serial2_end+0xc>
    1ca2:	bd08      	pop	{r3, pc}
C:\Teensy\Projects\HelloWorld/serial2.c:198 (discriminator 1)
	while (transmitting) yield();  // wait for buffered data to send
    1ca4:	4b18      	ldr	r3, [pc, #96]	; (1d08 <serial2_end+0x70>)
    1ca6:	7919      	ldrb	r1, [r3, #4]
    1ca8:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    1cac:	b111      	cbz	r1, 1cb4 <serial2_end+0x1c>
C:\Teensy\Projects\HelloWorld/serial2.c:198 (discriminator 2)
    1cae:	f003 fc4f 	bl	5550 <yield>
    1cb2:	e7f7      	b.n	1ca4 <serial2_end+0xc>
C:\Teensy\Projects\HelloWorld/serial2.c:199
	NVIC_DISABLE_IRQ(IRQ_UART1_STATUS);
    1cb4:	4915      	ldr	r1, [pc, #84]	; (1d0c <serial2_end+0x74>)
    1cb6:	2002      	movs	r0, #2
    1cb8:	6008      	str	r0, [r1, #0]
C:\Teensy\Projects\HelloWorld/serial2.c:200
	UART1_C2 = 0;
    1cba:	4915      	ldr	r1, [pc, #84]	; (1d10 <serial2_end+0x78>)
C:\Teensy\Projects\HelloWorld/serial2.c:202
#if defined(KINETISK)
	switch (rx_pin_num) {
    1cbc:	4815      	ldr	r0, [pc, #84]	; (1d14 <serial2_end+0x7c>)
C:\Teensy\Projects\HelloWorld/serial2.c:200
void serial2_end(void)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
	while (transmitting) yield();  // wait for buffered data to send
	NVIC_DISABLE_IRQ(IRQ_UART1_STATUS);
	UART1_C2 = 0;
    1cbe:	70ca      	strb	r2, [r1, #3]
C:\Teensy\Projects\HelloWorld/serial2.c:202
#if defined(KINETISK)
	switch (rx_pin_num) {
    1cc0:	7801      	ldrb	r1, [r0, #0]
    1cc2:	2909      	cmp	r1, #9
    1cc4:	d004      	beq.n	1cd0 <serial2_end+0x38>
    1cc6:	293b      	cmp	r1, #59	; 0x3b
    1cc8:	d106      	bne.n	1cd8 <serial2_end+0x40>
C:\Teensy\Projects\HelloWorld/serial2.c:207
		case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTC3
		#if defined(__MK20DX128__) || defined(__MK20DX256__)  // T3.0, T3.1, T3.2
		case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTE1
		#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
		case 59: CORE_PIN59_CONFIG = 0; break;
    1cca:	4913      	ldr	r1, [pc, #76]	; (1d18 <serial2_end+0x80>)
    1ccc:	600a      	str	r2, [r1, #0]
    1cce:	e003      	b.n	1cd8 <serial2_end+0x40>
C:\Teensy\Projects\HelloWorld/serial2.c:203
	while (transmitting) yield();  // wait for buffered data to send
	NVIC_DISABLE_IRQ(IRQ_UART1_STATUS);
	UART1_C2 = 0;
#if defined(KINETISK)
	switch (rx_pin_num) {
		case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTC3
    1cd0:	4a12      	ldr	r2, [pc, #72]	; (1d1c <serial2_end+0x84>)
    1cd2:	f240 1103 	movw	r1, #259	; 0x103
    1cd6:	6011      	str	r1, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial2.c:210
		case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTE1
		#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
		case 59: CORE_PIN59_CONFIG = 0; break;
		#endif
	}
	switch (tx_pin_num & 127) {
    1cd8:	7842      	ldrb	r2, [r0, #1]
    1cda:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    1cde:	2a0a      	cmp	r2, #10
    1ce0:	d004      	beq.n	1cec <serial2_end+0x54>
    1ce2:	2a3a      	cmp	r2, #58	; 0x3a
    1ce4:	d106      	bne.n	1cf4 <serial2_end+0x5c>
C:\Teensy\Projects\HelloWorld/serial2.c:215
		case 10: CORE_PIN10_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTC4
		#if defined(__MK20DX128__) || defined(__MK20DX256__)  // T3.0, T3.1, T3.2
		case 31: CORE_PIN31_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTE0
		#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
		case 58: CORE_PIN58_CONFIG = 0; break;
    1ce6:	2100      	movs	r1, #0
    1ce8:	4a0d      	ldr	r2, [pc, #52]	; (1d20 <serial2_end+0x88>)
    1cea:	e002      	b.n	1cf2 <serial2_end+0x5a>
C:\Teensy\Projects\HelloWorld/serial2.c:211
		#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
		case 59: CORE_PIN59_CONFIG = 0; break;
		#endif
	}
	switch (tx_pin_num & 127) {
		case 10: CORE_PIN10_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTC4
    1cec:	4a0d      	ldr	r2, [pc, #52]	; (1d24 <serial2_end+0x8c>)
    1cee:	f240 1103 	movw	r1, #259	; 0x103
C:\Teensy\Projects\HelloWorld/serial2.c:215
		#if defined(__MK20DX128__) || defined(__MK20DX256__)  // T3.0, T3.1, T3.2
		case 31: CORE_PIN31_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTE0
		#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
		case 58: CORE_PIN58_CONFIG = 0; break;
    1cf2:	6011      	str	r1, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial2.c:222
	}
#elif defined(KINETISL)
	CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);  // PTC3
	CORE_PIN10_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); // PTC4
#endif
	rx_buffer_head = 0;
    1cf4:	2200      	movs	r2, #0
    1cf6:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial2.c:223
	rx_buffer_tail = 0;
    1cf8:	705a      	strb	r2, [r3, #1]
C:\Teensy\Projects\HelloWorld/serial2.c:224
	if (rts_pin) rts_deassert();
    1cfa:	689b      	ldr	r3, [r3, #8]
    1cfc:	b10b      	cbz	r3, 1d02 <serial2_end+0x6a>
C:\Teensy\Projects\HelloWorld/serial2.c:224 (discriminator 1)
    1cfe:	2201      	movs	r2, #1
    1d00:	701a      	strb	r2, [r3, #0]
    1d02:	bd08      	pop	{r3, pc}
    1d04:	40048034 	.word	0x40048034
    1d08:	1fff0c0c 	.word	0x1fff0c0c
    1d0c:	e000e184 	.word	0xe000e184
    1d10:	4006b000 	.word	0x4006b000
    1d14:	1fff0a09 	.word	0x1fff0a09
    1d18:	4004d004 	.word	0x4004d004
    1d1c:	4004b00c 	.word	0x4004b00c
    1d20:	4004d000 	.word	0x4004d000
    1d24:	4004b010 	.word	0x4004b010

00001d28 <serial2_set_transmit_pin>:
serial2_set_transmit_pin():
C:\Teensy\Projects\HelloWorld/serial2.c:228
}

void serial2_set_transmit_pin(uint8_t pin)
{
    1d28:	b570      	push	{r4, r5, r6, lr}
    1d2a:	4604      	mov	r4, r0
C:\Teensy\Projects\HelloWorld/serial2.c:229 (discriminator 1)
	while (transmitting) ;
    1d2c:	4d09      	ldr	r5, [pc, #36]	; (1d54 <serial2_set_transmit_pin+0x2c>)
    1d2e:	792b      	ldrb	r3, [r5, #4]
    1d30:	f003 06ff 	and.w	r6, r3, #255	; 0xff
    1d34:	2b00      	cmp	r3, #0
    1d36:	d1f9      	bne.n	1d2c <serial2_set_transmit_pin+0x4>
C:\Teensy\Projects\HelloWorld/serial2.c:230
	pinMode(pin, OUTPUT);
    1d38:	4620      	mov	r0, r4
    1d3a:	2101      	movs	r1, #1
    1d3c:	f7ff f87c 	bl	e38 <pinMode>
C:\Teensy\Projects\HelloWorld/serial2.c:231
	digitalWrite(pin, LOW);
    1d40:	4620      	mov	r0, r4
    1d42:	4631      	mov	r1, r6
    1d44:	f7ff f84a 	bl	ddc <digitalWrite>
C:\Teensy\Projects\HelloWorld/serial2.c:232
	transmit_pin = portOutputRegister(pin);
    1d48:	4b03      	ldr	r3, [pc, #12]	; (1d58 <serial2_set_transmit_pin+0x30>)
    1d4a:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
    1d4e:	60eb      	str	r3, [r5, #12]
    1d50:	bd70      	pop	{r4, r5, r6, pc}
    1d52:	bf00      	nop
    1d54:	1fff0c0c 	.word	0x1fff0c0c
    1d58:	00009e64 	.word	0x00009e64

00001d5c <serial2_set_tx>:
serial2_set_tx():
C:\Teensy\Projects\HelloWorld/serial2.c:239
	transmit_mask = digitalPinToBitMask(pin);
	#endif
}

void serial2_set_tx(uint8_t pin, uint8_t opendrain)
{
    1d5c:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/serial2.c:243
	#if defined(KINETISK)
	uint32_t cfg;

	if (opendrain) pin |= 128;
    1d5e:	b109      	cbz	r1, 1d64 <serial2_set_tx+0x8>
C:\Teensy\Projects\HelloWorld/serial2.c:243 (discriminator 1)
    1d60:	f040 0080 	orr.w	r0, r0, #128	; 0x80
C:\Teensy\Projects\HelloWorld/serial2.c:244
	if (pin == tx_pin_num) return;
    1d64:	4a14      	ldr	r2, [pc, #80]	; (1db8 <serial2_set_tx+0x5c>)
    1d66:	7853      	ldrb	r3, [r2, #1]
    1d68:	4298      	cmp	r0, r3
    1d6a:	4614      	mov	r4, r2
    1d6c:	d022      	beq.n	1db4 <serial2_set_tx+0x58>
C:\Teensy\Projects\HelloWorld/serial2.c:245
	if ((SIM_SCGC4 & SIM_SCGC4_UART1)) {
    1d6e:	4a13      	ldr	r2, [pc, #76]	; (1dbc <serial2_set_tx+0x60>)
    1d70:	6812      	ldr	r2, [r2, #0]
    1d72:	0512      	lsls	r2, r2, #20
    1d74:	d51d      	bpl.n	1db2 <serial2_set_tx+0x56>
C:\Teensy\Projects\HelloWorld/serial2.c:246
		switch (tx_pin_num & 127) {
    1d76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1d7a:	2b0a      	cmp	r3, #10
    1d7c:	d004      	beq.n	1d88 <serial2_set_tx+0x2c>
    1d7e:	2b3a      	cmp	r3, #58	; 0x3a
    1d80:	d105      	bne.n	1d8e <serial2_set_tx+0x32>
C:\Teensy\Projects\HelloWorld/serial2.c:251
			case 10: CORE_PIN10_CONFIG = 0; break; // PTC4
			#if defined(__MK20DX128__) || defined(__MK20DX256__)  // T3.0, T3.1, T3.2
			case 31: CORE_PIN31_CONFIG = 0; break; // PTE0
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 58: CORE_PIN58_CONFIG = 0; break;
    1d82:	2200      	movs	r2, #0
    1d84:	4b0e      	ldr	r3, [pc, #56]	; (1dc0 <serial2_set_tx+0x64>)
    1d86:	e001      	b.n	1d8c <serial2_set_tx+0x30>
C:\Teensy\Projects\HelloWorld/serial2.c:247

	if (opendrain) pin |= 128;
	if (pin == tx_pin_num) return;
	if ((SIM_SCGC4 & SIM_SCGC4_UART1)) {
		switch (tx_pin_num & 127) {
			case 10: CORE_PIN10_CONFIG = 0; break; // PTC4
    1d88:	4b0e      	ldr	r3, [pc, #56]	; (1dc4 <serial2_set_tx+0x68>)
    1d8a:	2200      	movs	r2, #0
C:\Teensy\Projects\HelloWorld/serial2.c:251
			#if defined(__MK20DX128__) || defined(__MK20DX256__)  // T3.0, T3.1, T3.2
			case 31: CORE_PIN31_CONFIG = 0; break; // PTE0
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 58: CORE_PIN58_CONFIG = 0; break;
    1d8c:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial2.c:255
			#endif
		}
		if (opendrain) {
			cfg = PORT_PCR_DSE | PORT_PCR_ODE;
    1d8e:	2900      	cmp	r1, #0
C:\Teensy\Projects\HelloWorld/serial2.c:259
		} else {
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
		}
		switch (pin & 127) {
    1d90:	f000 027f 	and.w	r2, r0, #127	; 0x7f
C:\Teensy\Projects\HelloWorld/serial2.c:255
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 58: CORE_PIN58_CONFIG = 0; break;
			#endif
		}
		if (opendrain) {
			cfg = PORT_PCR_DSE | PORT_PCR_ODE;
    1d94:	bf0c      	ite	eq
    1d96:	2344      	moveq	r3, #68	; 0x44
    1d98:	2360      	movne	r3, #96	; 0x60
C:\Teensy\Projects\HelloWorld/serial2.c:259
		} else {
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
		}
		switch (pin & 127) {
    1d9a:	2a0a      	cmp	r2, #10
    1d9c:	d005      	beq.n	1daa <serial2_set_tx+0x4e>
    1d9e:	2a3a      	cmp	r2, #58	; 0x3a
    1da0:	d107      	bne.n	1db2 <serial2_set_tx+0x56>
C:\Teensy\Projects\HelloWorld/serial2.c:264
			case 10: CORE_PIN10_CONFIG = cfg | PORT_PCR_MUX(3); break;
			#if defined(__MK20DX128__) || defined(__MK20DX256__)  // T3.0, T3.1, T3.2
			case 31: CORE_PIN31_CONFIG = cfg | PORT_PCR_MUX(3); break;
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 58: CORE_PIN58_CONFIG = cfg | PORT_PCR_MUX(3); break;
    1da2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    1da6:	4a06      	ldr	r2, [pc, #24]	; (1dc0 <serial2_set_tx+0x64>)
    1da8:	e002      	b.n	1db0 <serial2_set_tx+0x54>
C:\Teensy\Projects\HelloWorld/serial2.c:260
			cfg = PORT_PCR_DSE | PORT_PCR_ODE;
		} else {
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
		}
		switch (pin & 127) {
			case 10: CORE_PIN10_CONFIG = cfg | PORT_PCR_MUX(3); break;
    1daa:	4a06      	ldr	r2, [pc, #24]	; (1dc4 <serial2_set_tx+0x68>)
    1dac:	f443 7340 	orr.w	r3, r3, #768	; 0x300
C:\Teensy\Projects\HelloWorld/serial2.c:264
			#if defined(__MK20DX128__) || defined(__MK20DX256__)  // T3.0, T3.1, T3.2
			case 31: CORE_PIN31_CONFIG = cfg | PORT_PCR_MUX(3); break;
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 58: CORE_PIN58_CONFIG = cfg | PORT_PCR_MUX(3); break;
    1db0:	6013      	str	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial2.c:268
			#endif
		}
	}
	tx_pin_num = pin;
    1db2:	7060      	strb	r0, [r4, #1]
    1db4:	bd10      	pop	{r4, pc}
    1db6:	bf00      	nop
    1db8:	1fff0a09 	.word	0x1fff0a09
    1dbc:	40048034 	.word	0x40048034
    1dc0:	4004d000 	.word	0x4004d000
    1dc4:	4004b010 	.word	0x4004b010

00001dc8 <serial2_set_rx>:
serial2_set_rx():
C:\Teensy\Projects\HelloWorld/serial2.c:275
}

void serial2_set_rx(uint8_t pin)
{
	#if defined(KINETISK)
	if (pin == rx_pin_num) return;
    1dc8:	4a0f      	ldr	r2, [pc, #60]	; (1e08 <serial2_set_rx+0x40>)
    1dca:	7813      	ldrb	r3, [r2, #0]
    1dcc:	4298      	cmp	r0, r3
    1dce:	d01a      	beq.n	1e06 <serial2_set_rx+0x3e>
C:\Teensy\Projects\HelloWorld/serial2.c:276
	if ((SIM_SCGC4 & SIM_SCGC4_UART1)) {
    1dd0:	490e      	ldr	r1, [pc, #56]	; (1e0c <serial2_set_rx+0x44>)
    1dd2:	6809      	ldr	r1, [r1, #0]
    1dd4:	0509      	lsls	r1, r1, #20
    1dd6:	d515      	bpl.n	1e04 <serial2_set_rx+0x3c>
C:\Teensy\Projects\HelloWorld/serial2.c:277
		switch (rx_pin_num) {
    1dd8:	2b09      	cmp	r3, #9
    1dda:	d004      	beq.n	1de6 <serial2_set_rx+0x1e>
    1ddc:	2b3b      	cmp	r3, #59	; 0x3b
    1dde:	d105      	bne.n	1dec <serial2_set_rx+0x24>
C:\Teensy\Projects\HelloWorld/serial2.c:282
			case 9: CORE_PIN9_CONFIG = 0; break; // PTC3
			#if defined(__MK20DX128__) || defined(__MK20DX256__)  // T3.0, T3.1, T3.2
			case 26: CORE_PIN26_CONFIG = 0; break; // PTE1
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 59: CORE_PIN59_CONFIG = 0; break;
    1de0:	2100      	movs	r1, #0
    1de2:	4b0b      	ldr	r3, [pc, #44]	; (1e10 <serial2_set_rx+0x48>)
    1de4:	e001      	b.n	1dea <serial2_set_rx+0x22>
C:\Teensy\Projects\HelloWorld/serial2.c:278
{
	#if defined(KINETISK)
	if (pin == rx_pin_num) return;
	if ((SIM_SCGC4 & SIM_SCGC4_UART1)) {
		switch (rx_pin_num) {
			case 9: CORE_PIN9_CONFIG = 0; break; // PTC3
    1de6:	4b0b      	ldr	r3, [pc, #44]	; (1e14 <serial2_set_rx+0x4c>)
    1de8:	2100      	movs	r1, #0
C:\Teensy\Projects\HelloWorld/serial2.c:282
			#if defined(__MK20DX128__) || defined(__MK20DX256__)  // T3.0, T3.1, T3.2
			case 26: CORE_PIN26_CONFIG = 0; break; // PTE1
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 59: CORE_PIN59_CONFIG = 0; break;
    1dea:	6019      	str	r1, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial2.c:285
			#endif
		}
		switch (pin) {
    1dec:	2809      	cmp	r0, #9
    1dee:	d005      	beq.n	1dfc <serial2_set_rx+0x34>
    1df0:	283b      	cmp	r0, #59	; 0x3b
    1df2:	d107      	bne.n	1e04 <serial2_set_rx+0x3c>
C:\Teensy\Projects\HelloWorld/serial2.c:290
			case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
			#if defined(__MK20DX128__) || defined(__MK20DX256__)  // T3.0, T3.1, T3.2
			case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 59: CORE_PIN59_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    1df4:	f240 3113 	movw	r1, #787	; 0x313
    1df8:	4b05      	ldr	r3, [pc, #20]	; (1e10 <serial2_set_rx+0x48>)
    1dfa:	e002      	b.n	1e02 <serial2_set_rx+0x3a>
C:\Teensy\Projects\HelloWorld/serial2.c:286
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 59: CORE_PIN59_CONFIG = 0; break;
			#endif
		}
		switch (pin) {
			case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    1dfc:	4b05      	ldr	r3, [pc, #20]	; (1e14 <serial2_set_rx+0x4c>)
    1dfe:	f240 3113 	movw	r1, #787	; 0x313
C:\Teensy\Projects\HelloWorld/serial2.c:290
			#if defined(__MK20DX128__) || defined(__MK20DX256__)  // T3.0, T3.1, T3.2
			case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 59: CORE_PIN59_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    1e02:	6019      	str	r1, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial2.c:294
			#endif
		}
	}
	rx_pin_num = pin;
    1e04:	7010      	strb	r0, [r2, #0]
    1e06:	4770      	bx	lr
    1e08:	1fff0a09 	.word	0x1fff0a09
    1e0c:	40048034 	.word	0x40048034
    1e10:	4004d004 	.word	0x4004d004
    1e14:	4004b00c 	.word	0x4004b00c

00001e18 <serial2_set_rts>:
serial2_set_rts():
C:\Teensy\Projects\HelloWorld/serial2.c:300
	#endif
}

int serial2_set_rts(uint8_t pin)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    1e18:	4a0d      	ldr	r2, [pc, #52]	; (1e50 <serial2_set_rts+0x38>)
C:\Teensy\Projects\HelloWorld/serial2.c:299
	rx_pin_num = pin;
	#endif
}

int serial2_set_rts(uint8_t pin)
{
    1e1a:	b538      	push	{r3, r4, r5, lr}
C:\Teensy\Projects\HelloWorld/serial2.c:300
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    1e1c:	6814      	ldr	r4, [r2, #0]
    1e1e:	f414 6200 	ands.w	r2, r4, #2048	; 0x800
    1e22:	f04f 0400 	mov.w	r4, #0
    1e26:	d010      	beq.n	1e4a <serial2_set_rts+0x32>
C:\Teensy\Projects\HelloWorld/serial2.c:301
	if (pin < CORE_NUM_DIGITAL) {
    1e28:	283f      	cmp	r0, #63	; 0x3f
    1e2a:	4d0a      	ldr	r5, [pc, #40]	; (1e54 <serial2_set_rts+0x3c>)
    1e2c:	d80a      	bhi.n	1e44 <serial2_set_rts+0x2c>
C:\Teensy\Projects\HelloWorld/serial2.c:302
		rts_pin = portOutputRegister(pin);
    1e2e:	4a0a      	ldr	r2, [pc, #40]	; (1e58 <serial2_set_rts+0x40>)
C:\Teensy\Projects\HelloWorld/serial2.c:306
		#if defined(KINETISL)
		rts_mask = digitalPinToBitMask(pin);
		#endif
		pinMode(pin, OUTPUT);
    1e30:	2101      	movs	r1, #1
C:\Teensy\Projects\HelloWorld/serial2.c:302

int serial2_set_rts(uint8_t pin)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
	if (pin < CORE_NUM_DIGITAL) {
		rts_pin = portOutputRegister(pin);
    1e32:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
    1e36:	60ab      	str	r3, [r5, #8]
C:\Teensy\Projects\HelloWorld/serial2.c:306
		#if defined(KINETISL)
		rts_mask = digitalPinToBitMask(pin);
		#endif
		pinMode(pin, OUTPUT);
    1e38:	f7fe fffe 	bl	e38 <pinMode>
C:\Teensy\Projects\HelloWorld/serial2.c:307
		rts_assert();
    1e3c:	68ab      	ldr	r3, [r5, #8]
    1e3e:	701c      	strb	r4, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial2.c:322
		UART1_MODEM &= ~UART_MODEM_RXRTSE;
		return 0;
	}
	UART1_MODEM |= UART_MODEM_RXRTSE;
*/
	return 1;
    1e40:	2001      	movs	r0, #1
    1e42:	bd38      	pop	{r3, r4, r5, pc}
C:\Teensy\Projects\HelloWorld/serial2.c:309
		rts_mask = digitalPinToBitMask(pin);
		#endif
		pinMode(pin, OUTPUT);
		rts_assert();
	} else {
		rts_pin = NULL;
    1e44:	60ac      	str	r4, [r5, #8]
C:\Teensy\Projects\HelloWorld/serial2.c:310
		return 0;
    1e46:	4620      	mov	r0, r4
    1e48:	bd38      	pop	{r3, r4, r5, pc}
C:\Teensy\Projects\HelloWorld/serial2.c:300
	#endif
}

int serial2_set_rts(uint8_t pin)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    1e4a:	4610      	mov	r0, r2
C:\Teensy\Projects\HelloWorld/serial2.c:323
		return 0;
	}
	UART1_MODEM |= UART_MODEM_RXRTSE;
*/
	return 1;
}
    1e4c:	bd38      	pop	{r3, r4, r5, pc}
    1e4e:	bf00      	nop
    1e50:	40048034 	.word	0x40048034
    1e54:	1fff0c0c 	.word	0x1fff0c0c
    1e58:	00009e64 	.word	0x00009e64

00001e5c <serial2_set_cts>:
serial2_set_cts():
C:\Teensy\Projects\HelloWorld/serial2.c:328

int serial2_set_cts(uint8_t pin)
{
#if defined(KINETISK)
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    1e5c:	4b0e      	ldr	r3, [pc, #56]	; (1e98 <serial2_set_cts+0x3c>)
    1e5e:	681b      	ldr	r3, [r3, #0]
    1e60:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
    1e64:	d016      	beq.n	1e94 <serial2_set_cts+0x38>
C:\Teensy\Projects\HelloWorld/serial2.c:329
	if (pin == 23) {
    1e66:	2817      	cmp	r0, #23
    1e68:	4b0c      	ldr	r3, [pc, #48]	; (1e9c <serial2_set_cts+0x40>)
    1e6a:	d103      	bne.n	1e74 <serial2_set_cts+0x18>
C:\Teensy\Projects\HelloWorld/serial2.c:330
		CORE_PIN23_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    1e6c:	f240 3102 	movw	r1, #770	; 0x302
    1e70:	4a0b      	ldr	r2, [pc, #44]	; (1ea0 <serial2_set_cts+0x44>)
    1e72:	e004      	b.n	1e7e <serial2_set_cts+0x22>
C:\Teensy\Projects\HelloWorld/serial2.c:332
	#if defined(__MK64FX512__) || defined(__MK66FX1M0__)  // on T3.5 or T3.6
	} else if (pin == 60) {
    1e74:	283c      	cmp	r0, #60	; 0x3c
    1e76:	d109      	bne.n	1e8c <serial2_set_cts+0x30>
C:\Teensy\Projects\HelloWorld/serial2.c:333
		CORE_PIN60_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    1e78:	4a0a      	ldr	r2, [pc, #40]	; (1ea4 <serial2_set_cts+0x48>)
    1e7a:	f240 3102 	movw	r1, #770	; 0x302
    1e7e:	6011      	str	r1, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial2.c:339
	#endif
	} else {
		UART1_MODEM &= ~UART_MODEM_TXCTSE;
		return 0;
	}
	UART1_MODEM |= UART_MODEM_TXCTSE;
    1e80:	7b5a      	ldrb	r2, [r3, #13]
    1e82:	f042 0201 	orr.w	r2, r2, #1
    1e86:	735a      	strb	r2, [r3, #13]
C:\Teensy\Projects\HelloWorld/serial2.c:340
	return 1;
    1e88:	2001      	movs	r0, #1
    1e8a:	4770      	bx	lr
C:\Teensy\Projects\HelloWorld/serial2.c:336
	#if defined(__MK64FX512__) || defined(__MK66FX1M0__)  // on T3.5 or T3.6
	} else if (pin == 60) {
		CORE_PIN60_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
	#endif
	} else {
		UART1_MODEM &= ~UART_MODEM_TXCTSE;
    1e8c:	7b5a      	ldrb	r2, [r3, #13]
    1e8e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    1e92:	735a      	strb	r2, [r3, #13]
C:\Teensy\Projects\HelloWorld/serial2.c:337
		return 0;
    1e94:	2000      	movs	r0, #0
    1e96:	4770      	bx	lr
    1e98:	40048034 	.word	0x40048034
    1e9c:	4006b000 	.word	0x4006b000
    1ea0:	4004b008 	.word	0x4004b008
    1ea4:	4004d008 	.word	0x4004d008

00001ea8 <serial2_putchar>:
serial2_putchar():
C:\Teensy\Projects\HelloWorld/serial2.c:347
	return 0;
#endif
}

void serial2_putchar(uint32_t c)
{
    1ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:\Teensy\Projects\HelloWorld/serial2.c:350
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    1eaa:	4b1b      	ldr	r3, [pc, #108]	; (1f18 <serial2_putchar+0x70>)
    1eac:	681b      	ldr	r3, [r3, #0]
    1eae:	051a      	lsls	r2, r3, #20
C:\Teensy\Projects\HelloWorld/serial2.c:347
	return 0;
#endif
}

void serial2_putchar(uint32_t c)
{
    1eb0:	4607      	mov	r7, r0
C:\Teensy\Projects\HelloWorld/serial2.c:350
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    1eb2:	d530      	bpl.n	1f16 <serial2_putchar+0x6e>
C:\Teensy\Projects\HelloWorld/serial2.c:351
	if (transmit_pin) transmit_assert();
    1eb4:	4e19      	ldr	r6, [pc, #100]	; (1f1c <serial2_putchar+0x74>)
    1eb6:	68f3      	ldr	r3, [r6, #12]
    1eb8:	b10b      	cbz	r3, 1ebe <serial2_putchar+0x16>
C:\Teensy\Projects\HelloWorld/serial2.c:351 (discriminator 1)
    1eba:	2201      	movs	r2, #1
    1ebc:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial2.c:352
	head = tx_buffer_head;
    1ebe:	78b4      	ldrb	r4, [r6, #2]
C:\Teensy\Projects\HelloWorld/serial2.c:353
	if (++head >= SERIAL2_TX_BUFFER_SIZE) head = 0;
    1ec0:	3401      	adds	r4, #1
    1ec2:	2c28      	cmp	r4, #40	; 0x28
    1ec4:	bf28      	it	cs
    1ec6:	2400      	movcs	r4, #0
C:\Teensy\Projects\HelloWorld/serial2.c:354 (discriminator 1)
	while (tx_buffer_tail == head) {
    1ec8:	78f3      	ldrb	r3, [r6, #3]
    1eca:	4d14      	ldr	r5, [pc, #80]	; (1f1c <serial2_putchar+0x74>)
    1ecc:	42a3      	cmp	r3, r4
    1ece:	d118      	bne.n	1f02 <serial2_putchar+0x5a>
C:\Teensy\Projects\HelloWorld/serial2.c:355
		int priority = nvic_execution_priority();
    1ed0:	f7fe fce2 	bl	898 <nvic_execution_priority>
C:\Teensy\Projects\HelloWorld/serial2.c:356
		if (priority <= IRQ_PRIORITY) {
    1ed4:	2840      	cmp	r0, #64	; 0x40
    1ed6:	dc0f      	bgt.n	1ef8 <serial2_putchar+0x50>
C:\Teensy\Projects\HelloWorld/serial2.c:357
			if ((UART1_S1 & UART_S1_TDRE)) {
    1ed8:	4a11      	ldr	r2, [pc, #68]	; (1f20 <serial2_putchar+0x78>)
    1eda:	7913      	ldrb	r3, [r2, #4]
    1edc:	061b      	lsls	r3, r3, #24
    1ede:	d5f3      	bpl.n	1ec8 <serial2_putchar+0x20>
C:\Teensy\Projects\HelloWorld/serial2.c:358
				uint32_t tail = tx_buffer_tail;
    1ee0:	78eb      	ldrb	r3, [r5, #3]
C:\Teensy\Projects\HelloWorld/serial2.c:359
				if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    1ee2:	3301      	adds	r3, #1
    1ee4:	2b28      	cmp	r3, #40	; 0x28
    1ee6:	bf28      	it	cs
    1ee8:	2300      	movcs	r3, #0
C:\Teensy\Projects\HelloWorld/serial2.c:360
				n = tx_buffer[tail];
    1eea:	18f1      	adds	r1, r6, r3
C:\Teensy\Projects\HelloWorld/serial2.c:363
				if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
				UART1_D = n;
				tx_buffer_tail = tail;
    1eec:	b2db      	uxtb	r3, r3
C:\Teensy\Projects\HelloWorld/serial2.c:360
		int priority = nvic_execution_priority();
		if (priority <= IRQ_PRIORITY) {
			if ((UART1_S1 & UART_S1_TDRE)) {
				uint32_t tail = tx_buffer_tail;
				if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
				n = tx_buffer[tail];
    1eee:	7c09      	ldrb	r1, [r1, #16]
    1ef0:	b2c9      	uxtb	r1, r1
C:\Teensy\Projects\HelloWorld/serial2.c:362
				if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
				UART1_D = n;
    1ef2:	71d1      	strb	r1, [r2, #7]
C:\Teensy\Projects\HelloWorld/serial2.c:363
				tx_buffer_tail = tail;
    1ef4:	70f3      	strb	r3, [r6, #3]
    1ef6:	e7e7      	b.n	1ec8 <serial2_putchar+0x20>
C:\Teensy\Projects\HelloWorld/serial2.c:365
			}
		} else if (priority >= 256) {
    1ef8:	28ff      	cmp	r0, #255	; 0xff
    1efa:	dde5      	ble.n	1ec8 <serial2_putchar+0x20>
C:\Teensy\Projects\HelloWorld/serial2.c:366
			yield(); // wait
    1efc:	f003 fb28 	bl	5550 <yield>
    1f00:	e7e2      	b.n	1ec8 <serial2_putchar+0x20>
C:\Teensy\Projects\HelloWorld/serial2.c:369
		}
	}
	tx_buffer[head] = c;
    1f02:	192b      	adds	r3, r5, r4
    1f04:	b2ff      	uxtb	r7, r7
    1f06:	741f      	strb	r7, [r3, #16]
C:\Teensy\Projects\HelloWorld/serial2.c:370
	transmitting = 1;
    1f08:	2301      	movs	r3, #1
    1f0a:	712b      	strb	r3, [r5, #4]
C:\Teensy\Projects\HelloWorld/serial2.c:372
	tx_buffer_head = head;
	UART1_C2 = C2_TX_ACTIVE;
    1f0c:	4b04      	ldr	r3, [pc, #16]	; (1f20 <serial2_putchar+0x78>)
C:\Teensy\Projects\HelloWorld/serial2.c:371
			yield(); // wait
		}
	}
	tx_buffer[head] = c;
	transmitting = 1;
	tx_buffer_head = head;
    1f0e:	b2e4      	uxtb	r4, r4
C:\Teensy\Projects\HelloWorld/serial2.c:372
	UART1_C2 = C2_TX_ACTIVE;
    1f10:	22bc      	movs	r2, #188	; 0xbc
C:\Teensy\Projects\HelloWorld/serial2.c:371
			yield(); // wait
		}
	}
	tx_buffer[head] = c;
	transmitting = 1;
	tx_buffer_head = head;
    1f12:	70ac      	strb	r4, [r5, #2]
C:\Teensy\Projects\HelloWorld/serial2.c:372
	UART1_C2 = C2_TX_ACTIVE;
    1f14:	70da      	strb	r2, [r3, #3]
    1f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1f18:	40048034 	.word	0x40048034
    1f1c:	1fff0c0c 	.word	0x1fff0c0c
    1f20:	4006b000 	.word	0x4006b000

00001f24 <serial2_write>:
serial2_write():
C:\Teensy\Projects\HelloWorld/serial2.c:377
}

#ifdef HAS_KINETISK_UART1_FIFO
void serial2_write(const void *buf, unsigned int count)
{
    1f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
C:\Teensy\Projects\HelloWorld/serial2.c:382
	const uint8_t *p = (const uint8_t *)buf;
	const uint8_t *end = p + count;
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    1f28:	4b23      	ldr	r3, [pc, #140]	; (1fb8 <serial2_write+0x94>)
    1f2a:	681b      	ldr	r3, [r3, #0]
    1f2c:	051a      	lsls	r2, r3, #20
C:\Teensy\Projects\HelloWorld/serial2.c:377
	UART1_C2 = C2_TX_ACTIVE;
}

#ifdef HAS_KINETISK_UART1_FIFO
void serial2_write(const void *buf, unsigned int count)
{
    1f2e:	4607      	mov	r7, r0
    1f30:	4689      	mov	r9, r1
C:\Teensy\Projects\HelloWorld/serial2.c:382
	const uint8_t *p = (const uint8_t *)buf;
	const uint8_t *end = p + count;
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    1f32:	d53e      	bpl.n	1fb2 <serial2_write+0x8e>
C:\Teensy\Projects\HelloWorld/serial2.c:383
	if (transmit_pin) transmit_assert();
    1f34:	4c21      	ldr	r4, [pc, #132]	; (1fbc <serial2_write+0x98>)
    1f36:	68e3      	ldr	r3, [r4, #12]
    1f38:	b10b      	cbz	r3, 1f3e <serial2_write+0x1a>
C:\Teensy\Projects\HelloWorld/serial2.c:383 (discriminator 1)
    1f3a:	2201      	movs	r2, #1
    1f3c:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial2.c:394 (discriminator 1)
			do {
				int priority = nvic_execution_priority();
				if (priority <= IRQ_PRIORITY) {
					if ((UART1_S1 & UART_S1_TDRE)) {
						uint32_t tail = tx_buffer_tail;
						if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    1f3e:	463e      	mov	r6, r7
C:\Teensy\Projects\HelloWorld/serial2.c:379 (discriminator 1)

#ifdef HAS_KINETISK_UART1_FIFO
void serial2_write(const void *buf, unsigned int count)
{
	const uint8_t *p = (const uint8_t *)buf;
	const uint8_t *end = p + count;
    1f40:	eb07 0309 	add.w	r3, r7, r9
C:\Teensy\Projects\HelloWorld/serial2.c:384 (discriminator 1)
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
	if (transmit_pin) transmit_assert();
	while (p < end) {
    1f44:	429e      	cmp	r6, r3
    1f46:	d231      	bcs.n	1fac <serial2_write+0x88>
C:\Teensy\Projects\HelloWorld/serial2.c:385
		head = tx_buffer_head;
    1f48:	78a5      	ldrb	r5, [r4, #2]
C:\Teensy\Projects\HelloWorld/serial2.c:387
		if (++head >= SERIAL2_TX_BUFFER_SIZE) head = 0;
		if (tx_buffer_tail == head) {
    1f4a:	f894 8003 	ldrb.w	r8, [r4, #3]
C:\Teensy\Projects\HelloWorld/serial2.c:386

	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
	if (transmit_pin) transmit_assert();
	while (p < end) {
		head = tx_buffer_head;
		if (++head >= SERIAL2_TX_BUFFER_SIZE) head = 0;
    1f4e:	3501      	adds	r5, #1
    1f50:	2d28      	cmp	r5, #40	; 0x28
    1f52:	bf28      	it	cs
    1f54:	2500      	movcs	r5, #0
C:\Teensy\Projects\HelloWorld/serial2.c:387
		if (tx_buffer_tail == head) {
    1f56:	fa5f f888 	uxtb.w	r8, r8
    1f5a:	45a8      	cmp	r8, r5
    1f5c:	d11d      	bne.n	1f9a <serial2_write+0x76>
C:\Teensy\Projects\HelloWorld/serial2.c:388
			UART1_C2 = C2_TX_ACTIVE;
    1f5e:	4b18      	ldr	r3, [pc, #96]	; (1fc0 <serial2_write+0x9c>)
    1f60:	22bc      	movs	r2, #188	; 0xbc
    1f62:	70da      	strb	r2, [r3, #3]
C:\Teensy\Projects\HelloWorld/serial2.c:390
			do {
				int priority = nvic_execution_priority();
    1f64:	f7fe fc98 	bl	898 <nvic_execution_priority>
C:\Teensy\Projects\HelloWorld/serial2.c:391
				if (priority <= IRQ_PRIORITY) {
    1f68:	2840      	cmp	r0, #64	; 0x40
    1f6a:	dc0f      	bgt.n	1f8c <serial2_write+0x68>
C:\Teensy\Projects\HelloWorld/serial2.c:392
					if ((UART1_S1 & UART_S1_TDRE)) {
    1f6c:	4a14      	ldr	r2, [pc, #80]	; (1fc0 <serial2_write+0x9c>)
    1f6e:	7913      	ldrb	r3, [r2, #4]
    1f70:	061b      	lsls	r3, r3, #24
    1f72:	d50f      	bpl.n	1f94 <serial2_write+0x70>
C:\Teensy\Projects\HelloWorld/serial2.c:393
						uint32_t tail = tx_buffer_tail;
    1f74:	78e3      	ldrb	r3, [r4, #3]
C:\Teensy\Projects\HelloWorld/serial2.c:394
						if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    1f76:	3301      	adds	r3, #1
    1f78:	2b28      	cmp	r3, #40	; 0x28
    1f7a:	bf28      	it	cs
    1f7c:	2300      	movcs	r3, #0
C:\Teensy\Projects\HelloWorld/serial2.c:395
						n = tx_buffer[tail];
    1f7e:	18e1      	adds	r1, r4, r3
C:\Teensy\Projects\HelloWorld/serial2.c:398
						if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
						UART1_D = n;
						tx_buffer_tail = tail;
    1f80:	b2db      	uxtb	r3, r3
C:\Teensy\Projects\HelloWorld/serial2.c:395
				int priority = nvic_execution_priority();
				if (priority <= IRQ_PRIORITY) {
					if ((UART1_S1 & UART_S1_TDRE)) {
						uint32_t tail = tx_buffer_tail;
						if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
						n = tx_buffer[tail];
    1f82:	7c09      	ldrb	r1, [r1, #16]
    1f84:	b2c9      	uxtb	r1, r1
C:\Teensy\Projects\HelloWorld/serial2.c:397
						if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
						UART1_D = n;
    1f86:	71d1      	strb	r1, [r2, #7]
C:\Teensy\Projects\HelloWorld/serial2.c:398
						tx_buffer_tail = tail;
    1f88:	70e3      	strb	r3, [r4, #3]
    1f8a:	e003      	b.n	1f94 <serial2_write+0x70>
C:\Teensy\Projects\HelloWorld/serial2.c:400
					}
				} else if (priority >= 256) {
    1f8c:	28ff      	cmp	r0, #255	; 0xff
    1f8e:	dd01      	ble.n	1f94 <serial2_write+0x70>
C:\Teensy\Projects\HelloWorld/serial2.c:401
					yield();
    1f90:	f003 fade 	bl	5550 <yield>
C:\Teensy\Projects\HelloWorld/serial2.c:403
				}
			} while (tx_buffer_tail == head);
    1f94:	78e3      	ldrb	r3, [r4, #3]
    1f96:	4543      	cmp	r3, r8
    1f98:	d0e4      	beq.n	1f64 <serial2_write+0x40>
C:\Teensy\Projects\HelloWorld/serial2.c:405
		}
		tx_buffer[head] = *p++;
    1f9a:	1963      	adds	r3, r4, r5
    1f9c:	f816 2b01 	ldrb.w	r2, [r6], #1
    1fa0:	741a      	strb	r2, [r3, #16]
C:\Teensy\Projects\HelloWorld/serial2.c:407
		transmitting = 1;
		tx_buffer_head = head;
    1fa2:	b2ed      	uxtb	r5, r5
C:\Teensy\Projects\HelloWorld/serial2.c:406
					yield();
				}
			} while (tx_buffer_tail == head);
		}
		tx_buffer[head] = *p++;
		transmitting = 1;
    1fa4:	2301      	movs	r3, #1
    1fa6:	7123      	strb	r3, [r4, #4]
C:\Teensy\Projects\HelloWorld/serial2.c:407
		tx_buffer_head = head;
    1fa8:	70a5      	strb	r5, [r4, #2]
    1faa:	e7c9      	b.n	1f40 <serial2_write+0x1c>
C:\Teensy\Projects\HelloWorld/serial2.c:409
	}
	UART1_C2 = C2_TX_ACTIVE;
    1fac:	4b04      	ldr	r3, [pc, #16]	; (1fc0 <serial2_write+0x9c>)
    1fae:	22bc      	movs	r2, #188	; 0xbc
    1fb0:	70da      	strb	r2, [r3, #3]
    1fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1fb6:	bf00      	nop
    1fb8:	40048034 	.word	0x40048034
    1fbc:	1fff0c0c 	.word	0x1fff0c0c
    1fc0:	4006b000 	.word	0x4006b000

00001fc4 <serial2_flush>:
serial2_flush():
C:\Teensy\Projects\HelloWorld/serial2.c:420
	while (count-- > 0) serial2_putchar(*p++);
}
#endif

void serial2_flush(void)
{
    1fc4:	b508      	push	{r3, lr}
C:\Teensy\Projects\HelloWorld/serial2.c:421 (discriminator 1)
	while (transmitting) yield(); // wait
    1fc6:	4b03      	ldr	r3, [pc, #12]	; (1fd4 <serial2_flush+0x10>)
    1fc8:	791b      	ldrb	r3, [r3, #4]
    1fca:	b113      	cbz	r3, 1fd2 <serial2_flush+0xe>
C:\Teensy\Projects\HelloWorld/serial2.c:421 (discriminator 2)
    1fcc:	f003 fac0 	bl	5550 <yield>
    1fd0:	e7f9      	b.n	1fc6 <serial2_flush+0x2>
C:\Teensy\Projects\HelloWorld/serial2.c:422
}
    1fd2:	bd08      	pop	{r3, pc}
    1fd4:	1fff0c0c 	.word	0x1fff0c0c

00001fd8 <serial2_write_buffer_free>:
serial2_write_buffer_free():
C:\Teensy\Projects\HelloWorld/serial2.c:428

int serial2_write_buffer_free(void)
{
	uint32_t head, tail;

	head = tx_buffer_head;
    1fd8:	4a05      	ldr	r2, [pc, #20]	; (1ff0 <serial2_write_buffer_free+0x18>)
    1fda:	7893      	ldrb	r3, [r2, #2]
C:\Teensy\Projects\HelloWorld/serial2.c:429
	tail = tx_buffer_tail;
    1fdc:	78d0      	ldrb	r0, [r2, #3]
C:\Teensy\Projects\HelloWorld/serial2.c:428

int serial2_write_buffer_free(void)
{
	uint32_t head, tail;

	head = tx_buffer_head;
    1fde:	b2db      	uxtb	r3, r3
C:\Teensy\Projects\HelloWorld/serial2.c:429
	tail = tx_buffer_tail;
    1fe0:	b2c0      	uxtb	r0, r0
C:\Teensy\Projects\HelloWorld/serial2.c:430
	if (head >= tail) return SERIAL2_TX_BUFFER_SIZE - 1 - head + tail;
    1fe2:	4283      	cmp	r3, r0
    1fe4:	bf2c      	ite	cs
    1fe6:	3027      	addcs	r0, #39	; 0x27
C:\Teensy\Projects\HelloWorld/serial2.c:431
	return tail - head - 1;
    1fe8:	f100 30ff 	addcc.w	r0, r0, #4294967295
    1fec:	1ac0      	subs	r0, r0, r3
C:\Teensy\Projects\HelloWorld/serial2.c:432
}
    1fee:	4770      	bx	lr
    1ff0:	1fff0c0c 	.word	0x1fff0c0c

00001ff4 <serial2_available>:
serial2_available():
C:\Teensy\Projects\HelloWorld/serial2.c:438

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    1ff4:	4a04      	ldr	r2, [pc, #16]	; (2008 <serial2_available+0x14>)
    1ff6:	7810      	ldrb	r0, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial2.c:439
	tail = rx_buffer_tail;
    1ff8:	7853      	ldrb	r3, [r2, #1]
C:\Teensy\Projects\HelloWorld/serial2.c:438

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    1ffa:	b2c0      	uxtb	r0, r0
C:\Teensy\Projects\HelloWorld/serial2.c:439
	tail = rx_buffer_tail;
    1ffc:	b2db      	uxtb	r3, r3
C:\Teensy\Projects\HelloWorld/serial2.c:440
	if (head >= tail) return head - tail;
    1ffe:	4298      	cmp	r0, r3
C:\Teensy\Projects\HelloWorld/serial2.c:441
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    2000:	bf38      	it	cc
    2002:	3040      	addcc	r0, #64	; 0x40
    2004:	1ac0      	subs	r0, r0, r3
C:\Teensy\Projects\HelloWorld/serial2.c:442
}
    2006:	4770      	bx	lr
    2008:	1fff0c0c 	.word	0x1fff0c0c

0000200c <serial2_getchar>:
serial2_getchar():
C:\Teensy\Projects\HelloWorld/serial2.c:445

int serial2_getchar(void)
{
    200c:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/serial2.c:449
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    200e:	4a0f      	ldr	r2, [pc, #60]	; (204c <serial2_getchar+0x40>)
    2010:	7811      	ldrb	r1, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial2.c:450
	tail = rx_buffer_tail;
    2012:	7853      	ldrb	r3, [r2, #1]
C:\Teensy\Projects\HelloWorld/serial2.c:449
int serial2_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    2014:	b2c9      	uxtb	r1, r1
C:\Teensy\Projects\HelloWorld/serial2.c:450
	tail = rx_buffer_tail;
    2016:	b2db      	uxtb	r3, r3
C:\Teensy\Projects\HelloWorld/serial2.c:451
	if (head == tail) return -1;
    2018:	4299      	cmp	r1, r3
    201a:	d014      	beq.n	2046 <serial2_getchar+0x3a>
C:\Teensy\Projects\HelloWorld/serial2.c:452
	if (++tail >= SERIAL2_RX_BUFFER_SIZE) tail = 0;
    201c:	3301      	adds	r3, #1
    201e:	2b40      	cmp	r3, #64	; 0x40
    2020:	bf28      	it	cs
    2022:	2300      	movcs	r3, #0
C:\Teensy\Projects\HelloWorld/serial2.c:453
	c = rx_buffer[tail];
    2024:	18d0      	adds	r0, r2, r3
C:\Teensy\Projects\HelloWorld/serial2.c:454
	rx_buffer_tail = tail;
    2026:	b2dc      	uxtb	r4, r3
C:\Teensy\Projects\HelloWorld/serial2.c:453

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL2_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
    2028:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
C:\Teensy\Projects\HelloWorld/serial2.c:454
	rx_buffer_tail = tail;
    202c:	7054      	strb	r4, [r2, #1]
C:\Teensy\Projects\HelloWorld/serial2.c:455
	if (rts_pin) {
    202e:	6892      	ldr	r2, [r2, #8]
C:\Teensy\Projects\HelloWorld/serial2.c:453

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL2_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
    2030:	b2c0      	uxtb	r0, r0
C:\Teensy\Projects\HelloWorld/serial2.c:455
	rx_buffer_tail = tail;
	if (rts_pin) {
    2032:	b152      	cbz	r2, 204a <serial2_getchar+0x3e>
C:\Teensy\Projects\HelloWorld/serial2.c:457
		int avail;
		if (head >= tail) avail = head - tail;
    2034:	4299      	cmp	r1, r3
C:\Teensy\Projects\HelloWorld/serial2.c:458
		else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    2036:	bf38      	it	cc
    2038:	3140      	addcc	r1, #64	; 0x40
    203a:	1acb      	subs	r3, r1, r3
C:\Teensy\Projects\HelloWorld/serial2.c:459
		if (avail <= RTS_LOW_WATERMARK) rts_assert();
    203c:	2b1a      	cmp	r3, #26
    203e:	dc04      	bgt.n	204a <serial2_getchar+0x3e>
C:\Teensy\Projects\HelloWorld/serial2.c:459 (discriminator 1)
    2040:	2300      	movs	r3, #0
    2042:	7013      	strb	r3, [r2, #0]
    2044:	bd10      	pop	{r4, pc}
C:\Teensy\Projects\HelloWorld/serial2.c:451
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    2046:	f04f 30ff 	mov.w	r0, #4294967295
C:\Teensy\Projects\HelloWorld/serial2.c:462
		if (head >= tail) avail = head - tail;
		else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
		if (avail <= RTS_LOW_WATERMARK) rts_assert();
	}
	return c;
}
    204a:	bd10      	pop	{r4, pc}
    204c:	1fff0c0c 	.word	0x1fff0c0c

00002050 <serial2_peek>:
serial2_peek():
C:\Teensy\Projects\HelloWorld/serial2.c:468

int serial2_peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2050:	4a08      	ldr	r2, [pc, #32]	; (2074 <serial2_peek+0x24>)
    2052:	7811      	ldrb	r1, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial2.c:469
	tail = rx_buffer_tail;
    2054:	7853      	ldrb	r3, [r2, #1]
    2056:	b2db      	uxtb	r3, r3
C:\Teensy\Projects\HelloWorld/serial2.c:470
	if (head == tail) return -1;
    2058:	4299      	cmp	r1, r3
    205a:	d008      	beq.n	206e <serial2_peek+0x1e>
C:\Teensy\Projects\HelloWorld/serial2.c:471
	if (++tail >= SERIAL2_RX_BUFFER_SIZE) tail = 0;
    205c:	3301      	adds	r3, #1
    205e:	2b40      	cmp	r3, #64	; 0x40
    2060:	bf28      	it	cs
    2062:	2300      	movcs	r3, #0
C:\Teensy\Projects\HelloWorld/serial2.c:472
	return rx_buffer[tail];
    2064:	4413      	add	r3, r2
    2066:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
    206a:	b2c0      	uxtb	r0, r0
    206c:	4770      	bx	lr
C:\Teensy\Projects\HelloWorld/serial2.c:470
{
	uint32_t head, tail;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    206e:	f04f 30ff 	mov.w	r0, #4294967295
C:\Teensy\Projects\HelloWorld/serial2.c:473
	if (++tail >= SERIAL2_RX_BUFFER_SIZE) tail = 0;
	return rx_buffer[tail];
}
    2072:	4770      	bx	lr
    2074:	1fff0c0c 	.word	0x1fff0c0c

00002078 <serial2_clear>:
serial2_clear():
C:\Teensy\Projects\HelloWorld/serial2.c:478

void serial2_clear(void)
{
#ifdef HAS_KINETISK_UART1_FIFO
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    2078:	4b0b      	ldr	r3, [pc, #44]	; (20a8 <serial2_clear+0x30>)
    207a:	681b      	ldr	r3, [r3, #0]
    207c:	051b      	lsls	r3, r3, #20
    207e:	d512      	bpl.n	20a6 <serial2_clear+0x2e>
C:\Teensy\Projects\HelloWorld/serial2.c:479
	UART1_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    2080:	4b0a      	ldr	r3, [pc, #40]	; (20ac <serial2_clear+0x34>)
    2082:	78da      	ldrb	r2, [r3, #3]
    2084:	f002 02cb 	and.w	r2, r2, #203	; 0xcb
    2088:	70da      	strb	r2, [r3, #3]
C:\Teensy\Projects\HelloWorld/serial2.c:480
	UART1_CFIFO = UART_CFIFO_RXFLUSH;
    208a:	2240      	movs	r2, #64	; 0x40
    208c:	745a      	strb	r2, [r3, #17]
C:\Teensy\Projects\HelloWorld/serial2.c:481
	UART1_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    208e:	78da      	ldrb	r2, [r3, #3]
    2090:	f042 0234 	orr.w	r2, r2, #52	; 0x34
    2094:	70da      	strb	r2, [r3, #3]
C:\Teensy\Projects\HelloWorld/serial2.c:483
#endif
	rx_buffer_head = rx_buffer_tail;
    2096:	4b06      	ldr	r3, [pc, #24]	; (20b0 <serial2_clear+0x38>)
    2098:	785a      	ldrb	r2, [r3, #1]
    209a:	b2d2      	uxtb	r2, r2
    209c:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial2.c:484
	if (rts_pin) rts_assert();
    209e:	689b      	ldr	r3, [r3, #8]
    20a0:	b10b      	cbz	r3, 20a6 <serial2_clear+0x2e>
C:\Teensy\Projects\HelloWorld/serial2.c:484 (discriminator 1)
    20a2:	2200      	movs	r2, #0
    20a4:	701a      	strb	r2, [r3, #0]
    20a6:	4770      	bx	lr
    20a8:	40048034 	.word	0x40048034
    20ac:	4006b000 	.word	0x4006b000
    20b0:	1fff0c0c 	.word	0x1fff0c0c

000020b4 <uart1_status_isr>:
uart1_status_isr():
C:\Teensy\Projects\HelloWorld/serial2.c:496
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    20b4:	b530      	push	{r4, r5, lr}
C:\Teensy\Projects\HelloWorld/serial2.c:503
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    20b6:	4b35      	ldr	r3, [pc, #212]	; (218c <uart1_status_isr+0xd8>)
    20b8:	791a      	ldrb	r2, [r3, #4]
    20ba:	f012 0f30 	tst.w	r2, #48	; 0x30
    20be:	d02f      	beq.n	2120 <uart1_status_isr+0x6c>
C:\Teensy\Projects\HelloWorld/serial2.c:504
		__disable_irq();
    20c0:	b672      	cpsid	i
C:\Teensy\Projects\HelloWorld/serial2.c:505
		avail = UART1_RCFIFO;
    20c2:	7d9a      	ldrb	r2, [r3, #22]
C:\Teensy\Projects\HelloWorld/serial2.c:506
		if (avail == 0) {
    20c4:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    20c8:	b922      	cbnz	r2, 20d4 <uart1_status_isr+0x20>
C:\Teensy\Projects\HelloWorld/serial2.c:513
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    20ca:	79da      	ldrb	r2, [r3, #7]
C:\Teensy\Projects\HelloWorld/serial2.c:523
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    20cc:	2240      	movs	r2, #64	; 0x40
    20ce:	745a      	strb	r2, [r3, #17]
C:\Teensy\Projects\HelloWorld/serial2.c:524
			__enable_irq();
    20d0:	b662      	cpsie	i
    20d2:	e025      	b.n	2120 <uart1_status_isr+0x6c>
C:\Teensy\Projects\HelloWorld/serial2.c:526
		} else {
			__enable_irq();
    20d4:	b662      	cpsie	i
C:\Teensy\Projects\HelloWorld/serial2.c:527
			head = rx_buffer_head;
    20d6:	482e      	ldr	r0, [pc, #184]	; (2190 <uart1_status_isr+0xdc>)
    20d8:	7803      	ldrb	r3, [r0, #0]
C:\Teensy\Projects\HelloWorld/serial2.c:528
			tail = rx_buffer_tail;
    20da:	7841      	ldrb	r1, [r0, #1]
C:\Teensy\Projects\HelloWorld/serial2.c:527
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    20dc:	b2db      	uxtb	r3, r3
C:\Teensy\Projects\HelloWorld/serial2.c:528
			tail = rx_buffer_tail;
    20de:	b2c9      	uxtb	r1, r1
C:\Teensy\Projects\HelloWorld/serial2.c:533
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    20e0:	4a2a      	ldr	r2, [pc, #168]	; (218c <uart1_status_isr+0xd8>)
    20e2:	79d5      	ldrb	r5, [r2, #7]
C:\Teensy\Projects\HelloWorld/serial2.c:535
				}
				newhead = head + 1;
    20e4:	1c5a      	adds	r2, r3, #1
C:\Teensy\Projects\HelloWorld/serial2.c:536
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    20e6:	2a40      	cmp	r2, #64	; 0x40
    20e8:	bf28      	it	cs
    20ea:	2200      	movcs	r2, #0
C:\Teensy\Projects\HelloWorld/serial2.c:537
				if (newhead != tail) {
    20ec:	428a      	cmp	r2, r1
C:\Teensy\Projects\HelloWorld/serial2.c:533
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    20ee:	b2ed      	uxtb	r5, r5
C:\Teensy\Projects\HelloWorld/serial2.c:537
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
    20f0:	d003      	beq.n	20fa <uart1_status_isr+0x46>
C:\Teensy\Projects\HelloWorld/serial2.c:539
					head = newhead;
					rx_buffer[head] = n;
    20f2:	1883      	adds	r3, r0, r2
    20f4:	f883 5038 	strb.w	r5, [r3, #56]	; 0x38
    20f8:	4613      	mov	r3, r2
C:\Teensy\Projects\HelloWorld/serial2.c:541
				}
			} while (--avail > 0);
    20fa:	1e62      	subs	r2, r4, #1
    20fc:	f012 04ff 	ands.w	r4, r2, #255	; 0xff
    2100:	d1ee      	bne.n	20e0 <uart1_status_isr+0x2c>
C:\Teensy\Projects\HelloWorld/serial2.c:542
			rx_buffer_head = head;
    2102:	b2da      	uxtb	r2, r3
    2104:	7002      	strb	r2, [r0, #0]
C:\Teensy\Projects\HelloWorld/serial2.c:543
			if (rts_pin) {
    2106:	6882      	ldr	r2, [r0, #8]
    2108:	b152      	cbz	r2, 2120 <uart1_status_isr+0x6c>
C:\Teensy\Projects\HelloWorld/serial2.c:545
				int avail;
				if (head >= tail) avail = head - tail;
    210a:	428b      	cmp	r3, r1
C:\Teensy\Projects\HelloWorld/serial2.c:546
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    210c:	bf36      	itet	cc
    210e:	f1c1 0140 	rsbcc	r1, r1, #64	; 0x40
C:\Teensy\Projects\HelloWorld/serial2.c:545
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    2112:	ebc1 0303 	rsbcs	r3, r1, r3
C:\Teensy\Projects\HelloWorld/serial2.c:546
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    2116:	185b      	addcc	r3, r3, r1
C:\Teensy\Projects\HelloWorld/serial2.c:547
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    2118:	2b27      	cmp	r3, #39	; 0x27
    211a:	bfc4      	itt	gt
    211c:	2301      	movgt	r3, #1
    211e:	7013      	strbgt	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial2.c:551
			}
		}
	}
	c = UART1_C2;
    2120:	4b1a      	ldr	r3, [pc, #104]	; (218c <uart1_status_isr+0xd8>)
    2122:	78d9      	ldrb	r1, [r3, #3]
    2124:	b2c9      	uxtb	r1, r1
C:\Teensy\Projects\HelloWorld/serial2.c:552
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    2126:	060c      	lsls	r4, r1, #24
    2128:	d51f      	bpl.n	216a <uart1_status_isr+0xb6>
C:\Teensy\Projects\HelloWorld/serial2.c:552 (discriminator 1)
    212a:	791b      	ldrb	r3, [r3, #4]
    212c:	0618      	lsls	r0, r3, #24
    212e:	d51c      	bpl.n	216a <uart1_status_isr+0xb6>
C:\Teensy\Projects\HelloWorld/serial2.c:553
		head = tx_buffer_head;
    2130:	4a17      	ldr	r2, [pc, #92]	; (2190 <uart1_status_isr+0xdc>)
    2132:	7895      	ldrb	r5, [r2, #2]
C:\Teensy\Projects\HelloWorld/serial2.c:554
		tail = tx_buffer_tail;
    2134:	78d3      	ldrb	r3, [r2, #3]
C:\Teensy\Projects\HelloWorld/serial2.c:553
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2136:	b2ed      	uxtb	r5, r5
C:\Teensy\Projects\HelloWorld/serial2.c:554
		tail = tx_buffer_tail;
    2138:	b2db      	uxtb	r3, r3
    213a:	4610      	mov	r0, r2
C:\Teensy\Projects\HelloWorld/serial2.c:556
		do {
			if (tail == head) break;
    213c:	42ab      	cmp	r3, r5
    213e:	d00c      	beq.n	215a <uart1_status_isr+0xa6>
C:\Teensy\Projects\HelloWorld/serial2.c:557
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    2140:	3301      	adds	r3, #1
C:\Teensy\Projects\HelloWorld/serial2.c:558
			avail = UART1_S1;
    2142:	4a12      	ldr	r2, [pc, #72]	; (218c <uart1_status_isr+0xd8>)
C:\Teensy\Projects\HelloWorld/serial2.c:557
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		do {
			if (tail == head) break;
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    2144:	2b28      	cmp	r3, #40	; 0x28
    2146:	bf28      	it	cs
    2148:	2300      	movcs	r3, #0
C:\Teensy\Projects\HelloWorld/serial2.c:558
			avail = UART1_S1;
    214a:	7914      	ldrb	r4, [r2, #4]
C:\Teensy\Projects\HelloWorld/serial2.c:559
			n = tx_buffer[tail];
    214c:	18c4      	adds	r4, r0, r3
    214e:	7c24      	ldrb	r4, [r4, #16]
    2150:	b2e4      	uxtb	r4, r4
C:\Teensy\Projects\HelloWorld/serial2.c:561
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    2152:	71d4      	strb	r4, [r2, #7]
C:\Teensy\Projects\HelloWorld/serial2.c:562
		} while (UART1_TCFIFO < 8);
    2154:	7d12      	ldrb	r2, [r2, #20]
    2156:	2a07      	cmp	r2, #7
    2158:	d9f0      	bls.n	213c <uart1_status_isr+0x88>
C:\Teensy\Projects\HelloWorld/serial2.c:563
		tx_buffer_tail = tail;
    215a:	b2db      	uxtb	r3, r3
    215c:	70c3      	strb	r3, [r0, #3]
C:\Teensy\Projects\HelloWorld/serial2.c:564
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    215e:	4b0b      	ldr	r3, [pc, #44]	; (218c <uart1_status_isr+0xd8>)
    2160:	791a      	ldrb	r2, [r3, #4]
    2162:	0612      	lsls	r2, r2, #24
    2164:	bf44      	itt	mi
    2166:	227c      	movmi	r2, #124	; 0x7c
    2168:	70da      	strbmi	r2, [r3, #3]
C:\Teensy\Projects\HelloWorld/serial2.c:592
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    216a:	064b      	lsls	r3, r1, #25
    216c:	d50d      	bpl.n	218a <uart1_status_isr+0xd6>
C:\Teensy\Projects\HelloWorld/serial2.c:592 (discriminator 1)
    216e:	4b07      	ldr	r3, [pc, #28]	; (218c <uart1_status_isr+0xd8>)
    2170:	791a      	ldrb	r2, [r3, #4]
    2172:	f012 0f40 	tst.w	r2, #64	; 0x40
    2176:	4619      	mov	r1, r3
    2178:	d007      	beq.n	218a <uart1_status_isr+0xd6>
C:\Teensy\Projects\HelloWorld/serial2.c:593
		transmitting = 0;
    217a:	4b05      	ldr	r3, [pc, #20]	; (2190 <uart1_status_isr+0xdc>)
    217c:	2200      	movs	r2, #0
    217e:	711a      	strb	r2, [r3, #4]
C:\Teensy\Projects\HelloWorld/serial2.c:594
		if (transmit_pin) transmit_deassert();
    2180:	68db      	ldr	r3, [r3, #12]
    2182:	b103      	cbz	r3, 2186 <uart1_status_isr+0xd2>
C:\Teensy\Projects\HelloWorld/serial2.c:594 (discriminator 1)
    2184:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial2.c:595
		UART1_C2 = C2_TX_INACTIVE;
    2186:	233c      	movs	r3, #60	; 0x3c
    2188:	70cb      	strb	r3, [r1, #3]
    218a:	bd30      	pop	{r4, r5, pc}
    218c:	4006b000 	.word	0x4006b000
    2190:	1fff0c0c 	.word	0x1fff0c0c

00002194 <serial3_begin>:
serial3_begin():
C:\Teensy\Projects\HelloWorld/serial3.c:111
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial3_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    2194:	4b14      	ldr	r3, [pc, #80]	; (21e8 <serial3_begin+0x54>)
    2196:	681a      	ldr	r2, [r3, #0]
    2198:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    219c:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial3.c:112
	rx_buffer_head = 0;
    219e:	4a13      	ldr	r2, [pc, #76]	; (21ec <serial3_begin+0x58>)
    21a0:	2300      	movs	r3, #0
    21a2:	7013      	strb	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial3.c:113
	rx_buffer_tail = 0;
    21a4:	7053      	strb	r3, [r2, #1]
C:\Teensy\Projects\HelloWorld/serial3.c:114
	tx_buffer_head = 0;
    21a6:	7093      	strb	r3, [r2, #2]
C:\Teensy\Projects\HelloWorld/serial3.c:115
	tx_buffer_tail = 0;
    21a8:	70d3      	strb	r3, [r2, #3]
C:\Teensy\Projects\HelloWorld/serial3.c:116
	transmitting = 0;
    21aa:	7113      	strb	r3, [r2, #4]
C:\Teensy\Projects\HelloWorld/serial3.c:118
#if defined(KINETISK)
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
    21ac:	4a10      	ldr	r2, [pc, #64]	; (21f0 <serial3_begin+0x5c>)
    21ae:	f240 3113 	movw	r1, #787	; 0x313
    21b2:	6011      	str	r1, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial3.c:119
	CORE_PIN8_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
    21b4:	f44f 7151 	mov.w	r1, #836	; 0x344
    21b8:	6051      	str	r1, [r2, #4]
C:\Teensy\Projects\HelloWorld/serial3.c:131
		case 8:  CORE_PIN8_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		case 20: CORE_PIN20_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
	}
#endif
#if defined(HAS_KINETISK_UART2)
	UART2_BDH = (divisor >> 13) & 0x1F;
    21ba:	4a0e      	ldr	r2, [pc, #56]	; (21f4 <serial3_begin+0x60>)
    21bc:	f3c0 3144 	ubfx	r1, r0, #13, #5
    21c0:	7011      	strb	r1, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial3.c:132
	UART2_BDL = (divisor >> 5) & 0xFF;
    21c2:	f3c0 1147 	ubfx	r1, r0, #5, #8
C:\Teensy\Projects\HelloWorld/serial3.c:133
	UART2_C4 = divisor & 0x1F;
    21c6:	f000 001f 	and.w	r0, r0, #31
C:\Teensy\Projects\HelloWorld/serial3.c:132
		case 20: CORE_PIN20_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
	}
#endif
#if defined(HAS_KINETISK_UART2)
	UART2_BDH = (divisor >> 13) & 0x1F;
	UART2_BDL = (divisor >> 5) & 0xFF;
    21ca:	7051      	strb	r1, [r2, #1]
C:\Teensy\Projects\HelloWorld/serial3.c:133
	UART2_C4 = divisor & 0x1F;
    21cc:	7290      	strb	r0, [r2, #10]
C:\Teensy\Projects\HelloWorld/serial3.c:134
	UART2_C1 = 0;
    21ce:	7093      	strb	r3, [r2, #2]
C:\Teensy\Projects\HelloWorld/serial3.c:135
	UART2_PFIFO = 0;
    21d0:	7413      	strb	r3, [r2, #16]
C:\Teensy\Projects\HelloWorld/serial3.c:141
#elif defined(HAS_KINETISL_UART2)
	UART2_BDH = (divisor >> 8) & 0x1F;
	UART2_BDL = divisor & 0xFF;
	UART2_C1 = 0;
#endif
	UART2_C2 = C2_TX_INACTIVE;
    21d2:	232c      	movs	r3, #44	; 0x2c
    21d4:	70d3      	strb	r3, [r2, #3]
C:\Teensy\Projects\HelloWorld/serial3.c:142
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    21d6:	4b08      	ldr	r3, [pc, #32]	; (21f8 <serial3_begin+0x64>)
    21d8:	2240      	movs	r2, #64	; 0x40
    21da:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial3.c:143
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    21dc:	f2a3 331f 	subw	r3, r3, #799	; 0x31f
    21e0:	2208      	movs	r2, #8
    21e2:	601a      	str	r2, [r3, #0]
    21e4:	4770      	bx	lr
    21e6:	bf00      	nop
    21e8:	40048034 	.word	0x40048034
    21ec:	1fff0c84 	.word	0x1fff0c84
    21f0:	4004c008 	.word	0x4004c008
    21f4:	4006c000 	.word	0x4006c000
    21f8:	e000e423 	.word	0xe000e423

000021fc <serial3_format>:
serial3_format():
C:\Teensy\Projects\HelloWorld/serial3.c:150

void serial3_format(uint32_t format)
{
	uint8_t c;

	c = UART2_C1;
    21fc:	4a19      	ldr	r2, [pc, #100]	; (2264 <serial3_format+0x68>)
    21fe:	7893      	ldrb	r3, [r2, #2]
C:\Teensy\Projects\HelloWorld/serial3.c:151
	c = (c & ~0x13) | (format & 0x03);	// configure parity
    2200:	f000 0103 	and.w	r1, r0, #3
    2204:	f003 03ec 	and.w	r3, r3, #236	; 0xec
    2208:	430b      	orrs	r3, r1
C:\Teensy\Projects\HelloWorld/serial3.c:152
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    220a:	0741      	lsls	r1, r0, #29
    220c:	bf48      	it	mi
    220e:	f043 0310 	orrmi.w	r3, r3, #16
C:\Teensy\Projects\HelloWorld/serial3.c:153
	UART2_C1 = c;
    2212:	7093      	strb	r3, [r2, #2]
C:\Teensy\Projects\HelloWorld/serial3.c:154
	if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    2214:	f000 030f 	and.w	r3, r0, #15
    2218:	2b04      	cmp	r3, #4
C:\Teensy\Projects\HelloWorld/serial3.c:153
	uint8_t c;

	c = UART2_C1;
	c = (c & ~0x13) | (format & 0x03);	// configure parity
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
	UART2_C1 = c;
    221a:	4912      	ldr	r1, [pc, #72]	; (2264 <serial3_format+0x68>)
C:\Teensy\Projects\HelloWorld/serial3.c:154
	if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    221c:	d103      	bne.n	2226 <serial3_format+0x2a>
C:\Teensy\Projects\HelloWorld/serial3.c:154 (discriminator 1)
    221e:	798b      	ldrb	r3, [r1, #6]
    2220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2224:	718b      	strb	r3, [r1, #6]
C:\Teensy\Projects\HelloWorld/serial3.c:155
	c = UART2_S2 & ~0x10;
    2226:	7952      	ldrb	r2, [r2, #5]
C:\Teensy\Projects\HelloWorld/serial3.c:157
	if (format & 0x10) c |= 0x10;		// rx invert
	UART2_S2 = c;
    2228:	4b0e      	ldr	r3, [pc, #56]	; (2264 <serial3_format+0x68>)
C:\Teensy\Projects\HelloWorld/serial3.c:155
	c = UART2_C1;
	c = (c & ~0x13) | (format & 0x03);	// configure parity
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
	UART2_C1 = c;
	if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
	c = UART2_S2 & ~0x10;
    222a:	f002 02ef 	and.w	r2, r2, #239	; 0xef
C:\Teensy\Projects\HelloWorld/serial3.c:156
	if (format & 0x10) c |= 0x10;		// rx invert
    222e:	06c1      	lsls	r1, r0, #27
    2230:	bf48      	it	mi
    2232:	f042 0210 	orrmi.w	r2, r2, #16
C:\Teensy\Projects\HelloWorld/serial3.c:157
	UART2_S2 = c;
    2236:	715a      	strb	r2, [r3, #5]
C:\Teensy\Projects\HelloWorld/serial3.c:158
	c = UART2_C3 & ~0x10;
    2238:	799a      	ldrb	r2, [r3, #6]
C:\Teensy\Projects\HelloWorld/serial3.c:159
	if (format & 0x20) c |= 0x10;		// tx invert
    223a:	f010 0f20 	tst.w	r0, #32
C:\Teensy\Projects\HelloWorld/serial3.c:158
	UART2_C1 = c;
	if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
	c = UART2_S2 & ~0x10;
	if (format & 0x10) c |= 0x10;		// rx invert
	UART2_S2 = c;
	c = UART2_C3 & ~0x10;
    223e:	f002 02ef 	and.w	r2, r2, #239	; 0xef
    2242:	4619      	mov	r1, r3
C:\Teensy\Projects\HelloWorld/serial3.c:159
	if (format & 0x20) c |= 0x10;		// tx invert
    2244:	bf18      	it	ne
    2246:	f042 0210 	orrne.w	r2, r2, #16
C:\Teensy\Projects\HelloWorld/serial3.c:160
	UART2_C3 = c;
    224a:	718a      	strb	r2, [r1, #6]
C:\Teensy\Projects\HelloWorld/serial3.c:169
	UART2_C4 = c;
	use9Bits = format & 0x80;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(KINETISL)
	// For T3.5/T3.6/TLC See about turning on 2 stop bit mode
	if ( format & 0x100) {
    224c:	05c2      	lsls	r2, r0, #23
C:\Teensy\Projects\HelloWorld/serial3.c:160
	c = UART2_S2 & ~0x10;
	if (format & 0x10) c |= 0x10;		// rx invert
	UART2_S2 = c;
	c = UART2_C3 & ~0x10;
	if (format & 0x20) c |= 0x10;		// tx invert
	UART2_C3 = c;
    224e:	4b05      	ldr	r3, [pc, #20]	; (2264 <serial3_format+0x68>)
C:\Teensy\Projects\HelloWorld/serial3.c:169
	UART2_C4 = c;
	use9Bits = format & 0x80;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(KINETISL)
	// For T3.5/T3.6/TLC See about turning on 2 stop bit mode
	if ( format & 0x100) {
    2250:	d506      	bpl.n	2260 <serial3_format+0x64>
C:\Teensy\Projects\HelloWorld/serial3.c:170
		uint8_t bdl = UART2_BDL;
    2252:	785a      	ldrb	r2, [r3, #1]
C:\Teensy\Projects\HelloWorld/serial3.c:171
		UART2_BDH |= UART_BDH_SBNS;		// Turn on 2 stop bits - was turned off by set baud
    2254:	7819      	ldrb	r1, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial3.c:170
	use9Bits = format & 0x80;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(KINETISL)
	// For T3.5/T3.6/TLC See about turning on 2 stop bit mode
	if ( format & 0x100) {
		uint8_t bdl = UART2_BDL;
    2256:	b2d2      	uxtb	r2, r2
C:\Teensy\Projects\HelloWorld/serial3.c:171
		UART2_BDH |= UART_BDH_SBNS;		// Turn on 2 stop bits - was turned off by set baud
    2258:	f041 0120 	orr.w	r1, r1, #32
    225c:	7019      	strb	r1, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial3.c:172
		UART2_BDL = bdl;		// Says BDH not acted on until BDL is written
    225e:	705a      	strb	r2, [r3, #1]
    2260:	4770      	bx	lr
    2262:	bf00      	nop
    2264:	4006c000 	.word	0x4006c000

00002268 <serial3_end>:
serial3_end():
C:\Teensy\Projects\HelloWorld/serial3.c:179
#endif

}

void serial3_end(void)
{
    2268:	b508      	push	{r3, lr}
C:\Teensy\Projects\HelloWorld/serial3.c:180
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    226a:	4b10      	ldr	r3, [pc, #64]	; (22ac <serial3_end+0x44>)
    226c:	681b      	ldr	r3, [r3, #0]
    226e:	04db      	lsls	r3, r3, #19
    2270:	d400      	bmi.n	2274 <serial3_end+0xc>
    2272:	bd08      	pop	{r3, pc}
C:\Teensy\Projects\HelloWorld/serial3.c:181 (discriminator 1)
	while (transmitting) yield();  // wait for buffered data to send
    2274:	4b0e      	ldr	r3, [pc, #56]	; (22b0 <serial3_end+0x48>)
    2276:	7919      	ldrb	r1, [r3, #4]
    2278:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    227c:	b111      	cbz	r1, 2284 <serial3_end+0x1c>
C:\Teensy\Projects\HelloWorld/serial3.c:181 (discriminator 2)
    227e:	f003 f967 	bl	5550 <yield>
    2282:	e7f7      	b.n	2274 <serial3_end+0xc>
C:\Teensy\Projects\HelloWorld/serial3.c:182
	NVIC_DISABLE_IRQ(IRQ_UART2_STATUS);
    2284:	490b      	ldr	r1, [pc, #44]	; (22b4 <serial3_end+0x4c>)
    2286:	2008      	movs	r0, #8
    2288:	6008      	str	r0, [r1, #0]
C:\Teensy\Projects\HelloWorld/serial3.c:183
	UART2_C2 = 0;
    228a:	490b      	ldr	r1, [pc, #44]	; (22b8 <serial3_end+0x50>)
C:\Teensy\Projects\HelloWorld/serial3.c:184
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    228c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    2290:	f500 2098 	add.w	r0, r0, #311296	; 0x4c000
C:\Teensy\Projects\HelloWorld/serial3.c:183
void serial3_end(void)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
	while (transmitting) yield();  // wait for buffered data to send
	NVIC_DISABLE_IRQ(IRQ_UART2_STATUS);
	UART2_C2 = 0;
    2294:	70ca      	strb	r2, [r1, #3]
C:\Teensy\Projects\HelloWorld/serial3.c:184
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    2296:	f240 1103 	movw	r1, #259	; 0x103
    229a:	6001      	str	r1, [r0, #0]
C:\Teensy\Projects\HelloWorld/serial3.c:185
	CORE_PIN8_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    229c:	6041      	str	r1, [r0, #4]
C:\Teensy\Projects\HelloWorld/serial3.c:186
	rx_buffer_head = 0;
    229e:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial3.c:187
	rx_buffer_tail = 0;
    22a0:	705a      	strb	r2, [r3, #1]
C:\Teensy\Projects\HelloWorld/serial3.c:188
	if (rts_pin) rts_deassert();
    22a2:	689b      	ldr	r3, [r3, #8]
    22a4:	b10b      	cbz	r3, 22aa <serial3_end+0x42>
C:\Teensy\Projects\HelloWorld/serial3.c:188 (discriminator 1)
    22a6:	2201      	movs	r2, #1
    22a8:	701a      	strb	r2, [r3, #0]
    22aa:	bd08      	pop	{r3, pc}
    22ac:	40048034 	.word	0x40048034
    22b0:	1fff0c84 	.word	0x1fff0c84
    22b4:	e000e184 	.word	0xe000e184
    22b8:	4006c000 	.word	0x4006c000

000022bc <serial3_set_transmit_pin>:
serial3_set_transmit_pin():
C:\Teensy\Projects\HelloWorld/serial3.c:192
}

void serial3_set_transmit_pin(uint8_t pin)
{
    22bc:	b570      	push	{r4, r5, r6, lr}
    22be:	4604      	mov	r4, r0
C:\Teensy\Projects\HelloWorld/serial3.c:193 (discriminator 1)
	while (transmitting) ;
    22c0:	4d09      	ldr	r5, [pc, #36]	; (22e8 <serial3_set_transmit_pin+0x2c>)
    22c2:	792b      	ldrb	r3, [r5, #4]
    22c4:	f003 06ff 	and.w	r6, r3, #255	; 0xff
    22c8:	2b00      	cmp	r3, #0
    22ca:	d1f9      	bne.n	22c0 <serial3_set_transmit_pin+0x4>
C:\Teensy\Projects\HelloWorld/serial3.c:194
	pinMode(pin, OUTPUT);
    22cc:	4620      	mov	r0, r4
    22ce:	2101      	movs	r1, #1
    22d0:	f7fe fdb2 	bl	e38 <pinMode>
C:\Teensy\Projects\HelloWorld/serial3.c:195
	digitalWrite(pin, LOW);
    22d4:	4620      	mov	r0, r4
    22d6:	4631      	mov	r1, r6
    22d8:	f7fe fd80 	bl	ddc <digitalWrite>
C:\Teensy\Projects\HelloWorld/serial3.c:196
	transmit_pin = portOutputRegister(pin);
    22dc:	4b03      	ldr	r3, [pc, #12]	; (22ec <serial3_set_transmit_pin+0x30>)
    22de:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
    22e2:	60eb      	str	r3, [r5, #12]
    22e4:	bd70      	pop	{r4, r5, r6, pc}
    22e6:	bf00      	nop
    22e8:	1fff0c84 	.word	0x1fff0c84
    22ec:	00009e64 	.word	0x00009e64

000022f0 <serial3_set_tx>:
serial3_set_tx():
C:\Teensy\Projects\HelloWorld/serial3.c:203
	transmit_mask = digitalPinToBitMask(pin);
	#endif
}

void serial3_set_tx(uint8_t pin, uint8_t opendrain)
{
    22f0:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/serial3.c:206
	uint32_t cfg;

	if (opendrain) pin |= 128;
    22f2:	b109      	cbz	r1, 22f8 <serial3_set_tx+0x8>
C:\Teensy\Projects\HelloWorld/serial3.c:206 (discriminator 1)
    22f4:	f040 0080 	orr.w	r0, r0, #128	; 0x80
C:\Teensy\Projects\HelloWorld/serial3.c:207
	if (pin == tx_pin_num) return;
    22f8:	4a0e      	ldr	r2, [pc, #56]	; (2334 <serial3_set_tx+0x44>)
    22fa:	7813      	ldrb	r3, [r2, #0]
    22fc:	4298      	cmp	r0, r3
    22fe:	d017      	beq.n	2330 <serial3_set_tx+0x40>
C:\Teensy\Projects\HelloWorld/serial3.c:208
	if ((SIM_SCGC4 & SIM_SCGC4_UART2)) {
    2300:	4c0d      	ldr	r4, [pc, #52]	; (2338 <serial3_set_tx+0x48>)
    2302:	6824      	ldr	r4, [r4, #0]
    2304:	04e4      	lsls	r4, r4, #19
    2306:	d512      	bpl.n	232e <serial3_set_tx+0x3e>
C:\Teensy\Projects\HelloWorld/serial3.c:209
		switch (tx_pin_num & 127) {
    2308:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    230c:	2b08      	cmp	r3, #8
    230e:	d102      	bne.n	2316 <serial3_set_tx+0x26>
C:\Teensy\Projects\HelloWorld/serial3.c:210
			case 8:  CORE_PIN8_CONFIG = 0; break; // PTD3
    2310:	4b0a      	ldr	r3, [pc, #40]	; (233c <serial3_set_tx+0x4c>)
    2312:	2400      	movs	r4, #0
    2314:	601c      	str	r4, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial3.c:216
	#if defined(KINETISL)
			case 20: CORE_PIN20_CONFIG = 0; break; // PTD5
	#endif
		}
		if (opendrain) {
			cfg = PORT_PCR_DSE | PORT_PCR_ODE;
    2316:	2900      	cmp	r1, #0
C:\Teensy\Projects\HelloWorld/serial3.c:220
		} else {
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
		}
		switch (pin & 127) {
    2318:	f000 037f 	and.w	r3, r0, #127	; 0x7f
C:\Teensy\Projects\HelloWorld/serial3.c:216
	#if defined(KINETISL)
			case 20: CORE_PIN20_CONFIG = 0; break; // PTD5
	#endif
		}
		if (opendrain) {
			cfg = PORT_PCR_DSE | PORT_PCR_ODE;
    231c:	bf0c      	ite	eq
    231e:	2144      	moveq	r1, #68	; 0x44
    2320:	2160      	movne	r1, #96	; 0x60
C:\Teensy\Projects\HelloWorld/serial3.c:220
		} else {
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
		}
		switch (pin & 127) {
    2322:	2b08      	cmp	r3, #8
    2324:	d103      	bne.n	232e <serial3_set_tx+0x3e>
C:\Teensy\Projects\HelloWorld/serial3.c:221
			case 8:  CORE_PIN8_CONFIG = cfg | PORT_PCR_MUX(3); break;
    2326:	4b05      	ldr	r3, [pc, #20]	; (233c <serial3_set_tx+0x4c>)
    2328:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    232c:	6019      	str	r1, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial3.c:227
	#if defined(KINETISL)
			case 20: CORE_PIN20_CONFIG = cfg | PORT_PCR_MUX(3); break;
	#endif
		}
	}
	tx_pin_num = pin;
    232e:	7010      	strb	r0, [r2, #0]
    2330:	bd10      	pop	{r4, pc}
    2332:	bf00      	nop
    2334:	1fff0a0b 	.word	0x1fff0a0b
    2338:	40048034 	.word	0x40048034
    233c:	4004c00c 	.word	0x4004c00c

00002340 <serial3_set_rx>:
serial3_set_rx():
C:\Teensy\Projects\HelloWorld/serial3.c:231
}

void serial3_set_rx(uint8_t pin)
{
    2340:	4770      	bx	lr

00002342 <serial3_set_rts>:
serial3_set_rts():
C:\Teensy\Projects\HelloWorld/serial3.c:250
	#endif
}

int serial3_set_rts(uint8_t pin)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    2342:	4a0d      	ldr	r2, [pc, #52]	; (2378 <serial3_set_rts+0x36>)
C:\Teensy\Projects\HelloWorld/serial3.c:249
	rx_pin_num = pin;
	#endif
}

int serial3_set_rts(uint8_t pin)
{
    2344:	b538      	push	{r3, r4, r5, lr}
C:\Teensy\Projects\HelloWorld/serial3.c:250
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    2346:	6814      	ldr	r4, [r2, #0]
    2348:	f414 5280 	ands.w	r2, r4, #4096	; 0x1000
    234c:	f04f 0400 	mov.w	r4, #0
    2350:	d010      	beq.n	2374 <serial3_set_rts+0x32>
C:\Teensy\Projects\HelloWorld/serial3.c:251
	if (pin < CORE_NUM_DIGITAL) {
    2352:	283f      	cmp	r0, #63	; 0x3f
    2354:	4d09      	ldr	r5, [pc, #36]	; (237c <serial3_set_rts+0x3a>)
    2356:	d80a      	bhi.n	236e <serial3_set_rts+0x2c>
C:\Teensy\Projects\HelloWorld/serial3.c:252
		rts_pin = portOutputRegister(pin);
    2358:	4a09      	ldr	r2, [pc, #36]	; (2380 <serial3_set_rts+0x3e>)
C:\Teensy\Projects\HelloWorld/serial3.c:256
		#if defined(KINETISL)
		rts_mask = digitalPinToBitMask(pin);
		#endif
		pinMode(pin, OUTPUT);
    235a:	2101      	movs	r1, #1
C:\Teensy\Projects\HelloWorld/serial3.c:252

int serial3_set_rts(uint8_t pin)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
	if (pin < CORE_NUM_DIGITAL) {
		rts_pin = portOutputRegister(pin);
    235c:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
    2360:	60ab      	str	r3, [r5, #8]
C:\Teensy\Projects\HelloWorld/serial3.c:256
		#if defined(KINETISL)
		rts_mask = digitalPinToBitMask(pin);
		#endif
		pinMode(pin, OUTPUT);
    2362:	f7fe fd69 	bl	e38 <pinMode>
C:\Teensy\Projects\HelloWorld/serial3.c:257
		rts_assert();
    2366:	68ab      	ldr	r3, [r5, #8]
    2368:	701c      	strb	r4, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial3.c:271
		UART2_MODEM &= ~UART_MODEM_RXRTSE;
		return 0;
	}
	UART2_MODEM |= UART_MODEM_RXRTSE;
*/
	return 1;
    236a:	2001      	movs	r0, #1
    236c:	bd38      	pop	{r3, r4, r5, pc}
C:\Teensy\Projects\HelloWorld/serial3.c:259
		rts_mask = digitalPinToBitMask(pin);
		#endif
		pinMode(pin, OUTPUT);
		rts_assert();
	} else {
		rts_pin = NULL;
    236e:	60ac      	str	r4, [r5, #8]
C:\Teensy\Projects\HelloWorld/serial3.c:260
		return 0;
    2370:	4620      	mov	r0, r4
    2372:	bd38      	pop	{r3, r4, r5, pc}
C:\Teensy\Projects\HelloWorld/serial3.c:250
	#endif
}

int serial3_set_rts(uint8_t pin)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    2374:	4610      	mov	r0, r2
C:\Teensy\Projects\HelloWorld/serial3.c:272
		return 0;
	}
	UART2_MODEM |= UART_MODEM_RXRTSE;
*/
	return 1;
}
    2376:	bd38      	pop	{r3, r4, r5, pc}
    2378:	40048034 	.word	0x40048034
    237c:	1fff0c84 	.word	0x1fff0c84
    2380:	00009e64 	.word	0x00009e64

00002384 <serial3_set_cts>:
serial3_set_cts():
C:\Teensy\Projects\HelloWorld/serial3.c:277

int serial3_set_cts(uint8_t pin)
{
#if defined(KINETISK)
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    2384:	4b0b      	ldr	r3, [pc, #44]	; (23b4 <serial3_set_cts+0x30>)
    2386:	681b      	ldr	r3, [r3, #0]
    2388:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
    238c:	d010      	beq.n	23b0 <serial3_set_cts+0x2c>
C:\Teensy\Projects\HelloWorld/serial3.c:278
	if (pin == 14) {
    238e:	280e      	cmp	r0, #14
    2390:	4b09      	ldr	r3, [pc, #36]	; (23b8 <serial3_set_cts+0x34>)
    2392:	d109      	bne.n	23a8 <serial3_set_cts+0x24>
C:\Teensy\Projects\HelloWorld/serial3.c:279
		CORE_PIN14_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    2394:	4a09      	ldr	r2, [pc, #36]	; (23bc <serial3_set_cts+0x38>)
    2396:	f240 3102 	movw	r1, #770	; 0x302
    239a:	6011      	str	r1, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial3.c:284
	} else {
		UART2_MODEM &= ~UART_MODEM_TXCTSE;
		return 0;
	}
	UART2_MODEM |= UART_MODEM_TXCTSE;
    239c:	7b5a      	ldrb	r2, [r3, #13]
    239e:	f042 0201 	orr.w	r2, r2, #1
    23a2:	735a      	strb	r2, [r3, #13]
C:\Teensy\Projects\HelloWorld/serial3.c:285
	return 1;
    23a4:	2001      	movs	r0, #1
    23a6:	4770      	bx	lr
C:\Teensy\Projects\HelloWorld/serial3.c:281
#if defined(KINETISK)
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
	if (pin == 14) {
		CORE_PIN14_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
	} else {
		UART2_MODEM &= ~UART_MODEM_TXCTSE;
    23a8:	7b5a      	ldrb	r2, [r3, #13]
    23aa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    23ae:	735a      	strb	r2, [r3, #13]
C:\Teensy\Projects\HelloWorld/serial3.c:282
		return 0;
    23b0:	2000      	movs	r0, #0
    23b2:	4770      	bx	lr
    23b4:	40048034 	.word	0x40048034
    23b8:	4006c000 	.word	0x4006c000
    23bc:	4004c004 	.word	0x4004c004

000023c0 <serial3_putchar>:
serial3_putchar():
C:\Teensy\Projects\HelloWorld/serial3.c:292
	return 0;
#endif
}

void serial3_putchar(uint32_t c)
{
    23c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:\Teensy\Projects\HelloWorld/serial3.c:295
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    23c2:	4b1b      	ldr	r3, [pc, #108]	; (2430 <serial3_putchar+0x70>)
    23c4:	681b      	ldr	r3, [r3, #0]
    23c6:	04da      	lsls	r2, r3, #19
C:\Teensy\Projects\HelloWorld/serial3.c:292
	return 0;
#endif
}

void serial3_putchar(uint32_t c)
{
    23c8:	4607      	mov	r7, r0
C:\Teensy\Projects\HelloWorld/serial3.c:295
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    23ca:	d530      	bpl.n	242e <serial3_putchar+0x6e>
C:\Teensy\Projects\HelloWorld/serial3.c:296
	if (transmit_pin) transmit_assert();
    23cc:	4e19      	ldr	r6, [pc, #100]	; (2434 <serial3_putchar+0x74>)
    23ce:	68f3      	ldr	r3, [r6, #12]
    23d0:	b10b      	cbz	r3, 23d6 <serial3_putchar+0x16>
C:\Teensy\Projects\HelloWorld/serial3.c:296 (discriminator 1)
    23d2:	2201      	movs	r2, #1
    23d4:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial3.c:297
	head = tx_buffer_head;
    23d6:	78b4      	ldrb	r4, [r6, #2]
C:\Teensy\Projects\HelloWorld/serial3.c:298
	if (++head >= SERIAL3_TX_BUFFER_SIZE) head = 0;
    23d8:	3401      	adds	r4, #1
    23da:	2c28      	cmp	r4, #40	; 0x28
    23dc:	bf28      	it	cs
    23de:	2400      	movcs	r4, #0
C:\Teensy\Projects\HelloWorld/serial3.c:299 (discriminator 1)
	while (tx_buffer_tail == head) {
    23e0:	78f3      	ldrb	r3, [r6, #3]
    23e2:	4d14      	ldr	r5, [pc, #80]	; (2434 <serial3_putchar+0x74>)
    23e4:	42a3      	cmp	r3, r4
    23e6:	d118      	bne.n	241a <serial3_putchar+0x5a>
C:\Teensy\Projects\HelloWorld/serial3.c:300
		int priority = nvic_execution_priority();
    23e8:	f7fe fa56 	bl	898 <nvic_execution_priority>
C:\Teensy\Projects\HelloWorld/serial3.c:301
		if (priority <= IRQ_PRIORITY) {
    23ec:	2840      	cmp	r0, #64	; 0x40
    23ee:	dc0f      	bgt.n	2410 <serial3_putchar+0x50>
C:\Teensy\Projects\HelloWorld/serial3.c:302
			if ((UART2_S1 & UART_S1_TDRE)) {
    23f0:	4a11      	ldr	r2, [pc, #68]	; (2438 <serial3_putchar+0x78>)
    23f2:	7913      	ldrb	r3, [r2, #4]
    23f4:	061b      	lsls	r3, r3, #24
    23f6:	d5f3      	bpl.n	23e0 <serial3_putchar+0x20>
C:\Teensy\Projects\HelloWorld/serial3.c:303
				uint32_t tail = tx_buffer_tail;
    23f8:	78eb      	ldrb	r3, [r5, #3]
C:\Teensy\Projects\HelloWorld/serial3.c:304
				if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    23fa:	3301      	adds	r3, #1
    23fc:	2b28      	cmp	r3, #40	; 0x28
    23fe:	bf28      	it	cs
    2400:	2300      	movcs	r3, #0
C:\Teensy\Projects\HelloWorld/serial3.c:305
				n = tx_buffer[tail];
    2402:	18f1      	adds	r1, r6, r3
C:\Teensy\Projects\HelloWorld/serial3.c:308
				if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
				UART2_D = n;
				tx_buffer_tail = tail;
    2404:	b2db      	uxtb	r3, r3
C:\Teensy\Projects\HelloWorld/serial3.c:305
		int priority = nvic_execution_priority();
		if (priority <= IRQ_PRIORITY) {
			if ((UART2_S1 & UART_S1_TDRE)) {
				uint32_t tail = tx_buffer_tail;
				if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
				n = tx_buffer[tail];
    2406:	7c09      	ldrb	r1, [r1, #16]
    2408:	b2c9      	uxtb	r1, r1
C:\Teensy\Projects\HelloWorld/serial3.c:307
				if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
				UART2_D = n;
    240a:	71d1      	strb	r1, [r2, #7]
C:\Teensy\Projects\HelloWorld/serial3.c:308
				tx_buffer_tail = tail;
    240c:	70f3      	strb	r3, [r6, #3]
    240e:	e7e7      	b.n	23e0 <serial3_putchar+0x20>
C:\Teensy\Projects\HelloWorld/serial3.c:310
			}
		} else if (priority >= 256) {
    2410:	28ff      	cmp	r0, #255	; 0xff
    2412:	dde5      	ble.n	23e0 <serial3_putchar+0x20>
C:\Teensy\Projects\HelloWorld/serial3.c:311
			yield(); // wait
    2414:	f003 f89c 	bl	5550 <yield>
    2418:	e7e2      	b.n	23e0 <serial3_putchar+0x20>
C:\Teensy\Projects\HelloWorld/serial3.c:314
		}
	}
	tx_buffer[head] = c;
    241a:	192b      	adds	r3, r5, r4
    241c:	b2ff      	uxtb	r7, r7
    241e:	741f      	strb	r7, [r3, #16]
C:\Teensy\Projects\HelloWorld/serial3.c:315
	transmitting = 1;
    2420:	2301      	movs	r3, #1
    2422:	712b      	strb	r3, [r5, #4]
C:\Teensy\Projects\HelloWorld/serial3.c:317
	tx_buffer_head = head;
	UART2_C2 = C2_TX_ACTIVE;
    2424:	4b04      	ldr	r3, [pc, #16]	; (2438 <serial3_putchar+0x78>)
C:\Teensy\Projects\HelloWorld/serial3.c:316
			yield(); // wait
		}
	}
	tx_buffer[head] = c;
	transmitting = 1;
	tx_buffer_head = head;
    2426:	b2e4      	uxtb	r4, r4
C:\Teensy\Projects\HelloWorld/serial3.c:317
	UART2_C2 = C2_TX_ACTIVE;
    2428:	22ac      	movs	r2, #172	; 0xac
C:\Teensy\Projects\HelloWorld/serial3.c:316
			yield(); // wait
		}
	}
	tx_buffer[head] = c;
	transmitting = 1;
	tx_buffer_head = head;
    242a:	70ac      	strb	r4, [r5, #2]
C:\Teensy\Projects\HelloWorld/serial3.c:317
	UART2_C2 = C2_TX_ACTIVE;
    242c:	70da      	strb	r2, [r3, #3]
    242e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2430:	40048034 	.word	0x40048034
    2434:	1fff0c84 	.word	0x1fff0c84
    2438:	4006c000 	.word	0x4006c000

0000243c <serial3_write>:
serial3_write():
C:\Teensy\Projects\HelloWorld/serial3.c:321
}

void serial3_write(const void *buf, unsigned int count)
{
    243c:	b538      	push	{r3, r4, r5, lr}
    243e:	4604      	mov	r4, r0
    2440:	1845      	adds	r5, r0, r1
C:\Teensy\Projects\HelloWorld/serial3.c:323 (discriminator 1)
	const uint8_t *p = (const uint8_t *)buf;
	while (count-- > 0) serial3_putchar(*p++);
    2442:	42ac      	cmp	r4, r5
    2444:	d004      	beq.n	2450 <serial3_write+0x14>
C:\Teensy\Projects\HelloWorld/serial3.c:323 (discriminator 2)
    2446:	f814 0b01 	ldrb.w	r0, [r4], #1
    244a:	f7ff ffb9 	bl	23c0 <serial3_putchar>
    244e:	e7f8      	b.n	2442 <serial3_write+0x6>
C:\Teensy\Projects\HelloWorld/serial3.c:324
}
    2450:	bd38      	pop	{r3, r4, r5, pc}

00002452 <serial3_flush>:
serial3_flush():
C:\Teensy\Projects\HelloWorld/serial3.c:327

void serial3_flush(void)
{
    2452:	b508      	push	{r3, lr}
C:\Teensy\Projects\HelloWorld/serial3.c:328 (discriminator 1)
	while (transmitting) yield(); // wait
    2454:	4b03      	ldr	r3, [pc, #12]	; (2464 <serial3_flush+0x12>)
    2456:	791b      	ldrb	r3, [r3, #4]
    2458:	b113      	cbz	r3, 2460 <serial3_flush+0xe>
C:\Teensy\Projects\HelloWorld/serial3.c:328 (discriminator 2)
    245a:	f003 f879 	bl	5550 <yield>
    245e:	e7f9      	b.n	2454 <serial3_flush+0x2>
C:\Teensy\Projects\HelloWorld/serial3.c:329
}
    2460:	bd08      	pop	{r3, pc}
    2462:	bf00      	nop
    2464:	1fff0c84 	.word	0x1fff0c84

00002468 <serial3_write_buffer_free>:
serial3_write_buffer_free():
C:\Teensy\Projects\HelloWorld/serial3.c:335

int serial3_write_buffer_free(void)
{
	uint32_t head, tail;

	head = tx_buffer_head;
    2468:	4a05      	ldr	r2, [pc, #20]	; (2480 <serial3_write_buffer_free+0x18>)
    246a:	7893      	ldrb	r3, [r2, #2]
C:\Teensy\Projects\HelloWorld/serial3.c:336
	tail = tx_buffer_tail;
    246c:	78d0      	ldrb	r0, [r2, #3]
C:\Teensy\Projects\HelloWorld/serial3.c:335

int serial3_write_buffer_free(void)
{
	uint32_t head, tail;

	head = tx_buffer_head;
    246e:	b2db      	uxtb	r3, r3
C:\Teensy\Projects\HelloWorld/serial3.c:336
	tail = tx_buffer_tail;
    2470:	b2c0      	uxtb	r0, r0
C:\Teensy\Projects\HelloWorld/serial3.c:337
	if (head >= tail) return SERIAL3_TX_BUFFER_SIZE - 1 - head + tail;
    2472:	4283      	cmp	r3, r0
    2474:	bf2c      	ite	cs
    2476:	3027      	addcs	r0, #39	; 0x27
C:\Teensy\Projects\HelloWorld/serial3.c:338
	return tail - head - 1;
    2478:	f100 30ff 	addcc.w	r0, r0, #4294967295
    247c:	1ac0      	subs	r0, r0, r3
C:\Teensy\Projects\HelloWorld/serial3.c:339
}
    247e:	4770      	bx	lr
    2480:	1fff0c84 	.word	0x1fff0c84

00002484 <serial3_available>:
serial3_available():
C:\Teensy\Projects\HelloWorld/serial3.c:345

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2484:	4a04      	ldr	r2, [pc, #16]	; (2498 <serial3_available+0x14>)
    2486:	7810      	ldrb	r0, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial3.c:346
	tail = rx_buffer_tail;
    2488:	7853      	ldrb	r3, [r2, #1]
C:\Teensy\Projects\HelloWorld/serial3.c:345

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    248a:	b2c0      	uxtb	r0, r0
C:\Teensy\Projects\HelloWorld/serial3.c:346
	tail = rx_buffer_tail;
    248c:	b2db      	uxtb	r3, r3
C:\Teensy\Projects\HelloWorld/serial3.c:347
	if (head >= tail) return head - tail;
    248e:	4298      	cmp	r0, r3
C:\Teensy\Projects\HelloWorld/serial3.c:348
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    2490:	bf38      	it	cc
    2492:	3040      	addcc	r0, #64	; 0x40
    2494:	1ac0      	subs	r0, r0, r3
C:\Teensy\Projects\HelloWorld/serial3.c:349
}
    2496:	4770      	bx	lr
    2498:	1fff0c84 	.word	0x1fff0c84

0000249c <serial3_getchar>:
serial3_getchar():
C:\Teensy\Projects\HelloWorld/serial3.c:352

int serial3_getchar(void)
{
    249c:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/serial3.c:356
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    249e:	4a0f      	ldr	r2, [pc, #60]	; (24dc <serial3_getchar+0x40>)
    24a0:	7811      	ldrb	r1, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial3.c:357
	tail = rx_buffer_tail;
    24a2:	7853      	ldrb	r3, [r2, #1]
C:\Teensy\Projects\HelloWorld/serial3.c:356
int serial3_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    24a4:	b2c9      	uxtb	r1, r1
C:\Teensy\Projects\HelloWorld/serial3.c:357
	tail = rx_buffer_tail;
    24a6:	b2db      	uxtb	r3, r3
C:\Teensy\Projects\HelloWorld/serial3.c:358
	if (head == tail) return -1;
    24a8:	4299      	cmp	r1, r3
    24aa:	d014      	beq.n	24d6 <serial3_getchar+0x3a>
C:\Teensy\Projects\HelloWorld/serial3.c:359
	if (++tail >= SERIAL3_RX_BUFFER_SIZE) tail = 0;
    24ac:	3301      	adds	r3, #1
    24ae:	2b40      	cmp	r3, #64	; 0x40
    24b0:	bf28      	it	cs
    24b2:	2300      	movcs	r3, #0
C:\Teensy\Projects\HelloWorld/serial3.c:360
	c = rx_buffer[tail];
    24b4:	18d0      	adds	r0, r2, r3
C:\Teensy\Projects\HelloWorld/serial3.c:361
	rx_buffer_tail = tail;
    24b6:	b2dc      	uxtb	r4, r3
C:\Teensy\Projects\HelloWorld/serial3.c:360

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL3_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
    24b8:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
C:\Teensy\Projects\HelloWorld/serial3.c:361
	rx_buffer_tail = tail;
    24bc:	7054      	strb	r4, [r2, #1]
C:\Teensy\Projects\HelloWorld/serial3.c:362
	if (rts_pin) {
    24be:	6892      	ldr	r2, [r2, #8]
C:\Teensy\Projects\HelloWorld/serial3.c:360

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL3_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
    24c0:	b2c0      	uxtb	r0, r0
C:\Teensy\Projects\HelloWorld/serial3.c:362
	rx_buffer_tail = tail;
	if (rts_pin) {
    24c2:	b152      	cbz	r2, 24da <serial3_getchar+0x3e>
C:\Teensy\Projects\HelloWorld/serial3.c:364
		int avail;
		if (head >= tail) avail = head - tail;
    24c4:	4299      	cmp	r1, r3
C:\Teensy\Projects\HelloWorld/serial3.c:365
		else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    24c6:	bf38      	it	cc
    24c8:	3140      	addcc	r1, #64	; 0x40
    24ca:	1acb      	subs	r3, r1, r3
C:\Teensy\Projects\HelloWorld/serial3.c:366
		if (avail <= RTS_LOW_WATERMARK) rts_assert();
    24cc:	2b1a      	cmp	r3, #26
    24ce:	dc04      	bgt.n	24da <serial3_getchar+0x3e>
C:\Teensy\Projects\HelloWorld/serial3.c:366 (discriminator 1)
    24d0:	2300      	movs	r3, #0
    24d2:	7013      	strb	r3, [r2, #0]
    24d4:	bd10      	pop	{r4, pc}
C:\Teensy\Projects\HelloWorld/serial3.c:358
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    24d6:	f04f 30ff 	mov.w	r0, #4294967295
C:\Teensy\Projects\HelloWorld/serial3.c:369
		if (head >= tail) avail = head - tail;
		else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
		if (avail <= RTS_LOW_WATERMARK) rts_assert();
	}
	return c;
}
    24da:	bd10      	pop	{r4, pc}
    24dc:	1fff0c84 	.word	0x1fff0c84

000024e0 <serial3_peek>:
serial3_peek():
C:\Teensy\Projects\HelloWorld/serial3.c:375

int serial3_peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    24e0:	4a08      	ldr	r2, [pc, #32]	; (2504 <serial3_peek+0x24>)
    24e2:	7811      	ldrb	r1, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial3.c:376
	tail = rx_buffer_tail;
    24e4:	7853      	ldrb	r3, [r2, #1]
    24e6:	b2db      	uxtb	r3, r3
C:\Teensy\Projects\HelloWorld/serial3.c:377
	if (head == tail) return -1;
    24e8:	4299      	cmp	r1, r3
    24ea:	d008      	beq.n	24fe <serial3_peek+0x1e>
C:\Teensy\Projects\HelloWorld/serial3.c:378
	if (++tail >= SERIAL3_RX_BUFFER_SIZE) tail = 0;
    24ec:	3301      	adds	r3, #1
    24ee:	2b40      	cmp	r3, #64	; 0x40
    24f0:	bf28      	it	cs
    24f2:	2300      	movcs	r3, #0
C:\Teensy\Projects\HelloWorld/serial3.c:379
	return rx_buffer[tail];
    24f4:	4413      	add	r3, r2
    24f6:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
    24fa:	b2c0      	uxtb	r0, r0
    24fc:	4770      	bx	lr
C:\Teensy\Projects\HelloWorld/serial3.c:377
{
	uint32_t head, tail;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    24fe:	f04f 30ff 	mov.w	r0, #4294967295
C:\Teensy\Projects\HelloWorld/serial3.c:380
	if (++tail >= SERIAL3_RX_BUFFER_SIZE) tail = 0;
	return rx_buffer[tail];
}
    2502:	4770      	bx	lr
    2504:	1fff0c84 	.word	0x1fff0c84

00002508 <serial3_clear>:
serial3_clear():
C:\Teensy\Projects\HelloWorld/serial3.c:384

void serial3_clear(void)
{
	rx_buffer_head = rx_buffer_tail;
    2508:	4b04      	ldr	r3, [pc, #16]	; (251c <serial3_clear+0x14>)
    250a:	785a      	ldrb	r2, [r3, #1]
    250c:	b2d2      	uxtb	r2, r2
    250e:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial3.c:385
	if (rts_pin) rts_assert();
    2510:	689b      	ldr	r3, [r3, #8]
    2512:	b10b      	cbz	r3, 2518 <serial3_clear+0x10>
C:\Teensy\Projects\HelloWorld/serial3.c:385 (discriminator 1)
    2514:	2200      	movs	r2, #0
    2516:	701a      	strb	r2, [r3, #0]
    2518:	4770      	bx	lr
    251a:	bf00      	nop
    251c:	1fff0c84 	.word	0x1fff0c84

00002520 <uart2_status_isr>:
uart2_status_isr():
C:\Teensy\Projects\HelloWorld/serial3.c:397
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    2520:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/serial3.c:401
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    2522:	4b28      	ldr	r3, [pc, #160]	; (25c4 <uart2_status_isr+0xa4>)
    2524:	791a      	ldrb	r2, [r3, #4]
    2526:	0692      	lsls	r2, r2, #26
    2528:	d51f      	bpl.n	256a <uart2_status_isr+0x4a>
C:\Teensy\Projects\HelloWorld/serial3.c:407
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    252a:	4a27      	ldr	r2, [pc, #156]	; (25c8 <uart2_status_isr+0xa8>)
C:\Teensy\Projects\HelloWorld/serial3.c:405

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    252c:	79d8      	ldrb	r0, [r3, #7]
C:\Teensy\Projects\HelloWorld/serial3.c:407
		}
		head = rx_buffer_head + 1;
    252e:	7813      	ldrb	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial3.c:409
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2530:	7851      	ldrb	r1, [r2, #1]
C:\Teensy\Projects\HelloWorld/serial3.c:407
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    2532:	3301      	adds	r3, #1
C:\Teensy\Projects\HelloWorld/serial3.c:408
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
    2534:	2b40      	cmp	r3, #64	; 0x40
    2536:	bf28      	it	cs
    2538:	2300      	movcs	r3, #0
C:\Teensy\Projects\HelloWorld/serial3.c:409
		if (head != rx_buffer_tail) {
    253a:	428b      	cmp	r3, r1
C:\Teensy\Projects\HelloWorld/serial3.c:405

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    253c:	b2c0      	uxtb	r0, r0
C:\Teensy\Projects\HelloWorld/serial3.c:409
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    253e:	d004      	beq.n	254a <uart2_status_isr+0x2a>
C:\Teensy\Projects\HelloWorld/serial3.c:410
			rx_buffer[head] = n;
    2540:	18d1      	adds	r1, r2, r3
    2542:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
C:\Teensy\Projects\HelloWorld/serial3.c:411
			rx_buffer_head = head;
    2546:	b2d9      	uxtb	r1, r3
    2548:	7011      	strb	r1, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial3.c:413
		}
		if (rts_pin) {
    254a:	6891      	ldr	r1, [r2, #8]
    254c:	b169      	cbz	r1, 256a <uart2_status_isr+0x4a>
C:\Teensy\Projects\HelloWorld/serial3.c:415
			int avail;
			tail = tx_buffer_tail;
    254e:	4a1e      	ldr	r2, [pc, #120]	; (25c8 <uart2_status_isr+0xa8>)
    2550:	78d2      	ldrb	r2, [r2, #3]
    2552:	b2d2      	uxtb	r2, r2
C:\Teensy\Projects\HelloWorld/serial3.c:416
			if (head >= tail) avail = head - tail;
    2554:	4293      	cmp	r3, r2
C:\Teensy\Projects\HelloWorld/serial3.c:417
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    2556:	bf36      	itet	cc
    2558:	f1c2 0240 	rsbcc	r2, r2, #64	; 0x40
C:\Teensy\Projects\HelloWorld/serial3.c:416
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    255c:	ebc2 0303 	rsbcs	r3, r2, r3
C:\Teensy\Projects\HelloWorld/serial3.c:417
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    2560:	189b      	addcc	r3, r3, r2
C:\Teensy\Projects\HelloWorld/serial3.c:418
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    2562:	2b27      	cmp	r3, #39	; 0x27
    2564:	bfc4      	itt	gt
    2566:	2301      	movgt	r3, #1
    2568:	700b      	strbgt	r3, [r1, #0]
C:\Teensy\Projects\HelloWorld/serial3.c:421
		}
	}
	c = UART2_C2;
    256a:	4916      	ldr	r1, [pc, #88]	; (25c4 <uart2_status_isr+0xa4>)
    256c:	78c8      	ldrb	r0, [r1, #3]
    256e:	b2c0      	uxtb	r0, r0
C:\Teensy\Projects\HelloWorld/serial3.c:422
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    2570:	0604      	lsls	r4, r0, #24
    2572:	d515      	bpl.n	25a0 <uart2_status_isr+0x80>
C:\Teensy\Projects\HelloWorld/serial3.c:422 (discriminator 1)
    2574:	790b      	ldrb	r3, [r1, #4]
    2576:	061a      	lsls	r2, r3, #24
    2578:	d512      	bpl.n	25a0 <uart2_status_isr+0x80>
C:\Teensy\Projects\HelloWorld/serial3.c:423
		head = tx_buffer_head;
    257a:	4a13      	ldr	r2, [pc, #76]	; (25c8 <uart2_status_isr+0xa8>)
    257c:	7894      	ldrb	r4, [r2, #2]
C:\Teensy\Projects\HelloWorld/serial3.c:424
		tail = tx_buffer_tail;
    257e:	78d3      	ldrb	r3, [r2, #3]
    2580:	b2db      	uxtb	r3, r3
C:\Teensy\Projects\HelloWorld/serial3.c:425
		if (head == tail) {
    2582:	429c      	cmp	r4, r3
    2584:	d102      	bne.n	258c <uart2_status_isr+0x6c>
C:\Teensy\Projects\HelloWorld/serial3.c:426
			UART2_C2 = C2_TX_COMPLETING;
    2586:	236c      	movs	r3, #108	; 0x6c
    2588:	70cb      	strb	r3, [r1, #3]
    258a:	e009      	b.n	25a0 <uart2_status_isr+0x80>
C:\Teensy\Projects\HelloWorld/serial3.c:428
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    258c:	3301      	adds	r3, #1
    258e:	2b28      	cmp	r3, #40	; 0x28
    2590:	bf28      	it	cs
    2592:	2300      	movcs	r3, #0
C:\Teensy\Projects\HelloWorld/serial3.c:429
			n = tx_buffer[tail];
    2594:	18d4      	adds	r4, r2, r3
C:\Teensy\Projects\HelloWorld/serial3.c:432
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
    2596:	b2db      	uxtb	r3, r3
C:\Teensy\Projects\HelloWorld/serial3.c:429
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    2598:	7c24      	ldrb	r4, [r4, #16]
    259a:	b2e4      	uxtb	r4, r4
C:\Teensy\Projects\HelloWorld/serial3.c:431
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    259c:	71cc      	strb	r4, [r1, #7]
C:\Teensy\Projects\HelloWorld/serial3.c:432
			tx_buffer_tail = tail;
    259e:	70d3      	strb	r3, [r2, #3]
C:\Teensy\Projects\HelloWorld/serial3.c:435
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    25a0:	0643      	lsls	r3, r0, #25
    25a2:	d50d      	bpl.n	25c0 <uart2_status_isr+0xa0>
C:\Teensy\Projects\HelloWorld/serial3.c:435 (discriminator 1)
    25a4:	4b07      	ldr	r3, [pc, #28]	; (25c4 <uart2_status_isr+0xa4>)
    25a6:	791a      	ldrb	r2, [r3, #4]
    25a8:	f012 0f40 	tst.w	r2, #64	; 0x40
    25ac:	4619      	mov	r1, r3
    25ae:	d007      	beq.n	25c0 <uart2_status_isr+0xa0>
C:\Teensy\Projects\HelloWorld/serial3.c:436
		transmitting = 0;
    25b0:	4b05      	ldr	r3, [pc, #20]	; (25c8 <uart2_status_isr+0xa8>)
    25b2:	2200      	movs	r2, #0
    25b4:	711a      	strb	r2, [r3, #4]
C:\Teensy\Projects\HelloWorld/serial3.c:437
		if (transmit_pin) transmit_deassert();
    25b6:	68db      	ldr	r3, [r3, #12]
    25b8:	b103      	cbz	r3, 25bc <uart2_status_isr+0x9c>
C:\Teensy\Projects\HelloWorld/serial3.c:437 (discriminator 1)
    25ba:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial3.c:438
		UART2_C2 = C2_TX_INACTIVE;
    25bc:	232c      	movs	r3, #44	; 0x2c
    25be:	70cb      	strb	r3, [r1, #3]
    25c0:	bd10      	pop	{r4, pc}
    25c2:	bf00      	nop
    25c4:	4006c000 	.word	0x4006c000
    25c8:	1fff0c84 	.word	0x1fff0c84

000025cc <serial4_begin>:
serial4_begin():
C:\Teensy\Projects\HelloWorld/serial4.c:101
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial4_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART3;	// turn on clock, TODO: use bitband
    25cc:	4b1f      	ldr	r3, [pc, #124]	; (264c <serial4_begin+0x80>)
    25ce:	681a      	ldr	r2, [r3, #0]
    25d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    25d4:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial4.c:102
	rx_buffer_head = 0;
    25d6:	4b1e      	ldr	r3, [pc, #120]	; (2650 <serial4_begin+0x84>)
    25d8:	2200      	movs	r2, #0
    25da:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial4.c:103
	rx_buffer_tail = 0;
    25dc:	705a      	strb	r2, [r3, #1]
C:\Teensy\Projects\HelloWorld/serial4.c:104
	tx_buffer_head = 0;
    25de:	709a      	strb	r2, [r3, #2]
C:\Teensy\Projects\HelloWorld/serial4.c:105
	tx_buffer_tail = 0;
    25e0:	70da      	strb	r2, [r3, #3]
C:\Teensy\Projects\HelloWorld/serial4.c:106
	transmitting = 0;
    25e2:	711a      	strb	r2, [r3, #4]
C:\Teensy\Projects\HelloWorld/serial4.c:107
	switch (rx_pin_num) {
    25e4:	4a1b      	ldr	r2, [pc, #108]	; (2654 <serial4_begin+0x88>)
    25e6:	7813      	ldrb	r3, [r2, #0]
    25e8:	2b1f      	cmp	r3, #31
    25ea:	d005      	beq.n	25f8 <serial4_begin+0x2c>
    25ec:	2b3f      	cmp	r3, #63	; 0x3f
    25ee:	d107      	bne.n	2600 <serial4_begin+0x34>
C:\Teensy\Projects\HelloWorld/serial4.c:109
		case 31: CORE_PIN31_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		case 63: CORE_PIN63_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    25f0:	f240 3113 	movw	r1, #787	; 0x313
    25f4:	4b18      	ldr	r3, [pc, #96]	; (2658 <serial4_begin+0x8c>)
    25f6:	e002      	b.n	25fe <serial4_begin+0x32>
C:\Teensy\Projects\HelloWorld/serial4.c:108
	rx_buffer_tail = 0;
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
	switch (rx_pin_num) {
		case 31: CORE_PIN31_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    25f8:	4b18      	ldr	r3, [pc, #96]	; (265c <serial4_begin+0x90>)
    25fa:	f240 3113 	movw	r1, #787	; 0x313
C:\Teensy\Projects\HelloWorld/serial4.c:109
		case 63: CORE_PIN63_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    25fe:	6019      	str	r1, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial4.c:111
	}
	switch (tx_pin_num) {
    2600:	7853      	ldrb	r3, [r2, #1]
    2602:	2b20      	cmp	r3, #32
    2604:	d005      	beq.n	2612 <serial4_begin+0x46>
    2606:	2b3e      	cmp	r3, #62	; 0x3e
    2608:	d107      	bne.n	261a <serial4_begin+0x4e>
C:\Teensy\Projects\HelloWorld/serial4.c:113
		case 32: CORE_PIN32_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		case 62: CORE_PIN62_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    260a:	f44f 7251 	mov.w	r2, #836	; 0x344
    260e:	4b14      	ldr	r3, [pc, #80]	; (2660 <serial4_begin+0x94>)
    2610:	e002      	b.n	2618 <serial4_begin+0x4c>
C:\Teensy\Projects\HelloWorld/serial4.c:112
	switch (rx_pin_num) {
		case 31: CORE_PIN31_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		case 63: CORE_PIN63_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
	}
	switch (tx_pin_num) {
		case 32: CORE_PIN32_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    2612:	4b14      	ldr	r3, [pc, #80]	; (2664 <serial4_begin+0x98>)
    2614:	f44f 7251 	mov.w	r2, #836	; 0x344
C:\Teensy\Projects\HelloWorld/serial4.c:113
		case 62: CORE_PIN62_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    2618:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial4.c:115
	}
	UART3_BDH = (divisor >> 13) & 0x1F;
    261a:	4b13      	ldr	r3, [pc, #76]	; (2668 <serial4_begin+0x9c>)
    261c:	f3c0 3244 	ubfx	r2, r0, #13, #5
    2620:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial4.c:116
	UART3_BDL = (divisor >> 5) & 0xFF;
    2622:	f3c0 1247 	ubfx	r2, r0, #5, #8
    2626:	705a      	strb	r2, [r3, #1]
C:\Teensy\Projects\HelloWorld/serial4.c:117
	UART3_C4 = divisor & 0x1F;
    2628:	f000 001f 	and.w	r0, r0, #31
C:\Teensy\Projects\HelloWorld/serial4.c:118
	UART3_C1 = 0;
    262c:	2200      	movs	r2, #0
C:\Teensy\Projects\HelloWorld/serial4.c:117
		case 32: CORE_PIN32_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		case 62: CORE_PIN62_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
	}
	UART3_BDH = (divisor >> 13) & 0x1F;
	UART3_BDL = (divisor >> 5) & 0xFF;
	UART3_C4 = divisor & 0x1F;
    262e:	7298      	strb	r0, [r3, #10]
C:\Teensy\Projects\HelloWorld/serial4.c:118
	UART3_C1 = 0;
    2630:	709a      	strb	r2, [r3, #2]
C:\Teensy\Projects\HelloWorld/serial4.c:119
	UART3_PFIFO = 0;
    2632:	741a      	strb	r2, [r3, #16]
C:\Teensy\Projects\HelloWorld/serial4.c:120
	UART3_C2 = C2_TX_INACTIVE;
    2634:	222c      	movs	r2, #44	; 0x2c
    2636:	70da      	strb	r2, [r3, #3]
C:\Teensy\Projects\HelloWorld/serial4.c:121
	NVIC_SET_PRIORITY(IRQ_UART3_STATUS, IRQ_PRIORITY);
    2638:	4b0c      	ldr	r3, [pc, #48]	; (266c <serial4_begin+0xa0>)
    263a:	2240      	movs	r2, #64	; 0x40
C:\Teensy\Projects\HelloWorld/serial4.c:122
	NVIC_ENABLE_IRQ(IRQ_UART3_STATUS);
    263c:	f46f 7148 	mvn.w	r1, #800	; 0x320
C:\Teensy\Projects\HelloWorld/serial4.c:121
	UART3_BDL = (divisor >> 5) & 0xFF;
	UART3_C4 = divisor & 0x1F;
	UART3_C1 = 0;
	UART3_PFIFO = 0;
	UART3_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART3_STATUS, IRQ_PRIORITY);
    2640:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial4.c:122
	NVIC_ENABLE_IRQ(IRQ_UART3_STATUS);
    2642:	440b      	add	r3, r1
    2644:	2220      	movs	r2, #32
    2646:	601a      	str	r2, [r3, #0]
    2648:	4770      	bx	lr
    264a:	bf00      	nop
    264c:	40048034 	.word	0x40048034
    2650:	1fff0cfc 	.word	0x1fff0cfc
    2654:	1fff0a0c 	.word	0x1fff0a0c
    2658:	4004d014 	.word	0x4004d014
    265c:	4004a028 	.word	0x4004a028
    2660:	4004d010 	.word	0x4004d010
    2664:	4004a02c 	.word	0x4004a02c
    2668:	4006d000 	.word	0x4006d000
    266c:	e000e425 	.word	0xe000e425

00002670 <serial4_format>:
serial4_format():
C:\Teensy\Projects\HelloWorld/serial4.c:129

void serial4_format(uint32_t format)
{
	uint8_t c;

	c = UART3_C1;
    2670:	4a19      	ldr	r2, [pc, #100]	; (26d8 <serial4_format+0x68>)
    2672:	7893      	ldrb	r3, [r2, #2]
C:\Teensy\Projects\HelloWorld/serial4.c:130
	c = (c & ~0x13) | (format & 0x03);	// configure parity
    2674:	f000 0103 	and.w	r1, r0, #3
    2678:	f003 03ec 	and.w	r3, r3, #236	; 0xec
    267c:	430b      	orrs	r3, r1
C:\Teensy\Projects\HelloWorld/serial4.c:131
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    267e:	0741      	lsls	r1, r0, #29
    2680:	bf48      	it	mi
    2682:	f043 0310 	orrmi.w	r3, r3, #16
C:\Teensy\Projects\HelloWorld/serial4.c:132
	UART3_C1 = c;
    2686:	7093      	strb	r3, [r2, #2]
C:\Teensy\Projects\HelloWorld/serial4.c:133
	if ((format & 0x0F) == 0x04) UART3_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    2688:	f000 030f 	and.w	r3, r0, #15
    268c:	2b04      	cmp	r3, #4
C:\Teensy\Projects\HelloWorld/serial4.c:132
	uint8_t c;

	c = UART3_C1;
	c = (c & ~0x13) | (format & 0x03);	// configure parity
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
	UART3_C1 = c;
    268e:	4912      	ldr	r1, [pc, #72]	; (26d8 <serial4_format+0x68>)
C:\Teensy\Projects\HelloWorld/serial4.c:133
	if ((format & 0x0F) == 0x04) UART3_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    2690:	d103      	bne.n	269a <serial4_format+0x2a>
C:\Teensy\Projects\HelloWorld/serial4.c:133 (discriminator 1)
    2692:	798b      	ldrb	r3, [r1, #6]
    2694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2698:	718b      	strb	r3, [r1, #6]
C:\Teensy\Projects\HelloWorld/serial4.c:134
	c = UART3_S2 & ~0x10;
    269a:	7952      	ldrb	r2, [r2, #5]
C:\Teensy\Projects\HelloWorld/serial4.c:136
	if (format & 0x10) c |= 0x10;		// rx invert
	UART3_S2 = c;
    269c:	4b0e      	ldr	r3, [pc, #56]	; (26d8 <serial4_format+0x68>)
C:\Teensy\Projects\HelloWorld/serial4.c:134
	c = UART3_C1;
	c = (c & ~0x13) | (format & 0x03);	// configure parity
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
	UART3_C1 = c;
	if ((format & 0x0F) == 0x04) UART3_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
	c = UART3_S2 & ~0x10;
    269e:	f002 02ef 	and.w	r2, r2, #239	; 0xef
C:\Teensy\Projects\HelloWorld/serial4.c:135
	if (format & 0x10) c |= 0x10;		// rx invert
    26a2:	06c1      	lsls	r1, r0, #27
    26a4:	bf48      	it	mi
    26a6:	f042 0210 	orrmi.w	r2, r2, #16
C:\Teensy\Projects\HelloWorld/serial4.c:136
	UART3_S2 = c;
    26aa:	715a      	strb	r2, [r3, #5]
C:\Teensy\Projects\HelloWorld/serial4.c:137
	c = UART3_C3 & ~0x10;
    26ac:	799a      	ldrb	r2, [r3, #6]
C:\Teensy\Projects\HelloWorld/serial4.c:138
	if (format & 0x20) c |= 0x10;		// tx invert
    26ae:	f010 0f20 	tst.w	r0, #32
C:\Teensy\Projects\HelloWorld/serial4.c:137
	UART3_C1 = c;
	if ((format & 0x0F) == 0x04) UART3_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
	c = UART3_S2 & ~0x10;
	if (format & 0x10) c |= 0x10;		// rx invert
	UART3_S2 = c;
	c = UART3_C3 & ~0x10;
    26b2:	f002 02ef 	and.w	r2, r2, #239	; 0xef
    26b6:	4619      	mov	r1, r3
C:\Teensy\Projects\HelloWorld/serial4.c:138
	if (format & 0x20) c |= 0x10;		// tx invert
    26b8:	bf18      	it	ne
    26ba:	f042 0210 	orrne.w	r2, r2, #16
C:\Teensy\Projects\HelloWorld/serial4.c:139
	UART3_C3 = c;
    26be:	718a      	strb	r2, [r1, #6]
C:\Teensy\Projects\HelloWorld/serial4.c:148
	UART3_C4 = c;
	use9Bits = format & 0x80;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(KINETISL)
	// For T3.5/T3.6/TLC See about turning on 2 stop bit mode
	if ( format & 0x100) {
    26c0:	05c2      	lsls	r2, r0, #23
C:\Teensy\Projects\HelloWorld/serial4.c:139
	c = UART3_S2 & ~0x10;
	if (format & 0x10) c |= 0x10;		// rx invert
	UART3_S2 = c;
	c = UART3_C3 & ~0x10;
	if (format & 0x20) c |= 0x10;		// tx invert
	UART3_C3 = c;
    26c2:	4b05      	ldr	r3, [pc, #20]	; (26d8 <serial4_format+0x68>)
C:\Teensy\Projects\HelloWorld/serial4.c:148
	UART3_C4 = c;
	use9Bits = format & 0x80;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(KINETISL)
	// For T3.5/T3.6/TLC See about turning on 2 stop bit mode
	if ( format & 0x100) {
    26c4:	d506      	bpl.n	26d4 <serial4_format+0x64>
C:\Teensy\Projects\HelloWorld/serial4.c:149
		uint8_t bdl = UART3_BDL;
    26c6:	785a      	ldrb	r2, [r3, #1]
C:\Teensy\Projects\HelloWorld/serial4.c:150
		UART3_BDH |= UART_BDH_SBNS;		// Turn on 2 stop bits - was turned off by set baud
    26c8:	7819      	ldrb	r1, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial4.c:149
	use9Bits = format & 0x80;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(KINETISL)
	// For T3.5/T3.6/TLC See about turning on 2 stop bit mode
	if ( format & 0x100) {
		uint8_t bdl = UART3_BDL;
    26ca:	b2d2      	uxtb	r2, r2
C:\Teensy\Projects\HelloWorld/serial4.c:150
		UART3_BDH |= UART_BDH_SBNS;		// Turn on 2 stop bits - was turned off by set baud
    26cc:	f041 0120 	orr.w	r1, r1, #32
    26d0:	7019      	strb	r1, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial4.c:151
		UART3_BDL = bdl;		// Says BDH not acted on until BDL is written
    26d2:	705a      	strb	r2, [r3, #1]
    26d4:	4770      	bx	lr
    26d6:	bf00      	nop
    26d8:	4006d000 	.word	0x4006d000

000026dc <serial4_end>:
serial4_end():
C:\Teensy\Projects\HelloWorld/serial4.c:158
#endif
}

void serial4_end(void)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART3)) return;
    26dc:	4b1c      	ldr	r3, [pc, #112]	; (2750 <serial4_end+0x74>)
    26de:	681b      	ldr	r3, [r3, #0]
    26e0:	049b      	lsls	r3, r3, #18
C:\Teensy\Projects\HelloWorld/serial4.c:157
	}
#endif
}

void serial4_end(void)
{
    26e2:	b570      	push	{r4, r5, r6, lr}
C:\Teensy\Projects\HelloWorld/serial4.c:158
	if (!(SIM_SCGC4 & SIM_SCGC4_UART3)) return;
    26e4:	d400      	bmi.n	26e8 <serial4_end+0xc>
    26e6:	bd70      	pop	{r4, r5, r6, pc}
C:\Teensy\Projects\HelloWorld/serial4.c:159 (discriminator 1)
	while (transmitting) yield();  // wait for buffered data to send
    26e8:	4b1a      	ldr	r3, [pc, #104]	; (2754 <serial4_end+0x78>)
    26ea:	791a      	ldrb	r2, [r3, #4]
    26ec:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    26f0:	b112      	cbz	r2, 26f8 <serial4_end+0x1c>
C:\Teensy\Projects\HelloWorld/serial4.c:159 (discriminator 2)
    26f2:	f002 ff2d 	bl	5550 <yield>
    26f6:	e7f7      	b.n	26e8 <serial4_end+0xc>
C:\Teensy\Projects\HelloWorld/serial4.c:160
	NVIC_DISABLE_IRQ(IRQ_UART3_STATUS);
    26f8:	4a17      	ldr	r2, [pc, #92]	; (2758 <serial4_end+0x7c>)
C:\Teensy\Projects\HelloWorld/serial4.c:163
	UART3_C2 = 0;
	CORE_PIN31_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
	CORE_PIN32_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    26fa:	4e18      	ldr	r6, [pc, #96]	; (275c <serial4_end+0x80>)
C:\Teensy\Projects\HelloWorld/serial4.c:164
	switch (rx_pin_num) {
    26fc:	4d18      	ldr	r5, [pc, #96]	; (2760 <serial4_end+0x84>)
C:\Teensy\Projects\HelloWorld/serial4.c:160

void serial4_end(void)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART3)) return;
	while (transmitting) yield();  // wait for buffered data to send
	NVIC_DISABLE_IRQ(IRQ_UART3_STATUS);
    26fe:	2020      	movs	r0, #32
    2700:	6010      	str	r0, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial4.c:161
	UART3_C2 = 0;
    2702:	4a18      	ldr	r2, [pc, #96]	; (2764 <serial4_end+0x88>)
C:\Teensy\Projects\HelloWorld/serial4.c:162
	CORE_PIN31_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    2704:	4818      	ldr	r0, [pc, #96]	; (2768 <serial4_end+0x8c>)
C:\Teensy\Projects\HelloWorld/serial4.c:161
void serial4_end(void)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART3)) return;
	while (transmitting) yield();  // wait for buffered data to send
	NVIC_DISABLE_IRQ(IRQ_UART3_STATUS);
	UART3_C2 = 0;
    2706:	70d1      	strb	r1, [r2, #3]
C:\Teensy\Projects\HelloWorld/serial4.c:162
	CORE_PIN31_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    2708:	f240 1203 	movw	r2, #259	; 0x103
    270c:	6002      	str	r2, [r0, #0]
C:\Teensy\Projects\HelloWorld/serial4.c:163
	CORE_PIN32_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    270e:	6032      	str	r2, [r6, #0]
C:\Teensy\Projects\HelloWorld/serial4.c:164
	switch (rx_pin_num) {
    2710:	782c      	ldrb	r4, [r5, #0]
    2712:	2c1f      	cmp	r4, #31
    2714:	d004      	beq.n	2720 <serial4_end+0x44>
    2716:	2c3f      	cmp	r4, #63	; 0x3f
    2718:	d103      	bne.n	2722 <serial4_end+0x46>
C:\Teensy\Projects\HelloWorld/serial4.c:166
		case 31: CORE_PIN31_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTC3
		case 63: CORE_PIN63_CONFIG = 0; break;
    271a:	4a14      	ldr	r2, [pc, #80]	; (276c <serial4_end+0x90>)
    271c:	6011      	str	r1, [r2, #0]
    271e:	e000      	b.n	2722 <serial4_end+0x46>
C:\Teensy\Projects\HelloWorld/serial4.c:165
	NVIC_DISABLE_IRQ(IRQ_UART3_STATUS);
	UART3_C2 = 0;
	CORE_PIN31_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
	CORE_PIN32_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
	switch (rx_pin_num) {
		case 31: CORE_PIN31_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTC3
    2720:	6002      	str	r2, [r0, #0]
C:\Teensy\Projects\HelloWorld/serial4.c:168
		case 63: CORE_PIN63_CONFIG = 0; break;
	}
	switch (tx_pin_num & 127) {
    2722:	786a      	ldrb	r2, [r5, #1]
    2724:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    2728:	2a20      	cmp	r2, #32
    272a:	d005      	beq.n	2738 <serial4_end+0x5c>
    272c:	2a3e      	cmp	r2, #62	; 0x3e
    272e:	d106      	bne.n	273e <serial4_end+0x62>
C:\Teensy\Projects\HelloWorld/serial4.c:170
		case 32: CORE_PIN32_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTC4
		case 62: CORE_PIN62_CONFIG = 0; break;
    2730:	4a0f      	ldr	r2, [pc, #60]	; (2770 <serial4_end+0x94>)
    2732:	2100      	movs	r1, #0
    2734:	6011      	str	r1, [r2, #0]
    2736:	e002      	b.n	273e <serial4_end+0x62>
C:\Teensy\Projects\HelloWorld/serial4.c:169
	switch (rx_pin_num) {
		case 31: CORE_PIN31_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTC3
		case 63: CORE_PIN63_CONFIG = 0; break;
	}
	switch (tx_pin_num & 127) {
		case 32: CORE_PIN32_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTC4
    2738:	f240 1203 	movw	r2, #259	; 0x103
    273c:	6032      	str	r2, [r6, #0]
C:\Teensy\Projects\HelloWorld/serial4.c:172
		case 62: CORE_PIN62_CONFIG = 0; break;
	}
	rx_buffer_head = 0;
    273e:	2200      	movs	r2, #0
    2740:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial4.c:173
	rx_buffer_tail = 0;
    2742:	705a      	strb	r2, [r3, #1]
C:\Teensy\Projects\HelloWorld/serial4.c:174
	if (rts_pin) rts_deassert();
    2744:	689b      	ldr	r3, [r3, #8]
    2746:	b10b      	cbz	r3, 274c <serial4_end+0x70>
C:\Teensy\Projects\HelloWorld/serial4.c:174 (discriminator 1)
    2748:	2201      	movs	r2, #1
    274a:	701a      	strb	r2, [r3, #0]
    274c:	bd70      	pop	{r4, r5, r6, pc}
    274e:	bf00      	nop
    2750:	40048034 	.word	0x40048034
    2754:	1fff0cfc 	.word	0x1fff0cfc
    2758:	e000e184 	.word	0xe000e184
    275c:	4004a02c 	.word	0x4004a02c
    2760:	1fff0a0c 	.word	0x1fff0a0c
    2764:	4006d000 	.word	0x4006d000
    2768:	4004a028 	.word	0x4004a028
    276c:	4004d014 	.word	0x4004d014
    2770:	4004d010 	.word	0x4004d010

00002774 <serial4_set_transmit_pin>:
serial4_set_transmit_pin():
C:\Teensy\Projects\HelloWorld/serial4.c:178
}

void serial4_set_transmit_pin(uint8_t pin)
{
    2774:	b570      	push	{r4, r5, r6, lr}
    2776:	4604      	mov	r4, r0
C:\Teensy\Projects\HelloWorld/serial4.c:179 (discriminator 1)
	while (transmitting) ;
    2778:	4d09      	ldr	r5, [pc, #36]	; (27a0 <serial4_set_transmit_pin+0x2c>)
    277a:	792b      	ldrb	r3, [r5, #4]
    277c:	f003 06ff 	and.w	r6, r3, #255	; 0xff
    2780:	2b00      	cmp	r3, #0
    2782:	d1f9      	bne.n	2778 <serial4_set_transmit_pin+0x4>
C:\Teensy\Projects\HelloWorld/serial4.c:180
	pinMode(pin, OUTPUT);
    2784:	4620      	mov	r0, r4
    2786:	2101      	movs	r1, #1
    2788:	f7fe fb56 	bl	e38 <pinMode>
C:\Teensy\Projects\HelloWorld/serial4.c:181
	digitalWrite(pin, LOW);
    278c:	4620      	mov	r0, r4
    278e:	4631      	mov	r1, r6
    2790:	f7fe fb24 	bl	ddc <digitalWrite>
C:\Teensy\Projects\HelloWorld/serial4.c:182
	transmit_pin = portOutputRegister(pin);
    2794:	4b03      	ldr	r3, [pc, #12]	; (27a4 <serial4_set_transmit_pin+0x30>)
    2796:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
    279a:	60eb      	str	r3, [r5, #12]
    279c:	bd70      	pop	{r4, r5, r6, pc}
    279e:	bf00      	nop
    27a0:	1fff0cfc 	.word	0x1fff0cfc
    27a4:	00009e64 	.word	0x00009e64

000027a8 <serial4_set_tx>:
serial4_set_tx():
C:\Teensy\Projects\HelloWorld/serial4.c:186
}

void serial4_set_tx(uint8_t pin, uint8_t opendrain)
{
    27a8:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/serial4.c:189
	uint32_t cfg;

	if (opendrain) pin |= 128;
    27aa:	b109      	cbz	r1, 27b0 <serial4_set_tx+0x8>
C:\Teensy\Projects\HelloWorld/serial4.c:189 (discriminator 1)
    27ac:	f040 0080 	orr.w	r0, r0, #128	; 0x80
C:\Teensy\Projects\HelloWorld/serial4.c:190
	if (pin == tx_pin_num) return;
    27b0:	4a14      	ldr	r2, [pc, #80]	; (2804 <serial4_set_tx+0x5c>)
    27b2:	7853      	ldrb	r3, [r2, #1]
    27b4:	4298      	cmp	r0, r3
    27b6:	4614      	mov	r4, r2
    27b8:	d022      	beq.n	2800 <serial4_set_tx+0x58>
C:\Teensy\Projects\HelloWorld/serial4.c:191
	if ((SIM_SCGC4 & SIM_SCGC4_UART3)) {
    27ba:	4a13      	ldr	r2, [pc, #76]	; (2808 <serial4_set_tx+0x60>)
    27bc:	6812      	ldr	r2, [r2, #0]
    27be:	0492      	lsls	r2, r2, #18
    27c0:	d51d      	bpl.n	27fe <serial4_set_tx+0x56>
C:\Teensy\Projects\HelloWorld/serial4.c:192
		switch (tx_pin_num & 127) {
    27c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    27c6:	2b20      	cmp	r3, #32
    27c8:	d004      	beq.n	27d4 <serial4_set_tx+0x2c>
    27ca:	2b3e      	cmp	r3, #62	; 0x3e
    27cc:	d105      	bne.n	27da <serial4_set_tx+0x32>
C:\Teensy\Projects\HelloWorld/serial4.c:194
			case 32:  CORE_PIN32_CONFIG = 0; break; // PTB11
			case 62: CORE_PIN62_CONFIG = 0; break;
    27ce:	2200      	movs	r2, #0
    27d0:	4b0e      	ldr	r3, [pc, #56]	; (280c <serial4_set_tx+0x64>)
    27d2:	e001      	b.n	27d8 <serial4_set_tx+0x30>
C:\Teensy\Projects\HelloWorld/serial4.c:193

	if (opendrain) pin |= 128;
	if (pin == tx_pin_num) return;
	if ((SIM_SCGC4 & SIM_SCGC4_UART3)) {
		switch (tx_pin_num & 127) {
			case 32:  CORE_PIN32_CONFIG = 0; break; // PTB11
    27d4:	4b0e      	ldr	r3, [pc, #56]	; (2810 <serial4_set_tx+0x68>)
    27d6:	2200      	movs	r2, #0
C:\Teensy\Projects\HelloWorld/serial4.c:194
			case 62: CORE_PIN62_CONFIG = 0; break;
    27d8:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial4.c:197
		}
		if (opendrain) {
			cfg = PORT_PCR_DSE | PORT_PCR_ODE;
    27da:	2900      	cmp	r1, #0
C:\Teensy\Projects\HelloWorld/serial4.c:201
		} else {
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
		}
		switch (pin & 127) {
    27dc:	f000 027f 	and.w	r2, r0, #127	; 0x7f
C:\Teensy\Projects\HelloWorld/serial4.c:197
		switch (tx_pin_num & 127) {
			case 32:  CORE_PIN32_CONFIG = 0; break; // PTB11
			case 62: CORE_PIN62_CONFIG = 0; break;
		}
		if (opendrain) {
			cfg = PORT_PCR_DSE | PORT_PCR_ODE;
    27e0:	bf0c      	ite	eq
    27e2:	2344      	moveq	r3, #68	; 0x44
    27e4:	2360      	movne	r3, #96	; 0x60
C:\Teensy\Projects\HelloWorld/serial4.c:201
		} else {
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
		}
		switch (pin & 127) {
    27e6:	2a20      	cmp	r2, #32
    27e8:	d005      	beq.n	27f6 <serial4_set_tx+0x4e>
    27ea:	2a3e      	cmp	r2, #62	; 0x3e
    27ec:	d107      	bne.n	27fe <serial4_set_tx+0x56>
C:\Teensy\Projects\HelloWorld/serial4.c:203
			case 32:  CORE_PIN32_CONFIG = cfg | PORT_PCR_MUX(3); break;
			case 62: CORE_PIN62_CONFIG = cfg | PORT_PCR_MUX(3);; break;
    27ee:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    27f2:	4a06      	ldr	r2, [pc, #24]	; (280c <serial4_set_tx+0x64>)
    27f4:	e002      	b.n	27fc <serial4_set_tx+0x54>
C:\Teensy\Projects\HelloWorld/serial4.c:202
			cfg = PORT_PCR_DSE | PORT_PCR_ODE;
		} else {
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
		}
		switch (pin & 127) {
			case 32:  CORE_PIN32_CONFIG = cfg | PORT_PCR_MUX(3); break;
    27f6:	4a06      	ldr	r2, [pc, #24]	; (2810 <serial4_set_tx+0x68>)
    27f8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
C:\Teensy\Projects\HelloWorld/serial4.c:203
			case 62: CORE_PIN62_CONFIG = cfg | PORT_PCR_MUX(3);; break;
    27fc:	6013      	str	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial4.c:206
		}
	}
	tx_pin_num = pin;
    27fe:	7060      	strb	r0, [r4, #1]
    2800:	bd10      	pop	{r4, pc}
    2802:	bf00      	nop
    2804:	1fff0a0c 	.word	0x1fff0a0c
    2808:	40048034 	.word	0x40048034
    280c:	4004d010 	.word	0x4004d010
    2810:	4004a02c 	.word	0x4004a02c

00002814 <serial4_set_rx>:
serial4_set_rx():
C:\Teensy\Projects\HelloWorld/serial4.c:212

}

void serial4_set_rx(uint8_t pin)
{
	if (pin == rx_pin_num) return;
    2814:	4a0f      	ldr	r2, [pc, #60]	; (2854 <serial4_set_rx+0x40>)
    2816:	7813      	ldrb	r3, [r2, #0]
    2818:	4298      	cmp	r0, r3
    281a:	d01a      	beq.n	2852 <serial4_set_rx+0x3e>
C:\Teensy\Projects\HelloWorld/serial4.c:213
	if ((SIM_SCGC4 & SIM_SCGC4_UART3)) {
    281c:	490e      	ldr	r1, [pc, #56]	; (2858 <serial4_set_rx+0x44>)
    281e:	6809      	ldr	r1, [r1, #0]
    2820:	0489      	lsls	r1, r1, #18
    2822:	d515      	bpl.n	2850 <serial4_set_rx+0x3c>
C:\Teensy\Projects\HelloWorld/serial4.c:214
		switch (rx_pin_num) {
    2824:	2b1f      	cmp	r3, #31
    2826:	d004      	beq.n	2832 <serial4_set_rx+0x1e>
    2828:	2b3f      	cmp	r3, #63	; 0x3f
    282a:	d105      	bne.n	2838 <serial4_set_rx+0x24>
C:\Teensy\Projects\HelloWorld/serial4.c:216
			case 31: CORE_PIN31_CONFIG = 0; break; // PTC3
			case 63: CORE_PIN63_CONFIG = 0; break;
    282c:	2100      	movs	r1, #0
    282e:	4b0b      	ldr	r3, [pc, #44]	; (285c <serial4_set_rx+0x48>)
    2830:	e001      	b.n	2836 <serial4_set_rx+0x22>
C:\Teensy\Projects\HelloWorld/serial4.c:215
void serial4_set_rx(uint8_t pin)
{
	if (pin == rx_pin_num) return;
	if ((SIM_SCGC4 & SIM_SCGC4_UART3)) {
		switch (rx_pin_num) {
			case 31: CORE_PIN31_CONFIG = 0; break; // PTC3
    2832:	4b0b      	ldr	r3, [pc, #44]	; (2860 <serial4_set_rx+0x4c>)
    2834:	2100      	movs	r1, #0
C:\Teensy\Projects\HelloWorld/serial4.c:216
			case 63: CORE_PIN63_CONFIG = 0; break;
    2836:	6019      	str	r1, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial4.c:218
		}
		switch (pin) {
    2838:	281f      	cmp	r0, #31
    283a:	d005      	beq.n	2848 <serial4_set_rx+0x34>
    283c:	283f      	cmp	r0, #63	; 0x3f
    283e:	d107      	bne.n	2850 <serial4_set_rx+0x3c>
C:\Teensy\Projects\HelloWorld/serial4.c:220
			case 31: CORE_PIN31_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
			case 63: CORE_PIN63_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    2840:	f240 3113 	movw	r1, #787	; 0x313
    2844:	4b05      	ldr	r3, [pc, #20]	; (285c <serial4_set_rx+0x48>)
    2846:	e002      	b.n	284e <serial4_set_rx+0x3a>
C:\Teensy\Projects\HelloWorld/serial4.c:219
		switch (rx_pin_num) {
			case 31: CORE_PIN31_CONFIG = 0; break; // PTC3
			case 63: CORE_PIN63_CONFIG = 0; break;
		}
		switch (pin) {
			case 31: CORE_PIN31_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    2848:	4b05      	ldr	r3, [pc, #20]	; (2860 <serial4_set_rx+0x4c>)
    284a:	f240 3113 	movw	r1, #787	; 0x313
C:\Teensy\Projects\HelloWorld/serial4.c:220
			case 63: CORE_PIN63_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    284e:	6019      	str	r1, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial4.c:223
		}
	}
	rx_pin_num = pin;
    2850:	7010      	strb	r0, [r2, #0]
    2852:	4770      	bx	lr
    2854:	1fff0a0c 	.word	0x1fff0a0c
    2858:	40048034 	.word	0x40048034
    285c:	4004d014 	.word	0x4004d014
    2860:	4004a028 	.word	0x4004a028

00002864 <serial4_set_rts>:
serial4_set_rts():
C:\Teensy\Projects\HelloWorld/serial4.c:228
}

int serial4_set_rts(uint8_t pin)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART3)) return 0;
    2864:	4a0d      	ldr	r2, [pc, #52]	; (289c <serial4_set_rts+0x38>)
C:\Teensy\Projects\HelloWorld/serial4.c:227
	}
	rx_pin_num = pin;
}

int serial4_set_rts(uint8_t pin)
{
    2866:	b538      	push	{r3, r4, r5, lr}
C:\Teensy\Projects\HelloWorld/serial4.c:228
	if (!(SIM_SCGC4 & SIM_SCGC4_UART3)) return 0;
    2868:	6814      	ldr	r4, [r2, #0]
    286a:	f414 5200 	ands.w	r2, r4, #8192	; 0x2000
    286e:	f04f 0400 	mov.w	r4, #0
    2872:	d010      	beq.n	2896 <serial4_set_rts+0x32>
C:\Teensy\Projects\HelloWorld/serial4.c:229
	if (pin < CORE_NUM_DIGITAL) {
    2874:	283f      	cmp	r0, #63	; 0x3f
    2876:	4d0a      	ldr	r5, [pc, #40]	; (28a0 <serial4_set_rts+0x3c>)
    2878:	d80a      	bhi.n	2890 <serial4_set_rts+0x2c>
C:\Teensy\Projects\HelloWorld/serial4.c:230
		rts_pin = portOutputRegister(pin);
    287a:	4a0a      	ldr	r2, [pc, #40]	; (28a4 <serial4_set_rts+0x40>)
C:\Teensy\Projects\HelloWorld/serial4.c:231
		pinMode(pin, OUTPUT);
    287c:	2101      	movs	r1, #1
C:\Teensy\Projects\HelloWorld/serial4.c:230

int serial4_set_rts(uint8_t pin)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART3)) return 0;
	if (pin < CORE_NUM_DIGITAL) {
		rts_pin = portOutputRegister(pin);
    287e:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
    2882:	60ab      	str	r3, [r5, #8]
C:\Teensy\Projects\HelloWorld/serial4.c:231
		pinMode(pin, OUTPUT);
    2884:	f7fe fad8 	bl	e38 <pinMode>
C:\Teensy\Projects\HelloWorld/serial4.c:232
		rts_assert();
    2888:	68ab      	ldr	r3, [r5, #8]
    288a:	701c      	strb	r4, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial4.c:237
	} else {
		rts_pin = NULL;
		return 0;
	}
	return 1;
    288c:	2001      	movs	r0, #1
    288e:	bd38      	pop	{r3, r4, r5, pc}
C:\Teensy\Projects\HelloWorld/serial4.c:234
	if (pin < CORE_NUM_DIGITAL) {
		rts_pin = portOutputRegister(pin);
		pinMode(pin, OUTPUT);
		rts_assert();
	} else {
		rts_pin = NULL;
    2890:	60ac      	str	r4, [r5, #8]
C:\Teensy\Projects\HelloWorld/serial4.c:235
		return 0;
    2892:	4620      	mov	r0, r4
    2894:	bd38      	pop	{r3, r4, r5, pc}
C:\Teensy\Projects\HelloWorld/serial4.c:228
	rx_pin_num = pin;
}

int serial4_set_rts(uint8_t pin)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART3)) return 0;
    2896:	4610      	mov	r0, r2
C:\Teensy\Projects\HelloWorld/serial4.c:238
	} else {
		rts_pin = NULL;
		return 0;
	}
	return 1;
}
    2898:	bd38      	pop	{r3, r4, r5, pc}
    289a:	bf00      	nop
    289c:	40048034 	.word	0x40048034
    28a0:	1fff0cfc 	.word	0x1fff0cfc
    28a4:	00009e64 	.word	0x00009e64

000028a8 <serial4_set_cts>:
serial4_set_cts():
C:\Teensy\Projects\HelloWorld/serial4.c:243

int serial4_set_cts(uint8_t pin)
{
	return 0;
}
    28a8:	2000      	movs	r0, #0
    28aa:	4770      	bx	lr

000028ac <serial4_putchar>:
serial4_putchar():
C:\Teensy\Projects\HelloWorld/serial4.c:246

void serial4_putchar(uint32_t c)
{
    28ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:\Teensy\Projects\HelloWorld/serial4.c:249
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART3)) return;
    28ae:	4b1b      	ldr	r3, [pc, #108]	; (291c <serial4_putchar+0x70>)
    28b0:	681b      	ldr	r3, [r3, #0]
    28b2:	049a      	lsls	r2, r3, #18
C:\Teensy\Projects\HelloWorld/serial4.c:246
{
	return 0;
}

void serial4_putchar(uint32_t c)
{
    28b4:	4607      	mov	r7, r0
C:\Teensy\Projects\HelloWorld/serial4.c:249
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART3)) return;
    28b6:	d530      	bpl.n	291a <serial4_putchar+0x6e>
C:\Teensy\Projects\HelloWorld/serial4.c:250
	if (transmit_pin) transmit_assert();
    28b8:	4e19      	ldr	r6, [pc, #100]	; (2920 <serial4_putchar+0x74>)
    28ba:	68f3      	ldr	r3, [r6, #12]
    28bc:	b10b      	cbz	r3, 28c2 <serial4_putchar+0x16>
C:\Teensy\Projects\HelloWorld/serial4.c:250 (discriminator 1)
    28be:	2201      	movs	r2, #1
    28c0:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial4.c:251
	head = tx_buffer_head;
    28c2:	78b4      	ldrb	r4, [r6, #2]
C:\Teensy\Projects\HelloWorld/serial4.c:252
	if (++head >= SERIAL4_TX_BUFFER_SIZE) head = 0;
    28c4:	3401      	adds	r4, #1
    28c6:	2c28      	cmp	r4, #40	; 0x28
    28c8:	bf28      	it	cs
    28ca:	2400      	movcs	r4, #0
C:\Teensy\Projects\HelloWorld/serial4.c:253 (discriminator 1)
	while (tx_buffer_tail == head) {
    28cc:	78f3      	ldrb	r3, [r6, #3]
    28ce:	4d14      	ldr	r5, [pc, #80]	; (2920 <serial4_putchar+0x74>)
    28d0:	42a3      	cmp	r3, r4
    28d2:	d118      	bne.n	2906 <serial4_putchar+0x5a>
C:\Teensy\Projects\HelloWorld/serial4.c:254
		int priority = nvic_execution_priority();
    28d4:	f7fd ffe0 	bl	898 <nvic_execution_priority>
C:\Teensy\Projects\HelloWorld/serial4.c:255
		if (priority <= IRQ_PRIORITY) {
    28d8:	2840      	cmp	r0, #64	; 0x40
    28da:	dc0f      	bgt.n	28fc <serial4_putchar+0x50>
C:\Teensy\Projects\HelloWorld/serial4.c:256
			if ((UART3_S1 & UART_S1_TDRE)) {
    28dc:	4a11      	ldr	r2, [pc, #68]	; (2924 <serial4_putchar+0x78>)
    28de:	7913      	ldrb	r3, [r2, #4]
    28e0:	061b      	lsls	r3, r3, #24
    28e2:	d5f3      	bpl.n	28cc <serial4_putchar+0x20>
C:\Teensy\Projects\HelloWorld/serial4.c:257
				uint32_t tail = tx_buffer_tail;
    28e4:	78eb      	ldrb	r3, [r5, #3]
C:\Teensy\Projects\HelloWorld/serial4.c:258
				if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    28e6:	3301      	adds	r3, #1
    28e8:	2b28      	cmp	r3, #40	; 0x28
    28ea:	bf28      	it	cs
    28ec:	2300      	movcs	r3, #0
C:\Teensy\Projects\HelloWorld/serial4.c:259
				n = tx_buffer[tail];
    28ee:	18f1      	adds	r1, r6, r3
C:\Teensy\Projects\HelloWorld/serial4.c:262
				if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
				UART3_D = n;
				tx_buffer_tail = tail;
    28f0:	b2db      	uxtb	r3, r3
C:\Teensy\Projects\HelloWorld/serial4.c:259
		int priority = nvic_execution_priority();
		if (priority <= IRQ_PRIORITY) {
			if ((UART3_S1 & UART_S1_TDRE)) {
				uint32_t tail = tx_buffer_tail;
				if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
				n = tx_buffer[tail];
    28f2:	7c09      	ldrb	r1, [r1, #16]
    28f4:	b2c9      	uxtb	r1, r1
C:\Teensy\Projects\HelloWorld/serial4.c:261
				if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
				UART3_D = n;
    28f6:	71d1      	strb	r1, [r2, #7]
C:\Teensy\Projects\HelloWorld/serial4.c:262
				tx_buffer_tail = tail;
    28f8:	70f3      	strb	r3, [r6, #3]
    28fa:	e7e7      	b.n	28cc <serial4_putchar+0x20>
C:\Teensy\Projects\HelloWorld/serial4.c:264
			}
		} else if (priority >= 256) {
    28fc:	28ff      	cmp	r0, #255	; 0xff
    28fe:	dde5      	ble.n	28cc <serial4_putchar+0x20>
C:\Teensy\Projects\HelloWorld/serial4.c:265
			yield(); // wait
    2900:	f002 fe26 	bl	5550 <yield>
    2904:	e7e2      	b.n	28cc <serial4_putchar+0x20>
C:\Teensy\Projects\HelloWorld/serial4.c:268
		}
	}
	tx_buffer[head] = c;
    2906:	192b      	adds	r3, r5, r4
    2908:	b2ff      	uxtb	r7, r7
    290a:	741f      	strb	r7, [r3, #16]
C:\Teensy\Projects\HelloWorld/serial4.c:269
	transmitting = 1;
    290c:	2301      	movs	r3, #1
    290e:	712b      	strb	r3, [r5, #4]
C:\Teensy\Projects\HelloWorld/serial4.c:271
	tx_buffer_head = head;
	UART3_C2 = C2_TX_ACTIVE;
    2910:	4b04      	ldr	r3, [pc, #16]	; (2924 <serial4_putchar+0x78>)
C:\Teensy\Projects\HelloWorld/serial4.c:270
			yield(); // wait
		}
	}
	tx_buffer[head] = c;
	transmitting = 1;
	tx_buffer_head = head;
    2912:	b2e4      	uxtb	r4, r4
C:\Teensy\Projects\HelloWorld/serial4.c:271
	UART3_C2 = C2_TX_ACTIVE;
    2914:	22ac      	movs	r2, #172	; 0xac
C:\Teensy\Projects\HelloWorld/serial4.c:270
			yield(); // wait
		}
	}
	tx_buffer[head] = c;
	transmitting = 1;
	tx_buffer_head = head;
    2916:	70ac      	strb	r4, [r5, #2]
C:\Teensy\Projects\HelloWorld/serial4.c:271
	UART3_C2 = C2_TX_ACTIVE;
    2918:	70da      	strb	r2, [r3, #3]
    291a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    291c:	40048034 	.word	0x40048034
    2920:	1fff0cfc 	.word	0x1fff0cfc
    2924:	4006d000 	.word	0x4006d000

00002928 <serial4_write>:
serial4_write():
C:\Teensy\Projects\HelloWorld/serial4.c:275
}

void serial4_write(const void *buf, unsigned int count)
{
    2928:	b538      	push	{r3, r4, r5, lr}
    292a:	4604      	mov	r4, r0
    292c:	1845      	adds	r5, r0, r1
C:\Teensy\Projects\HelloWorld/serial4.c:277 (discriminator 1)
	const uint8_t *p = (const uint8_t *)buf;
	while (count-- > 0) serial4_putchar(*p++);
    292e:	42ac      	cmp	r4, r5
    2930:	d004      	beq.n	293c <serial4_write+0x14>
C:\Teensy\Projects\HelloWorld/serial4.c:277 (discriminator 2)
    2932:	f814 0b01 	ldrb.w	r0, [r4], #1
    2936:	f7ff ffb9 	bl	28ac <serial4_putchar>
    293a:	e7f8      	b.n	292e <serial4_write+0x6>
C:\Teensy\Projects\HelloWorld/serial4.c:278
}
    293c:	bd38      	pop	{r3, r4, r5, pc}

0000293e <serial4_flush>:
serial4_flush():
C:\Teensy\Projects\HelloWorld/serial4.c:281

void serial4_flush(void)
{
    293e:	b508      	push	{r3, lr}
C:\Teensy\Projects\HelloWorld/serial4.c:282 (discriminator 1)
	while (transmitting) yield(); // wait
    2940:	4b03      	ldr	r3, [pc, #12]	; (2950 <serial4_flush+0x12>)
    2942:	791b      	ldrb	r3, [r3, #4]
    2944:	b113      	cbz	r3, 294c <serial4_flush+0xe>
C:\Teensy\Projects\HelloWorld/serial4.c:282 (discriminator 2)
    2946:	f002 fe03 	bl	5550 <yield>
    294a:	e7f9      	b.n	2940 <serial4_flush+0x2>
C:\Teensy\Projects\HelloWorld/serial4.c:283
}
    294c:	bd08      	pop	{r3, pc}
    294e:	bf00      	nop
    2950:	1fff0cfc 	.word	0x1fff0cfc

00002954 <serial4_write_buffer_free>:
serial4_write_buffer_free():
C:\Teensy\Projects\HelloWorld/serial4.c:289

int serial4_write_buffer_free(void)
{
	uint32_t head, tail;

	head = tx_buffer_head;
    2954:	4a05      	ldr	r2, [pc, #20]	; (296c <serial4_write_buffer_free+0x18>)
    2956:	7893      	ldrb	r3, [r2, #2]
C:\Teensy\Projects\HelloWorld/serial4.c:290
	tail = tx_buffer_tail;
    2958:	78d0      	ldrb	r0, [r2, #3]
C:\Teensy\Projects\HelloWorld/serial4.c:289

int serial4_write_buffer_free(void)
{
	uint32_t head, tail;

	head = tx_buffer_head;
    295a:	b2db      	uxtb	r3, r3
C:\Teensy\Projects\HelloWorld/serial4.c:290
	tail = tx_buffer_tail;
    295c:	b2c0      	uxtb	r0, r0
C:\Teensy\Projects\HelloWorld/serial4.c:291
	if (head >= tail) return SERIAL4_TX_BUFFER_SIZE - 1 - head + tail;
    295e:	4283      	cmp	r3, r0
    2960:	bf2c      	ite	cs
    2962:	3027      	addcs	r0, #39	; 0x27
C:\Teensy\Projects\HelloWorld/serial4.c:292
	return tail - head - 1;
    2964:	f100 30ff 	addcc.w	r0, r0, #4294967295
    2968:	1ac0      	subs	r0, r0, r3
C:\Teensy\Projects\HelloWorld/serial4.c:293
}
    296a:	4770      	bx	lr
    296c:	1fff0cfc 	.word	0x1fff0cfc

00002970 <serial4_available>:
serial4_available():
C:\Teensy\Projects\HelloWorld/serial4.c:299

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2970:	4a04      	ldr	r2, [pc, #16]	; (2984 <serial4_available+0x14>)
    2972:	7810      	ldrb	r0, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial4.c:300
	tail = rx_buffer_tail;
    2974:	7853      	ldrb	r3, [r2, #1]
C:\Teensy\Projects\HelloWorld/serial4.c:299

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2976:	b2c0      	uxtb	r0, r0
C:\Teensy\Projects\HelloWorld/serial4.c:300
	tail = rx_buffer_tail;
    2978:	b2db      	uxtb	r3, r3
C:\Teensy\Projects\HelloWorld/serial4.c:301
	if (head >= tail) return head - tail;
    297a:	4298      	cmp	r0, r3
C:\Teensy\Projects\HelloWorld/serial4.c:302
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    297c:	bf38      	it	cc
    297e:	3040      	addcc	r0, #64	; 0x40
    2980:	1ac0      	subs	r0, r0, r3
C:\Teensy\Projects\HelloWorld/serial4.c:303
}
    2982:	4770      	bx	lr
    2984:	1fff0cfc 	.word	0x1fff0cfc

00002988 <serial4_getchar>:
serial4_getchar():
C:\Teensy\Projects\HelloWorld/serial4.c:306

int serial4_getchar(void)
{
    2988:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/serial4.c:310
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    298a:	4a0f      	ldr	r2, [pc, #60]	; (29c8 <serial4_getchar+0x40>)
    298c:	7811      	ldrb	r1, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial4.c:311
	tail = rx_buffer_tail;
    298e:	7853      	ldrb	r3, [r2, #1]
C:\Teensy\Projects\HelloWorld/serial4.c:310
int serial4_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    2990:	b2c9      	uxtb	r1, r1
C:\Teensy\Projects\HelloWorld/serial4.c:311
	tail = rx_buffer_tail;
    2992:	b2db      	uxtb	r3, r3
C:\Teensy\Projects\HelloWorld/serial4.c:312
	if (head == tail) return -1;
    2994:	4299      	cmp	r1, r3
    2996:	d014      	beq.n	29c2 <serial4_getchar+0x3a>
C:\Teensy\Projects\HelloWorld/serial4.c:313
	if (++tail >= SERIAL4_RX_BUFFER_SIZE) tail = 0;
    2998:	3301      	adds	r3, #1
    299a:	2b40      	cmp	r3, #64	; 0x40
    299c:	bf28      	it	cs
    299e:	2300      	movcs	r3, #0
C:\Teensy\Projects\HelloWorld/serial4.c:314
	c = rx_buffer[tail];
    29a0:	18d0      	adds	r0, r2, r3
C:\Teensy\Projects\HelloWorld/serial4.c:315
	rx_buffer_tail = tail;
    29a2:	b2dc      	uxtb	r4, r3
C:\Teensy\Projects\HelloWorld/serial4.c:314

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL4_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
    29a4:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
C:\Teensy\Projects\HelloWorld/serial4.c:315
	rx_buffer_tail = tail;
    29a8:	7054      	strb	r4, [r2, #1]
C:\Teensy\Projects\HelloWorld/serial4.c:316
	if (rts_pin) {
    29aa:	6892      	ldr	r2, [r2, #8]
C:\Teensy\Projects\HelloWorld/serial4.c:314

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL4_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
    29ac:	b2c0      	uxtb	r0, r0
C:\Teensy\Projects\HelloWorld/serial4.c:316
	rx_buffer_tail = tail;
	if (rts_pin) {
    29ae:	b152      	cbz	r2, 29c6 <serial4_getchar+0x3e>
C:\Teensy\Projects\HelloWorld/serial4.c:318
		int avail;
		if (head >= tail) avail = head - tail;
    29b0:	4299      	cmp	r1, r3
C:\Teensy\Projects\HelloWorld/serial4.c:319
		else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    29b2:	bf38      	it	cc
    29b4:	3140      	addcc	r1, #64	; 0x40
    29b6:	1acb      	subs	r3, r1, r3
C:\Teensy\Projects\HelloWorld/serial4.c:320
		if (avail <= RTS_LOW_WATERMARK) rts_assert();
    29b8:	2b1a      	cmp	r3, #26
    29ba:	dc04      	bgt.n	29c6 <serial4_getchar+0x3e>
C:\Teensy\Projects\HelloWorld/serial4.c:320 (discriminator 1)
    29bc:	2300      	movs	r3, #0
    29be:	7013      	strb	r3, [r2, #0]
    29c0:	bd10      	pop	{r4, pc}
C:\Teensy\Projects\HelloWorld/serial4.c:312
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    29c2:	f04f 30ff 	mov.w	r0, #4294967295
C:\Teensy\Projects\HelloWorld/serial4.c:323
		if (head >= tail) avail = head - tail;
		else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
		if (avail <= RTS_LOW_WATERMARK) rts_assert();
	}
	return c;
}
    29c6:	bd10      	pop	{r4, pc}
    29c8:	1fff0cfc 	.word	0x1fff0cfc

000029cc <serial4_peek>:
serial4_peek():
C:\Teensy\Projects\HelloWorld/serial4.c:329

int serial4_peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    29cc:	4a08      	ldr	r2, [pc, #32]	; (29f0 <serial4_peek+0x24>)
    29ce:	7811      	ldrb	r1, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial4.c:330
	tail = rx_buffer_tail;
    29d0:	7853      	ldrb	r3, [r2, #1]
    29d2:	b2db      	uxtb	r3, r3
C:\Teensy\Projects\HelloWorld/serial4.c:331
	if (head == tail) return -1;
    29d4:	4299      	cmp	r1, r3
    29d6:	d008      	beq.n	29ea <serial4_peek+0x1e>
C:\Teensy\Projects\HelloWorld/serial4.c:332
	if (++tail >= SERIAL4_RX_BUFFER_SIZE) tail = 0;
    29d8:	3301      	adds	r3, #1
    29da:	2b40      	cmp	r3, #64	; 0x40
    29dc:	bf28      	it	cs
    29de:	2300      	movcs	r3, #0
C:\Teensy\Projects\HelloWorld/serial4.c:333
	return rx_buffer[tail];
    29e0:	4413      	add	r3, r2
    29e2:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
    29e6:	b2c0      	uxtb	r0, r0
    29e8:	4770      	bx	lr
C:\Teensy\Projects\HelloWorld/serial4.c:331
{
	uint32_t head, tail;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    29ea:	f04f 30ff 	mov.w	r0, #4294967295
C:\Teensy\Projects\HelloWorld/serial4.c:334
	if (++tail >= SERIAL4_RX_BUFFER_SIZE) tail = 0;
	return rx_buffer[tail];
}
    29ee:	4770      	bx	lr
    29f0:	1fff0cfc 	.word	0x1fff0cfc

000029f4 <serial4_clear>:
serial4_clear():
C:\Teensy\Projects\HelloWorld/serial4.c:338

void serial4_clear(void)
{
	rx_buffer_head = rx_buffer_tail;
    29f4:	4b04      	ldr	r3, [pc, #16]	; (2a08 <serial4_clear+0x14>)
    29f6:	785a      	ldrb	r2, [r3, #1]
    29f8:	b2d2      	uxtb	r2, r2
    29fa:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial4.c:339
	if (rts_pin) rts_assert();
    29fc:	689b      	ldr	r3, [r3, #8]
    29fe:	b10b      	cbz	r3, 2a04 <serial4_clear+0x10>
C:\Teensy\Projects\HelloWorld/serial4.c:339 (discriminator 1)
    2a00:	2200      	movs	r2, #0
    2a02:	701a      	strb	r2, [r3, #0]
    2a04:	4770      	bx	lr
    2a06:	bf00      	nop
    2a08:	1fff0cfc 	.word	0x1fff0cfc

00002a0c <uart3_status_isr>:
uart3_status_isr():
C:\Teensy\Projects\HelloWorld/serial4.c:351
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    2a0c:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/serial4.c:355
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    2a0e:	4b28      	ldr	r3, [pc, #160]	; (2ab0 <uart3_status_isr+0xa4>)
    2a10:	791a      	ldrb	r2, [r3, #4]
    2a12:	0692      	lsls	r2, r2, #26
    2a14:	d51f      	bpl.n	2a56 <uart3_status_isr+0x4a>
C:\Teensy\Projects\HelloWorld/serial4.c:361
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    2a16:	4a27      	ldr	r2, [pc, #156]	; (2ab4 <uart3_status_isr+0xa8>)
C:\Teensy\Projects\HelloWorld/serial4.c:359

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    2a18:	79d8      	ldrb	r0, [r3, #7]
C:\Teensy\Projects\HelloWorld/serial4.c:361
		}
		head = rx_buffer_head + 1;
    2a1a:	7813      	ldrb	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial4.c:363
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2a1c:	7851      	ldrb	r1, [r2, #1]
C:\Teensy\Projects\HelloWorld/serial4.c:361
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    2a1e:	3301      	adds	r3, #1
C:\Teensy\Projects\HelloWorld/serial4.c:362
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
    2a20:	2b40      	cmp	r3, #64	; 0x40
    2a22:	bf28      	it	cs
    2a24:	2300      	movcs	r3, #0
C:\Teensy\Projects\HelloWorld/serial4.c:363
		if (head != rx_buffer_tail) {
    2a26:	428b      	cmp	r3, r1
C:\Teensy\Projects\HelloWorld/serial4.c:359

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    2a28:	b2c0      	uxtb	r0, r0
C:\Teensy\Projects\HelloWorld/serial4.c:363
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2a2a:	d004      	beq.n	2a36 <uart3_status_isr+0x2a>
C:\Teensy\Projects\HelloWorld/serial4.c:364
			rx_buffer[head] = n;
    2a2c:	18d1      	adds	r1, r2, r3
    2a2e:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
C:\Teensy\Projects\HelloWorld/serial4.c:365
			rx_buffer_head = head;
    2a32:	b2d9      	uxtb	r1, r3
    2a34:	7011      	strb	r1, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial4.c:367
		}
		if (rts_pin) {
    2a36:	6891      	ldr	r1, [r2, #8]
    2a38:	b169      	cbz	r1, 2a56 <uart3_status_isr+0x4a>
C:\Teensy\Projects\HelloWorld/serial4.c:369
			int avail;
			tail = tx_buffer_tail;
    2a3a:	4a1e      	ldr	r2, [pc, #120]	; (2ab4 <uart3_status_isr+0xa8>)
    2a3c:	78d2      	ldrb	r2, [r2, #3]
    2a3e:	b2d2      	uxtb	r2, r2
C:\Teensy\Projects\HelloWorld/serial4.c:370
			if (head >= tail) avail = head - tail;
    2a40:	4293      	cmp	r3, r2
C:\Teensy\Projects\HelloWorld/serial4.c:371
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    2a42:	bf36      	itet	cc
    2a44:	f1c2 0240 	rsbcc	r2, r2, #64	; 0x40
C:\Teensy\Projects\HelloWorld/serial4.c:370
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    2a48:	ebc2 0303 	rsbcs	r3, r2, r3
C:\Teensy\Projects\HelloWorld/serial4.c:371
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    2a4c:	189b      	addcc	r3, r3, r2
C:\Teensy\Projects\HelloWorld/serial4.c:372
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    2a4e:	2b27      	cmp	r3, #39	; 0x27
    2a50:	bfc4      	itt	gt
    2a52:	2301      	movgt	r3, #1
    2a54:	700b      	strbgt	r3, [r1, #0]
C:\Teensy\Projects\HelloWorld/serial4.c:375
		}
	}
	c = UART3_C2;
    2a56:	4916      	ldr	r1, [pc, #88]	; (2ab0 <uart3_status_isr+0xa4>)
    2a58:	78c8      	ldrb	r0, [r1, #3]
    2a5a:	b2c0      	uxtb	r0, r0
C:\Teensy\Projects\HelloWorld/serial4.c:376
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    2a5c:	0604      	lsls	r4, r0, #24
    2a5e:	d515      	bpl.n	2a8c <uart3_status_isr+0x80>
C:\Teensy\Projects\HelloWorld/serial4.c:376 (discriminator 1)
    2a60:	790b      	ldrb	r3, [r1, #4]
    2a62:	061a      	lsls	r2, r3, #24
    2a64:	d512      	bpl.n	2a8c <uart3_status_isr+0x80>
C:\Teensy\Projects\HelloWorld/serial4.c:377
		head = tx_buffer_head;
    2a66:	4a13      	ldr	r2, [pc, #76]	; (2ab4 <uart3_status_isr+0xa8>)
    2a68:	7894      	ldrb	r4, [r2, #2]
C:\Teensy\Projects\HelloWorld/serial4.c:378
		tail = tx_buffer_tail;
    2a6a:	78d3      	ldrb	r3, [r2, #3]
    2a6c:	b2db      	uxtb	r3, r3
C:\Teensy\Projects\HelloWorld/serial4.c:379
		if (head == tail) {
    2a6e:	429c      	cmp	r4, r3
    2a70:	d102      	bne.n	2a78 <uart3_status_isr+0x6c>
C:\Teensy\Projects\HelloWorld/serial4.c:380
			UART3_C2 = C2_TX_COMPLETING;
    2a72:	236c      	movs	r3, #108	; 0x6c
    2a74:	70cb      	strb	r3, [r1, #3]
    2a76:	e009      	b.n	2a8c <uart3_status_isr+0x80>
C:\Teensy\Projects\HelloWorld/serial4.c:382
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    2a78:	3301      	adds	r3, #1
    2a7a:	2b28      	cmp	r3, #40	; 0x28
    2a7c:	bf28      	it	cs
    2a7e:	2300      	movcs	r3, #0
C:\Teensy\Projects\HelloWorld/serial4.c:383
			n = tx_buffer[tail];
    2a80:	18d4      	adds	r4, r2, r3
C:\Teensy\Projects\HelloWorld/serial4.c:386
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
    2a82:	b2db      	uxtb	r3, r3
C:\Teensy\Projects\HelloWorld/serial4.c:383
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    2a84:	7c24      	ldrb	r4, [r4, #16]
    2a86:	b2e4      	uxtb	r4, r4
C:\Teensy\Projects\HelloWorld/serial4.c:385
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    2a88:	71cc      	strb	r4, [r1, #7]
C:\Teensy\Projects\HelloWorld/serial4.c:386
			tx_buffer_tail = tail;
    2a8a:	70d3      	strb	r3, [r2, #3]
C:\Teensy\Projects\HelloWorld/serial4.c:389
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    2a8c:	0643      	lsls	r3, r0, #25
    2a8e:	d50d      	bpl.n	2aac <uart3_status_isr+0xa0>
C:\Teensy\Projects\HelloWorld/serial4.c:389 (discriminator 1)
    2a90:	4b07      	ldr	r3, [pc, #28]	; (2ab0 <uart3_status_isr+0xa4>)
    2a92:	791a      	ldrb	r2, [r3, #4]
    2a94:	f012 0f40 	tst.w	r2, #64	; 0x40
    2a98:	4619      	mov	r1, r3
    2a9a:	d007      	beq.n	2aac <uart3_status_isr+0xa0>
C:\Teensy\Projects\HelloWorld/serial4.c:390
		transmitting = 0;
    2a9c:	4b05      	ldr	r3, [pc, #20]	; (2ab4 <uart3_status_isr+0xa8>)
    2a9e:	2200      	movs	r2, #0
    2aa0:	711a      	strb	r2, [r3, #4]
C:\Teensy\Projects\HelloWorld/serial4.c:391
		if (transmit_pin) transmit_deassert();
    2aa2:	68db      	ldr	r3, [r3, #12]
    2aa4:	b103      	cbz	r3, 2aa8 <uart3_status_isr+0x9c>
C:\Teensy\Projects\HelloWorld/serial4.c:391 (discriminator 1)
    2aa6:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial4.c:392
		UART3_C2 = C2_TX_INACTIVE;
    2aa8:	232c      	movs	r3, #44	; 0x2c
    2aaa:	70cb      	strb	r3, [r1, #3]
    2aac:	bd10      	pop	{r4, pc}
    2aae:	bf00      	nop
    2ab0:	4006d000 	.word	0x4006d000
    2ab4:	1fff0cfc 	.word	0x1fff0cfc

00002ab8 <serial5_begin>:
serial5_begin():
C:\Teensy\Projects\HelloWorld/serial5.c:100
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial5_begin(uint32_t divisor)
{
	SIM_SCGC1 |= SIM_SCGC1_UART4;	// turn on clock, TODO: use bitband
    2ab8:	4b14      	ldr	r3, [pc, #80]	; (2b0c <serial5_begin+0x54>)
    2aba:	681a      	ldr	r2, [r3, #0]
    2abc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    2ac0:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial5.c:101
	rx_buffer_head = 0;
    2ac2:	4a13      	ldr	r2, [pc, #76]	; (2b10 <serial5_begin+0x58>)
    2ac4:	2300      	movs	r3, #0
    2ac6:	7013      	strb	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial5.c:102
	rx_buffer_tail = 0;
    2ac8:	7053      	strb	r3, [r2, #1]
C:\Teensy\Projects\HelloWorld/serial5.c:103
	tx_buffer_head = 0;
    2aca:	7093      	strb	r3, [r2, #2]
C:\Teensy\Projects\HelloWorld/serial5.c:104
	tx_buffer_tail = 0;
    2acc:	70d3      	strb	r3, [r2, #3]
C:\Teensy\Projects\HelloWorld/serial5.c:105
	transmitting = 0;
    2ace:	7113      	strb	r3, [r2, #4]
C:\Teensy\Projects\HelloWorld/serial5.c:106
	CORE_PIN34_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
    2ad0:	4a10      	ldr	r2, [pc, #64]	; (2b14 <serial5_begin+0x5c>)
    2ad2:	f240 3113 	movw	r1, #787	; 0x313
    2ad6:	6011      	str	r1, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial5.c:107
	CORE_PIN33_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
    2ad8:	f44f 7151 	mov.w	r1, #836	; 0x344
    2adc:	f842 1c04 	str.w	r1, [r2, #-4]
C:\Teensy\Projects\HelloWorld/serial5.c:108
	UART4_BDH = (divisor >> 13) & 0x1F;
    2ae0:	4a0d      	ldr	r2, [pc, #52]	; (2b18 <serial5_begin+0x60>)
    2ae2:	f3c0 3144 	ubfx	r1, r0, #13, #5
    2ae6:	7011      	strb	r1, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial5.c:109
	UART4_BDL = (divisor >> 5) & 0xFF;
    2ae8:	f3c0 1147 	ubfx	r1, r0, #5, #8
C:\Teensy\Projects\HelloWorld/serial5.c:110
	UART4_C4 = divisor & 0x1F;
    2aec:	f000 001f 	and.w	r0, r0, #31
C:\Teensy\Projects\HelloWorld/serial5.c:109
	tx_buffer_tail = 0;
	transmitting = 0;
	CORE_PIN34_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
	CORE_PIN33_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
	UART4_BDH = (divisor >> 13) & 0x1F;
	UART4_BDL = (divisor >> 5) & 0xFF;
    2af0:	7051      	strb	r1, [r2, #1]
C:\Teensy\Projects\HelloWorld/serial5.c:110
	UART4_C4 = divisor & 0x1F;
    2af2:	7290      	strb	r0, [r2, #10]
C:\Teensy\Projects\HelloWorld/serial5.c:111
	UART4_C1 = 0;
    2af4:	7093      	strb	r3, [r2, #2]
C:\Teensy\Projects\HelloWorld/serial5.c:112
	UART4_PFIFO = 0;
    2af6:	7413      	strb	r3, [r2, #16]
C:\Teensy\Projects\HelloWorld/serial5.c:113
	UART4_C2 = C2_TX_INACTIVE;
    2af8:	232c      	movs	r3, #44	; 0x2c
    2afa:	70d3      	strb	r3, [r2, #3]
C:\Teensy\Projects\HelloWorld/serial5.c:114
	NVIC_SET_PRIORITY(IRQ_UART4_STATUS, IRQ_PRIORITY);
    2afc:	4b07      	ldr	r3, [pc, #28]	; (2b1c <serial5_begin+0x64>)
    2afe:	2240      	movs	r2, #64	; 0x40
    2b00:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial5.c:115
	NVIC_ENABLE_IRQ(IRQ_UART4_STATUS);
    2b02:	f2a3 333a 	subw	r3, r3, #826	; 0x33a
    2b06:	2204      	movs	r2, #4
    2b08:	601a      	str	r2, [r3, #0]
    2b0a:	4770      	bx	lr
    2b0c:	40048028 	.word	0x40048028
    2b10:	1fff0d74 	.word	0x1fff0d74
    2b14:	4004d064 	.word	0x4004d064
    2b18:	400ea000 	.word	0x400ea000
    2b1c:	e000e442 	.word	0xe000e442

00002b20 <serial5_format>:
serial5_format():
C:\Teensy\Projects\HelloWorld/serial5.c:122

void serial5_format(uint32_t format)
{
	uint8_t c;

	c = UART4_C1;
    2b20:	4a19      	ldr	r2, [pc, #100]	; (2b88 <serial5_format+0x68>)
    2b22:	7893      	ldrb	r3, [r2, #2]
C:\Teensy\Projects\HelloWorld/serial5.c:123
	c = (c & ~0x13) | (format & 0x03);	// configure parity
    2b24:	f000 0103 	and.w	r1, r0, #3
    2b28:	f003 03ec 	and.w	r3, r3, #236	; 0xec
    2b2c:	430b      	orrs	r3, r1
C:\Teensy\Projects\HelloWorld/serial5.c:124
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    2b2e:	0741      	lsls	r1, r0, #29
    2b30:	bf48      	it	mi
    2b32:	f043 0310 	orrmi.w	r3, r3, #16
C:\Teensy\Projects\HelloWorld/serial5.c:125
	UART4_C1 = c;
    2b36:	7093      	strb	r3, [r2, #2]
C:\Teensy\Projects\HelloWorld/serial5.c:126
	if ((format & 0x0F) == 0x04) UART4_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    2b38:	f000 030f 	and.w	r3, r0, #15
    2b3c:	2b04      	cmp	r3, #4
C:\Teensy\Projects\HelloWorld/serial5.c:125
	uint8_t c;

	c = UART4_C1;
	c = (c & ~0x13) | (format & 0x03);	// configure parity
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
	UART4_C1 = c;
    2b3e:	4912      	ldr	r1, [pc, #72]	; (2b88 <serial5_format+0x68>)
C:\Teensy\Projects\HelloWorld/serial5.c:126
	if ((format & 0x0F) == 0x04) UART4_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    2b40:	d103      	bne.n	2b4a <serial5_format+0x2a>
C:\Teensy\Projects\HelloWorld/serial5.c:126 (discriminator 1)
    2b42:	798b      	ldrb	r3, [r1, #6]
    2b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2b48:	718b      	strb	r3, [r1, #6]
C:\Teensy\Projects\HelloWorld/serial5.c:127
	c = UART4_S2 & ~0x10;
    2b4a:	7952      	ldrb	r2, [r2, #5]
C:\Teensy\Projects\HelloWorld/serial5.c:129
	if (format & 0x10) c |= 0x10;		// rx invert
	UART4_S2 = c;
    2b4c:	4b0e      	ldr	r3, [pc, #56]	; (2b88 <serial5_format+0x68>)
C:\Teensy\Projects\HelloWorld/serial5.c:127
	c = UART4_C1;
	c = (c & ~0x13) | (format & 0x03);	// configure parity
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
	UART4_C1 = c;
	if ((format & 0x0F) == 0x04) UART4_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
	c = UART4_S2 & ~0x10;
    2b4e:	f002 02ef 	and.w	r2, r2, #239	; 0xef
C:\Teensy\Projects\HelloWorld/serial5.c:128
	if (format & 0x10) c |= 0x10;		// rx invert
    2b52:	06c1      	lsls	r1, r0, #27
    2b54:	bf48      	it	mi
    2b56:	f042 0210 	orrmi.w	r2, r2, #16
C:\Teensy\Projects\HelloWorld/serial5.c:129
	UART4_S2 = c;
    2b5a:	715a      	strb	r2, [r3, #5]
C:\Teensy\Projects\HelloWorld/serial5.c:130
	c = UART4_C3 & ~0x10;
    2b5c:	799a      	ldrb	r2, [r3, #6]
C:\Teensy\Projects\HelloWorld/serial5.c:131
	if (format & 0x20) c |= 0x10;		// tx invert
    2b5e:	f010 0f20 	tst.w	r0, #32
C:\Teensy\Projects\HelloWorld/serial5.c:130
	UART4_C1 = c;
	if ((format & 0x0F) == 0x04) UART4_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
	c = UART4_S2 & ~0x10;
	if (format & 0x10) c |= 0x10;		// rx invert
	UART4_S2 = c;
	c = UART4_C3 & ~0x10;
    2b62:	f002 02ef 	and.w	r2, r2, #239	; 0xef
    2b66:	4619      	mov	r1, r3
C:\Teensy\Projects\HelloWorld/serial5.c:131
	if (format & 0x20) c |= 0x10;		// tx invert
    2b68:	bf18      	it	ne
    2b6a:	f042 0210 	orrne.w	r2, r2, #16
C:\Teensy\Projects\HelloWorld/serial5.c:132
	UART4_C3 = c;
    2b6e:	718a      	strb	r2, [r1, #6]
C:\Teensy\Projects\HelloWorld/serial5.c:140
	if (format & 0x08) c |= 0x20;		// 9 bit mode with parity (requires 10 bits)
	UART4_C4 = c;
	use9Bits = format & 0x80;
#endif
	// For T3.5/T3.6 See about turning on 2 stop bit mode
	if ( format & 0x100) {
    2b70:	05c2      	lsls	r2, r0, #23
C:\Teensy\Projects\HelloWorld/serial5.c:132
	c = UART4_S2 & ~0x10;
	if (format & 0x10) c |= 0x10;		// rx invert
	UART4_S2 = c;
	c = UART4_C3 & ~0x10;
	if (format & 0x20) c |= 0x10;		// tx invert
	UART4_C3 = c;
    2b72:	4b05      	ldr	r3, [pc, #20]	; (2b88 <serial5_format+0x68>)
C:\Teensy\Projects\HelloWorld/serial5.c:140
	if (format & 0x08) c |= 0x20;		// 9 bit mode with parity (requires 10 bits)
	UART4_C4 = c;
	use9Bits = format & 0x80;
#endif
	// For T3.5/T3.6 See about turning on 2 stop bit mode
	if ( format & 0x100) {
    2b74:	d506      	bpl.n	2b84 <serial5_format+0x64>
C:\Teensy\Projects\HelloWorld/serial5.c:141
		uint8_t bdl = UART4_BDL;
    2b76:	785a      	ldrb	r2, [r3, #1]
C:\Teensy\Projects\HelloWorld/serial5.c:142
		UART4_BDH |= UART_BDH_SBNS;		// Turn on 2 stop bits - was turned off by set baud
    2b78:	7819      	ldrb	r1, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial5.c:141
	UART4_C4 = c;
	use9Bits = format & 0x80;
#endif
	// For T3.5/T3.6 See about turning on 2 stop bit mode
	if ( format & 0x100) {
		uint8_t bdl = UART4_BDL;
    2b7a:	b2d2      	uxtb	r2, r2
C:\Teensy\Projects\HelloWorld/serial5.c:142
		UART4_BDH |= UART_BDH_SBNS;		// Turn on 2 stop bits - was turned off by set baud
    2b7c:	f041 0120 	orr.w	r1, r1, #32
    2b80:	7019      	strb	r1, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial5.c:143
		UART4_BDL = bdl;		// Says BDH not acted on until BDL is written
    2b82:	705a      	strb	r2, [r3, #1]
    2b84:	4770      	bx	lr
    2b86:	bf00      	nop
    2b88:	400ea000 	.word	0x400ea000

00002b8c <serial5_end>:
serial5_end():
C:\Teensy\Projects\HelloWorld/serial5.c:148
	}
}

void serial5_end(void)
{
    2b8c:	b508      	push	{r3, lr}
C:\Teensy\Projects\HelloWorld/serial5.c:149
	if (!(SIM_SCGC1 & SIM_SCGC1_UART4)) return;
    2b8e:	4b0f      	ldr	r3, [pc, #60]	; (2bcc <serial5_end+0x40>)
    2b90:	681b      	ldr	r3, [r3, #0]
    2b92:	055b      	lsls	r3, r3, #21
    2b94:	d400      	bmi.n	2b98 <serial5_end+0xc>
    2b96:	bd08      	pop	{r3, pc}
C:\Teensy\Projects\HelloWorld/serial5.c:150 (discriminator 1)
	while (transmitting) yield();  // wait for buffered data to send
    2b98:	4b0d      	ldr	r3, [pc, #52]	; (2bd0 <serial5_end+0x44>)
    2b9a:	7919      	ldrb	r1, [r3, #4]
    2b9c:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    2ba0:	b111      	cbz	r1, 2ba8 <serial5_end+0x1c>
C:\Teensy\Projects\HelloWorld/serial5.c:150 (discriminator 2)
    2ba2:	f002 fcd5 	bl	5550 <yield>
    2ba6:	e7f7      	b.n	2b98 <serial5_end+0xc>
C:\Teensy\Projects\HelloWorld/serial5.c:151
	NVIC_DISABLE_IRQ(IRQ_UART4_STATUS);
    2ba8:	490a      	ldr	r1, [pc, #40]	; (2bd4 <serial5_end+0x48>)
    2baa:	2004      	movs	r0, #4
    2bac:	6008      	str	r0, [r1, #0]
C:\Teensy\Projects\HelloWorld/serial5.c:152
	UART4_C2 = 0;
    2bae:	490a      	ldr	r1, [pc, #40]	; (2bd8 <serial5_end+0x4c>)
C:\Teensy\Projects\HelloWorld/serial5.c:153
	CORE_PIN34_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    2bb0:	480a      	ldr	r0, [pc, #40]	; (2bdc <serial5_end+0x50>)
C:\Teensy\Projects\HelloWorld/serial5.c:152
void serial5_end(void)
{
	if (!(SIM_SCGC1 & SIM_SCGC1_UART4)) return;
	while (transmitting) yield();  // wait for buffered data to send
	NVIC_DISABLE_IRQ(IRQ_UART4_STATUS);
	UART4_C2 = 0;
    2bb2:	70ca      	strb	r2, [r1, #3]
C:\Teensy\Projects\HelloWorld/serial5.c:153
	CORE_PIN34_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    2bb4:	f240 1103 	movw	r1, #259	; 0x103
    2bb8:	6001      	str	r1, [r0, #0]
C:\Teensy\Projects\HelloWorld/serial5.c:154
	CORE_PIN33_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    2bba:	f840 1c04 	str.w	r1, [r0, #-4]
C:\Teensy\Projects\HelloWorld/serial5.c:155
	rx_buffer_head = 0;
    2bbe:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial5.c:156
	rx_buffer_tail = 0;
    2bc0:	705a      	strb	r2, [r3, #1]
C:\Teensy\Projects\HelloWorld/serial5.c:157
	if (rts_pin) rts_deassert();
    2bc2:	689b      	ldr	r3, [r3, #8]
    2bc4:	b10b      	cbz	r3, 2bca <serial5_end+0x3e>
C:\Teensy\Projects\HelloWorld/serial5.c:157 (discriminator 1)
    2bc6:	2201      	movs	r2, #1
    2bc8:	701a      	strb	r2, [r3, #0]
    2bca:	bd08      	pop	{r3, pc}
    2bcc:	40048028 	.word	0x40048028
    2bd0:	1fff0d74 	.word	0x1fff0d74
    2bd4:	e000e188 	.word	0xe000e188
    2bd8:	400ea000 	.word	0x400ea000
    2bdc:	4004d064 	.word	0x4004d064

00002be0 <serial5_set_transmit_pin>:
serial5_set_transmit_pin():
C:\Teensy\Projects\HelloWorld/serial5.c:161
}

void serial5_set_transmit_pin(uint8_t pin)
{
    2be0:	b570      	push	{r4, r5, r6, lr}
    2be2:	4604      	mov	r4, r0
C:\Teensy\Projects\HelloWorld/serial5.c:162 (discriminator 1)
	while (transmitting) ;
    2be4:	4d09      	ldr	r5, [pc, #36]	; (2c0c <serial5_set_transmit_pin+0x2c>)
    2be6:	792b      	ldrb	r3, [r5, #4]
    2be8:	f003 06ff 	and.w	r6, r3, #255	; 0xff
    2bec:	2b00      	cmp	r3, #0
    2bee:	d1f9      	bne.n	2be4 <serial5_set_transmit_pin+0x4>
C:\Teensy\Projects\HelloWorld/serial5.c:163
	pinMode(pin, OUTPUT);
    2bf0:	4620      	mov	r0, r4
    2bf2:	2101      	movs	r1, #1
    2bf4:	f7fe f920 	bl	e38 <pinMode>
C:\Teensy\Projects\HelloWorld/serial5.c:164
	digitalWrite(pin, LOW);
    2bf8:	4620      	mov	r0, r4
    2bfa:	4631      	mov	r1, r6
    2bfc:	f7fe f8ee 	bl	ddc <digitalWrite>
C:\Teensy\Projects\HelloWorld/serial5.c:165
	transmit_pin = portOutputRegister(pin);
    2c00:	4b03      	ldr	r3, [pc, #12]	; (2c10 <serial5_set_transmit_pin+0x30>)
    2c02:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
    2c06:	60eb      	str	r3, [r5, #12]
    2c08:	bd70      	pop	{r4, r5, r6, pc}
    2c0a:	bf00      	nop
    2c0c:	1fff0d74 	.word	0x1fff0d74
    2c10:	00009e64 	.word	0x00009e64

00002c14 <serial5_set_tx>:
serial5_set_tx():
C:\Teensy\Projects\HelloWorld/serial5.c:169
}

void serial5_set_tx(uint8_t pin, uint8_t opendrain)
{
    2c14:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/serial5.c:172
	uint32_t cfg;

	if (opendrain) pin |= 128;
    2c16:	b109      	cbz	r1, 2c1c <serial5_set_tx+0x8>
C:\Teensy\Projects\HelloWorld/serial5.c:172 (discriminator 1)
    2c18:	f040 0080 	orr.w	r0, r0, #128	; 0x80
C:\Teensy\Projects\HelloWorld/serial5.c:173
	if (pin == tx_pin_num) return;
    2c1c:	4a0e      	ldr	r2, [pc, #56]	; (2c58 <serial5_set_tx+0x44>)
    2c1e:	7813      	ldrb	r3, [r2, #0]
    2c20:	4298      	cmp	r0, r3
    2c22:	d017      	beq.n	2c54 <serial5_set_tx+0x40>
C:\Teensy\Projects\HelloWorld/serial5.c:174
	if ((SIM_SCGC1 & SIM_SCGC1_UART4)) {
    2c24:	4c0d      	ldr	r4, [pc, #52]	; (2c5c <serial5_set_tx+0x48>)
    2c26:	6824      	ldr	r4, [r4, #0]
    2c28:	0564      	lsls	r4, r4, #21
    2c2a:	d512      	bpl.n	2c52 <serial5_set_tx+0x3e>
C:\Teensy\Projects\HelloWorld/serial5.c:175
		switch (tx_pin_num & 127) {
    2c2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2c30:	2b21      	cmp	r3, #33	; 0x21
    2c32:	d102      	bne.n	2c3a <serial5_set_tx+0x26>
C:\Teensy\Projects\HelloWorld/serial5.c:176
			case 33:  CORE_PIN33_CONFIG = 0; break; // PTE24
    2c34:	4b0a      	ldr	r3, [pc, #40]	; (2c60 <serial5_set_tx+0x4c>)
    2c36:	2400      	movs	r4, #0
    2c38:	601c      	str	r4, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial5.c:179
		}
		if (opendrain) {
			cfg = PORT_PCR_DSE | PORT_PCR_ODE;
    2c3a:	2900      	cmp	r1, #0
C:\Teensy\Projects\HelloWorld/serial5.c:183
		} else {
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
		}
		switch (pin & 127) {
    2c3c:	f000 037f 	and.w	r3, r0, #127	; 0x7f
C:\Teensy\Projects\HelloWorld/serial5.c:179
	if ((SIM_SCGC1 & SIM_SCGC1_UART4)) {
		switch (tx_pin_num & 127) {
			case 33:  CORE_PIN33_CONFIG = 0; break; // PTE24
		}
		if (opendrain) {
			cfg = PORT_PCR_DSE | PORT_PCR_ODE;
    2c40:	bf0c      	ite	eq
    2c42:	2144      	moveq	r1, #68	; 0x44
    2c44:	2160      	movne	r1, #96	; 0x60
C:\Teensy\Projects\HelloWorld/serial5.c:183
		} else {
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
		}
		switch (pin & 127) {
    2c46:	2b21      	cmp	r3, #33	; 0x21
    2c48:	d103      	bne.n	2c52 <serial5_set_tx+0x3e>
C:\Teensy\Projects\HelloWorld/serial5.c:184
			case 33:  CORE_PIN33_CONFIG = cfg | PORT_PCR_MUX(3); break;
    2c4a:	4b05      	ldr	r3, [pc, #20]	; (2c60 <serial5_set_tx+0x4c>)
    2c4c:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    2c50:	6019      	str	r1, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial5.c:187
		}
	}
	tx_pin_num = pin;
    2c52:	7010      	strb	r0, [r2, #0]
    2c54:	bd10      	pop	{r4, pc}
    2c56:	bf00      	nop
    2c58:	1fff0a0e 	.word	0x1fff0a0e
    2c5c:	40048028 	.word	0x40048028
    2c60:	4004d060 	.word	0x4004d060

00002c64 <serial5_set_rx>:
serial5_set_rx():
C:\Teensy\Projects\HelloWorld/serial5.c:191
}

void serial5_set_rx(uint8_t pin)
{
    2c64:	4770      	bx	lr

00002c66 <serial5_set_rts>:
serial5_set_rts():
C:\Teensy\Projects\HelloWorld/serial5.c:196
}

int serial5_set_rts(uint8_t pin)
{
	if (!(SIM_SCGC1 & SIM_SCGC1_UART4)) return 0;
    2c66:	4a0d      	ldr	r2, [pc, #52]	; (2c9c <serial5_set_rts+0x36>)
C:\Teensy\Projects\HelloWorld/serial5.c:195
void serial5_set_rx(uint8_t pin)
{
}

int serial5_set_rts(uint8_t pin)
{
    2c68:	b538      	push	{r3, r4, r5, lr}
C:\Teensy\Projects\HelloWorld/serial5.c:196
	if (!(SIM_SCGC1 & SIM_SCGC1_UART4)) return 0;
    2c6a:	6814      	ldr	r4, [r2, #0]
    2c6c:	f414 6280 	ands.w	r2, r4, #1024	; 0x400
    2c70:	f04f 0400 	mov.w	r4, #0
    2c74:	d010      	beq.n	2c98 <serial5_set_rts+0x32>
C:\Teensy\Projects\HelloWorld/serial5.c:197
	if (pin < CORE_NUM_DIGITAL) {
    2c76:	283f      	cmp	r0, #63	; 0x3f
    2c78:	4d09      	ldr	r5, [pc, #36]	; (2ca0 <serial5_set_rts+0x3a>)
    2c7a:	d80a      	bhi.n	2c92 <serial5_set_rts+0x2c>
C:\Teensy\Projects\HelloWorld/serial5.c:198
		rts_pin = portOutputRegister(pin);
    2c7c:	4a09      	ldr	r2, [pc, #36]	; (2ca4 <serial5_set_rts+0x3e>)
C:\Teensy\Projects\HelloWorld/serial5.c:199
		pinMode(pin, OUTPUT);
    2c7e:	2101      	movs	r1, #1
C:\Teensy\Projects\HelloWorld/serial5.c:198

int serial5_set_rts(uint8_t pin)
{
	if (!(SIM_SCGC1 & SIM_SCGC1_UART4)) return 0;
	if (pin < CORE_NUM_DIGITAL) {
		rts_pin = portOutputRegister(pin);
    2c80:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
    2c84:	60ab      	str	r3, [r5, #8]
C:\Teensy\Projects\HelloWorld/serial5.c:199
		pinMode(pin, OUTPUT);
    2c86:	f7fe f8d7 	bl	e38 <pinMode>
C:\Teensy\Projects\HelloWorld/serial5.c:200
		rts_assert();
    2c8a:	68ab      	ldr	r3, [r5, #8]
    2c8c:	701c      	strb	r4, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial5.c:205
	} else {
		rts_pin = NULL;
		return 0;
	}
	return 1;
    2c8e:	2001      	movs	r0, #1
    2c90:	bd38      	pop	{r3, r4, r5, pc}
C:\Teensy\Projects\HelloWorld/serial5.c:202
	if (pin < CORE_NUM_DIGITAL) {
		rts_pin = portOutputRegister(pin);
		pinMode(pin, OUTPUT);
		rts_assert();
	} else {
		rts_pin = NULL;
    2c92:	60ac      	str	r4, [r5, #8]
C:\Teensy\Projects\HelloWorld/serial5.c:203
		return 0;
    2c94:	4620      	mov	r0, r4
    2c96:	bd38      	pop	{r3, r4, r5, pc}
C:\Teensy\Projects\HelloWorld/serial5.c:196
{
}

int serial5_set_rts(uint8_t pin)
{
	if (!(SIM_SCGC1 & SIM_SCGC1_UART4)) return 0;
    2c98:	4610      	mov	r0, r2
C:\Teensy\Projects\HelloWorld/serial5.c:206
	} else {
		rts_pin = NULL;
		return 0;
	}
	return 1;
}
    2c9a:	bd38      	pop	{r3, r4, r5, pc}
    2c9c:	40048028 	.word	0x40048028
    2ca0:	1fff0d74 	.word	0x1fff0d74
    2ca4:	00009e64 	.word	0x00009e64

00002ca8 <serial5_set_cts>:
serial5_set_cts():
C:\Teensy\Projects\HelloWorld/serial5.c:210

int serial5_set_cts(uint8_t pin)
{
	if (!(SIM_SCGC1 & SIM_SCGC1_UART4)) return 0;
    2ca8:	4b0b      	ldr	r3, [pc, #44]	; (2cd8 <serial5_set_cts+0x30>)
    2caa:	681b      	ldr	r3, [r3, #0]
    2cac:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
    2cb0:	d010      	beq.n	2cd4 <serial5_set_cts+0x2c>
C:\Teensy\Projects\HelloWorld/serial5.c:211
	if (pin == 24) {
    2cb2:	2818      	cmp	r0, #24
    2cb4:	4b09      	ldr	r3, [pc, #36]	; (2cdc <serial5_set_cts+0x34>)
    2cb6:	d109      	bne.n	2ccc <serial5_set_cts+0x24>
C:\Teensy\Projects\HelloWorld/serial5.c:212
		CORE_PIN24_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    2cb8:	4a09      	ldr	r2, [pc, #36]	; (2ce0 <serial5_set_cts+0x38>)
    2cba:	f240 3102 	movw	r1, #770	; 0x302
    2cbe:	6011      	str	r1, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial5.c:217
	} else {
		UART4_MODEM &= ~UART_MODEM_TXCTSE;
		return 0;
	}
	UART4_MODEM |= UART_MODEM_TXCTSE;
    2cc0:	7b5a      	ldrb	r2, [r3, #13]
    2cc2:	f042 0201 	orr.w	r2, r2, #1
    2cc6:	735a      	strb	r2, [r3, #13]
C:\Teensy\Projects\HelloWorld/serial5.c:218
	return 1;
    2cc8:	2001      	movs	r0, #1
    2cca:	4770      	bx	lr
C:\Teensy\Projects\HelloWorld/serial5.c:214
{
	if (!(SIM_SCGC1 & SIM_SCGC1_UART4)) return 0;
	if (pin == 24) {
		CORE_PIN24_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
	} else {
		UART4_MODEM &= ~UART_MODEM_TXCTSE;
    2ccc:	7b5a      	ldrb	r2, [r3, #13]
    2cce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    2cd2:	735a      	strb	r2, [r3, #13]
C:\Teensy\Projects\HelloWorld/serial5.c:215
		return 0;
    2cd4:	2000      	movs	r0, #0
    2cd6:	4770      	bx	lr
    2cd8:	40048028 	.word	0x40048028
    2cdc:	400ea000 	.word	0x400ea000
    2ce0:	4004d068 	.word	0x4004d068

00002ce4 <serial5_putchar>:
serial5_putchar():
C:\Teensy\Projects\HelloWorld/serial5.c:222
	UART4_MODEM |= UART_MODEM_TXCTSE;
	return 1;
}

void serial5_putchar(uint32_t c)
{
    2ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:\Teensy\Projects\HelloWorld/serial5.c:225
	uint32_t head, n;

	if (!(SIM_SCGC1 & SIM_SCGC1_UART4)) return;
    2ce6:	4b1b      	ldr	r3, [pc, #108]	; (2d54 <serial5_putchar+0x70>)
    2ce8:	681b      	ldr	r3, [r3, #0]
    2cea:	055a      	lsls	r2, r3, #21
C:\Teensy\Projects\HelloWorld/serial5.c:222
	UART4_MODEM |= UART_MODEM_TXCTSE;
	return 1;
}

void serial5_putchar(uint32_t c)
{
    2cec:	4607      	mov	r7, r0
C:\Teensy\Projects\HelloWorld/serial5.c:225
	uint32_t head, n;

	if (!(SIM_SCGC1 & SIM_SCGC1_UART4)) return;
    2cee:	d530      	bpl.n	2d52 <serial5_putchar+0x6e>
C:\Teensy\Projects\HelloWorld/serial5.c:226
	if (transmit_pin) transmit_assert();
    2cf0:	4e19      	ldr	r6, [pc, #100]	; (2d58 <serial5_putchar+0x74>)
    2cf2:	68f3      	ldr	r3, [r6, #12]
    2cf4:	b10b      	cbz	r3, 2cfa <serial5_putchar+0x16>
C:\Teensy\Projects\HelloWorld/serial5.c:226 (discriminator 1)
    2cf6:	2201      	movs	r2, #1
    2cf8:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial5.c:227
	head = tx_buffer_head;
    2cfa:	78b4      	ldrb	r4, [r6, #2]
C:\Teensy\Projects\HelloWorld/serial5.c:228
	if (++head >= SERIAL5_TX_BUFFER_SIZE) head = 0;
    2cfc:	3401      	adds	r4, #1
    2cfe:	2c28      	cmp	r4, #40	; 0x28
    2d00:	bf28      	it	cs
    2d02:	2400      	movcs	r4, #0
C:\Teensy\Projects\HelloWorld/serial5.c:229 (discriminator 1)
	while (tx_buffer_tail == head) {
    2d04:	78f3      	ldrb	r3, [r6, #3]
    2d06:	4d14      	ldr	r5, [pc, #80]	; (2d58 <serial5_putchar+0x74>)
    2d08:	42a3      	cmp	r3, r4
    2d0a:	d118      	bne.n	2d3e <serial5_putchar+0x5a>
C:\Teensy\Projects\HelloWorld/serial5.c:230
		int priority = nvic_execution_priority();
    2d0c:	f7fd fdc4 	bl	898 <nvic_execution_priority>
C:\Teensy\Projects\HelloWorld/serial5.c:231
		if (priority <= IRQ_PRIORITY) {
    2d10:	2840      	cmp	r0, #64	; 0x40
    2d12:	dc0f      	bgt.n	2d34 <serial5_putchar+0x50>
C:\Teensy\Projects\HelloWorld/serial5.c:232
			if ((UART4_S1 & UART_S1_TDRE)) {
    2d14:	4a11      	ldr	r2, [pc, #68]	; (2d5c <serial5_putchar+0x78>)
    2d16:	7913      	ldrb	r3, [r2, #4]
    2d18:	061b      	lsls	r3, r3, #24
    2d1a:	d5f3      	bpl.n	2d04 <serial5_putchar+0x20>
C:\Teensy\Projects\HelloWorld/serial5.c:233
				uint32_t tail = tx_buffer_tail;
    2d1c:	78eb      	ldrb	r3, [r5, #3]
C:\Teensy\Projects\HelloWorld/serial5.c:234
				if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    2d1e:	3301      	adds	r3, #1
    2d20:	2b28      	cmp	r3, #40	; 0x28
    2d22:	bf28      	it	cs
    2d24:	2300      	movcs	r3, #0
C:\Teensy\Projects\HelloWorld/serial5.c:235
				n = tx_buffer[tail];
    2d26:	18f1      	adds	r1, r6, r3
C:\Teensy\Projects\HelloWorld/serial5.c:238
				if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
				UART4_D = n;
				tx_buffer_tail = tail;
    2d28:	b2db      	uxtb	r3, r3
C:\Teensy\Projects\HelloWorld/serial5.c:235
		int priority = nvic_execution_priority();
		if (priority <= IRQ_PRIORITY) {
			if ((UART4_S1 & UART_S1_TDRE)) {
				uint32_t tail = tx_buffer_tail;
				if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
				n = tx_buffer[tail];
    2d2a:	7c09      	ldrb	r1, [r1, #16]
    2d2c:	b2c9      	uxtb	r1, r1
C:\Teensy\Projects\HelloWorld/serial5.c:237
				if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
				UART4_D = n;
    2d2e:	71d1      	strb	r1, [r2, #7]
C:\Teensy\Projects\HelloWorld/serial5.c:238
				tx_buffer_tail = tail;
    2d30:	70f3      	strb	r3, [r6, #3]
    2d32:	e7e7      	b.n	2d04 <serial5_putchar+0x20>
C:\Teensy\Projects\HelloWorld/serial5.c:240
			}
		} else if (priority >= 256) {
    2d34:	28ff      	cmp	r0, #255	; 0xff
    2d36:	dde5      	ble.n	2d04 <serial5_putchar+0x20>
C:\Teensy\Projects\HelloWorld/serial5.c:241
			yield(); // wait
    2d38:	f002 fc0a 	bl	5550 <yield>
    2d3c:	e7e2      	b.n	2d04 <serial5_putchar+0x20>
C:\Teensy\Projects\HelloWorld/serial5.c:244
		}
	}
	tx_buffer[head] = c;
    2d3e:	192b      	adds	r3, r5, r4
    2d40:	b2ff      	uxtb	r7, r7
    2d42:	741f      	strb	r7, [r3, #16]
C:\Teensy\Projects\HelloWorld/serial5.c:245
	transmitting = 1;
    2d44:	2301      	movs	r3, #1
    2d46:	712b      	strb	r3, [r5, #4]
C:\Teensy\Projects\HelloWorld/serial5.c:247
	tx_buffer_head = head;
	UART4_C2 = C2_TX_ACTIVE;
    2d48:	4b04      	ldr	r3, [pc, #16]	; (2d5c <serial5_putchar+0x78>)
C:\Teensy\Projects\HelloWorld/serial5.c:246
			yield(); // wait
		}
	}
	tx_buffer[head] = c;
	transmitting = 1;
	tx_buffer_head = head;
    2d4a:	b2e4      	uxtb	r4, r4
C:\Teensy\Projects\HelloWorld/serial5.c:247
	UART4_C2 = C2_TX_ACTIVE;
    2d4c:	22ac      	movs	r2, #172	; 0xac
C:\Teensy\Projects\HelloWorld/serial5.c:246
			yield(); // wait
		}
	}
	tx_buffer[head] = c;
	transmitting = 1;
	tx_buffer_head = head;
    2d4e:	70ac      	strb	r4, [r5, #2]
C:\Teensy\Projects\HelloWorld/serial5.c:247
	UART4_C2 = C2_TX_ACTIVE;
    2d50:	70da      	strb	r2, [r3, #3]
    2d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d54:	40048028 	.word	0x40048028
    2d58:	1fff0d74 	.word	0x1fff0d74
    2d5c:	400ea000 	.word	0x400ea000

00002d60 <serial5_write>:
serial5_write():
C:\Teensy\Projects\HelloWorld/serial5.c:251
}

void serial5_write(const void *buf, unsigned int count)
{
    2d60:	b538      	push	{r3, r4, r5, lr}
    2d62:	4604      	mov	r4, r0
    2d64:	1845      	adds	r5, r0, r1
C:\Teensy\Projects\HelloWorld/serial5.c:253 (discriminator 1)
	const uint8_t *p = (const uint8_t *)buf;
	while (count-- > 0) serial5_putchar(*p++);
    2d66:	42ac      	cmp	r4, r5
    2d68:	d004      	beq.n	2d74 <serial5_write+0x14>
C:\Teensy\Projects\HelloWorld/serial5.c:253 (discriminator 2)
    2d6a:	f814 0b01 	ldrb.w	r0, [r4], #1
    2d6e:	f7ff ffb9 	bl	2ce4 <serial5_putchar>
    2d72:	e7f8      	b.n	2d66 <serial5_write+0x6>
C:\Teensy\Projects\HelloWorld/serial5.c:254
}
    2d74:	bd38      	pop	{r3, r4, r5, pc}

00002d76 <serial5_flush>:
serial5_flush():
C:\Teensy\Projects\HelloWorld/serial5.c:257

void serial5_flush(void)
{
    2d76:	b508      	push	{r3, lr}
C:\Teensy\Projects\HelloWorld/serial5.c:258 (discriminator 1)
	while (transmitting) yield(); // wait
    2d78:	4b03      	ldr	r3, [pc, #12]	; (2d88 <serial5_flush+0x12>)
    2d7a:	791b      	ldrb	r3, [r3, #4]
    2d7c:	b113      	cbz	r3, 2d84 <serial5_flush+0xe>
C:\Teensy\Projects\HelloWorld/serial5.c:258 (discriminator 2)
    2d7e:	f002 fbe7 	bl	5550 <yield>
    2d82:	e7f9      	b.n	2d78 <serial5_flush+0x2>
C:\Teensy\Projects\HelloWorld/serial5.c:259
}
    2d84:	bd08      	pop	{r3, pc}
    2d86:	bf00      	nop
    2d88:	1fff0d74 	.word	0x1fff0d74

00002d8c <serial5_write_buffer_free>:
serial5_write_buffer_free():
C:\Teensy\Projects\HelloWorld/serial5.c:265

int serial5_write_buffer_free(void)
{
	uint32_t head, tail;

	head = tx_buffer_head;
    2d8c:	4a05      	ldr	r2, [pc, #20]	; (2da4 <serial5_write_buffer_free+0x18>)
    2d8e:	7893      	ldrb	r3, [r2, #2]
C:\Teensy\Projects\HelloWorld/serial5.c:266
	tail = tx_buffer_tail;
    2d90:	78d0      	ldrb	r0, [r2, #3]
C:\Teensy\Projects\HelloWorld/serial5.c:265

int serial5_write_buffer_free(void)
{
	uint32_t head, tail;

	head = tx_buffer_head;
    2d92:	b2db      	uxtb	r3, r3
C:\Teensy\Projects\HelloWorld/serial5.c:266
	tail = tx_buffer_tail;
    2d94:	b2c0      	uxtb	r0, r0
C:\Teensy\Projects\HelloWorld/serial5.c:267
	if (head >= tail) return SERIAL5_TX_BUFFER_SIZE - 1 - head + tail;
    2d96:	4283      	cmp	r3, r0
    2d98:	bf2c      	ite	cs
    2d9a:	3027      	addcs	r0, #39	; 0x27
C:\Teensy\Projects\HelloWorld/serial5.c:268
	return tail - head - 1;
    2d9c:	f100 30ff 	addcc.w	r0, r0, #4294967295
    2da0:	1ac0      	subs	r0, r0, r3
C:\Teensy\Projects\HelloWorld/serial5.c:269
}
    2da2:	4770      	bx	lr
    2da4:	1fff0d74 	.word	0x1fff0d74

00002da8 <serial5_available>:
serial5_available():
C:\Teensy\Projects\HelloWorld/serial5.c:275

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2da8:	4a04      	ldr	r2, [pc, #16]	; (2dbc <serial5_available+0x14>)
    2daa:	7810      	ldrb	r0, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial5.c:276
	tail = rx_buffer_tail;
    2dac:	7853      	ldrb	r3, [r2, #1]
C:\Teensy\Projects\HelloWorld/serial5.c:275

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2dae:	b2c0      	uxtb	r0, r0
C:\Teensy\Projects\HelloWorld/serial5.c:276
	tail = rx_buffer_tail;
    2db0:	b2db      	uxtb	r3, r3
C:\Teensy\Projects\HelloWorld/serial5.c:277
	if (head >= tail) return head - tail;
    2db2:	4298      	cmp	r0, r3
C:\Teensy\Projects\HelloWorld/serial5.c:278
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    2db4:	bf38      	it	cc
    2db6:	3040      	addcc	r0, #64	; 0x40
    2db8:	1ac0      	subs	r0, r0, r3
C:\Teensy\Projects\HelloWorld/serial5.c:279
}
    2dba:	4770      	bx	lr
    2dbc:	1fff0d74 	.word	0x1fff0d74

00002dc0 <serial5_getchar>:
serial5_getchar():
C:\Teensy\Projects\HelloWorld/serial5.c:282

int serial5_getchar(void)
{
    2dc0:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/serial5.c:286
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    2dc2:	4a0f      	ldr	r2, [pc, #60]	; (2e00 <serial5_getchar+0x40>)
    2dc4:	7811      	ldrb	r1, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial5.c:287
	tail = rx_buffer_tail;
    2dc6:	7853      	ldrb	r3, [r2, #1]
C:\Teensy\Projects\HelloWorld/serial5.c:286
int serial5_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    2dc8:	b2c9      	uxtb	r1, r1
C:\Teensy\Projects\HelloWorld/serial5.c:287
	tail = rx_buffer_tail;
    2dca:	b2db      	uxtb	r3, r3
C:\Teensy\Projects\HelloWorld/serial5.c:288
	if (head == tail) return -1;
    2dcc:	4299      	cmp	r1, r3
    2dce:	d014      	beq.n	2dfa <serial5_getchar+0x3a>
C:\Teensy\Projects\HelloWorld/serial5.c:289
	if (++tail >= SERIAL5_RX_BUFFER_SIZE) tail = 0;
    2dd0:	3301      	adds	r3, #1
    2dd2:	2b40      	cmp	r3, #64	; 0x40
    2dd4:	bf28      	it	cs
    2dd6:	2300      	movcs	r3, #0
C:\Teensy\Projects\HelloWorld/serial5.c:290
	c = rx_buffer[tail];
    2dd8:	18d0      	adds	r0, r2, r3
C:\Teensy\Projects\HelloWorld/serial5.c:291
	rx_buffer_tail = tail;
    2dda:	b2dc      	uxtb	r4, r3
C:\Teensy\Projects\HelloWorld/serial5.c:290

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL5_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
    2ddc:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
C:\Teensy\Projects\HelloWorld/serial5.c:291
	rx_buffer_tail = tail;
    2de0:	7054      	strb	r4, [r2, #1]
C:\Teensy\Projects\HelloWorld/serial5.c:292
	if (rts_pin) {
    2de2:	6892      	ldr	r2, [r2, #8]
C:\Teensy\Projects\HelloWorld/serial5.c:290

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL5_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
    2de4:	b2c0      	uxtb	r0, r0
C:\Teensy\Projects\HelloWorld/serial5.c:292
	rx_buffer_tail = tail;
	if (rts_pin) {
    2de6:	b152      	cbz	r2, 2dfe <serial5_getchar+0x3e>
C:\Teensy\Projects\HelloWorld/serial5.c:294
		int avail;
		if (head >= tail) avail = head - tail;
    2de8:	4299      	cmp	r1, r3
C:\Teensy\Projects\HelloWorld/serial5.c:295
		else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    2dea:	bf38      	it	cc
    2dec:	3140      	addcc	r1, #64	; 0x40
    2dee:	1acb      	subs	r3, r1, r3
C:\Teensy\Projects\HelloWorld/serial5.c:296
		if (avail <= RTS_LOW_WATERMARK) rts_assert();
    2df0:	2b1a      	cmp	r3, #26
    2df2:	dc04      	bgt.n	2dfe <serial5_getchar+0x3e>
C:\Teensy\Projects\HelloWorld/serial5.c:296 (discriminator 1)
    2df4:	2300      	movs	r3, #0
    2df6:	7013      	strb	r3, [r2, #0]
    2df8:	bd10      	pop	{r4, pc}
C:\Teensy\Projects\HelloWorld/serial5.c:288
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    2dfa:	f04f 30ff 	mov.w	r0, #4294967295
C:\Teensy\Projects\HelloWorld/serial5.c:299
		if (head >= tail) avail = head - tail;
		else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
		if (avail <= RTS_LOW_WATERMARK) rts_assert();
	}
	return c;
}
    2dfe:	bd10      	pop	{r4, pc}
    2e00:	1fff0d74 	.word	0x1fff0d74

00002e04 <serial5_peek>:
serial5_peek():
C:\Teensy\Projects\HelloWorld/serial5.c:305

int serial5_peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2e04:	4a08      	ldr	r2, [pc, #32]	; (2e28 <serial5_peek+0x24>)
    2e06:	7811      	ldrb	r1, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial5.c:306
	tail = rx_buffer_tail;
    2e08:	7853      	ldrb	r3, [r2, #1]
    2e0a:	b2db      	uxtb	r3, r3
C:\Teensy\Projects\HelloWorld/serial5.c:307
	if (head == tail) return -1;
    2e0c:	4299      	cmp	r1, r3
    2e0e:	d008      	beq.n	2e22 <serial5_peek+0x1e>
C:\Teensy\Projects\HelloWorld/serial5.c:308
	if (++tail >= SERIAL5_RX_BUFFER_SIZE) tail = 0;
    2e10:	3301      	adds	r3, #1
    2e12:	2b40      	cmp	r3, #64	; 0x40
    2e14:	bf28      	it	cs
    2e16:	2300      	movcs	r3, #0
C:\Teensy\Projects\HelloWorld/serial5.c:309
	return rx_buffer[tail];
    2e18:	4413      	add	r3, r2
    2e1a:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
    2e1e:	b2c0      	uxtb	r0, r0
    2e20:	4770      	bx	lr
C:\Teensy\Projects\HelloWorld/serial5.c:307
{
	uint32_t head, tail;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    2e22:	f04f 30ff 	mov.w	r0, #4294967295
C:\Teensy\Projects\HelloWorld/serial5.c:310
	if (++tail >= SERIAL5_RX_BUFFER_SIZE) tail = 0;
	return rx_buffer[tail];
}
    2e26:	4770      	bx	lr
    2e28:	1fff0d74 	.word	0x1fff0d74

00002e2c <serial5_clear>:
serial5_clear():
C:\Teensy\Projects\HelloWorld/serial5.c:314

void serial5_clear(void)
{
	rx_buffer_head = rx_buffer_tail;
    2e2c:	4b04      	ldr	r3, [pc, #16]	; (2e40 <serial5_clear+0x14>)
    2e2e:	785a      	ldrb	r2, [r3, #1]
    2e30:	b2d2      	uxtb	r2, r2
    2e32:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial5.c:315
	if (rts_pin) rts_assert();
    2e34:	689b      	ldr	r3, [r3, #8]
    2e36:	b10b      	cbz	r3, 2e3c <serial5_clear+0x10>
C:\Teensy\Projects\HelloWorld/serial5.c:315 (discriminator 1)
    2e38:	2200      	movs	r2, #0
    2e3a:	701a      	strb	r2, [r3, #0]
    2e3c:	4770      	bx	lr
    2e3e:	bf00      	nop
    2e40:	1fff0d74 	.word	0x1fff0d74

00002e44 <uart4_status_isr>:
uart4_status_isr():
C:\Teensy\Projects\HelloWorld/serial5.c:327
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    2e44:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/serial5.c:331
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    2e46:	4b28      	ldr	r3, [pc, #160]	; (2ee8 <uart4_status_isr+0xa4>)
    2e48:	791a      	ldrb	r2, [r3, #4]
    2e4a:	0692      	lsls	r2, r2, #26
    2e4c:	d51f      	bpl.n	2e8e <uart4_status_isr+0x4a>
C:\Teensy\Projects\HelloWorld/serial5.c:337
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    2e4e:	4a27      	ldr	r2, [pc, #156]	; (2eec <uart4_status_isr+0xa8>)
C:\Teensy\Projects\HelloWorld/serial5.c:335

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    2e50:	79d8      	ldrb	r0, [r3, #7]
C:\Teensy\Projects\HelloWorld/serial5.c:337
		}
		head = rx_buffer_head + 1;
    2e52:	7813      	ldrb	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial5.c:339
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2e54:	7851      	ldrb	r1, [r2, #1]
C:\Teensy\Projects\HelloWorld/serial5.c:337
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    2e56:	3301      	adds	r3, #1
C:\Teensy\Projects\HelloWorld/serial5.c:338
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
    2e58:	2b40      	cmp	r3, #64	; 0x40
    2e5a:	bf28      	it	cs
    2e5c:	2300      	movcs	r3, #0
C:\Teensy\Projects\HelloWorld/serial5.c:339
		if (head != rx_buffer_tail) {
    2e5e:	428b      	cmp	r3, r1
C:\Teensy\Projects\HelloWorld/serial5.c:335

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    2e60:	b2c0      	uxtb	r0, r0
C:\Teensy\Projects\HelloWorld/serial5.c:339
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2e62:	d004      	beq.n	2e6e <uart4_status_isr+0x2a>
C:\Teensy\Projects\HelloWorld/serial5.c:340
			rx_buffer[head] = n;
    2e64:	18d1      	adds	r1, r2, r3
    2e66:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
C:\Teensy\Projects\HelloWorld/serial5.c:341
			rx_buffer_head = head;
    2e6a:	b2d9      	uxtb	r1, r3
    2e6c:	7011      	strb	r1, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial5.c:343
		}
		if (rts_pin) {
    2e6e:	6891      	ldr	r1, [r2, #8]
    2e70:	b169      	cbz	r1, 2e8e <uart4_status_isr+0x4a>
C:\Teensy\Projects\HelloWorld/serial5.c:345
			int avail;
			tail = tx_buffer_tail;
    2e72:	4a1e      	ldr	r2, [pc, #120]	; (2eec <uart4_status_isr+0xa8>)
    2e74:	78d2      	ldrb	r2, [r2, #3]
    2e76:	b2d2      	uxtb	r2, r2
C:\Teensy\Projects\HelloWorld/serial5.c:346
			if (head >= tail) avail = head - tail;
    2e78:	4293      	cmp	r3, r2
C:\Teensy\Projects\HelloWorld/serial5.c:347
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    2e7a:	bf36      	itet	cc
    2e7c:	f1c2 0240 	rsbcc	r2, r2, #64	; 0x40
C:\Teensy\Projects\HelloWorld/serial5.c:346
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    2e80:	ebc2 0303 	rsbcs	r3, r2, r3
C:\Teensy\Projects\HelloWorld/serial5.c:347
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    2e84:	189b      	addcc	r3, r3, r2
C:\Teensy\Projects\HelloWorld/serial5.c:348
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    2e86:	2b27      	cmp	r3, #39	; 0x27
    2e88:	bfc4      	itt	gt
    2e8a:	2301      	movgt	r3, #1
    2e8c:	700b      	strbgt	r3, [r1, #0]
C:\Teensy\Projects\HelloWorld/serial5.c:351
		}
	}
	c = UART4_C2;
    2e8e:	4916      	ldr	r1, [pc, #88]	; (2ee8 <uart4_status_isr+0xa4>)
    2e90:	78c8      	ldrb	r0, [r1, #3]
    2e92:	b2c0      	uxtb	r0, r0
C:\Teensy\Projects\HelloWorld/serial5.c:352
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    2e94:	0604      	lsls	r4, r0, #24
    2e96:	d515      	bpl.n	2ec4 <uart4_status_isr+0x80>
C:\Teensy\Projects\HelloWorld/serial5.c:352 (discriminator 1)
    2e98:	790b      	ldrb	r3, [r1, #4]
    2e9a:	061a      	lsls	r2, r3, #24
    2e9c:	d512      	bpl.n	2ec4 <uart4_status_isr+0x80>
C:\Teensy\Projects\HelloWorld/serial5.c:353
		head = tx_buffer_head;
    2e9e:	4a13      	ldr	r2, [pc, #76]	; (2eec <uart4_status_isr+0xa8>)
    2ea0:	7894      	ldrb	r4, [r2, #2]
C:\Teensy\Projects\HelloWorld/serial5.c:354
		tail = tx_buffer_tail;
    2ea2:	78d3      	ldrb	r3, [r2, #3]
    2ea4:	b2db      	uxtb	r3, r3
C:\Teensy\Projects\HelloWorld/serial5.c:355
		if (head == tail) {
    2ea6:	429c      	cmp	r4, r3
    2ea8:	d102      	bne.n	2eb0 <uart4_status_isr+0x6c>
C:\Teensy\Projects\HelloWorld/serial5.c:356
			UART4_C2 = C2_TX_COMPLETING;
    2eaa:	236c      	movs	r3, #108	; 0x6c
    2eac:	70cb      	strb	r3, [r1, #3]
    2eae:	e009      	b.n	2ec4 <uart4_status_isr+0x80>
C:\Teensy\Projects\HelloWorld/serial5.c:358
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    2eb0:	3301      	adds	r3, #1
    2eb2:	2b28      	cmp	r3, #40	; 0x28
    2eb4:	bf28      	it	cs
    2eb6:	2300      	movcs	r3, #0
C:\Teensy\Projects\HelloWorld/serial5.c:359
			n = tx_buffer[tail];
    2eb8:	18d4      	adds	r4, r2, r3
C:\Teensy\Projects\HelloWorld/serial5.c:362
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
    2eba:	b2db      	uxtb	r3, r3
C:\Teensy\Projects\HelloWorld/serial5.c:359
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    2ebc:	7c24      	ldrb	r4, [r4, #16]
    2ebe:	b2e4      	uxtb	r4, r4
C:\Teensy\Projects\HelloWorld/serial5.c:361
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    2ec0:	71cc      	strb	r4, [r1, #7]
C:\Teensy\Projects\HelloWorld/serial5.c:362
			tx_buffer_tail = tail;
    2ec2:	70d3      	strb	r3, [r2, #3]
C:\Teensy\Projects\HelloWorld/serial5.c:365
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    2ec4:	0643      	lsls	r3, r0, #25
    2ec6:	d50d      	bpl.n	2ee4 <uart4_status_isr+0xa0>
C:\Teensy\Projects\HelloWorld/serial5.c:365 (discriminator 1)
    2ec8:	4b07      	ldr	r3, [pc, #28]	; (2ee8 <uart4_status_isr+0xa4>)
    2eca:	791a      	ldrb	r2, [r3, #4]
    2ecc:	f012 0f40 	tst.w	r2, #64	; 0x40
    2ed0:	4619      	mov	r1, r3
    2ed2:	d007      	beq.n	2ee4 <uart4_status_isr+0xa0>
C:\Teensy\Projects\HelloWorld/serial5.c:366
		transmitting = 0;
    2ed4:	4b05      	ldr	r3, [pc, #20]	; (2eec <uart4_status_isr+0xa8>)
    2ed6:	2200      	movs	r2, #0
    2ed8:	711a      	strb	r2, [r3, #4]
C:\Teensy\Projects\HelloWorld/serial5.c:367
		if (transmit_pin) transmit_deassert();
    2eda:	68db      	ldr	r3, [r3, #12]
    2edc:	b103      	cbz	r3, 2ee0 <uart4_status_isr+0x9c>
C:\Teensy\Projects\HelloWorld/serial5.c:367 (discriminator 1)
    2ede:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial5.c:368
		UART4_C2 = C2_TX_INACTIVE;
    2ee0:	232c      	movs	r3, #44	; 0x2c
    2ee2:	70cb      	strb	r3, [r1, #3]
    2ee4:	bd10      	pop	{r4, pc}
    2ee6:	bf00      	nop
    2ee8:	400ea000 	.word	0x400ea000
    2eec:	1fff0d74 	.word	0x1fff0d74

00002ef0 <serial6_begin>:
serial6_begin():
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:107
void serial6_begin(uint32_t desiredBaudRate)
{
	#define F_LPUART_CLOCK_SPEED  48000000 //F_BUS
	// Make sure the clock for this uart is enabled, else the registers are not
	// vailable. 
	SIM_SCGC2 |= SIM_SCGC2_LPUART0; 	// Turn on the clock
    2ef0:	4b42      	ldr	r3, [pc, #264]	; (2ffc <serial6_begin+0x10c>)
    2ef2:	681a      	ldr	r2, [r3, #0]
    2ef4:	f042 0210 	orr.w	r2, r2, #16
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:103
// UART0 and UART1 are clocked by F_CPU, UART2 is clocked by F_BUS
// UART0 has 8 byte fifo, UART1 and UART2 have 1 byte buffer


void serial6_begin(uint32_t desiredBaudRate)
{
    2ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:107
	#define F_LPUART_CLOCK_SPEED  48000000 //F_BUS
	// Make sure the clock for this uart is enabled, else the registers are not
	// vailable. 
	SIM_SCGC2 |= SIM_SCGC2_LPUART0; 	// Turn on the clock
    2efc:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:116
    uint16_t sbr, sbrTemp, osrCheck;
    uint32_t osr, baudDiffCheck, calculatedBaud, baudDiff;
    uint32_t clockSpeed;

    // First lets figure out what the LPUART Clock speed is. 
    uint32_t PLLFLLSEL = SIM_SOPT2 & SIM_SOPT2_IRC48SEL;	// Note: Bot bits on here
    2efe:	4a40      	ldr	r2, [pc, #256]	; (3000 <serial6_begin+0x110>)
    2f00:	6813      	ldr	r3, [r2, #0]
    2f02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:118

    if (PLLFLLSEL == SIM_SOPT2_IRC48SEL)
    2f06:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    2f0a:	4690      	mov	r8, r2
    2f0c:	d006      	beq.n	2f1c <serial6_begin+0x2c>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:121
    	clockSpeed = 48000000;  // Fixed to 48mhz
    else if (PLLFLLSEL == SIM_SOPT2_PLLFLLSEL)
    	clockSpeed = F_PLL;		// Using PLL clock
    2f0e:	4a3d      	ldr	r2, [pc, #244]	; (3004 <serial6_begin+0x114>)
    2f10:	4e3d      	ldr	r6, [pc, #244]	; (3008 <serial6_begin+0x118>)
    2f12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    2f16:	bf08      	it	eq
    2f18:	4616      	moveq	r6, r2
    2f1a:	e000      	b.n	2f1e <serial6_begin+0x2e>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:119

    // First lets figure out what the LPUART Clock speed is. 
    uint32_t PLLFLLSEL = SIM_SOPT2 & SIM_SOPT2_IRC48SEL;	// Note: Bot bits on here

    if (PLLFLLSEL == SIM_SOPT2_IRC48SEL)
    	clockSpeed = 48000000;  // Fixed to 48mhz
    2f1c:	4e3b      	ldr	r6, [pc, #236]	; (300c <serial6_begin+0x11c>)
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:126
    	clockSpeed = F_PLL;		// Using PLL clock
    else
    	clockSpeed = F_CPU/4;	// FLL clock, guessing
 
    osr = 4;
    sbr = (clockSpeed/(desiredBaudRate * osr));
    2f1e:	ea4f 0c80 	mov.w	ip, r0, lsl #2
    2f22:	fbb6 f2fc 	udiv	r2, r6, ip
    2f26:	b292      	uxth	r2, r2
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:128
    /*set sbr to 1 if the clockSpeed can not satisfy the desired baud rate*/
    if(sbr == 0) {
    2f28:	2a00      	cmp	r2, #0
    2f2a:	d064      	beq.n	2ff6 <serial6_begin+0x106>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:134
    	// Maybe print something.
    	return;	// can not initialize
    }

     // With integer math the divide*muliply implies the calculated baud will be >= desired baud
    calculatedBaud = (clockSpeed / (osr * sbr));
    2f2c:	0091      	lsls	r1, r2, #2
    2f2e:	fbb6 f1f1 	udiv	r1, r6, r1
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:138
    baudDiff = calculatedBaud - desiredBaudRate;

    // Check if better off with sbr+1
    if (baudDiff != 0) {
    2f32:	1a09      	subs	r1, r1, r0
    2f34:	d008      	beq.n	2f48 <serial6_begin+0x58>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:139
      calculatedBaud = (clockSpeed / (osr * (sbr + 1)));
    2f36:	1c54      	adds	r4, r2, #1
    2f38:	00a3      	lsls	r3, r4, #2
    2f3a:	fbb6 f3f3 	udiv	r3, r6, r3
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:140
      baudDiffCheck = desiredBaudRate - calculatedBaud ;
    2f3e:	1ac3      	subs	r3, r0, r3
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:141
      if (baudDiffCheck < baudDiff) {
    2f40:	428b      	cmp	r3, r1
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:142
        sbr++;  // use the higher sbr
    2f42:	bf3c      	itt	cc
    2f44:	b2a2      	uxthcc	r2, r4
    2f46:	4619      	movcc	r1, r3
    2f48:	4484      	add	ip, r0
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:148 (discriminator 1)
        baudDiff = baudDiffCheck;
      }
    }

    // loop to find the best osr value possible, one that generates minimum baudDiff
    for (osrCheck = 5; osrCheck <= 32; osrCheck++)     {
    2f4a:	2505      	movs	r5, #5
    2f4c:	2704      	movs	r7, #4
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:149
        sbrTemp = (clockSpeed/(desiredBaudRate * osrCheck));
    2f4e:	fbb6 f3fc 	udiv	r3, r6, ip
    2f52:	b29b      	uxth	r3, r3
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:151

        if(sbrTemp == 0)
    2f54:	b1f3      	cbz	r3, 2f94 <serial6_begin+0xa4>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:155
          break;    // higher divisor returns 0 so can not use...

        // Remember integer math so (X/Y)*Y will always be <=X
        calculatedBaud = (clockSpeed / (osrCheck * sbrTemp));
    2f56:	fb03 f405 	mul.w	r4, r3, r5
    2f5a:	fbb6 f4f4 	udiv	r4, r6, r4
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:156
        baudDiffCheck = calculatedBaud - desiredBaudRate;
    2f5e:	1a24      	subs	r4, r4, r0
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:157
        if (baudDiffCheck <= baudDiff) {
    2f60:	428c      	cmp	r4, r1
    2f62:	d803      	bhi.n	2f6c <serial6_begin+0x7c>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:163
            baudDiff = baudDiffCheck;
            osr = osrCheck;
            sbr = sbrTemp; 
        }
        // Lets try the rounded up one as well
        if (baudDiffCheck) {
    2f64:	b174      	cbz	r4, 2f84 <serial6_begin+0x94>
    2f66:	4621      	mov	r1, r4
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:159
        // Remember integer math so (X/Y)*Y will always be <=X
        calculatedBaud = (clockSpeed / (osrCheck * sbrTemp));
        baudDiffCheck = calculatedBaud - desiredBaudRate;
        if (baudDiffCheck <= baudDiff) {
            baudDiff = baudDiffCheck;
            osr = osrCheck;
    2f68:	462f      	mov	r7, r5
    2f6a:	461a      	mov	r2, r3
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:164
            sbr = sbrTemp; 
        }
        // Lets try the rounded up one as well
        if (baudDiffCheck) {
          calculatedBaud = (clockSpeed / (osrCheck * ++sbrTemp));
    2f6c:	3301      	adds	r3, #1
    2f6e:	b29b      	uxth	r3, r3
    2f70:	fb03 f405 	mul.w	r4, r3, r5
    2f74:	fbb6 f4f4 	udiv	r4, r6, r4
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:165
          baudDiffCheck = desiredBaudRate - calculatedBaud;
    2f78:	1b04      	subs	r4, r0, r4
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:166
          if (baudDiffCheck <= baudDiff) {
    2f7a:	428c      	cmp	r4, r1
    2f7c:	d902      	bls.n	2f84 <serial6_begin+0x94>
    2f7e:	460c      	mov	r4, r1
    2f80:	4613      	mov	r3, r2
    2f82:	e000      	b.n	2f86 <serial6_begin+0x96>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:168
              baudDiff = baudDiffCheck;
              osr = osrCheck;
    2f84:	462f      	mov	r7, r5
    2f86:	3501      	adds	r5, #1
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:148
        baudDiff = baudDiffCheck;
      }
    }

    // loop to find the best osr value possible, one that generates minimum baudDiff
    for (osrCheck = 5; osrCheck <= 32; osrCheck++)     {
    2f88:	2d21      	cmp	r5, #33	; 0x21
    2f8a:	4484      	add	ip, r0
    2f8c:	d003      	beq.n	2f96 <serial6_begin+0xa6>
    2f8e:	4621      	mov	r1, r4
    2f90:	461a      	mov	r2, r3
    2f92:	e7dc      	b.n	2f4e <serial6_begin+0x5e>
    2f94:	4613      	mov	r3, r2
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:174
              sbr = sbrTemp; 
          }
        }
    }
	// for lower OSR <= 7x turn on both edge sampling
	uint32_t lpb = LPUART_BAUD_OSR(osr-1) | LPUART_BAUD_SBR(sbr);
    2f96:	1e7a      	subs	r2, r7, #1
    2f98:	f002 021f 	and.w	r2, r2, #31
    2f9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    2fa0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:175
    if (osr < 8) {
    2fa4:	2f07      	cmp	r7, #7
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:178
      lpb |= LPUART_BAUD_BOTHEDGE; 
    }
	LPUART0_BAUD = lpb;
    2fa6:	4a1a      	ldr	r2, [pc, #104]	; (3010 <serial6_begin+0x120>)
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:182

	SIM_SOPT2 |= SIM_SOPT2_LPUARTSRC(1);	// Lets use PLL?

	rx_buffer_head = 0;
    2fa8:	491a      	ldr	r1, [pc, #104]	; (3014 <serial6_begin+0x124>)
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:176
        }
    }
	// for lower OSR <= 7x turn on both edge sampling
	uint32_t lpb = LPUART_BAUD_OSR(osr-1) | LPUART_BAUD_SBR(sbr);
    if (osr < 8) {
      lpb |= LPUART_BAUD_BOTHEDGE; 
    2faa:	bf98      	it	ls
    2fac:	f443 3300 	orrls.w	r3, r3, #131072	; 0x20000
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:178
    }
	LPUART0_BAUD = lpb;
    2fb0:	6013      	str	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:180

	SIM_SOPT2 |= SIM_SOPT2_LPUARTSRC(1);	// Lets use PLL?
    2fb2:	f8d8 3000 	ldr.w	r3, [r8]
    2fb6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    2fba:	f8c8 3000 	str.w	r3, [r8]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:182

	rx_buffer_head = 0;
    2fbe:	2300      	movs	r3, #0
    2fc0:	700b      	strb	r3, [r1, #0]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:183
	rx_buffer_tail = 0;
    2fc2:	704b      	strb	r3, [r1, #1]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:184
	tx_buffer_head = 0;
    2fc4:	708b      	strb	r3, [r1, #2]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:185
	tx_buffer_tail = 0;
    2fc6:	70cb      	strb	r3, [r1, #3]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:186
	transmitting = 0;
    2fc8:	710b      	strb	r3, [r1, #4]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:187
	CORE_PIN47_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(5);
    2fca:	4913      	ldr	r1, [pc, #76]	; (3018 <serial6_begin+0x128>)
    2fcc:	f240 5013 	movw	r0, #1299	; 0x513
    2fd0:	6008      	str	r0, [r1, #0]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:188
	CORE_PIN48_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(5);
    2fd2:	f240 5044 	movw	r0, #1348	; 0x544
    2fd6:	6048      	str	r0, [r1, #4]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:189
	LPUART0_CTRL = 0;
    2fd8:	6093      	str	r3, [r2, #8]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:190
	LPUART0_MATCH = 0;
    2fda:	6113      	str	r3, [r2, #16]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:191
	LPUART0_STAT = 0;
    2fdc:	6053      	str	r3, [r2, #4]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:194

	// Enable the transmitter, receiver and enable receiver interrupt
	LPUART0_CTRL |= LPUART_CTRL_RIE | LPUART_CTRL_TE | LPUART_CTRL_RE;
    2fde:	6893      	ldr	r3, [r2, #8]
    2fe0:	f443 1330 	orr.w	r3, r3, #2883584	; 0x2c0000
    2fe4:	6093      	str	r3, [r2, #8]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:195
	NVIC_SET_PRIORITY(IRQ_LPUART0, IRQ_PRIORITY);
    2fe6:	4b0d      	ldr	r3, [pc, #52]	; (301c <serial6_begin+0x12c>)
    2fe8:	2240      	movs	r2, #64	; 0x40
    2fea:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:196
	NVIC_ENABLE_IRQ(IRQ_LPUART0);
    2fec:	f2a3 334e 	subw	r3, r3, #846	; 0x34e
    2ff0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    2ff4:	601a      	str	r2, [r3, #0]
    2ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2ffa:	bf00      	nop
    2ffc:	4004802c 	.word	0x4004802c
    3000:	40048004 	.word	0x40048004
    3004:	07270e00 	.word	0x07270e00
    3008:	01c9c380 	.word	0x01c9c380
    300c:	02dc6c00 	.word	0x02dc6c00
    3010:	400c4000 	.word	0x400c4000
    3014:	1fff0dec 	.word	0x1fff0dec
    3018:	4004c020 	.word	0x4004c020
    301c:	e000e456 	.word	0xe000e456

00003020 <serial6_format>:
serial6_format():
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:204
void serial6_format(uint32_t format)
{
	uint32_t c;

	// Bits 0-2 - Parity plus 9  bit. 
	c = LPUART0_CTRL;
    3020:	4a1b      	ldr	r2, [pc, #108]	; (3090 <serial6_format+0x70>)
    3022:	6893      	ldr	r3, [r2, #8]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:207
	//c = (c & ~(LPUART_CTRL_M | LPUART_CTRL_PE | LPUART_CTRL_PT)) | (format & (LPUART_CTRL_PE | LPUART_CTRL_PT));	// configure parity
	//if (format & 0x04) c |= LPUART_CTRL_M;		// 9 bits (might include parity)
	c = (c & ~0x13) | (format & 0x03);	// configure parity
    3024:	f000 0103 	and.w	r1, r0, #3
    3028:	f023 0313 	bic.w	r3, r3, #19
    302c:	430b      	orrs	r3, r1
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:208
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    302e:	f010 0f04 	tst.w	r0, #4
    3032:	4611      	mov	r1, r2
    3034:	bf18      	it	ne
    3036:	f043 0310 	orrne.w	r3, r3, #16
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:209
	LPUART0_CTRL = c;
    303a:	608b      	str	r3, [r1, #8]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:210
	if ((format & 0x0F) == 0x04) LPUART0_CTRL |= LPUART_CTRL_T8; // 8N2 is 9 bit with 9th bit always 1
    303c:	f000 030f 	and.w	r3, r0, #15
    3040:	2b04      	cmp	r3, #4
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:209
	c = LPUART0_CTRL;
	//c = (c & ~(LPUART_CTRL_M | LPUART_CTRL_PE | LPUART_CTRL_PT)) | (format & (LPUART_CTRL_PE | LPUART_CTRL_PT));	// configure parity
	//if (format & 0x04) c |= LPUART_CTRL_M;		// 9 bits (might include parity)
	c = (c & ~0x13) | (format & 0x03);	// configure parity
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
	LPUART0_CTRL = c;
    3042:	4a13      	ldr	r2, [pc, #76]	; (3090 <serial6_format+0x70>)
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:210
	if ((format & 0x0F) == 0x04) LPUART0_CTRL |= LPUART_CTRL_T8; // 8N2 is 9 bit with 9th bit always 1
    3044:	d103      	bne.n	304e <serial6_format+0x2e>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:210 (discriminator 1)
    3046:	6893      	ldr	r3, [r2, #8]
    3048:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    304c:	6093      	str	r3, [r2, #8]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:213

	// Bit 3 10 bit - Will assume that begin already cleared it.
	if (format & 0x08)
    304e:	f010 0f08 	tst.w	r0, #8
    3052:	4b0f      	ldr	r3, [pc, #60]	; (3090 <serial6_format+0x70>)
    3054:	d003      	beq.n	305e <serial6_format+0x3e>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:214
		LPUART0_BAUD |= LPUART_BAUD_M10;
    3056:	681a      	ldr	r2, [r3, #0]
    3058:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    305c:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:217
	
	// Bit 4 RXINVERT 
	c = LPUART0_STAT & ~LPUART_STAT_RXINV;
    305e:	685b      	ldr	r3, [r3, #4]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:218
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    3060:	06c2      	lsls	r2, r0, #27
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:217
	// Bit 3 10 bit - Will assume that begin already cleared it.
	if (format & 0x08)
		LPUART0_BAUD |= LPUART_BAUD_M10;
	
	// Bit 4 RXINVERT 
	c = LPUART0_STAT & ~LPUART_STAT_RXINV;
    3062:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:219
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
	LPUART0_STAT = c;
    3066:	4a0a      	ldr	r2, [pc, #40]	; (3090 <serial6_format+0x70>)
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:218
	if (format & 0x08)
		LPUART0_BAUD |= LPUART_BAUD_M10;
	
	// Bit 4 RXINVERT 
	c = LPUART0_STAT & ~LPUART_STAT_RXINV;
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    3068:	bf48      	it	mi
    306a:	f043 5380 	orrmi.w	r3, r3, #268435456	; 0x10000000
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:219
	LPUART0_STAT = c;
    306e:	6053      	str	r3, [r2, #4]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:222

	// Bit 5 TXINVERT
	c = LPUART0_CTRL & ~LPUART_CTRL_TXINV;
    3070:	6893      	ldr	r3, [r2, #8]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:223
	if (format & 0x20) c |= LPUART_CTRL_TXINV;		// tx invert
    3072:	0681      	lsls	r1, r0, #26
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:222
	c = LPUART0_STAT & ~LPUART_STAT_RXINV;
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
	LPUART0_STAT = c;

	// Bit 5 TXINVERT
	c = LPUART0_CTRL & ~LPUART_CTRL_TXINV;
    3074:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:223
	if (format & 0x20) c |= LPUART_CTRL_TXINV;		// tx invert
    3078:	bf48      	it	mi
    307a:	f043 5380 	orrmi.w	r3, r3, #268435456	; 0x10000000
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:224
	LPUART0_CTRL = c;
    307e:	6093      	str	r3, [r2, #8]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:227

	// For T3.6 See about turning on 2 stop bit mode
	if ( format & 0x100) LPUART0_BAUD |= LPUART_BAUD_SBNS;	
    3080:	05c3      	lsls	r3, r0, #23
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:224
	LPUART0_STAT = c;

	// Bit 5 TXINVERT
	c = LPUART0_CTRL & ~LPUART_CTRL_TXINV;
	if (format & 0x20) c |= LPUART_CTRL_TXINV;		// tx invert
	LPUART0_CTRL = c;
    3082:	4903      	ldr	r1, [pc, #12]	; (3090 <serial6_format+0x70>)
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:227

	// For T3.6 See about turning on 2 stop bit mode
	if ( format & 0x100) LPUART0_BAUD |= LPUART_BAUD_SBNS;	
    3084:	d503      	bpl.n	308e <serial6_format+0x6e>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:227 (discriminator 1)
    3086:	680b      	ldr	r3, [r1, #0]
    3088:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    308c:	600b      	str	r3, [r1, #0]
    308e:	4770      	bx	lr
    3090:	400c4000 	.word	0x400c4000

00003094 <serial6_end>:
serial6_end():
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:231
}

void serial6_end(void)
{
    3094:	b508      	push	{r3, lr}
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:232
	if (!(SIM_SCGC2 & SIM_SCGC2_LPUART0)) return;
    3096:	4b0f      	ldr	r3, [pc, #60]	; (30d4 <serial6_end+0x40>)
    3098:	681b      	ldr	r3, [r3, #0]
    309a:	06db      	lsls	r3, r3, #27
    309c:	d400      	bmi.n	30a0 <serial6_end+0xc>
    309e:	bd08      	pop	{r3, pc}
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:233 (discriminator 1)
	while (transmitting) yield();  // wait for buffered data to send
    30a0:	4b0d      	ldr	r3, [pc, #52]	; (30d8 <serial6_end+0x44>)
    30a2:	7919      	ldrb	r1, [r3, #4]
    30a4:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    30a8:	b111      	cbz	r1, 30b0 <serial6_end+0x1c>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:233 (discriminator 2)
    30aa:	f002 fa51 	bl	5550 <yield>
    30ae:	e7f7      	b.n	30a0 <serial6_end+0xc>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:234
	NVIC_DISABLE_IRQ(IRQ_LPUART0);
    30b0:	490a      	ldr	r1, [pc, #40]	; (30dc <serial6_end+0x48>)
    30b2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    30b6:	6008      	str	r0, [r1, #0]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:235
	LPUART0_CTRL = 0;
    30b8:	4909      	ldr	r1, [pc, #36]	; (30e0 <serial6_end+0x4c>)
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:236
	CORE_PIN47_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    30ba:	480a      	ldr	r0, [pc, #40]	; (30e4 <serial6_end+0x50>)
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:235
void serial6_end(void)
{
	if (!(SIM_SCGC2 & SIM_SCGC2_LPUART0)) return;
	while (transmitting) yield();  // wait for buffered data to send
	NVIC_DISABLE_IRQ(IRQ_LPUART0);
	LPUART0_CTRL = 0;
    30bc:	608a      	str	r2, [r1, #8]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:236
	CORE_PIN47_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    30be:	f240 1103 	movw	r1, #259	; 0x103
    30c2:	6001      	str	r1, [r0, #0]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:237
	CORE_PIN48_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    30c4:	6041      	str	r1, [r0, #4]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:238
	rx_buffer_head = 0;
    30c6:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:239
	rx_buffer_tail = 0;
    30c8:	705a      	strb	r2, [r3, #1]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:240
	if (rts_pin) rts_deassert();
    30ca:	689b      	ldr	r3, [r3, #8]
    30cc:	b10b      	cbz	r3, 30d2 <serial6_end+0x3e>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:240 (discriminator 1)
    30ce:	2201      	movs	r2, #1
    30d0:	701a      	strb	r2, [r3, #0]
    30d2:	bd08      	pop	{r3, pc}
    30d4:	4004802c 	.word	0x4004802c
    30d8:	1fff0dec 	.word	0x1fff0dec
    30dc:	e000e188 	.word	0xe000e188
    30e0:	400c4000 	.word	0x400c4000
    30e4:	4004c020 	.word	0x4004c020

000030e8 <serial6_set_transmit_pin>:
serial6_set_transmit_pin():
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:244
}

void serial6_set_transmit_pin(uint8_t pin)
{
    30e8:	b570      	push	{r4, r5, r6, lr}
    30ea:	4604      	mov	r4, r0
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:245 (discriminator 1)
	while (transmitting) ;
    30ec:	4d09      	ldr	r5, [pc, #36]	; (3114 <serial6_set_transmit_pin+0x2c>)
    30ee:	792b      	ldrb	r3, [r5, #4]
    30f0:	f003 06ff 	and.w	r6, r3, #255	; 0xff
    30f4:	2b00      	cmp	r3, #0
    30f6:	d1f9      	bne.n	30ec <serial6_set_transmit_pin+0x4>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:246
	pinMode(pin, OUTPUT);
    30f8:	4620      	mov	r0, r4
    30fa:	2101      	movs	r1, #1
    30fc:	f7fd fe9c 	bl	e38 <pinMode>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:247
	digitalWrite(pin, LOW);
    3100:	4620      	mov	r0, r4
    3102:	4631      	mov	r1, r6
    3104:	f7fd fe6a 	bl	ddc <digitalWrite>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:248
	transmit_pin = portOutputRegister(pin);
    3108:	4b03      	ldr	r3, [pc, #12]	; (3118 <serial6_set_transmit_pin+0x30>)
    310a:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
    310e:	60eb      	str	r3, [r5, #12]
    3110:	bd70      	pop	{r4, r5, r6, pc}
    3112:	bf00      	nop
    3114:	1fff0dec 	.word	0x1fff0dec
    3118:	00009e64 	.word	0x00009e64

0000311c <serial6_set_tx>:
serial6_set_tx():
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:252
}

void serial6_set_tx(uint8_t pin, uint8_t opendrain)
{
    311c:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:255
	uint32_t cfg;

	if (opendrain) pin |= 128;
    311e:	b109      	cbz	r1, 3124 <serial6_set_tx+0x8>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:255 (discriminator 1)
    3120:	f040 0080 	orr.w	r0, r0, #128	; 0x80
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:256
	if (pin == tx_pin_num) return;
    3124:	4a0e      	ldr	r2, [pc, #56]	; (3160 <serial6_set_tx+0x44>)
    3126:	7813      	ldrb	r3, [r2, #0]
    3128:	4298      	cmp	r0, r3
    312a:	d017      	beq.n	315c <serial6_set_tx+0x40>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:257
	if ((SIM_SCGC2 & SIM_SCGC2_LPUART0)) {
    312c:	4c0d      	ldr	r4, [pc, #52]	; (3164 <serial6_set_tx+0x48>)
    312e:	6824      	ldr	r4, [r4, #0]
    3130:	06e4      	lsls	r4, r4, #27
    3132:	d512      	bpl.n	315a <serial6_set_tx+0x3e>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:258
		switch (tx_pin_num & 127) {
    3134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3138:	2b30      	cmp	r3, #48	; 0x30
    313a:	d102      	bne.n	3142 <serial6_set_tx+0x26>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:259
			case 48:  CORE_PIN48_CONFIG = 0; break; // PTE24
    313c:	4b0a      	ldr	r3, [pc, #40]	; (3168 <serial6_set_tx+0x4c>)
    313e:	2400      	movs	r4, #0
    3140:	601c      	str	r4, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:262
		}
		if (opendrain) {
			cfg = PORT_PCR_DSE | PORT_PCR_ODE;
    3142:	2900      	cmp	r1, #0
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:266
		} else {
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
		}
		switch (pin & 127) {
    3144:	f000 037f 	and.w	r3, r0, #127	; 0x7f
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:262
	if ((SIM_SCGC2 & SIM_SCGC2_LPUART0)) {
		switch (tx_pin_num & 127) {
			case 48:  CORE_PIN48_CONFIG = 0; break; // PTE24
		}
		if (opendrain) {
			cfg = PORT_PCR_DSE | PORT_PCR_ODE;
    3148:	bf0c      	ite	eq
    314a:	2144      	moveq	r1, #68	; 0x44
    314c:	2160      	movne	r1, #96	; 0x60
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:266
		} else {
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
		}
		switch (pin & 127) {
    314e:	2b30      	cmp	r3, #48	; 0x30
    3150:	d103      	bne.n	315a <serial6_set_tx+0x3e>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:267
			case 48:  CORE_PIN48_CONFIG = cfg | PORT_PCR_MUX(5); break;
    3152:	4b05      	ldr	r3, [pc, #20]	; (3168 <serial6_set_tx+0x4c>)
    3154:	f441 61a0 	orr.w	r1, r1, #1280	; 0x500
    3158:	6019      	str	r1, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:270
		}
	}
	tx_pin_num = pin;
    315a:	7010      	strb	r0, [r2, #0]
    315c:	bd10      	pop	{r4, pc}
    315e:	bf00      	nop
    3160:	1fff0a0f 	.word	0x1fff0a0f
    3164:	4004802c 	.word	0x4004802c
    3168:	4004c024 	.word	0x4004c024

0000316c <serial6_set_rx>:
serial6_set_rx():
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:274
}

void serial6_set_rx(uint8_t pin)
{
    316c:	4770      	bx	lr

0000316e <serial6_set_rts>:
serial6_set_rts():
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:279
}

int serial6_set_rts(uint8_t pin)
{
	if (!(SIM_SCGC2 & SIM_SCGC2_LPUART0)) return 0;
    316e:	4a0d      	ldr	r2, [pc, #52]	; (31a4 <serial6_set_rts+0x36>)
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:278
void serial6_set_rx(uint8_t pin)
{
}

int serial6_set_rts(uint8_t pin)
{
    3170:	b538      	push	{r3, r4, r5, lr}
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:279
	if (!(SIM_SCGC2 & SIM_SCGC2_LPUART0)) return 0;
    3172:	6814      	ldr	r4, [r2, #0]
    3174:	f014 0210 	ands.w	r2, r4, #16
    3178:	f04f 0400 	mov.w	r4, #0
    317c:	d010      	beq.n	31a0 <serial6_set_rts+0x32>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:280
	if (pin < CORE_NUM_DIGITAL) {
    317e:	283f      	cmp	r0, #63	; 0x3f
    3180:	4d09      	ldr	r5, [pc, #36]	; (31a8 <serial6_set_rts+0x3a>)
    3182:	d80a      	bhi.n	319a <serial6_set_rts+0x2c>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:281
		rts_pin = portOutputRegister(pin);
    3184:	4a09      	ldr	r2, [pc, #36]	; (31ac <serial6_set_rts+0x3e>)
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:282
		pinMode(pin, OUTPUT);
    3186:	2101      	movs	r1, #1
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:281

int serial6_set_rts(uint8_t pin)
{
	if (!(SIM_SCGC2 & SIM_SCGC2_LPUART0)) return 0;
	if (pin < CORE_NUM_DIGITAL) {
		rts_pin = portOutputRegister(pin);
    3188:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
    318c:	60ab      	str	r3, [r5, #8]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:282
		pinMode(pin, OUTPUT);
    318e:	f7fd fe53 	bl	e38 <pinMode>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:283
		rts_assert();
    3192:	68ab      	ldr	r3, [r5, #8]
    3194:	701c      	strb	r4, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:288
	} else {
		rts_pin = NULL;
		return 0;
	}
	return 1;
    3196:	2001      	movs	r0, #1
    3198:	bd38      	pop	{r3, r4, r5, pc}
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:285
	if (pin < CORE_NUM_DIGITAL) {
		rts_pin = portOutputRegister(pin);
		pinMode(pin, OUTPUT);
		rts_assert();
	} else {
		rts_pin = NULL;
    319a:	60ac      	str	r4, [r5, #8]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:286
		return 0;
    319c:	4620      	mov	r0, r4
    319e:	bd38      	pop	{r3, r4, r5, pc}
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:279
{
}

int serial6_set_rts(uint8_t pin)
{
	if (!(SIM_SCGC2 & SIM_SCGC2_LPUART0)) return 0;
    31a0:	4610      	mov	r0, r2
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:289
	} else {
		rts_pin = NULL;
		return 0;
	}
	return 1;
}
    31a2:	bd38      	pop	{r3, r4, r5, pc}
    31a4:	4004802c 	.word	0x4004802c
    31a8:	1fff0dec 	.word	0x1fff0dec
    31ac:	00009e64 	.word	0x00009e64

000031b0 <serial6_set_cts>:
serial6_set_cts():
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:293

int serial6_set_cts(uint8_t pin)
{
	if (!(SIM_SCGC2 & SIM_SCGC2_LPUART0)) return 0;
    31b0:	4b0b      	ldr	r3, [pc, #44]	; (31e0 <serial6_set_cts+0x30>)
    31b2:	681b      	ldr	r3, [r3, #0]
    31b4:	f013 0310 	ands.w	r3, r3, #16
    31b8:	d010      	beq.n	31dc <serial6_set_cts+0x2c>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:294
	if (pin == 56) {
    31ba:	2838      	cmp	r0, #56	; 0x38
    31bc:	4b09      	ldr	r3, [pc, #36]	; (31e4 <serial6_set_cts+0x34>)
    31be:	d109      	bne.n	31d4 <serial6_set_cts+0x24>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:295
		CORE_PIN56_CONFIG = PORT_PCR_MUX(5) | PORT_PCR_PE; // weak pulldown
    31c0:	4a09      	ldr	r2, [pc, #36]	; (31e8 <serial6_set_cts+0x38>)
    31c2:	f240 5102 	movw	r1, #1282	; 0x502
    31c6:	6011      	str	r1, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:300
	} else {
		UART5_MODEM &= ~UART_MODEM_TXCTSE;
		return 0;
	}
	UART5_MODEM |= UART_MODEM_TXCTSE;
    31c8:	7b5a      	ldrb	r2, [r3, #13]
    31ca:	f042 0201 	orr.w	r2, r2, #1
    31ce:	735a      	strb	r2, [r3, #13]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:301
	return 1;
    31d0:	2001      	movs	r0, #1
    31d2:	4770      	bx	lr
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:297
{
	if (!(SIM_SCGC2 & SIM_SCGC2_LPUART0)) return 0;
	if (pin == 56) {
		CORE_PIN56_CONFIG = PORT_PCR_MUX(5) | PORT_PCR_PE; // weak pulldown
	} else {
		UART5_MODEM &= ~UART_MODEM_TXCTSE;
    31d4:	7b5a      	ldrb	r2, [r3, #13]
    31d6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    31da:	735a      	strb	r2, [r3, #13]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:298
		return 0;
    31dc:	2000      	movs	r0, #0
    31de:	4770      	bx	lr
    31e0:	4004802c 	.word	0x4004802c
    31e4:	400eb000 	.word	0x400eb000
    31e8:	4004d028 	.word	0x4004d028

000031ec <serial6_putchar>:
serial6_putchar():
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:305
	UART5_MODEM |= UART_MODEM_TXCTSE;
	return 1;
}

void serial6_putchar(uint32_t c)
{
    31ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:308
	uint32_t head, n;

	if (!(SIM_SCGC2 & SIM_SCGC2_LPUART0)) return;
    31ee:	4b1b      	ldr	r3, [pc, #108]	; (325c <serial6_putchar+0x70>)
    31f0:	681b      	ldr	r3, [r3, #0]
    31f2:	06da      	lsls	r2, r3, #27
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:305
	UART5_MODEM |= UART_MODEM_TXCTSE;
	return 1;
}

void serial6_putchar(uint32_t c)
{
    31f4:	4607      	mov	r7, r0
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:308
	uint32_t head, n;

	if (!(SIM_SCGC2 & SIM_SCGC2_LPUART0)) return;
    31f6:	d52f      	bpl.n	3258 <serial6_putchar+0x6c>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:309
	if (transmit_pin) transmit_assert();
    31f8:	4e19      	ldr	r6, [pc, #100]	; (3260 <serial6_putchar+0x74>)
    31fa:	68f3      	ldr	r3, [r6, #12]
    31fc:	b10b      	cbz	r3, 3202 <serial6_putchar+0x16>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:309 (discriminator 1)
    31fe:	2201      	movs	r2, #1
    3200:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:310
	head = tx_buffer_head;
    3202:	78b4      	ldrb	r4, [r6, #2]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:311
	if (++head >= SERIAL6_TX_BUFFER_SIZE) head = 0;
    3204:	3401      	adds	r4, #1
    3206:	2c28      	cmp	r4, #40	; 0x28
    3208:	bf28      	it	cs
    320a:	2400      	movcs	r4, #0
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:312 (discriminator 1)
	while (tx_buffer_tail == head) {
    320c:	78f3      	ldrb	r3, [r6, #3]
    320e:	4d14      	ldr	r5, [pc, #80]	; (3260 <serial6_putchar+0x74>)
    3210:	42a3      	cmp	r3, r4
    3212:	d118      	bne.n	3246 <serial6_putchar+0x5a>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:313
		int priority = nvic_execution_priority();
    3214:	f7fd fb40 	bl	898 <nvic_execution_priority>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:314
		if (priority <= IRQ_PRIORITY) {
    3218:	2840      	cmp	r0, #64	; 0x40
    321a:	dc0f      	bgt.n	323c <serial6_putchar+0x50>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:315
			if ((LPUART0_STAT & LPUART_STAT_TDRE)) {
    321c:	4a11      	ldr	r2, [pc, #68]	; (3264 <serial6_putchar+0x78>)
    321e:	6853      	ldr	r3, [r2, #4]
    3220:	021b      	lsls	r3, r3, #8
    3222:	d5f3      	bpl.n	320c <serial6_putchar+0x20>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:316
				uint32_t tail = tx_buffer_tail;
    3224:	78eb      	ldrb	r3, [r5, #3]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:317
				if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    3226:	3301      	adds	r3, #1
    3228:	2b28      	cmp	r3, #40	; 0x28
    322a:	bf28      	it	cs
    322c:	2300      	movcs	r3, #0
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:318
				n = tx_buffer[tail];
    322e:	18f1      	adds	r1, r6, r3
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:321
				//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
				LPUART0_DATA = n;
				tx_buffer_tail = tail;
    3230:	b2db      	uxtb	r3, r3
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:318
		int priority = nvic_execution_priority();
		if (priority <= IRQ_PRIORITY) {
			if ((LPUART0_STAT & LPUART_STAT_TDRE)) {
				uint32_t tail = tx_buffer_tail;
				if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
				n = tx_buffer[tail];
    3232:	7c09      	ldrb	r1, [r1, #16]
    3234:	b2c9      	uxtb	r1, r1
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:320
				//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
				LPUART0_DATA = n;
    3236:	60d1      	str	r1, [r2, #12]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:321
				tx_buffer_tail = tail;
    3238:	70f3      	strb	r3, [r6, #3]
    323a:	e7e7      	b.n	320c <serial6_putchar+0x20>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:323
			}
		} else if (priority >= 256) {
    323c:	28ff      	cmp	r0, #255	; 0xff
    323e:	dde5      	ble.n	320c <serial6_putchar+0x20>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:324
			yield(); // wait
    3240:	f002 f986 	bl	5550 <yield>
    3244:	e7e2      	b.n	320c <serial6_putchar+0x20>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:327
		}
	}
	tx_buffer[head] = c;
    3246:	192b      	adds	r3, r5, r4
    3248:	b2ff      	uxtb	r7, r7
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:332
	transmitting = 1;
	tx_buffer_head = head;

	//LPUART0_CTRL |= LPUART_CTRL_TIE;	// enable the transmit interrupt
	BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    324a:	4a07      	ldr	r2, [pc, #28]	; (3268 <serial6_putchar+0x7c>)
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:327
			}
		} else if (priority >= 256) {
			yield(); // wait
		}
	}
	tx_buffer[head] = c;
    324c:	741f      	strb	r7, [r3, #16]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:329
	transmitting = 1;
	tx_buffer_head = head;
    324e:	b2e4      	uxtb	r4, r4
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:328
		} else if (priority >= 256) {
			yield(); // wait
		}
	}
	tx_buffer[head] = c;
	transmitting = 1;
    3250:	2301      	movs	r3, #1
    3252:	712b      	strb	r3, [r5, #4]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:329
	tx_buffer_head = head;
    3254:	70ac      	strb	r4, [r5, #2]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:332

	//LPUART0_CTRL |= LPUART_CTRL_TIE;	// enable the transmit interrupt
	BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    3256:	6013      	str	r3, [r2, #0]
    3258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    325a:	bf00      	nop
    325c:	4004802c 	.word	0x4004802c
    3260:	1fff0dec 	.word	0x1fff0dec
    3264:	400c4000 	.word	0x400c4000
    3268:	4388015c 	.word	0x4388015c

0000326c <serial6_write>:
serial6_write():
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:337

}

void serial6_write(const void *buf, unsigned int count)
{
    326c:	b538      	push	{r3, r4, r5, lr}
    326e:	4604      	mov	r4, r0
    3270:	1845      	adds	r5, r0, r1
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:339 (discriminator 1)
	const uint8_t *p = (const uint8_t *)buf;
	while (count-- > 0) serial6_putchar(*p++);
    3272:	42ac      	cmp	r4, r5
    3274:	d004      	beq.n	3280 <serial6_write+0x14>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:339 (discriminator 2)
    3276:	f814 0b01 	ldrb.w	r0, [r4], #1
    327a:	f7ff ffb7 	bl	31ec <serial6_putchar>
    327e:	e7f8      	b.n	3272 <serial6_write+0x6>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:340
}
    3280:	bd38      	pop	{r3, r4, r5, pc}

00003282 <serial6_flush>:
serial6_flush():
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:343

void serial6_flush(void)
{
    3282:	b508      	push	{r3, lr}
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:344 (discriminator 1)
	while (transmitting) yield(); // wait
    3284:	4b03      	ldr	r3, [pc, #12]	; (3294 <serial6_flush+0x12>)
    3286:	791b      	ldrb	r3, [r3, #4]
    3288:	b113      	cbz	r3, 3290 <serial6_flush+0xe>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:344 (discriminator 2)
    328a:	f002 f961 	bl	5550 <yield>
    328e:	e7f9      	b.n	3284 <serial6_flush+0x2>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:345
}
    3290:	bd08      	pop	{r3, pc}
    3292:	bf00      	nop
    3294:	1fff0dec 	.word	0x1fff0dec

00003298 <serial6_write_buffer_free>:
serial6_write_buffer_free():
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:351

int serial6_write_buffer_free(void)
{
	uint32_t head, tail;

	head = tx_buffer_head;
    3298:	4a05      	ldr	r2, [pc, #20]	; (32b0 <serial6_write_buffer_free+0x18>)
    329a:	7893      	ldrb	r3, [r2, #2]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:352
	tail = tx_buffer_tail;
    329c:	78d0      	ldrb	r0, [r2, #3]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:351

int serial6_write_buffer_free(void)
{
	uint32_t head, tail;

	head = tx_buffer_head;
    329e:	b2db      	uxtb	r3, r3
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:352
	tail = tx_buffer_tail;
    32a0:	b2c0      	uxtb	r0, r0
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:353
	if (head >= tail) return SERIAL6_TX_BUFFER_SIZE - 1 - head + tail;
    32a2:	4283      	cmp	r3, r0
    32a4:	bf2c      	ite	cs
    32a6:	3027      	addcs	r0, #39	; 0x27
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:354
	return tail - head - 1;
    32a8:	f100 30ff 	addcc.w	r0, r0, #4294967295
    32ac:	1ac0      	subs	r0, r0, r3
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:355
}
    32ae:	4770      	bx	lr
    32b0:	1fff0dec 	.word	0x1fff0dec

000032b4 <serial6_available>:
serial6_available():
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:361

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    32b4:	4a04      	ldr	r2, [pc, #16]	; (32c8 <serial6_available+0x14>)
    32b6:	7810      	ldrb	r0, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:362
	tail = rx_buffer_tail;
    32b8:	7853      	ldrb	r3, [r2, #1]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:361

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    32ba:	b2c0      	uxtb	r0, r0
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:362
	tail = rx_buffer_tail;
    32bc:	b2db      	uxtb	r3, r3
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:363
	if (head >= tail) return head - tail;
    32be:	4298      	cmp	r0, r3
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:364
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    32c0:	bf38      	it	cc
    32c2:	3040      	addcc	r0, #64	; 0x40
    32c4:	1ac0      	subs	r0, r0, r3
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:365
}
    32c6:	4770      	bx	lr
    32c8:	1fff0dec 	.word	0x1fff0dec

000032cc <serial6_getchar>:
serial6_getchar():
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:368

int serial6_getchar(void)
{
    32cc:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:372
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    32ce:	4a0f      	ldr	r2, [pc, #60]	; (330c <serial6_getchar+0x40>)
    32d0:	7811      	ldrb	r1, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:373
	tail = rx_buffer_tail;
    32d2:	7853      	ldrb	r3, [r2, #1]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:372
int serial6_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    32d4:	b2c9      	uxtb	r1, r1
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:373
	tail = rx_buffer_tail;
    32d6:	b2db      	uxtb	r3, r3
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:374
	if (head == tail) return -1;
    32d8:	4299      	cmp	r1, r3
    32da:	d014      	beq.n	3306 <serial6_getchar+0x3a>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:375
	if (++tail >= SERIAL6_RX_BUFFER_SIZE) tail = 0;
    32dc:	3301      	adds	r3, #1
    32de:	2b40      	cmp	r3, #64	; 0x40
    32e0:	bf28      	it	cs
    32e2:	2300      	movcs	r3, #0
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:376
	c = rx_buffer[tail];
    32e4:	18d0      	adds	r0, r2, r3
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:377
	rx_buffer_tail = tail;
    32e6:	b2dc      	uxtb	r4, r3
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:376

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL6_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
    32e8:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:377
	rx_buffer_tail = tail;
    32ec:	7054      	strb	r4, [r2, #1]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:378
	if (rts_pin) {
    32ee:	6892      	ldr	r2, [r2, #8]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:376

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL6_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
    32f0:	b2c0      	uxtb	r0, r0
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:378
	rx_buffer_tail = tail;
	if (rts_pin) {
    32f2:	b152      	cbz	r2, 330a <serial6_getchar+0x3e>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:380
		int avail;
		if (head >= tail) avail = head - tail;
    32f4:	4299      	cmp	r1, r3
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:381
		else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    32f6:	bf38      	it	cc
    32f8:	3140      	addcc	r1, #64	; 0x40
    32fa:	1acb      	subs	r3, r1, r3
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:382
		if (avail <= RTS_LOW_WATERMARK) rts_assert();
    32fc:	2b1a      	cmp	r3, #26
    32fe:	dc04      	bgt.n	330a <serial6_getchar+0x3e>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:382 (discriminator 1)
    3300:	2300      	movs	r3, #0
    3302:	7013      	strb	r3, [r2, #0]
    3304:	bd10      	pop	{r4, pc}
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:374
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    3306:	f04f 30ff 	mov.w	r0, #4294967295
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:385
		if (head >= tail) avail = head - tail;
		else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
		if (avail <= RTS_LOW_WATERMARK) rts_assert();
	}
	return c;
}
    330a:	bd10      	pop	{r4, pc}
    330c:	1fff0dec 	.word	0x1fff0dec

00003310 <serial6_peek>:
serial6_peek():
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:391

int serial6_peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3310:	4a08      	ldr	r2, [pc, #32]	; (3334 <serial6_peek+0x24>)
    3312:	7811      	ldrb	r1, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:392
	tail = rx_buffer_tail;
    3314:	7853      	ldrb	r3, [r2, #1]
    3316:	b2db      	uxtb	r3, r3
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:393
	if (head == tail) return -1;
    3318:	4299      	cmp	r1, r3
    331a:	d008      	beq.n	332e <serial6_peek+0x1e>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:394
	if (++tail >= SERIAL6_RX_BUFFER_SIZE) tail = 0;
    331c:	3301      	adds	r3, #1
    331e:	2b40      	cmp	r3, #64	; 0x40
    3320:	bf28      	it	cs
    3322:	2300      	movcs	r3, #0
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:395
	return rx_buffer[tail];
    3324:	4413      	add	r3, r2
    3326:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
    332a:	b2c0      	uxtb	r0, r0
    332c:	4770      	bx	lr
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:393
{
	uint32_t head, tail;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    332e:	f04f 30ff 	mov.w	r0, #4294967295
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:396
	if (++tail >= SERIAL6_RX_BUFFER_SIZE) tail = 0;
	return rx_buffer[tail];
}
    3332:	4770      	bx	lr
    3334:	1fff0dec 	.word	0x1fff0dec

00003338 <serial6_clear>:
serial6_clear():
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:400

void serial6_clear(void)
{
	rx_buffer_head = rx_buffer_tail;
    3338:	4b04      	ldr	r3, [pc, #16]	; (334c <serial6_clear+0x14>)
    333a:	785a      	ldrb	r2, [r3, #1]
    333c:	b2d2      	uxtb	r2, r2
    333e:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:401
	if (rts_pin) rts_assert();
    3340:	689b      	ldr	r3, [r3, #8]
    3342:	b10b      	cbz	r3, 3348 <serial6_clear+0x10>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:401 (discriminator 1)
    3344:	2200      	movs	r2, #0
    3346:	701a      	strb	r2, [r3, #0]
    3348:	4770      	bx	lr
    334a:	bf00      	nop
    334c:	1fff0dec 	.word	0x1fff0dec

00003350 <lpuart0_status_isr>:
lpuart0_status_isr():
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:413
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    3350:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:417
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    3352:	4b28      	ldr	r3, [pc, #160]	; (33f4 <lpuart0_status_isr+0xa4>)
    3354:	685a      	ldr	r2, [r3, #4]
    3356:	0292      	lsls	r2, r2, #10
    3358:	d51f      	bpl.n	339a <lpuart0_status_isr+0x4a>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:424
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    335a:	4a27      	ldr	r2, [pc, #156]	; (33f8 <lpuart0_status_isr+0xa8>)
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:423
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    335c:	68d8      	ldr	r0, [r3, #12]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:424
		head = rx_buffer_head + 1;
    335e:	7813      	ldrb	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:426
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3360:	7851      	ldrb	r1, [r2, #1]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:424
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3362:	3301      	adds	r3, #1
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:425
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
    3364:	2b40      	cmp	r3, #64	; 0x40
    3366:	bf28      	it	cs
    3368:	2300      	movcs	r3, #0
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:426
		if (head != rx_buffer_tail) {
    336a:	428b      	cmp	r3, r1
    336c:	d005      	beq.n	337a <lpuart0_status_isr+0x2a>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:427
			rx_buffer[head] = n;
    336e:	18d1      	adds	r1, r2, r3
    3370:	b2c0      	uxtb	r0, r0
    3372:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:428
			rx_buffer_head = head;
    3376:	b2d9      	uxtb	r1, r3
    3378:	7011      	strb	r1, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:430
		}
		if (rts_pin) {
    337a:	6891      	ldr	r1, [r2, #8]
    337c:	b169      	cbz	r1, 339a <lpuart0_status_isr+0x4a>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:432
			int avail;
			tail = tx_buffer_tail;
    337e:	4a1e      	ldr	r2, [pc, #120]	; (33f8 <lpuart0_status_isr+0xa8>)
    3380:	78d2      	ldrb	r2, [r2, #3]
    3382:	b2d2      	uxtb	r2, r2
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:433
			if (head >= tail) avail = head - tail;
    3384:	4293      	cmp	r3, r2
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:434
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    3386:	bf36      	itet	cc
    3388:	f1c2 0240 	rsbcc	r2, r2, #64	; 0x40
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:433
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    338c:	ebc2 0303 	rsbcs	r3, r2, r3
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:434
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    3390:	189b      	addcc	r3, r3, r2
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:435
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3392:	2b27      	cmp	r3, #39	; 0x27
    3394:	bfc4      	itt	gt
    3396:	2301      	movgt	r3, #1
    3398:	700b      	strbgt	r3, [r1, #0]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:438
		}
	}
	c = LPUART0_CTRL;
    339a:	4916      	ldr	r1, [pc, #88]	; (33f4 <lpuart0_status_isr+0xa4>)
    339c:	6888      	ldr	r0, [r1, #8]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:439
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    339e:	0203      	lsls	r3, r0, #8
    33a0:	d519      	bpl.n	33d6 <lpuart0_status_isr+0x86>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:439 (discriminator 1)
    33a2:	684b      	ldr	r3, [r1, #4]
    33a4:	021c      	lsls	r4, r3, #8
    33a6:	d516      	bpl.n	33d6 <lpuart0_status_isr+0x86>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:440
		head = tx_buffer_head;
    33a8:	4a13      	ldr	r2, [pc, #76]	; (33f8 <lpuart0_status_isr+0xa8>)
    33aa:	7894      	ldrb	r4, [r2, #2]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:441
		tail = tx_buffer_tail;
    33ac:	78d3      	ldrb	r3, [r2, #3]
    33ae:	b2db      	uxtb	r3, r3
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:442
		if (head == tail) {
    33b0:	429c      	cmp	r4, r3
    33b2:	d106      	bne.n	33c2 <lpuart0_status_isr+0x72>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:443
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    33b4:	4b11      	ldr	r3, [pc, #68]	; (33fc <lpuart0_status_isr+0xac>)
    33b6:	2200      	movs	r2, #0
    33b8:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:444
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    33ba:	2201      	movs	r2, #1
    33bc:	f843 2c04 	str.w	r2, [r3, #-4]
    33c0:	e009      	b.n	33d6 <lpuart0_status_isr+0x86>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:448
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    33c2:	3301      	adds	r3, #1
    33c4:	2b28      	cmp	r3, #40	; 0x28
    33c6:	bf28      	it	cs
    33c8:	2300      	movcs	r3, #0
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:449
			n = tx_buffer[tail];
    33ca:	18d4      	adds	r4, r2, r3
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:452
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
    33cc:	b2db      	uxtb	r3, r3
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:449
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    33ce:	7c24      	ldrb	r4, [r4, #16]
    33d0:	b2e4      	uxtb	r4, r4
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:451
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    33d2:	60cc      	str	r4, [r1, #12]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:452
			tx_buffer_tail = tail;
    33d4:	70d3      	strb	r3, [r2, #3]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:455
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    33d6:	0242      	lsls	r2, r0, #9
    33d8:	d50b      	bpl.n	33f2 <lpuart0_status_isr+0xa2>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:455 (discriminator 1)
    33da:	4b06      	ldr	r3, [pc, #24]	; (33f4 <lpuart0_status_isr+0xa4>)
    33dc:	685b      	ldr	r3, [r3, #4]
    33de:	025b      	lsls	r3, r3, #9
    33e0:	d507      	bpl.n	33f2 <lpuart0_status_isr+0xa2>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:456
		transmitting = 0;
    33e2:	4a05      	ldr	r2, [pc, #20]	; (33f8 <lpuart0_status_isr+0xa8>)
    33e4:	2300      	movs	r3, #0
    33e6:	7113      	strb	r3, [r2, #4]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:457
		if (transmit_pin) transmit_deassert();
    33e8:	68d2      	ldr	r2, [r2, #12]
    33ea:	b102      	cbz	r2, 33ee <lpuart0_status_isr+0x9e>
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:457 (discriminator 1)
    33ec:	7013      	strb	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/serial6_lpuart.c:458
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    33ee:	4a04      	ldr	r2, [pc, #16]	; (3400 <lpuart0_status_isr+0xb0>)
    33f0:	6013      	str	r3, [r2, #0]
    33f2:	bd10      	pop	{r4, pc}
    33f4:	400c4000 	.word	0x400c4000
    33f8:	1fff0dec 	.word	0x1fff0dec
    33fc:	4388015c 	.word	0x4388015c
    3400:	43880158 	.word	0x43880158

00003404 <usb_init_serialnumber>:
usb_init_serialnumber():
C:\Teensy\Projects\HelloWorld/usb_desc.c:1228
        3,
        {0,0,0,0,0,0,0,0,0,0}
};

void usb_init_serialnumber(void)
{
    3404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
C:\Teensy\Projects\HelloWorld/usb_desc.c:1232
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    3406:	b672      	cpsid	i
C:\Teensy\Projects\HelloWorld/usb_desc.c:1242
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3408:	4b13      	ldr	r3, [pc, #76]	; (3458 <usb_init_serialnumber+0x54>)
C:\Teensy\Projects\HelloWorld/usb_desc.c:1243
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    340a:	4914      	ldr	r1, [pc, #80]	; (345c <usb_init_serialnumber+0x58>)
C:\Teensy\Projects\HelloWorld/usb_desc.c:1242
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    340c:	2270      	movs	r2, #112	; 0x70
    340e:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/usb_desc.c:1243
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    3410:	4a13      	ldr	r2, [pc, #76]	; (3460 <usb_init_serialnumber+0x5c>)
    3412:	6011      	str	r1, [r2, #0]
C:\Teensy\Projects\HelloWorld/usb_desc.c:1244
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    3414:	2280      	movs	r2, #128	; 0x80
    3416:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/usb_desc.c:1245 (discriminator 1)
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    3418:	781a      	ldrb	r2, [r3, #0]
    341a:	0612      	lsls	r2, r2, #24
    341c:	d5fc      	bpl.n	3418 <usb_init_serialnumber+0x14>
C:\Teensy\Projects\HelloWorld/usb_desc.c:1246
	num = *(uint32_t *)&FTFL_FCCOBB;
    341e:	4b11      	ldr	r3, [pc, #68]	; (3464 <usb_init_serialnumber+0x60>)
    3420:	6818      	ldr	r0, [r3, #0]
C:\Teensy\Projects\HelloWorld/usb_desc.c:1249
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    3422:	b662      	cpsie	i
C:\Teensy\Projects\HelloWorld/usb_desc.c:1251
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    3424:	4b10      	ldr	r3, [pc, #64]	; (3468 <usb_init_serialnumber+0x64>)
    3426:	4298      	cmp	r0, r3
    3428:	bf98      	it	ls
    342a:	230a      	movls	r3, #10
C:\Teensy\Projects\HelloWorld/usb_desc.c:1252
	ultoa(num, buf, 10);
    342c:	ac01      	add	r4, sp, #4
C:\Teensy\Projects\HelloWorld/usb_desc.c:1251
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    342e:	bf98      	it	ls
    3430:	4358      	mulls	r0, r3
C:\Teensy\Projects\HelloWorld/usb_desc.c:1252
	ultoa(num, buf, 10);
    3432:	4621      	mov	r1, r4
    3434:	220a      	movs	r2, #10
    3436:	f7fd fa4d 	bl	8d4 <ultoa>
C:\Teensy\Projects\HelloWorld/usb_desc.c:1253
	for (i=0; i<10; i++) {
    343a:	2300      	movs	r3, #0
C:\Teensy\Projects\HelloWorld/usb_desc.c:1254
		char c = buf[i];
    343c:	5ce1      	ldrb	r1, [r4, r3]
    343e:	4a0b      	ldr	r2, [pc, #44]	; (346c <usb_init_serialnumber+0x68>)
C:\Teensy\Projects\HelloWorld/usb_desc.c:1255
		if (!c) break;
    3440:	b129      	cbz	r1, 344e <usb_init_serialnumber+0x4a>
    3442:	eb02 0043 	add.w	r0, r2, r3, lsl #1
C:\Teensy\Projects\HelloWorld/usb_desc.c:1253
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    3446:	3301      	adds	r3, #1
    3448:	2b0a      	cmp	r3, #10
C:\Teensy\Projects\HelloWorld/usb_desc.c:1256
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    344a:	8041      	strh	r1, [r0, #2]
C:\Teensy\Projects\HelloWorld/usb_desc.c:1253
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    344c:	d1f6      	bne.n	343c <usb_init_serialnumber+0x38>
C:\Teensy\Projects\HelloWorld/usb_desc.c:1258
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    344e:	3301      	adds	r3, #1
    3450:	005b      	lsls	r3, r3, #1
    3452:	7013      	strb	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/usb_desc.c:1259
}
    3454:	b004      	add	sp, #16
    3456:	bd10      	pop	{r4, pc}
    3458:	40020000 	.word	0x40020000
    345c:	41070000 	.word	0x41070000
    3460:	40020004 	.word	0x40020004
    3464:	4002000c 	.word	0x4002000c
    3468:	0098967f 	.word	0x0098967f
    346c:	1fff0a10 	.word	0x1fff0a10

00003470 <endpoint0_transmit>:
endpoint0_transmit():
C:\Teensy\Projects\HelloWorld/usb_dev.c:148
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
}


static void endpoint0_transmit(const void *data, uint32_t len)
{
    3470:	b570      	push	{r4, r5, r6, lr}
C:\Teensy\Projects\HelloWorld/usb_dev.c:157
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3472:	4b0c      	ldr	r3, [pc, #48]	; (34a4 <endpoint0_transmit+0x34>)
    3474:	4c0c      	ldr	r4, [pc, #48]	; (34a8 <endpoint0_transmit+0x38>)
    3476:	781a      	ldrb	r2, [r3, #0]
    3478:	f042 0502 	orr.w	r5, r2, #2
    347c:	eb04 06c5 	add.w	r6, r4, r5, lsl #3
C:\Teensy\Projects\HelloWorld/usb_dev.c:160
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3480:	f082 0201 	eor.w	r2, r2, #1
C:\Teensy\Projects\HelloWorld/usb_dev.c:157
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3484:	6070      	str	r0, [r6, #4]
C:\Teensy\Projects\HelloWorld/usb_dev.c:158
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3486:	7858      	ldrb	r0, [r3, #1]
C:\Teensy\Projects\HelloWorld/usb_dev.c:160
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3488:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/usb_dev.c:158
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    348a:	2800      	cmp	r0, #0
    348c:	bf0c      	ite	eq
    348e:	2688      	moveq	r6, #136	; 0x88
    3490:	26c8      	movne	r6, #200	; 0xc8
C:\Teensy\Projects\HelloWorld/usb_dev.c:159
	ep0_tx_data_toggle ^= 1;
    3492:	f080 0001 	eor.w	r0, r0, #1
C:\Teensy\Projects\HelloWorld/usb_dev.c:158
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3496:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
C:\Teensy\Projects\HelloWorld/usb_dev.c:159
	ep0_tx_data_toggle ^= 1;
    349a:	7058      	strb	r0, [r3, #1]
C:\Teensy\Projects\HelloWorld/usb_dev.c:158
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    349c:	f844 1035 	str.w	r1, [r4, r5, lsl #3]
C:\Teensy\Projects\HelloWorld/usb_dev.c:160
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    34a0:	bd70      	pop	{r4, r5, r6, pc}
    34a2:	bf00      	nop
    34a4:	1fff0e64 	.word	0x1fff0e64
    34a8:	1fff0000 	.word	0x1fff0000

000034ac <usb_rx>:
usb_rx():
C:\Teensy\Projects\HelloWorld/usb_dev.c:657


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    34ac:	1e43      	subs	r3, r0, #1
C:\Teensy\Projects\HelloWorld/usb_dev.c:658
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    34ae:	2b03      	cmp	r3, #3
C:\Teensy\Projects\HelloWorld/usb_dev.c:655




usb_packet_t *usb_rx(uint32_t endpoint)
{
    34b0:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/usb_dev.c:658
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    34b2:	d810      	bhi.n	34d6 <usb_rx+0x2a>
C:\Teensy\Projects\HelloWorld/usb_dev.c:659
	__disable_irq();
    34b4:	b672      	cpsid	i
C:\Teensy\Projects\HelloWorld/usb_dev.c:660
	ret = rx_first[endpoint];
    34b6:	4a09      	ldr	r2, [pc, #36]	; (34dc <usb_rx+0x30>)
    34b8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    34bc:	6850      	ldr	r0, [r2, #4]
C:\Teensy\Projects\HelloWorld/usb_dev.c:661
	if (ret) {
    34be:	b140      	cbz	r0, 34d2 <usb_rx+0x26>
C:\Teensy\Projects\HelloWorld/usb_dev.c:662
		rx_first[endpoint] = ret->next;
    34c0:	6841      	ldr	r1, [r0, #4]
    34c2:	6051      	str	r1, [r2, #4]
C:\Teensy\Projects\HelloWorld/usb_dev.c:663
		usb_rx_byte_count_data[endpoint] -= ret->len;
    34c4:	4a06      	ldr	r2, [pc, #24]	; (34e0 <usb_rx+0x34>)
    34c6:	8801      	ldrh	r1, [r0, #0]
    34c8:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
    34cc:	1a61      	subs	r1, r4, r1
    34ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
C:\Teensy\Projects\HelloWorld/usb_dev.c:665
	}
	__enable_irq();
    34d2:	b662      	cpsie	i
C:\Teensy\Projects\HelloWorld/usb_dev.c:671
	//serial_print("rx, epidx=");
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
    34d4:	bd10      	pop	{r4, pc}
C:\Teensy\Projects\HelloWorld/usb_dev.c:658

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    34d6:	2000      	movs	r0, #0
C:\Teensy\Projects\HelloWorld/usb_dev.c:672
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    34d8:	bd10      	pop	{r4, pc}
    34da:	bf00      	nop
    34dc:	1fff0e64 	.word	0x1fff0e64
    34e0:	1fff0fdc 	.word	0x1fff0fdc

000034e4 <usb_tx_byte_count>:
usb_tx_byte_count():
C:\Teensy\Projects\HelloWorld/usb_dev.c:699
}
*/

uint32_t usb_tx_byte_count(uint32_t endpoint)
{
	endpoint--;
    34e4:	3801      	subs	r0, #1
C:\Teensy\Projects\HelloWorld/usb_dev.c:700
	if (endpoint >= NUM_ENDPOINTS) return 0;
    34e6:	2803      	cmp	r0, #3
    34e8:	d80c      	bhi.n	3504 <usb_tx_byte_count+0x20>
C:\Teensy\Projects\HelloWorld/usb_dev.c:701
	return usb_queue_byte_count(tx_first[endpoint]);
    34ea:	4b07      	ldr	r3, [pc, #28]	; (3508 <usb_tx_byte_count+0x24>)
    34ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    34f0:	6943      	ldr	r3, [r0, #20]
usb_queue_byte_count():
C:\Teensy\Projects\HelloWorld/usb_dev.c:678

static uint32_t usb_queue_byte_count(const usb_packet_t *p)
{
	uint32_t count=0;

	__disable_irq();
    34f2:	b672      	cpsid	i
C:\Teensy\Projects\HelloWorld/usb_dev.c:676
	return ret;
}

static uint32_t usb_queue_byte_count(const usb_packet_t *p)
{
	uint32_t count=0;
    34f4:	2000      	movs	r0, #0
C:\Teensy\Projects\HelloWorld/usb_dev.c:679

	__disable_irq();
	for ( ; p; p = p->next) {
    34f6:	b11b      	cbz	r3, 3500 <usb_tx_byte_count+0x1c>
C:\Teensy\Projects\HelloWorld/usb_dev.c:680
		count += p->len;
    34f8:	881a      	ldrh	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/usb_dev.c:679
static uint32_t usb_queue_byte_count(const usb_packet_t *p)
{
	uint32_t count=0;

	__disable_irq();
	for ( ; p; p = p->next) {
    34fa:	685b      	ldr	r3, [r3, #4]
C:\Teensy\Projects\HelloWorld/usb_dev.c:680
		count += p->len;
    34fc:	4410      	add	r0, r2
    34fe:	e7fa      	b.n	34f6 <usb_tx_byte_count+0x12>
C:\Teensy\Projects\HelloWorld/usb_dev.c:682
	}
	__enable_irq();
    3500:	b662      	cpsie	i
usb_tx_byte_count():
C:\Teensy\Projects\HelloWorld/usb_dev.c:701

uint32_t usb_tx_byte_count(uint32_t endpoint)
{
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
	return usb_queue_byte_count(tx_first[endpoint]);
    3502:	4770      	bx	lr
C:\Teensy\Projects\HelloWorld/usb_dev.c:700
*/

uint32_t usb_tx_byte_count(uint32_t endpoint)
{
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    3504:	2000      	movs	r0, #0
C:\Teensy\Projects\HelloWorld/usb_dev.c:702
	return usb_queue_byte_count(tx_first[endpoint]);
}
    3506:	4770      	bx	lr
    3508:	1fff0e64 	.word	0x1fff0e64

0000350c <usb_tx_packet_count>:
usb_tx_packet_count():
C:\Teensy\Projects\HelloWorld/usb_dev.c:709
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    350c:	3801      	subs	r0, #1
C:\Teensy\Projects\HelloWorld/usb_dev.c:710
	if (endpoint >= NUM_ENDPOINTS) return 0;
    350e:	2803      	cmp	r0, #3
    3510:	d80b      	bhi.n	352a <usb_tx_packet_count+0x1e>
C:\Teensy\Projects\HelloWorld/usb_dev.c:711
	__disable_irq();
    3512:	b672      	cpsid	i
C:\Teensy\Projects\HelloWorld/usb_dev.c:712
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    3514:	4b06      	ldr	r3, [pc, #24]	; (3530 <usb_tx_packet_count+0x24>)
    3516:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    351a:	6943      	ldr	r3, [r0, #20]
C:\Teensy\Projects\HelloWorld/usb_dev.c:707
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    351c:	2000      	movs	r0, #0
C:\Teensy\Projects\HelloWorld/usb_dev.c:712 (discriminator 1)

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    351e:	b113      	cbz	r3, 3526 <usb_tx_packet_count+0x1a>
C:\Teensy\Projects\HelloWorld/usb_dev.c:712 (discriminator 2)
    3520:	3001      	adds	r0, #1
    3522:	685b      	ldr	r3, [r3, #4]
    3524:	e7fb      	b.n	351e <usb_tx_packet_count+0x12>
C:\Teensy\Projects\HelloWorld/usb_dev.c:713
	__enable_irq();
    3526:	b662      	cpsie	i
C:\Teensy\Projects\HelloWorld/usb_dev.c:714
	return count;
    3528:	4770      	bx	lr
C:\Teensy\Projects\HelloWorld/usb_dev.c:710
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    352a:	2000      	movs	r0, #0
C:\Teensy\Projects\HelloWorld/usb_dev.c:715
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    352c:	4770      	bx	lr
    352e:	bf00      	nop
    3530:	1fff0e64 	.word	0x1fff0e64

00003534 <usb_rx_memory>:
usb_rx_memory():
C:\Teensy\Projects\HelloWorld/usb_dev.c:727
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    3534:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/usb_dev.c:733
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    3536:	b672      	cpsid	i
C:\Teensy\Projects\HelloWorld/usb_dev.c:734
	for (i=1; i <= NUM_ENDPOINTS; i++) {
    3538:	2301      	movs	r3, #1
    353a:	4a18      	ldr	r2, [pc, #96]	; (359c <usb_rx_memory+0x68>)
    353c:	441a      	add	r2, r3
C:\Teensy\Projects\HelloWorld/usb_dev.c:738
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    353e:	f812 2c01 	ldrb.w	r2, [r2, #-1]
    3542:	0712      	lsls	r2, r2, #28
    3544:	d51e      	bpl.n	3584 <usb_rx_memory+0x50>
C:\Teensy\Projects\HelloWorld/usb_dev.c:739
			if (table[index(i, RX, EVEN)].desc == 0) {
    3546:	0099      	lsls	r1, r3, #2
    3548:	4a15      	ldr	r2, [pc, #84]	; (35a0 <usb_rx_memory+0x6c>)
    354a:	f852 4031 	ldr.w	r4, [r2, r1, lsl #3]
    354e:	b92c      	cbnz	r4, 355c <usb_rx_memory+0x28>
C:\Teensy\Projects\HelloWorld/usb_dev.c:740
				table[index(i, RX, EVEN)].addr = packet->buf;
    3550:	eb02 1343 	add.w	r3, r2, r3, lsl #5
    3554:	3008      	adds	r0, #8
    3556:	6058      	str	r0, [r3, #4]
C:\Teensy\Projects\HelloWorld/usb_dev.c:741
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3558:	4b12      	ldr	r3, [pc, #72]	; (35a4 <usb_rx_memory+0x70>)
    355a:	e009      	b.n	3570 <usb_rx_memory+0x3c>
C:\Teensy\Projects\HelloWorld/usb_dev.c:748
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    355c:	f041 0101 	orr.w	r1, r1, #1
    3560:	f852 4031 	ldr.w	r4, [r2, r1, lsl #3]
    3564:	b974      	cbnz	r4, 3584 <usb_rx_memory+0x50>
C:\Teensy\Projects\HelloWorld/usb_dev.c:749
				table[index(i, RX, ODD)].addr = packet->buf;
    3566:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
    356a:	3008      	adds	r0, #8
    356c:	6058      	str	r0, [r3, #4]
C:\Teensy\Projects\HelloWorld/usb_dev.c:750
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    356e:	4b0e      	ldr	r3, [pc, #56]	; (35a8 <usb_rx_memory+0x74>)
    3570:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
C:\Teensy\Projects\HelloWorld/usb_dev.c:751
				usb_rx_memory_needed--;
    3574:	4b0d      	ldr	r3, [pc, #52]	; (35ac <usb_rx_memory+0x78>)
    3576:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    357a:	3a01      	subs	r2, #1
    357c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
C:\Teensy\Projects\HelloWorld/usb_dev.c:752
				__enable_irq();
    3580:	b662      	cpsie	i
C:\Teensy\Projects\HelloWorld/usb_dev.c:755
				//serial_phex(i);
				//serial_print(",odd\n");
				return;
    3582:	bd10      	pop	{r4, pc}
C:\Teensy\Projects\HelloWorld/usb_dev.c:734
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
    3584:	3301      	adds	r3, #1
    3586:	2b05      	cmp	r3, #5
    3588:	d1d7      	bne.n	353a <usb_rx_memory+0x6>
C:\Teensy\Projects\HelloWorld/usb_dev.c:759
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    358a:	b662      	cpsie	i
C:\Teensy\Projects\HelloWorld/usb_dev.c:763
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    358c:	4b07      	ldr	r3, [pc, #28]	; (35ac <usb_rx_memory+0x78>)
    358e:	2200      	movs	r2, #0
    3590:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
C:\Teensy\Projects\HelloWorld/usb_dev.c:766
	usb_free(packet);
	return;
}
    3594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
C:\Teensy\Projects\HelloWorld/usb_dev.c:764
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    3598:	f000 bc7e 	b.w	3e98 <usb_free>
    359c:	0000a064 	.word	0x0000a064
    35a0:	1fff0000 	.word	0x1fff0000
    35a4:	00400088 	.word	0x00400088
    35a8:	004000c8 	.word	0x004000c8
    35ac:	1fff0e64 	.word	0x1fff0e64

000035b0 <usb_tx>:
usb_tx():
C:\Teensy\Projects\HelloWorld/usb_dev.c:776
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    35b0:	1e42      	subs	r2, r0, #1
C:\Teensy\Projects\HelloWorld/usb_dev.c:777
	if (endpoint >= NUM_ENDPOINTS) return;
    35b2:	2a03      	cmp	r2, #3
C:\Teensy\Projects\HelloWorld/usb_dev.c:772

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    35b4:	b530      	push	{r4, r5, lr}
C:\Teensy\Projects\HelloWorld/usb_dev.c:777
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
    35b6:	d833      	bhi.n	3620 <usb_tx+0x70>
C:\Teensy\Projects\HelloWorld/usb_dev.c:773
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    35b8:	4b1a      	ldr	r3, [pc, #104]	; (3624 <usb_tx+0x74>)
    35ba:	0140      	lsls	r0, r0, #5
    35bc:	f040 0010 	orr.w	r0, r0, #16
    35c0:	4418      	add	r0, r3
C:\Teensy\Projects\HelloWorld/usb_dev.c:778
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    35c2:	b672      	cpsid	i
C:\Teensy\Projects\HelloWorld/usb_dev.c:782
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    35c4:	4c18      	ldr	r4, [pc, #96]	; (3628 <usb_tx+0x78>)
    35c6:	18a3      	adds	r3, r4, r2
    35c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    35cc:	2b03      	cmp	r3, #3
    35ce:	d809      	bhi.n	35e4 <usb_tx+0x34>
    35d0:	e8df f003 	tbb	[pc, r3]
    35d4:	05150213 	.word	0x05150213
C:\Teensy\Projects\HelloWorld/usb_dev.c:787
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    35d8:	3008      	adds	r0, #8
C:\Teensy\Projects\HelloWorld/usb_dev.c:788
		next = TX_STATE_EVEN_FREE;
    35da:	2302      	movs	r3, #2
C:\Teensy\Projects\HelloWorld/usb_dev.c:789
		break;
    35dc:	e010      	b.n	3600 <usb_tx+0x50>
C:\Teensy\Projects\HelloWorld/usb_dev.c:794
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    35de:	3008      	adds	r0, #8
C:\Teensy\Projects\HelloWorld/usb_dev.c:795
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    35e0:	2304      	movs	r3, #4
C:\Teensy\Projects\HelloWorld/usb_dev.c:796
		break;
    35e2:	e00d      	b.n	3600 <usb_tx+0x50>
C:\Teensy\Projects\HelloWorld/usb_dev.c:798
	  default:
		if (tx_first[endpoint] == NULL) {
    35e4:	0092      	lsls	r2, r2, #2
    35e6:	18a3      	adds	r3, r4, r2
    35e8:	6958      	ldr	r0, [r3, #20]
    35ea:	b908      	cbnz	r0, 35f0 <usb_tx+0x40>
C:\Teensy\Projects\HelloWorld/usb_dev.c:799
			tx_first[endpoint] = packet;
    35ec:	6159      	str	r1, [r3, #20]
    35ee:	e001      	b.n	35f4 <usb_tx+0x44>
C:\Teensy\Projects\HelloWorld/usb_dev.c:801
		} else {
			tx_last[endpoint]->next = packet;
    35f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    35f2:	6059      	str	r1, [r3, #4]
C:\Teensy\Projects\HelloWorld/usb_dev.c:803
		}
		tx_last[endpoint] = packet;
    35f4:	4422      	add	r2, r4
    35f6:	62d1      	str	r1, [r2, #44]	; 0x2c
    35f8:	e011      	b.n	361e <usb_tx+0x6e>
C:\Teensy\Projects\HelloWorld/usb_dev.c:784
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    35fa:	2303      	movs	r3, #3
    35fc:	e000      	b.n	3600 <usb_tx+0x50>
C:\Teensy\Projects\HelloWorld/usb_dev.c:791
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
		next = TX_STATE_EVEN_FREE;
		break;
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    35fe:	2305      	movs	r3, #5
C:\Teensy\Projects\HelloWorld/usb_dev.c:807
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    3600:	4422      	add	r2, r4
C:\Teensy\Projects\HelloWorld/usb_dev.c:809
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    3602:	f010 0f08 	tst.w	r0, #8
C:\Teensy\Projects\HelloWorld/usb_dev.c:807
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    3606:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
C:\Teensy\Projects\HelloWorld/usb_dev.c:808
	b->addr = packet->buf;
    360a:	f101 0308 	add.w	r3, r1, #8
C:\Teensy\Projects\HelloWorld/usb_dev.c:809
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    360e:	880a      	ldrh	r2, [r1, #0]
C:\Teensy\Projects\HelloWorld/usb_dev.c:808
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    3610:	6043      	str	r3, [r0, #4]
C:\Teensy\Projects\HelloWorld/usb_dev.c:809
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    3612:	bf0c      	ite	eq
    3614:	2388      	moveq	r3, #136	; 0x88
    3616:	23c8      	movne	r3, #200	; 0xc8
    3618:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    361c:	6003      	str	r3, [r0, #0]
C:\Teensy\Projects\HelloWorld/usb_dev.c:810
	__enable_irq();
    361e:	b662      	cpsie	i
    3620:	bd30      	pop	{r4, r5, pc}
    3622:	bf00      	nop
    3624:	1fff0000 	.word	0x1fff0000
    3628:	1fff0e64 	.word	0x1fff0e64

0000362c <usb_tx_isochronous>:
usb_tx_isochronous():
C:\Teensy\Projects\HelloWorld/usb_dev.c:818
void usb_tx_isochronous(uint32_t endpoint, void *data, uint32_t len)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next, state;

	endpoint--;
    362c:	1e43      	subs	r3, r0, #1
C:\Teensy\Projects\HelloWorld/usb_dev.c:819
	if (endpoint >= NUM_ENDPOINTS) return;
    362e:	2b03      	cmp	r3, #3
C:\Teensy\Projects\HelloWorld/usb_dev.c:814
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
}

void usb_tx_isochronous(uint32_t endpoint, void *data, uint32_t len)
{
    3630:	b570      	push	{r4, r5, r6, lr}
C:\Teensy\Projects\HelloWorld/usb_dev.c:819
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next, state;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
    3632:	d818      	bhi.n	3666 <usb_tx_isochronous+0x3a>
C:\Teensy\Projects\HelloWorld/usb_dev.c:815
	__enable_irq();
}

void usb_tx_isochronous(uint32_t endpoint, void *data, uint32_t len)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    3634:	4c0c      	ldr	r4, [pc, #48]	; (3668 <usb_tx_isochronous+0x3c>)
    3636:	0140      	lsls	r0, r0, #5
    3638:	f040 0010 	orr.w	r0, r0, #16
    363c:	4420      	add	r0, r4
C:\Teensy\Projects\HelloWorld/usb_dev.c:820
	uint8_t next, state;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    363e:	b672      	cpsid	i
C:\Teensy\Projects\HelloWorld/usb_dev.c:821
	state = tx_state[endpoint];
    3640:	4c0a      	ldr	r4, [pc, #40]	; (366c <usb_tx_isochronous+0x40>)
    3642:	18e5      	adds	r5, r4, r3
C:\Teensy\Projects\HelloWorld/usb_dev.c:822
	if (state == 0) {
    3644:	f895 6025 	ldrb.w	r6, [r5, #37]	; 0x25
    3648:	4625      	mov	r5, r4
    364a:	b116      	cbz	r6, 3652 <usb_tx_isochronous+0x26>
C:\Teensy\Projects\HelloWorld/usb_dev.c:825
		next = 1;
	} else {
		b++;
    364c:	3008      	adds	r0, #8
C:\Teensy\Projects\HelloWorld/usb_dev.c:826
		next = 0;
    364e:	2400      	movs	r4, #0
    3650:	e000      	b.n	3654 <usb_tx_isochronous+0x28>
C:\Teensy\Projects\HelloWorld/usb_dev.c:823
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
	state = tx_state[endpoint];
	if (state == 0) {
		next = 1;
    3652:	2401      	movs	r4, #1
C:\Teensy\Projects\HelloWorld/usb_dev.c:828
	} else {
		b++;
		next = 0;
	}
	tx_state[endpoint] = next;
    3654:	442b      	add	r3, r5
C:\Teensy\Projects\HelloWorld/usb_dev.c:830
	b->addr = data;
	b->desc = (len << 16) | BDT_OWN;
    3656:	0412      	lsls	r2, r2, #16
    3658:	f042 0280 	orr.w	r2, r2, #128	; 0x80
C:\Teensy\Projects\HelloWorld/usb_dev.c:828
		next = 1;
	} else {
		b++;
		next = 0;
	}
	tx_state[endpoint] = next;
    365c:	f883 4025 	strb.w	r4, [r3, #37]	; 0x25
C:\Teensy\Projects\HelloWorld/usb_dev.c:829
	b->addr = data;
    3660:	6041      	str	r1, [r0, #4]
C:\Teensy\Projects\HelloWorld/usb_dev.c:830
	b->desc = (len << 16) | BDT_OWN;
    3662:	6002      	str	r2, [r0, #0]
C:\Teensy\Projects\HelloWorld/usb_dev.c:831
	__enable_irq();
    3664:	b662      	cpsie	i
    3666:	bd70      	pop	{r4, r5, r6, pc}
    3668:	1fff0000 	.word	0x1fff0000
    366c:	1fff0e64 	.word	0x1fff0e64

00003670 <_reboot_Teensyduino_>:
_reboot_Teensyduino_():
C:\Teensy\Projects\HelloWorld/usb_dev.c:840


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    3670:	be00      	bkpt	0x0000
    3672:	4770      	bx	lr

00003674 <PrintWord>:
PrintWord():
C:\Teensy\Projects\HelloWorld/usb_dev.c:844
}

inline void PrintWord(uint32_t word)
{
    3674:	b507      	push	{r0, r1, r2, lr}
    3676:	2307      	movs	r3, #7
    3678:	009a      	lsls	r2, r3, #2
    367a:	f1c2 021c 	rsb	r2, r2, #28
C:\Teensy\Projects\HelloWorld/usb_dev.c:850
	char opcode[8];
	char nibble = 0;
	int i;
	for(i=0;i<8;i++)
	{
		nibble = (word >> (i*4))&0x0f;
    367e:	fa20 f202 	lsr.w	r2, r0, r2
    3682:	f002 020f 	and.w	r2, r2, #15
C:\Teensy\Projects\HelloWorld/usb_dev.c:851
		if(nibble < 10)
    3686:	2a09      	cmp	r2, #9
C:\Teensy\Projects\HelloWorld/usb_dev.c:852
			opcode[7-i] = '0' + nibble;
    3688:	bf94      	ite	ls
    368a:	3230      	addls	r2, #48	; 0x30
C:\Teensy\Projects\HelloWorld/usb_dev.c:854
		else
			opcode[7-i] = 'a' - 10 + nibble;
    368c:	3257      	addhi	r2, #87	; 0x57
    368e:	f80d 2003 	strb.w	r2, [sp, r3]
C:\Teensy\Projects\HelloWorld/usb_dev.c:848
inline void PrintWord(uint32_t word)
{
	char opcode[8];
	char nibble = 0;
	int i;
	for(i=0;i<8;i++)
    3692:	f113 33ff 	adds.w	r3, r3, #4294967295
    3696:	d2ef      	bcs.n	3678 <PrintWord+0x4>
C:\Teensy\Projects\HelloWorld/usb_dev.c:857
			opcode[7-i] = '0' + nibble;
		else
			opcode[7-i] = 'a' - 10 + nibble;

	}
	usb_serial_write(opcode, 8);
    3698:	4668      	mov	r0, sp
    369a:	2108      	movs	r1, #8
    369c:	f000 fcc4 	bl	4028 <usb_serial_write>
C:\Teensy\Projects\HelloWorld/usb_dev.c:858
}
    36a0:	b003      	add	sp, #12
    36a2:	f85d fb04 	ldr.w	pc, [sp], #4

000036a6 <ConvertToHexChars>:
ConvertToHexChars():
C:\Teensy\Projects\HelloWorld/usb_dev.c:880




inline void ConvertToHexChars(uint8_t h, char buffer[], uint64_t index)
{
    36a6:	b530      	push	{r4, r5, lr}
C:\Teensy\Projects\HelloWorld/usb_dev.c:881
	uint8_t upperN = h>>4;
    36a8:	0904      	lsrs	r4, r0, #4
C:\Teensy\Projects\HelloWorld/usb_dev.c:886
	uint8_t lowerN = h&0x0f;

	//buffer[index] = upperN < 10 ? (upperN + '0') : (upperN +'a');
	//buffer[index+1] = lowerN < 10 ? (lowerN + '0') : (lowerN +'a');
	buffer[index] = upperN < 10 ? (upperN + 48) : (upperN + 97 - 10);
    36aa:	2c09      	cmp	r4, #9
C:\Teensy\Projects\HelloWorld/usb_dev.c:882


inline void ConvertToHexChars(uint8_t h, char buffer[], uint64_t index)
{
	uint8_t upperN = h>>4;
	uint8_t lowerN = h&0x0f;
    36ac:	f000 000f 	and.w	r0, r0, #15
C:\Teensy\Projects\HelloWorld/usb_dev.c:886

	//buffer[index] = upperN < 10 ? (upperN + '0') : (upperN +'a');
	//buffer[index+1] = lowerN < 10 ? (lowerN + '0') : (lowerN +'a');
	buffer[index] = upperN < 10 ? (upperN + 48) : (upperN + 97 - 10);
    36b0:	eb01 0502 	add.w	r5, r1, r2
    36b4:	bf94      	ite	ls
    36b6:	3430      	addls	r4, #48	; 0x30
    36b8:	3457      	addhi	r4, #87	; 0x57
C:\Teensy\Projects\HelloWorld/usb_dev.c:887
	buffer[index+1] = lowerN < 10 ? (lowerN + 48) : (lowerN + 97 - 10);
    36ba:	3201      	adds	r2, #1
    36bc:	2809      	cmp	r0, #9
    36be:	bf94      	ite	ls
    36c0:	3030      	addls	r0, #48	; 0x30
    36c2:	3057      	addhi	r0, #87	; 0x57
C:\Teensy\Projects\HelloWorld/usb_dev.c:888
  buffer[index+2] = ' ';
    36c4:	2320      	movs	r3, #32
C:\Teensy\Projects\HelloWorld/usb_dev.c:886
	uint8_t upperN = h>>4;
	uint8_t lowerN = h&0x0f;

	//buffer[index] = upperN < 10 ? (upperN + '0') : (upperN +'a');
	//buffer[index+1] = lowerN < 10 ? (lowerN + '0') : (lowerN +'a');
	buffer[index] = upperN < 10 ? (upperN + 48) : (upperN + 97 - 10);
    36c6:	702c      	strb	r4, [r5, #0]
C:\Teensy\Projects\HelloWorld/usb_dev.c:887
	buffer[index+1] = lowerN < 10 ? (lowerN + 48) : (lowerN + 97 - 10);
    36c8:	5488      	strb	r0, [r1, r2]
C:\Teensy\Projects\HelloWorld/usb_dev.c:888
  buffer[index+2] = ' ';
    36ca:	70ab      	strb	r3, [r5, #2]
    36cc:	bd30      	pop	{r4, r5, pc}

000036ce <ScanForFlashCode>:
ScanForFlashCode():
C:\Teensy\Projects\HelloWorld/usb_dev.c:895

#define BUFFER_LENGTH	256

//scans a section of memory and prints contents as ASCII hexadecimal
void ScanForFlashCode()
{
    36ce:	b5f0      	push	{r4, r5, r6, r7, lr}
C:\Teensy\Projects\HelloWorld/usb_dev.c:896
  uint32_t counter = 0x2002ff00;//start byte
    36d0:	4e12      	ldr	r6, [pc, #72]	; (371c <ScanForFlashCode+0x4e>)
C:\Teensy\Projects\HelloWorld/usb_dev.c:895

#define BUFFER_LENGTH	256

//scans a section of memory and prints contents as ASCII hexadecimal
void ScanForFlashCode()
{
    36d2:	f5ad 7d41 	sub.w	sp, sp, #772	; 0x304
C:\Teensy\Projects\HelloWorld/usb_dev.c:895 (discriminator 1)
    36d6:	4637      	mov	r7, r6
    36d8:	2400      	movs	r4, #0
    36da:	2500      	movs	r5, #0
C:\Teensy\Projects\HelloWorld/usb_dev.c:916 (discriminator 2)
    for (i = 0; i<BUFFER_LENGTH;i++)
    {
      //use counter as an address pointer and store in buffer[i]
      buffer[i] = *((volatile uint8_t*)(counter));
      //convert byte to ASCII so COM terminal can show data
      ConvertToHexChars(buffer[i], strBuffer, i*3);
    36dc:	4622      	mov	r2, r4
    36de:	462b      	mov	r3, r5
C:\Teensy\Projects\HelloWorld/usb_dev.c:914 (discriminator 2)
  	//loop through 1 buffer length of data, and convert to a char[]
  	int i;
    for (i = 0; i<BUFFER_LENGTH;i++)
    {
      //use counter as an address pointer and store in buffer[i]
      buffer[i] = *((volatile uint8_t*)(counter));
    36e0:	f817 0b01 	ldrb.w	r0, [r7], #1
C:\Teensy\Projects\HelloWorld/usb_dev.c:916 (discriminator 2)
      //convert byte to ASCII so COM terminal can show data
      ConvertToHexChars(buffer[i], strBuffer, i*3);
    36e4:	4669      	mov	r1, sp
    36e6:	f7ff ffde 	bl	36a6 <ConvertToHexChars>
    36ea:	3403      	adds	r4, #3
    36ec:	f145 0500 	adc.w	r5, r5, #0
C:\Teensy\Projects\HelloWorld/usb_dev.c:911 (discriminator 2)
  //loop through all bytes to be printed
  while(counter<end)
  {
  	//loop through 1 buffer length of data, and convert to a char[]
  	int i;
    for (i = 0; i<BUFFER_LENGTH;i++)
    36f0:	2d00      	cmp	r5, #0
    36f2:	bf08      	it	eq
    36f4:	f5b4 7f40 	cmpeq.w	r4, #768	; 0x300
    36f8:	d1f0      	bne.n	36dc <ScanForFlashCode+0xe>
C:\Teensy\Projects\HelloWorld/usb_dev.c:920
      //convert byte to ASCII so COM terminal can show data
      ConvertToHexChars(buffer[i], strBuffer, i*3);
      counter++;
    }
    //send char[] over serial
    usb_serial_putchar('\n');
    36fa:	200a      	movs	r0, #10
    36fc:	f000 fcf0 	bl	40e0 <usb_serial_putchar>
C:\Teensy\Projects\HelloWorld/usb_dev.c:921
    usb_serial_write(strBuffer, BUFFER_LENGTH * 3);
    3700:	4668      	mov	r0, sp
    3702:	f44f 7140 	mov.w	r1, #768	; 0x300
    3706:	f000 fc8f 	bl	4028 <usb_serial_write>
C:\Teensy\Projects\HelloWorld/usb_dev.c:907
  //string buffer for hex representation of flash bytes 
  //length includes 2 chars per byte, plus spacing between each byte
  char strBuffer[BUFFER_LENGTH * 3];

  //loop through all bytes to be printed
  while(counter<end)
    370a:	4b05      	ldr	r3, [pc, #20]	; (3720 <ScanForFlashCode+0x52>)
    370c:	f506 7680 	add.w	r6, r6, #256	; 0x100
    3710:	429e      	cmp	r6, r3
    3712:	d1e0      	bne.n	36d6 <ScanForFlashCode+0x8>
C:\Teensy\Projects\HelloWorld/usb_dev.c:923
    }
    //send char[] over serial
    usb_serial_putchar('\n');
    usb_serial_write(strBuffer, BUFFER_LENGTH * 3);
  }
}
    3714:	f50d 7d41 	add.w	sp, sp, #772	; 0x304
    3718:	bdf0      	pop	{r4, r5, r6, r7, pc}
    371a:	bf00      	nop
    371c:	2002ff00 	.word	0x2002ff00
    3720:	2003ff00 	.word	0x2003ff00

00003724 <StackAccess>:
StackAccess():
C:\Teensy\Projects\HelloWorld/usb_dev.c:932
uint32_t stackSize = 0;
void StackAccess(unsigned long *sptr)
{
	
	int i;
	for(i = 0;i<BUFSIZE;i++)
    3724:	2300      	movs	r3, #0
C:\Teensy\Projects\HelloWorld/usb_dev.c:934
	{
		sp[i] = sptr[i];
    3726:	4907      	ldr	r1, [pc, #28]	; (3744 <StackAccess+0x20>)
    3728:	6802      	ldr	r2, [r0, #0]
    372a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
C:\Teensy\Projects\HelloWorld/usb_dev.c:935
		if(sptr[i] == 0xffffffff)
    372e:	f850 2b04 	ldr.w	r2, [r0], #4
    3732:	3201      	adds	r2, #1
    3734:	d002      	beq.n	373c <StackAccess+0x18>
C:\Teensy\Projects\HelloWorld/usb_dev.c:932
uint32_t stackSize = 0;
void StackAccess(unsigned long *sptr)
{
	
	int i;
	for(i = 0;i<BUFSIZE;i++)
    3736:	3301      	adds	r3, #1
    3738:	2b40      	cmp	r3, #64	; 0x40
    373a:	d1f4      	bne.n	3726 <StackAccess+0x2>
C:\Teensy\Projects\HelloWorld/usb_dev.c:938
	{
		sp[i] = sptr[i];
		if(sptr[i] == 0xffffffff)
			break;
	}
	stackSize = i;
    373c:	4a02      	ldr	r2, [pc, #8]	; (3748 <StackAccess+0x24>)
    373e:	63d3      	str	r3, [r2, #60]	; 0x3c
    3740:	4770      	bx	lr
    3742:	bf00      	nop
    3744:	1fff0fe4 	.word	0x1fff0fe4
    3748:	1fff0e64 	.word	0x1fff0e64

0000374c <usb_isr>:
usb_isr():
C:\Teensy\Projects\HelloWorld/usb_dev.c:946
	//	sp[stackSize-4+i] = (0x000000ff >> (i*8)) & stackSize;

}

void usb_isr(void)
{
    374c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
C:\Teensy\Projects\HelloWorld/usb_dev.c:956
	  //                MOV r8, sp \n \ 
	  //                 STR r8,[r7]\
	  //                 " : : "r" (&sp0) : "r7","r8");


	  asm volatile ("tst lr, #0x4 \n \
    3750:	f01e 0f04 	tst.w	lr, #4
    3754:	bf0c      	ite	eq
    3756:	f3ef 8008 	mrseq	r0, MSP
    375a:	f3ef 8009 	mrsne	r0, PSP
    375e:	f7ff ffe1 	bl	3724 <StackAccess>
C:\Teensy\Projects\HelloWorld/usb_dev.c:967
	   

	//uint32_t lr = (uint32_t)__builtin_return_address(0);
	uint8_t status, stat, t;

	char received = 0;
    3762:	2600      	movs	r6, #0
C:\Teensy\Projects\HelloWorld/usb_dev.c:974
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    3764:	4fb4      	ldr	r7, [pc, #720]	; (3a38 <usb_isr+0x2ec>)
    3766:	783c      	ldrb	r4, [r7, #0]
    3768:	b2e4      	uxtb	r4, r4
C:\Teensy\Projects\HelloWorld/usb_dev.c:976

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) 
    376a:	f014 0f04 	tst.w	r4, #4
    376e:	463d      	mov	r5, r7
    3770:	d01b      	beq.n	37aa <usb_isr+0x5e>
C:\Teensy\Projects\HelloWorld/usb_dev.c:978
	{
		if (usb_configuration) 
    3772:	4bb2      	ldr	r3, [pc, #712]	; (3a3c <usb_isr+0x2f0>)
    3774:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
    3778:	b1aa      	cbz	r2, 37a6 <usb_isr+0x5a>
C:\Teensy\Projects\HelloWorld/usb_dev.c:980
		{
			t = usb_reboot_timer;
    377a:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
C:\Teensy\Projects\HelloWorld/usb_dev.c:981
			if (t) 
    377e:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    3782:	b129      	cbz	r1, 3790 <usb_isr+0x44>
C:\Teensy\Projects\HelloWorld/usb_dev.c:983
			{
				usb_reboot_timer = --t;
    3784:	3a01      	subs	r2, #1
    3786:	b2d2      	uxtb	r2, r2
    3788:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
C:\Teensy\Projects\HelloWorld/usb_dev.c:984
				if (!t) 
    378c:	b902      	cbnz	r2, 3790 <usb_isr+0x44>
_reboot_Teensyduino_():
C:\Teensy\Projects\HelloWorld/usb_dev.c:840


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    378e:	be00      	bkpt	0x0000
usb_isr():
C:\Teensy\Projects\HelloWorld/usb_dev.c:988
				usb_reboot_timer = --t;
				if (!t) 
					_reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    3790:	4aab      	ldr	r2, [pc, #684]	; (3a40 <usb_isr+0x2f4>)
    3792:	7811      	ldrb	r1, [r2, #0]
C:\Teensy\Projects\HelloWorld/usb_dev.c:989
			if (t) 
    3794:	f001 03ff 	and.w	r3, r1, #255	; 0xff
    3798:	b129      	cbz	r1, 37a6 <usb_isr+0x5a>
C:\Teensy\Projects\HelloWorld/usb_dev.c:991
			{
				usb_cdc_transmit_flush_timer = --t;
    379a:	3b01      	subs	r3, #1
    379c:	b2db      	uxtb	r3, r3
    379e:	7013      	strb	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/usb_dev.c:992
				if (t == 0) 
    37a0:	b90b      	cbnz	r3, 37a6 <usb_isr+0x5a>
C:\Teensy\Projects\HelloWorld/usb_dev.c:993
					usb_serial_flush_callback();
    37a2:	f000 fced 	bl	4180 <usb_serial_flush_callback>
C:\Teensy\Projects\HelloWorld/usb_dev.c:1014
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    37a6:	2304      	movs	r3, #4
    37a8:	703b      	strb	r3, [r7, #0]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1017
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) 
    37aa:	f004 0308 	and.w	r3, r4, #8
    37ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    37b2:	2b00      	cmp	r3, #0
    37b4:	f000 8294 	beq.w	3ce0 <usb_isr+0x594>
C:\Teensy\Projects\HelloWorld/usb_dev.c:1020
	{
		uint8_t endpoint;
		stat = USB0_STAT;
    37b8:	4ba2      	ldr	r3, [pc, #648]	; (3a44 <usb_isr+0x2f8>)
    37ba:	4da3      	ldr	r5, [pc, #652]	; (3a48 <usb_isr+0x2fc>)
    37bc:	781a      	ldrb	r2, [r3, #0]
    37be:	b2d2      	uxtb	r2, r2
C:\Teensy\Projects\HelloWorld/usb_dev.c:1026
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) 
    37c0:	0914      	lsrs	r4, r2, #4
    37c2:	ea4f 0992 	mov.w	r9, r2, lsr #2
    37c6:	f040 81f9 	bne.w	3bbc <usb_isr+0x470>
usb_control():
C:\Teensy\Projects\HelloWorld/usb_dev.c:520
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    37ca:	eb05 03c9 	add.w	r3, r5, r9, lsl #3
C:\Teensy\Projects\HelloWorld/usb_dev.c:523
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    37ce:	6859      	ldr	r1, [r3, #4]
C:\Teensy\Projects\HelloWorld/usb_dev.c:521
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
    37d0:	f855 3039 	ldr.w	r3, [r5, r9, lsl #3]
    37d4:	f3c3 0383 	ubfx	r3, r3, #2, #4
C:\Teensy\Projects\HelloWorld/usb_dev.c:530
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    37d8:	3b01      	subs	r3, #1
    37da:	2b0c      	cmp	r3, #12
    37dc:	f200 81ea 	bhi.w	3bb4 <usb_isr+0x468>
    37e0:	e8df f013 	tbh	[pc, r3, lsl #1]
    37e4:	01a201a2 	.word	0x01a201a2
    37e8:	01e801e8 	.word	0x01e801e8
    37ec:	01e801e8 	.word	0x01e801e8
    37f0:	01e801e8 	.word	0x01e801e8
    37f4:	01e801bf 	.word	0x01e801bf
    37f8:	01e801e8 	.word	0x01e801e8
    37fc:	000d      	.short	0x000d
C:\Teensy\Projects\HelloWorld/usb_dev.c:535
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    37fe:	680a      	ldr	r2, [r1, #0]
    3800:	4c8e      	ldr	r4, [pc, #568]	; (3a3c <usb_isr+0x2f0>)
C:\Teensy\Projects\HelloWorld/usb_dev.c:536
		setup.word2 = *(uint32_t *)(buf + 4);
    3802:	684b      	ldr	r3, [r1, #4]
C:\Teensy\Projects\HelloWorld/usb_dev.c:535
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    3804:	64e2      	str	r2, [r4, #76]	; 0x4c
C:\Teensy\Projects\HelloWorld/usb_dev.c:536
		setup.word2 = *(uint32_t *)(buf + 4);
    3806:	6523      	str	r3, [r4, #80]	; 0x50
usb_setup():
C:\Teensy\Projects\HelloWorld/usb_dev.c:176
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3808:	b292      	uxth	r2, r2
usb_control():
C:\Teensy\Projects\HelloWorld/usb_dev.c:539
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    380a:	4b90      	ldr	r3, [pc, #576]	; (3a4c <usb_isr+0x300>)
    380c:	f845 3039 	str.w	r3, [r5, r9, lsl #3]
usb_setup():
C:\Teensy\Projects\HelloWorld/usb_dev.c:176
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3810:	f240 6081 	movw	r0, #1665	; 0x681
usb_control():
C:\Teensy\Projects\HelloWorld/usb_dev.c:544
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    3814:	2300      	movs	r3, #0
C:\Teensy\Projects\HelloWorld/usb_dev.c:556
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    3816:	2101      	movs	r1, #1
usb_setup():
C:\Teensy\Projects\HelloWorld/usb_dev.c:176
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3818:	4282      	cmp	r2, r0
usb_control():
C:\Teensy\Projects\HelloWorld/usb_dev.c:544
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    381a:	6563      	str	r3, [r4, #84]	; 0x54
C:\Teensy\Projects\HelloWorld/usb_dev.c:553
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    381c:	612b      	str	r3, [r5, #16]
C:\Teensy\Projects\HelloWorld/usb_dev.c:554
		table[index(0, TX, ODD)].desc = 0;
    381e:	61ab      	str	r3, [r5, #24]
C:\Teensy\Projects\HelloWorld/usb_dev.c:556
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    3820:	7061      	strb	r1, [r4, #1]
    3822:	46a1      	mov	r9, r4
usb_setup():
C:\Teensy\Projects\HelloWorld/usb_dev.c:176
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3824:	d817      	bhi.n	3856 <usb_isr+0x10a>
    3826:	f5b2 6fd0 	cmp.w	r2, #1664	; 0x680
    382a:	f080 8121 	bcs.w	3a70 <usb_isr+0x324>
    382e:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
    3832:	f000 80df 	beq.w	39f4 <usb_isr+0x2a8>
    3836:	d806      	bhi.n	3846 <usb_isr+0xfa>
    3838:	2a80      	cmp	r2, #128	; 0x80
    383a:	f000 80c6 	beq.w	39ca <usb_isr+0x27e>
    383e:	2a82      	cmp	r2, #130	; 0x82
    3840:	f000 80c8 	beq.w	39d4 <usb_isr+0x288>
    3844:	e137      	b.n	3ab6 <usb_isr+0x36a>
    3846:	f240 3302 	movw	r3, #770	; 0x302
    384a:	429a      	cmp	r2, r3
    384c:	f000 80e3 	beq.w	3a16 <usb_isr+0x2ca>
    3850:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    3854:	e01e      	b.n	3894 <usb_isr+0x148>
    3856:	f242 0021 	movw	r0, #8225	; 0x2021
    385a:	4282      	cmp	r2, r0
    385c:	f000 8161 	beq.w	3b22 <usb_isr+0x3d6>
    3860:	d810      	bhi.n	3884 <usb_isr+0x138>
    3862:	f5b2 6f08 	cmp.w	r2, #2176	; 0x880
    3866:	f000 80aa 	beq.w	39be <usb_isr+0x272>
    386a:	f5b2 6f10 	cmp.w	r2, #2304	; 0x900
    386e:	f040 8122 	bne.w	3ab6 <usb_isr+0x36a>
    3872:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 3a48 <usb_isr+0x2fc>
C:\Teensy\Projects\HelloWorld/usb_dev.c:181
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    3876:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
    387a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    387e:	f108 0a80 	add.w	sl, r8, #128	; 0x80
    3882:	e00a      	b.n	389a <usb_isr+0x14e>
C:\Teensy\Projects\HelloWorld/usb_dev.c:176
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3884:	f242 2121 	movw	r1, #8737	; 0x2221
    3888:	428a      	cmp	r2, r1
    388a:	f000 810b 	beq.w	3aa4 <usb_isr+0x358>
    388e:	f242 3321 	movw	r3, #8993	; 0x2321
    3892:	429a      	cmp	r2, r3
    3894:	f000 8113 	beq.w	3abe <usb_isr+0x372>
    3898:	e10d      	b.n	3ab6 <usb_isr+0x36a>
C:\Teensy\Projects\HelloWorld/usb_dev.c:186
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    389a:	f8d8 3020 	ldr.w	r3, [r8, #32]
    389e:	061b      	lsls	r3, r3, #24
    38a0:	d504      	bpl.n	38ac <usb_isr+0x160>
C:\Teensy\Projects\HelloWorld/usb_dev.c:187
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    38a2:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
    38a6:	3808      	subs	r0, #8
    38a8:	f000 faf6 	bl	3e98 <usb_free>
    38ac:	f108 0808 	add.w	r8, r8, #8
C:\Teensy\Projects\HelloWorld/usb_dev.c:185
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    38b0:	45d0      	cmp	r8, sl
    38b2:	d1f2      	bne.n	389a <usb_isr+0x14e>
    38b4:	f04f 0800 	mov.w	r8, #0
    38b8:	46c2      	mov	sl, r8
C:\Teensy\Projects\HelloWorld/usb_dev.c:193
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    38ba:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 3a6c <usb_isr+0x320>
    38be:	f858 000b 	ldr.w	r0, [r8, fp]
C:\Teensy\Projects\HelloWorld/usb_dev.c:194
			while (p) {
    38c2:	b130      	cbz	r0, 38d2 <usb_isr+0x186>
C:\Teensy\Projects\HelloWorld/usb_dev.c:195
				n = p->next;
    38c4:	6843      	ldr	r3, [r0, #4]
C:\Teensy\Projects\HelloWorld/usb_dev.c:196
				usb_free(p);
    38c6:	9301      	str	r3, [sp, #4]
    38c8:	f000 fae6 	bl	3e98 <usb_free>
C:\Teensy\Projects\HelloWorld/usb_dev.c:197
				p = n;
    38cc:	9b01      	ldr	r3, [sp, #4]
    38ce:	4618      	mov	r0, r3
    38d0:	e7f7      	b.n	38c2 <usb_isr+0x176>
C:\Teensy\Projects\HelloWorld/usb_dev.c:200
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    38d2:	4b5f      	ldr	r3, [pc, #380]	; (3a50 <usb_isr+0x304>)
C:\Teensy\Projects\HelloWorld/usb_dev.c:199
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    38d4:	f84b 0008 	str.w	r0, [fp, r8]
C:\Teensy\Projects\HelloWorld/usb_dev.c:201
			rx_last[i] = NULL;
			p = tx_first[i];
    38d8:	f1a3 0b44 	sub.w	fp, r3, #68	; 0x44
C:\Teensy\Projects\HelloWorld/usb_dev.c:200
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    38dc:	f848 0003 	str.w	r0, [r8, r3]
C:\Teensy\Projects\HelloWorld/usb_dev.c:201
			p = tx_first[i];
    38e0:	f858 000b 	ldr.w	r0, [r8, fp]
C:\Teensy\Projects\HelloWorld/usb_dev.c:202
			while (p) {
    38e4:	b130      	cbz	r0, 38f4 <usb_isr+0x1a8>
C:\Teensy\Projects\HelloWorld/usb_dev.c:203
				n = p->next;
    38e6:	6843      	ldr	r3, [r0, #4]
C:\Teensy\Projects\HelloWorld/usb_dev.c:204
				usb_free(p);
    38e8:	9301      	str	r3, [sp, #4]
    38ea:	f000 fad5 	bl	3e98 <usb_free>
C:\Teensy\Projects\HelloWorld/usb_dev.c:205
				p = n;
    38ee:	9b01      	ldr	r3, [sp, #4]
    38f0:	4618      	mov	r0, r3
    38f2:	e7f7      	b.n	38e4 <usb_isr+0x198>
C:\Teensy\Projects\HelloWorld/usb_dev.c:208
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    38f4:	4b57      	ldr	r3, [pc, #348]	; (3a54 <usb_isr+0x308>)
C:\Teensy\Projects\HelloWorld/usb_dev.c:209
			usb_rx_byte_count_data[i] = 0;
    38f6:	4a58      	ldr	r2, [pc, #352]	; (3a58 <usb_isr+0x30c>)
C:\Teensy\Projects\HelloWorld/usb_dev.c:208
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    38f8:	f848 0003 	str.w	r0, [r8, r3]
C:\Teensy\Projects\HelloWorld/usb_dev.c:210
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    38fc:	3b07      	subs	r3, #7
C:\Teensy\Projects\HelloWorld/usb_dev.c:209
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    38fe:	f822 001a 	strh.w	r0, [r2, sl, lsl #1]
C:\Teensy\Projects\HelloWorld/usb_dev.c:210
			switch (tx_state[i]) {
    3902:	f81a 2003 	ldrb.w	r2, [sl, r3]
C:\Teensy\Projects\HelloWorld/usb_dev.c:207
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    3906:	f84b 0008 	str.w	r0, [fp, r8]
C:\Teensy\Projects\HelloWorld/usb_dev.c:210
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    390a:	3a02      	subs	r2, #2
    390c:	2a03      	cmp	r2, #3
    390e:	d808      	bhi.n	3922 <usb_isr+0x1d6>
    3910:	e8df f002 	tbb	[pc, r2]
    3914:	04020402 	.word	0x04020402
C:\Teensy\Projects\HelloWorld/usb_dev.c:213
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    3918:	2200      	movs	r2, #0
    391a:	e000      	b.n	391e <usb_isr+0x1d2>
C:\Teensy\Projects\HelloWorld/usb_dev.c:217
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    391c:	2201      	movs	r2, #1
    391e:	f803 200a 	strb.w	r2, [r3, sl]
C:\Teensy\Projects\HelloWorld/usb_dev.c:191
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    3922:	f10a 0a01 	add.w	sl, sl, #1
    3926:	f1ba 0f04 	cmp.w	sl, #4
    392a:	f108 0804 	add.w	r8, r8, #4
    392e:	d1c4      	bne.n	38ba <usb_isr+0x16e>
C:\Teensy\Projects\HelloWorld/usb_dev.c:223
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    3930:	2300      	movs	r3, #0
    3932:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
C:\Teensy\Projects\HelloWorld/usb_dev.c:224
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    3936:	f04f 0801 	mov.w	r8, #1
    393a:	4a48      	ldr	r2, [pc, #288]	; (3a5c <usb_isr+0x310>)
    393c:	4b48      	ldr	r3, [pc, #288]	; (3a60 <usb_isr+0x314>)
    393e:	4442      	add	r2, r8
    3940:	4443      	add	r3, r8
C:\Teensy\Projects\HelloWorld/usb_dev.c:225
			epconf = *cfg++;
    3942:	f812 2c01 	ldrb.w	r2, [r2, #-1]
    3946:	009b      	lsls	r3, r3, #2
C:\Teensy\Projects\HelloWorld/usb_dev.c:236
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3948:	f012 0f08 	tst.w	r2, #8
C:\Teensy\Projects\HelloWorld/usb_dev.c:226
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    394c:	701a      	strb	r2, [r3, #0]
    394e:	ea4f 0a88 	mov.w	sl, r8, lsl #2
C:\Teensy\Projects\HelloWorld/usb_dev.c:236
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3952:	d025      	beq.n	39a0 <usb_isr+0x254>
C:\Teensy\Projects\HelloWorld/usb_dev.c:238
				usb_packet_t *p;
				p = usb_malloc();
    3954:	f000 fa82 	bl	3e5c <usb_malloc>
C:\Teensy\Projects\HelloWorld/usb_dev.c:239
				if (p) {
    3958:	b138      	cbz	r0, 396a <usb_isr+0x21e>
C:\Teensy\Projects\HelloWorld/usb_dev.c:240
					table[index(i, RX, EVEN)].addr = p->buf;
    395a:	eb05 1348 	add.w	r3, r5, r8, lsl #5
    395e:	3008      	adds	r0, #8
    3960:	6058      	str	r0, [r3, #4]
C:\Teensy\Projects\HelloWorld/usb_dev.c:241
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3962:	4b40      	ldr	r3, [pc, #256]	; (3a64 <usb_isr+0x318>)
    3964:	f845 303a 	str.w	r3, [r5, sl, lsl #3]
    3968:	e006      	b.n	3978 <usb_isr+0x22c>
C:\Teensy\Projects\HelloWorld/usb_dev.c:244
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    396a:	f899 3024 	ldrb.w	r3, [r9, #36]	; 0x24
C:\Teensy\Projects\HelloWorld/usb_dev.c:243
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    396e:	f845 003a 	str.w	r0, [r5, sl, lsl #3]
C:\Teensy\Projects\HelloWorld/usb_dev.c:244
					usb_rx_memory_needed++;
    3972:	3301      	adds	r3, #1
    3974:	f889 3024 	strb.w	r3, [r9, #36]	; 0x24
C:\Teensy\Projects\HelloWorld/usb_dev.c:246
				}
				p = usb_malloc();
    3978:	f000 fa70 	bl	3e5c <usb_malloc>
C:\Teensy\Projects\HelloWorld/usb_dev.c:248
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    397c:	f04a 0301 	orr.w	r3, sl, #1
C:\Teensy\Projects\HelloWorld/usb_dev.c:247
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
    3980:	b138      	cbz	r0, 3992 <usb_isr+0x246>
C:\Teensy\Projects\HelloWorld/usb_dev.c:248
					table[index(i, RX, ODD)].addr = p->buf;
    3982:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    3986:	3008      	adds	r0, #8
    3988:	6050      	str	r0, [r2, #4]
C:\Teensy\Projects\HelloWorld/usb_dev.c:249
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    398a:	4a30      	ldr	r2, [pc, #192]	; (3a4c <usb_isr+0x300>)
    398c:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
    3990:	e006      	b.n	39a0 <usb_isr+0x254>
C:\Teensy\Projects\HelloWorld/usb_dev.c:251
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3992:	f845 0033 	str.w	r0, [r5, r3, lsl #3]
C:\Teensy\Projects\HelloWorld/usb_dev.c:252
					usb_rx_memory_needed++;
    3996:	f899 3024 	ldrb.w	r3, [r9, #36]	; 0x24
    399a:	3301      	adds	r3, #1
    399c:	f889 3024 	strb.w	r3, [r9, #36]	; 0x24
C:\Teensy\Projects\HelloWorld/usb_dev.c:255
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    39a0:	f04a 0202 	orr.w	r2, sl, #2
C:\Teensy\Projects\HelloWorld/usb_dev.c:224
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    39a4:	f108 0801 	add.w	r8, r8, #1
C:\Teensy\Projects\HelloWorld/usb_dev.c:256
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
			table[index(i, TX, ODD)].desc = 0;
    39a8:	f04a 0a03 	orr.w	sl, sl, #3
C:\Teensy\Projects\HelloWorld/usb_dev.c:255
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    39ac:	2300      	movs	r3, #0
C:\Teensy\Projects\HelloWorld/usb_dev.c:224
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    39ae:	f1b8 0f05 	cmp.w	r8, #5
C:\Teensy\Projects\HelloWorld/usb_dev.c:255
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    39b2:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
C:\Teensy\Projects\HelloWorld/usb_dev.c:256
			table[index(i, TX, ODD)].desc = 0;
    39b6:	f845 303a 	str.w	r3, [r5, sl, lsl #3]
C:\Teensy\Projects\HelloWorld/usb_dev.c:224
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    39ba:	d1be      	bne.n	393a <usb_isr+0x1ee>
    39bc:	e080      	b.n	3ac0 <usb_isr+0x374>
C:\Teensy\Projects\HelloWorld/usb_dev.c:266
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    39be:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    39c2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
C:\Teensy\Projects\HelloWorld/usb_dev.c:267
		datalen = 1;
    39c6:	460b      	mov	r3, r1
    39c8:	e07d      	b.n	3ac6 <usb_isr+0x37a>
C:\Teensy\Projects\HelloWorld/usb_dev.c:271
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    39ca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
C:\Teensy\Projects\HelloWorld/usb_dev.c:272
		reply_buffer[1] = 0;
    39ce:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    39d2:	e077      	b.n	3ac4 <usb_isr+0x378>
C:\Teensy\Projects\HelloWorld/usb_dev.c:277
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		if (setup.wIndex > NUM_ENDPOINTS) {
    39d4:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
    39d8:	2a04      	cmp	r2, #4
    39da:	d86c      	bhi.n	3ab6 <usb_isr+0x36a>
C:\Teensy\Projects\HelloWorld/usb_dev.c:282
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    39dc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
C:\Teensy\Projects\HelloWorld/usb_dev.c:283
		reply_buffer[1] = 0;
    39e0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
C:\Teensy\Projects\HelloWorld/usb_dev.c:284
		if (*(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4) & 0x02) reply_buffer[0] = 1;
    39e4:	0092      	lsls	r2, r2, #2
    39e6:	4b20      	ldr	r3, [pc, #128]	; (3a68 <usb_isr+0x31c>)
    39e8:	5c9b      	ldrb	r3, [r3, r2]
    39ea:	079d      	lsls	r5, r3, #30
    39ec:	d56a      	bpl.n	3ac4 <usb_isr+0x378>
    39ee:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    39f2:	e067      	b.n	3ac4 <usb_isr+0x378>
C:\Teensy\Projects\HelloWorld/usb_dev.c:289
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
    39f4:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
    39f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
C:\Teensy\Projects\HelloWorld/usb_dev.c:290
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    39fc:	2a04      	cmp	r2, #4
    39fe:	dc5a      	bgt.n	3ab6 <usb_isr+0x36a>
    3a00:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
    3a04:	2b00      	cmp	r3, #0
    3a06:	d156      	bne.n	3ab6 <usb_isr+0x36a>
C:\Teensy\Projects\HelloWorld/usb_dev.c:295
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    3a08:	0091      	lsls	r1, r2, #2
    3a0a:	4a17      	ldr	r2, [pc, #92]	; (3a68 <usb_isr+0x31c>)
    3a0c:	440a      	add	r2, r1
    3a0e:	7811      	ldrb	r1, [r2, #0]
    3a10:	f021 0102 	bic.w	r1, r1, #2
    3a14:	e04d      	b.n	3ab2 <usb_isr+0x366>
C:\Teensy\Projects\HelloWorld/usb_dev.c:299
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
    3a16:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
    3a1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
C:\Teensy\Projects\HelloWorld/usb_dev.c:300
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3a1e:	2a04      	cmp	r2, #4
    3a20:	dc49      	bgt.n	3ab6 <usb_isr+0x36a>
    3a22:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
    3a26:	2b00      	cmp	r3, #0
    3a28:	d145      	bne.n	3ab6 <usb_isr+0x36a>
C:\Teensy\Projects\HelloWorld/usb_dev.c:305
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    3a2a:	0091      	lsls	r1, r2, #2
    3a2c:	4a0e      	ldr	r2, [pc, #56]	; (3a68 <usb_isr+0x31c>)
    3a2e:	440a      	add	r2, r1
    3a30:	7811      	ldrb	r1, [r2, #0]
    3a32:	f041 0102 	orr.w	r1, r1, #2
    3a36:	e03c      	b.n	3ab2 <usb_isr+0x366>
    3a38:	40072080 	.word	0x40072080
    3a3c:	1fff0e64 	.word	0x1fff0e64
    3a40:	1fff0f5d 	.word	0x1fff0f5d
    3a44:	40072090 	.word	0x40072090
    3a48:	1fff0000 	.word	0x1fff0000
    3a4c:	004000c8 	.word	0x004000c8
    3a50:	1fff0ebc 	.word	0x1fff0ebc
    3a54:	1fff0e90 	.word	0x1fff0e90
    3a58:	1fff0fdc 	.word	0x1fff0fdc
    3a5c:	0000a064 	.word	0x0000a064
    3a60:	1001c830 	.word	0x1001c830
    3a64:	00400088 	.word	0x00400088
    3a68:	400720c0 	.word	0x400720c0
    3a6c:	1fff0e68 	.word	0x1fff0e68
C:\Teensy\Projects\HelloWorld/usb_dev.c:317
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3a70:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
    3a74:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
    3a78:	4baa      	ldr	r3, [pc, #680]	; (3d24 <usb_isr+0x5d8>)
C:\Teensy\Projects\HelloWorld/usb_dev.c:314
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    3a7a:	f853 5c08 	ldr.w	r5, [r3, #-8]
    3a7e:	f1a3 000c 	sub.w	r0, r3, #12
    3a82:	b1c5      	cbz	r5, 3ab6 <usb_isr+0x36a>
C:\Teensy\Projects\HelloWorld/usb_dev.c:317
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3a84:	f833 cc0c 	ldrh.w	ip, [r3, #-12]
    3a88:	4594      	cmp	ip, r2
    3a8a:	d109      	bne.n	3aa0 <usb_isr+0x354>
    3a8c:	f833 cc0a 	ldrh.w	ip, [r3, #-10]
    3a90:	458c      	cmp	ip, r1
    3a92:	d105      	bne.n	3aa0 <usb_isr+0x354>
C:\Teensy\Projects\HelloWorld/usb_dev.c:319
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    3a94:	0a12      	lsrs	r2, r2, #8
    3a96:	2a03      	cmp	r2, #3
C:\Teensy\Projects\HelloWorld/usb_dev.c:323
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    3a98:	bf0c      	ite	eq
    3a9a:	782b      	ldrbeq	r3, [r5, #0]
C:\Teensy\Projects\HelloWorld/usb_dev.c:325
				} else {
					datalen = list->length;
    3a9c:	8903      	ldrhne	r3, [r0, #8]
    3a9e:	e014      	b.n	3aca <usb_isr+0x37e>
    3aa0:	330c      	adds	r3, #12
    3aa2:	e7ea      	b.n	3a7a <usb_isr+0x32e>
C:\Teensy\Projects\HelloWorld/usb_dev.c:349
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3aa4:	4aa0      	ldr	r2, [pc, #640]	; (3d28 <usb_isr+0x5dc>)
    3aa6:	6811      	ldr	r1, [r2, #0]
    3aa8:	4aa0      	ldr	r2, [pc, #640]	; (3d2c <usb_isr+0x5e0>)
    3aaa:	6011      	str	r1, [r2, #0]
C:\Teensy\Projects\HelloWorld/usb_dev.c:350
		usb_cdc_line_rtsdtr = setup.wValue;
    3aac:	f894 104e 	ldrb.w	r1, [r4, #78]	; 0x4e
    3ab0:	4a9f      	ldr	r2, [pc, #636]	; (3d30 <usb_isr+0x5e4>)
    3ab2:	7011      	strb	r1, [r2, #0]
    3ab4:	e004      	b.n	3ac0 <usb_isr+0x374>
endpoint0_stall():
C:\Teensy\Projects\HelloWorld/usb_dev.c:143
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3ab6:	4b9f      	ldr	r3, [pc, #636]	; (3d34 <usb_isr+0x5e8>)
    3ab8:	220f      	movs	r2, #15
    3aba:	701a      	strb	r2, [r3, #0]
    3abc:	e031      	b.n	3b22 <usb_isr+0x3d6>
usb_setup():
C:\Teensy\Projects\HelloWorld/usb_dev.c:168
static uint8_t reply_buffer[8];

static void usb_setup(void)
{
	const uint8_t *data = NULL;
	uint32_t datalen = 0;
    3abe:	2300      	movs	r3, #0
C:\Teensy\Projects\HelloWorld/usb_dev.c:167

static uint8_t reply_buffer[8];

static void usb_setup(void)
{
	const uint8_t *data = NULL;
    3ac0:	461d      	mov	r5, r3
    3ac2:	e002      	b.n	3aca <usb_isr+0x37e>
C:\Teensy\Projects\HelloWorld/usb_dev.c:286
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    3ac4:	2302      	movs	r3, #2
C:\Teensy\Projects\HelloWorld/usb_dev.c:285
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
    3ac6:	f109 0540 	add.w	r5, r9, #64	; 0x40
C:\Teensy\Projects\HelloWorld/usb_dev.c:475
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    3aca:	f8b4 9052 	ldrh.w	r9, [r4, #82]	; 0x52
    3ace:	454b      	cmp	r3, r9
    3ad0:	bf38      	it	cc
    3ad2:	4699      	movcc	r9, r3
    3ad4:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
    3ad8:	bf34      	ite	cc
    3ada:	46c8      	movcc	r8, r9
    3adc:	f04f 0840 	movcs.w	r8, #64	; 0x40
C:\Teensy\Projects\HelloWorld/usb_dev.c:478
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
    3ae0:	4628      	mov	r0, r5
    3ae2:	4641      	mov	r1, r8
    3ae4:	f7ff fcc4 	bl	3470 <endpoint0_transmit>
C:\Teensy\Projects\HelloWorld/usb_dev.c:481
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    3ae8:	ebb9 0908 	subs.w	r9, r9, r8
C:\Teensy\Projects\HelloWorld/usb_dev.c:479

	if (datalen > setup.wLength) datalen = setup.wLength;
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3aec:	4445      	add	r5, r8
C:\Teensy\Projects\HelloWorld/usb_dev.c:481
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    3aee:	d104      	bne.n	3afa <usb_isr+0x3ae>
    3af0:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    3af4:	d115      	bne.n	3b22 <usb_isr+0x3d6>
    3af6:	46c8      	mov	r8, r9
    3af8:	e005      	b.n	3b06 <usb_isr+0x3ba>
    3afa:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
    3afe:	bf34      	ite	cc
    3b00:	46c8      	movcc	r8, r9
    3b02:	f04f 0840 	movcs.w	r8, #64	; 0x40
C:\Teensy\Projects\HelloWorld/usb_dev.c:485

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
    3b06:	4628      	mov	r0, r5
    3b08:	4641      	mov	r1, r8
    3b0a:	f7ff fcb1 	bl	3470 <endpoint0_transmit>
C:\Teensy\Projects\HelloWorld/usb_dev.c:488
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    3b0e:	ebb9 0908 	subs.w	r9, r9, r8
C:\Teensy\Projects\HelloWorld/usb_dev.c:486
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3b12:	4445      	add	r5, r8
C:\Teensy\Projects\HelloWorld/usb_dev.c:488
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    3b14:	d102      	bne.n	3b1c <usb_isr+0x3d0>
    3b16:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    3b1a:	d102      	bne.n	3b22 <usb_isr+0x3d6>
C:\Teensy\Projects\HelloWorld/usb_dev.c:490

	ep0_tx_ptr = data;
    3b1c:	6565      	str	r5, [r4, #84]	; 0x54
C:\Teensy\Projects\HelloWorld/usb_dev.c:491
	ep0_tx_len = datalen;
    3b1e:	f8a4 9068 	strh.w	r9, [r4, #104]	; 0x68
usb_control():
C:\Teensy\Projects\HelloWorld/usb_dev.c:574
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3b22:	2201      	movs	r2, #1
    3b24:	4b84      	ldr	r3, [pc, #528]	; (3d38 <usb_isr+0x5ec>)
    3b26:	e044      	b.n	3bb2 <usb_isr+0x466>
C:\Teensy\Projects\HelloWorld/usb_dev.c:580
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    3b28:	4a84      	ldr	r2, [pc, #528]	; (3d3c <usb_isr+0x5f0>)
    3b2a:	f8b2 004c 	ldrh.w	r0, [r2, #76]	; 0x4c
    3b2e:	f242 0321 	movw	r3, #8225	; 0x2021
    3b32:	4298      	cmp	r0, r3
    3b34:	d111      	bne.n	3b5a <usb_isr+0x40e>
    3b36:	2300      	movs	r3, #0
C:\Teensy\Projects\HelloWorld/usb_dev.c:586
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    3b38:	4881      	ldr	r0, [pc, #516]	; (3d40 <usb_isr+0x5f4>)
    3b3a:	5ccc      	ldrb	r4, [r1, r3]
    3b3c:	541c      	strb	r4, [r3, r0]
C:\Teensy\Projects\HelloWorld/usb_dev.c:584
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
    3b3e:	3301      	adds	r3, #1
    3b40:	2b07      	cmp	r3, #7
    3b42:	d1f9      	bne.n	3b38 <usb_isr+0x3ec>
C:\Teensy\Projects\HelloWorld/usb_dev.c:590
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3b44:	6803      	ldr	r3, [r0, #0]
C:\Teensy\Projects\HelloWorld/usb_dev.c:591
			endpoint0_transmit(NULL, 0);
    3b46:	2000      	movs	r0, #0
C:\Teensy\Projects\HelloWorld/usb_dev.c:590
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3b48:	2b86      	cmp	r3, #134	; 0x86
    3b4a:	bf08      	it	eq
    3b4c:	230f      	moveq	r3, #15
C:\Teensy\Projects\HelloWorld/usb_dev.c:591
			endpoint0_transmit(NULL, 0);
    3b4e:	4601      	mov	r1, r0
C:\Teensy\Projects\HelloWorld/usb_dev.c:590
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3b50:	bf08      	it	eq
    3b52:	f882 3049 	strbeq.w	r3, [r2, #73]	; 0x49
C:\Teensy\Projects\HelloWorld/usb_dev.c:591
			endpoint0_transmit(NULL, 0);
    3b56:	f7ff fc8b 	bl	3470 <endpoint0_transmit>
C:\Teensy\Projects\HelloWorld/usb_dev.c:613
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    3b5a:	4b7a      	ldr	r3, [pc, #488]	; (3d44 <usb_isr+0x5f8>)
    3b5c:	f845 3039 	str.w	r3, [r5, r9, lsl #3]
    3b60:	e028      	b.n	3bb4 <usb_isr+0x468>
C:\Teensy\Projects\HelloWorld/usb_dev.c:622
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    3b62:	4c76      	ldr	r4, [pc, #472]	; (3d3c <usb_isr+0x5f0>)
    3b64:	f8d4 8054 	ldr.w	r8, [r4, #84]	; 0x54
C:\Teensy\Projects\HelloWorld/usb_dev.c:623
		if (data) {
    3b68:	f1b8 0f00 	cmp.w	r8, #0
    3b6c:	d015      	beq.n	3b9a <usb_isr+0x44e>
C:\Teensy\Projects\HelloWorld/usb_dev.c:624
			size = ep0_tx_len;
    3b6e:	f8b4 9068 	ldrh.w	r9, [r4, #104]	; 0x68
    3b72:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
    3b76:	bf34      	ite	cc
    3b78:	464d      	movcc	r5, r9
    3b7a:	2540      	movcs	r5, #64	; 0x40
C:\Teensy\Projects\HelloWorld/usb_dev.c:626
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
    3b7c:	4640      	mov	r0, r8
    3b7e:	4629      	mov	r1, r5
    3b80:	f7ff fc76 	bl	3470 <endpoint0_transmit>
C:\Teensy\Projects\HelloWorld/usb_dev.c:628
			data += size;
			ep0_tx_len -= size;
    3b84:	ebc5 0309 	rsb	r3, r5, r9
    3b88:	b29b      	uxth	r3, r3
    3b8a:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
C:\Teensy\Projects\HelloWorld/usb_dev.c:629
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    3b8e:	b90b      	cbnz	r3, 3b94 <usb_isr+0x448>
    3b90:	2d40      	cmp	r5, #64	; 0x40
    3b92:	d101      	bne.n	3b98 <usb_isr+0x44c>
C:\Teensy\Projects\HelloWorld/usb_dev.c:627
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    3b94:	eb08 0305 	add.w	r3, r8, r5
C:\Teensy\Projects\HelloWorld/usb_dev.c:629
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    3b98:	6563      	str	r3, [r4, #84]	; 0x54
C:\Teensy\Projects\HelloWorld/usb_dev.c:632
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    3b9a:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
    3b9e:	4b67      	ldr	r3, [pc, #412]	; (3d3c <usb_isr+0x5f0>)
    3ba0:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    3ba4:	d106      	bne.n	3bb4 <usb_isr+0x468>
C:\Teensy\Projects\HelloWorld/usb_dev.c:633
			setup.bRequest = 0;
    3ba6:	2200      	movs	r2, #0
    3ba8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
C:\Teensy\Projects\HelloWorld/usb_dev.c:637
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    3bac:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
    3bb0:	4b65      	ldr	r3, [pc, #404]	; (3d48 <usb_isr+0x5fc>)
    3bb2:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/usb_dev.c:646
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3bb4:	4b60      	ldr	r3, [pc, #384]	; (3d38 <usb_isr+0x5ec>)
    3bb6:	2201      	movs	r2, #1
    3bb8:	701a      	strb	r2, [r3, #0]
    3bba:	e08e      	b.n	3cda <usb_isr+0x58e>
usb_isr():
C:\Teensy\Projects\HelloWorld/usb_dev.c:1032
		{
			usb_control(stat);
		} 
		else 
		{
			bdt_t *b = stat2bufferdescriptor(stat);
    3bbc:	eb05 08c9 	add.w	r8, r5, r9, lsl #3
C:\Teensy\Projects\HelloWorld/usb_dev.c:1044
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    3bc0:	3c01      	subs	r4, #1
C:\Teensy\Projects\HelloWorld/usb_dev.c:1033
			usb_control(stat);
		} 
		else 
		{
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    3bc2:	f8d8 3004 	ldr.w	r3, [r8, #4]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1067
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    3bc6:	f002 0208 	and.w	r2, r2, #8
C:\Teensy\Projects\HelloWorld/usb_dev.c:1033
			usb_control(stat);
		} 
		else 
		{
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    3bca:	f1a3 0008 	sub.w	r0, r3, #8
C:\Teensy\Projects\HelloWorld/usb_dev.c:1044
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    3bce:	b2e4      	uxtb	r4, r4
C:\Teensy\Projects\HelloWorld/usb_dev.c:1067
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    3bd0:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    3bd4:	2a00      	cmp	r2, #0
    3bd6:	d048      	beq.n	3c6a <usb_isr+0x51e>
C:\Teensy\Projects\HelloWorld/usb_dev.c:1068
				usb_free(packet);
    3bd8:	f000 f95e 	bl	3e98 <usb_free>
C:\Teensy\Projects\HelloWorld/usb_dev.c:1069
				packet = tx_first[endpoint];
    3bdc:	4b57      	ldr	r3, [pc, #348]	; (3d3c <usb_isr+0x5f0>)
    3bde:	eb03 0c84 	add.w	ip, r3, r4, lsl #2
    3be2:	1918      	adds	r0, r3, r4
    3be4:	f8dc 1014 	ldr.w	r1, [ip, #20]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1070
				if (packet) {
    3be8:	b331      	cbz	r1, 3c38 <usb_isr+0x4ec>
C:\Teensy\Projects\HelloWorld/usb_dev.c:1072
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    3bea:	684a      	ldr	r2, [r1, #4]
    3bec:	f8cc 2014 	str.w	r2, [ip, #20]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1073
					b->addr = packet->buf;
    3bf0:	f101 0208 	add.w	r2, r1, #8
    3bf4:	f8c8 2004 	str.w	r2, [r8, #4]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1074
					switch (tx_state[endpoint]) {
    3bf8:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
    3bfc:	2a03      	cmp	r2, #3
    3bfe:	d810      	bhi.n	3c22 <usb_isr+0x4d6>
    3c00:	e8df f002 	tbb	[pc, r2]
    3c04:	0b080502 	.word	0x0b080502
C:\Teensy\Projects\HelloWorld/usb_dev.c:1076
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    3c08:	441c      	add	r4, r3
    3c0a:	2303      	movs	r3, #3
    3c0c:	e007      	b.n	3c1e <usb_isr+0x4d2>
C:\Teensy\Projects\HelloWorld/usb_dev.c:1079
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    3c0e:	441c      	add	r4, r3
    3c10:	2302      	movs	r3, #2
    3c12:	e004      	b.n	3c1e <usb_isr+0x4d2>
C:\Teensy\Projects\HelloWorld/usb_dev.c:1082
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    3c14:	441c      	add	r4, r3
    3c16:	2305      	movs	r3, #5
    3c18:	e001      	b.n	3c1e <usb_isr+0x4d2>
C:\Teensy\Projects\HelloWorld/usb_dev.c:1085
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    3c1a:	441c      	add	r4, r3
    3c1c:	2304      	movs	r3, #4
    3c1e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
C:\Teensy\Projects\HelloWorld/usb_dev.c:1090
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    3c22:	880a      	ldrh	r2, [r1, #0]
    3c24:	f018 0f08 	tst.w	r8, #8
    3c28:	bf0c      	ite	eq
    3c2a:	2388      	moveq	r3, #136	; 0x88
    3c2c:	23c8      	movne	r3, #200	; 0xc8
    3c2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    3c32:	f845 3039 	str.w	r3, [r5, r9, lsl #3]
    3c36:	e050      	b.n	3cda <usb_isr+0x58e>
C:\Teensy\Projects\HelloWorld/usb_dev.c:1094
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    3c38:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
    3c3c:	2a03      	cmp	r2, #3
    3c3e:	d80b      	bhi.n	3c58 <usb_isr+0x50c>
    3c40:	e8df f002 	tbb	[pc, r2]
    3c44:	05024b4b 	.word	0x05024b4b
C:\Teensy\Projects\HelloWorld/usb_dev.c:1099
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    3c48:	441c      	add	r4, r3
    3c4a:	2300      	movs	r3, #0
    3c4c:	e001      	b.n	3c52 <usb_isr+0x506>
C:\Teensy\Projects\HelloWorld/usb_dev.c:1102
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3c4e:	441c      	add	r4, r3
    3c50:	2301      	movs	r3, #1
    3c52:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
C:\Teensy\Projects\HelloWorld/usb_dev.c:1103
						break;
    3c56:	e040      	b.n	3cda <usb_isr+0x58e>
C:\Teensy\Projects\HelloWorld/usb_dev.c:1105
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    3c58:	f018 0f08 	tst.w	r8, #8
    3c5c:	441c      	add	r4, r3
    3c5e:	bf0c      	ite	eq
    3c60:	2202      	moveq	r2, #2
    3c62:	2203      	movne	r2, #3
    3c64:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
C:\Teensy\Projects\HelloWorld/usb_dev.c:1107
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    3c68:	e037      	b.n	3cda <usb_isr+0x58e>
C:\Teensy\Projects\HelloWorld/usb_dev.c:1112
					}
				}
			} else { // receive
				received = 1;
				packet->len = b->desc >> 16;
    3c6a:	f855 2039 	ldr.w	r2, [r5, r9, lsl #3]
    3c6e:	0c12      	lsrs	r2, r2, #16
    3c70:	f823 2c08 	strh.w	r2, [r3, #-8]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1113
				if (packet->len > 0) {
    3c74:	b342      	cbz	r2, 3cc8 <usb_isr+0x57c>
C:\Teensy\Projects\HelloWorld/usb_dev.c:1116
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    3c76:	4e31      	ldr	r6, [pc, #196]	; (3d3c <usb_isr+0x5f0>)
C:\Teensy\Projects\HelloWorld/usb_dev.c:1114
				}
			} else { // receive
				received = 1;
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    3c78:	f823 1c06 	strh.w	r1, [r3, #-6]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1116
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    3c7c:	ea4f 0e84 	mov.w	lr, r4, lsl #2
C:\Teensy\Projects\HelloWorld/usb_dev.c:1115
			} else { // receive
				received = 1;
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
					packet->next = NULL;
    3c80:	f843 1c04 	str.w	r1, [r3, #-4]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1116
					if (rx_first[endpoint] == NULL) {
    3c84:	eb06 010e 	add.w	r1, r6, lr
    3c88:	46b4      	mov	ip, r6
    3c8a:	684b      	ldr	r3, [r1, #4]
    3c8c:	b90b      	cbnz	r3, 3c92 <usb_isr+0x546>
C:\Teensy\Projects\HelloWorld/usb_dev.c:1122
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    3c8e:	6048      	str	r0, [r1, #4]
    3c90:	e001      	b.n	3c96 <usb_isr+0x54a>
C:\Teensy\Projects\HelloWorld/usb_dev.c:1129
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    3c92:	6d8b      	ldr	r3, [r1, #88]	; 0x58
    3c94:	6058      	str	r0, [r3, #4]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1131
					}
					rx_last[endpoint] = packet;
    3c96:	eb0c 030e 	add.w	r3, ip, lr
    3c9a:	4e28      	ldr	r6, [pc, #160]	; (3d3c <usb_isr+0x5f0>)
    3c9c:	6598      	str	r0, [r3, #88]	; 0x58
C:\Teensy\Projects\HelloWorld/usb_dev.c:1132
					usb_rx_byte_count_data[endpoint] += packet->len;
    3c9e:	4b2b      	ldr	r3, [pc, #172]	; (3d4c <usb_isr+0x600>)
    3ca0:	f833 1014 	ldrh.w	r1, [r3, r4, lsl #1]
    3ca4:	440a      	add	r2, r1
    3ca6:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1137
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    3caa:	f000 f8d7 	bl	3e5c <usb_malloc>
C:\Teensy\Projects\HelloWorld/usb_dev.c:1138
					if (packet) {
    3cae:	b118      	cbz	r0, 3cb8 <usb_isr+0x56c>
C:\Teensy\Projects\HelloWorld/usb_dev.c:1139
						b->addr = packet->buf;
    3cb0:	3008      	adds	r0, #8
    3cb2:	f8c8 0004 	str.w	r0, [r8, #4]
    3cb6:	e007      	b.n	3cc8 <usb_isr+0x57c>
C:\Teensy\Projects\HelloWorld/usb_dev.c:1146
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    3cb8:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
C:\Teensy\Projects\HelloWorld/usb_dev.c:1145
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    3cbc:	f845 0039 	str.w	r0, [r5, r9, lsl #3]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1146
						usb_rx_memory_needed++;
    3cc0:	3301      	adds	r3, #1
    3cc2:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
    3cc6:	e007      	b.n	3cd8 <usb_isr+0x58c>
C:\Teensy\Projects\HelloWorld/usb_dev.c:1149
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    3cc8:	4b1e      	ldr	r3, [pc, #120]	; (3d44 <usb_isr+0x5f8>)
    3cca:	4a21      	ldr	r2, [pc, #132]	; (3d50 <usb_isr+0x604>)
    3ccc:	f018 0f08 	tst.w	r8, #8
    3cd0:	bf08      	it	eq
    3cd2:	4613      	moveq	r3, r2
    3cd4:	f845 3039 	str.w	r3, [r5, r9, lsl #3]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1111
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				received = 1;
    3cd8:	2601      	movs	r6, #1
C:\Teensy\Projects\HelloWorld/usb_dev.c:1154
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    3cda:	2308      	movs	r3, #8
    3cdc:	703b      	strb	r3, [r7, #0]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1155
		goto restart;
    3cde:	e541      	b.n	3764 <usb_isr+0x18>
C:\Teensy\Projects\HelloWorld/usb_dev.c:1160
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    3ce0:	07e0      	lsls	r0, r4, #31
    3ce2:	d53f      	bpl.n	3d64 <usb_isr+0x618>
C:\Teensy\Projects\HelloWorld/usb_dev.c:1165
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    3ce4:	4c15      	ldr	r4, [pc, #84]	; (3d3c <usb_isr+0x5f0>)
C:\Teensy\Projects\HelloWorld/usb_dev.c:1164

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    3ce6:	4814      	ldr	r0, [pc, #80]	; (3d38 <usb_isr+0x5ec>)
C:\Teensy\Projects\HelloWorld/usb_dev.c:1168
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    3ce8:	4e19      	ldr	r6, [pc, #100]	; (3d50 <usb_isr+0x604>)
C:\Teensy\Projects\HelloWorld/usb_dev.c:1165
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    3cea:	4621      	mov	r1, r4
C:\Teensy\Projects\HelloWorld/usb_dev.c:1164

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    3cec:	2302      	movs	r3, #2
    3cee:	7003      	strb	r3, [r0, #0]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1165
		ep0_tx_bdt_bank = 0;
    3cf0:	f801 2b6c 	strb.w	r2, [r1], #108
C:\Teensy\Projects\HelloWorld/usb_dev.c:1168

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    3cf4:	4b17      	ldr	r3, [pc, #92]	; (3d54 <usb_isr+0x608>)
C:\Teensy\Projects\HelloWorld/usb_dev.c:1171
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    3cf6:	34ac      	adds	r4, #172	; 0xac
C:\Teensy\Projects\HelloWorld/usb_dev.c:1168
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    3cf8:	601e      	str	r6, [r3, #0]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1169
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    3cfa:	6059      	str	r1, [r3, #4]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1172
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    3cfc:	611a      	str	r2, [r3, #16]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1173
		table[index(0, TX, ODD)].desc = 0;
    3cfe:	619a      	str	r2, [r3, #24]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1170
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    3d00:	609e      	str	r6, [r3, #8]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1171
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    3d02:	60dc      	str	r4, [r3, #12]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1176
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3d04:	4b0b      	ldr	r3, [pc, #44]	; (3d34 <usb_isr+0x5e8>)
    3d06:	210d      	movs	r1, #13
    3d08:	7019      	strb	r1, [r3, #0]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1179

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    3d0a:	4913      	ldr	r1, [pc, #76]	; (3d58 <usb_isr+0x60c>)
    3d0c:	23ff      	movs	r3, #255	; 0xff
    3d0e:	700b      	strb	r3, [r1, #0]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1180
		USB0_ISTAT = 0xFF;
    3d10:	702b      	strb	r3, [r5, #0]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1183

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    3d12:	740a      	strb	r2, [r1, #16]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1186

		// enable other interrupts
		USB0_ERREN = 0xFF;
    3d14:	4a11      	ldr	r2, [pc, #68]	; (3d5c <usb_isr+0x610>)
    3d16:	7013      	strb	r3, [r2, #0]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1187
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    3d18:	4b11      	ldr	r3, [pc, #68]	; (3d60 <usb_isr+0x614>)
    3d1a:	229f      	movs	r2, #159	; 0x9f
    3d1c:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1195
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    3d1e:	2301      	movs	r3, #1
    3d20:	7003      	strb	r3, [r0, #0]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1196
		return;
    3d22:	e04a      	b.n	3dba <usb_isr+0x66e>
    3d24:	0000a074 	.word	0x0000a074
    3d28:	1fff0b78 	.word	0x1fff0b78
    3d2c:	1fff10ec 	.word	0x1fff10ec
    3d30:	1fff0f5e 	.word	0x1fff0f5e
    3d34:	400720c0 	.word	0x400720c0
    3d38:	40072094 	.word	0x40072094
    3d3c:	1fff0e64 	.word	0x1fff0e64
    3d40:	1fff10e4 	.word	0x1fff10e4
    3d44:	004000c8 	.word	0x004000c8
    3d48:	40072098 	.word	0x40072098
    3d4c:	1fff0fdc 	.word	0x1fff0fdc
    3d50:	00400088 	.word	0x00400088
    3d54:	1fff0000 	.word	0x1fff0000
    3d58:	40072088 	.word	0x40072088
    3d5c:	4007208c 	.word	0x4007208c
    3d60:	40072084 	.word	0x40072084
C:\Teensy\Projects\HelloWorld/usb_dev.c:1200
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    3d64:	0621      	lsls	r1, r4, #24
    3d66:	d504      	bpl.n	3d72 <usb_isr+0x626>
C:\Teensy\Projects\HelloWorld/usb_dev.c:1202
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3d68:	4b15      	ldr	r3, [pc, #84]	; (3dc0 <usb_isr+0x674>)
    3d6a:	220d      	movs	r2, #13
    3d6c:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1203
		USB0_ISTAT = USB_ISTAT_STALL;
    3d6e:	2380      	movs	r3, #128	; 0x80
    3d70:	702b      	strb	r3, [r5, #0]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1205
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    3d72:	07a2      	lsls	r2, r4, #30
    3d74:	d505      	bpl.n	3d82 <usb_isr+0x636>
C:\Teensy\Projects\HelloWorld/usb_dev.c:1206
		uint8_t err = USB0_ERRSTAT;
    3d76:	4b13      	ldr	r3, [pc, #76]	; (3dc4 <usb_isr+0x678>)
    3d78:	781a      	ldrb	r2, [r3, #0]
    3d7a:	b2d2      	uxtb	r2, r2
C:\Teensy\Projects\HelloWorld/usb_dev.c:1207
		USB0_ERRSTAT = err;
    3d7c:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1211
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    3d7e:	2302      	movs	r3, #2
    3d80:	702b      	strb	r3, [r5, #0]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1214
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    3d82:	06e3      	lsls	r3, r4, #27
C:\Teensy\Projects\HelloWorld/usb_dev.c:1216
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    3d84:	bf44      	itt	mi
    3d86:	2310      	movmi	r3, #16
    3d88:	702b      	strbmi	r3, [r5, #0]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1218
	}
	if(received)
    3d8a:	b1b6      	cbz	r6, 3dba <usb_isr+0x66e>
    3d8c:	2400      	movs	r4, #0
C:\Teensy\Projects\HelloWorld/usb_dev.c:1235 (discriminator 1)




		int i;
		for(i=0;i<stackSize;i++)
    3d8e:	4b0e      	ldr	r3, [pc, #56]	; (3dc8 <usb_isr+0x67c>)
    3d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3d92:	429c      	cmp	r4, r3
    3d94:	d209      	bcs.n	3daa <usb_isr+0x65e>
C:\Teensy\Projects\HelloWorld/usb_dev.c:1238 (discriminator 2)
		{
			//PrintWord(__builtin_extract_return_addr(sp[i]));
			PrintWord(sp[i]);
    3d96:	4b0d      	ldr	r3, [pc, #52]	; (3dcc <usb_isr+0x680>)
    3d98:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    3d9c:	f7ff fc6a 	bl	3674 <PrintWord>
C:\Teensy\Projects\HelloWorld/usb_dev.c:1239 (discriminator 2)
			usb_serial_putchar(' ');	
    3da0:	2020      	movs	r0, #32
    3da2:	f000 f99d 	bl	40e0 <usb_serial_putchar>
C:\Teensy\Projects\HelloWorld/usb_dev.c:1235 (discriminator 2)




		int i;
		for(i=0;i<stackSize;i++)
    3da6:	3401      	adds	r4, #1
    3da8:	e7f1      	b.n	3d8e <usb_isr+0x642>
C:\Teensy\Projects\HelloWorld/usb_dev.c:1241
		{
			//PrintWord(__builtin_extract_return_addr(sp[i]));
			PrintWord(sp[i]);
			usb_serial_putchar(' ');	
		}
		usb_serial_putchar('\n');
    3daa:	200a      	movs	r0, #10
    3dac:	f000 f998 	bl	40e0 <usb_serial_putchar>
C:\Teensy\Projects\HelloWorld/usb_dev.c:1297
		

		usb_serial_flush_input();
		//GPIOC_PDOR &= ~(1<<5);
	}
}
    3db0:	b003      	add	sp, #12
    3db2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
C:\Teensy\Projects\HelloWorld/usb_dev.c:1294
		// 	usb_serial_flush_output();	
		// }

		

		usb_serial_flush_input();
    3db6:	f000 b91f 	b.w	3ff8 <usb_serial_flush_input>
C:\Teensy\Projects\HelloWorld/usb_dev.c:1297
		//GPIOC_PDOR &= ~(1<<5);
	}
}
    3dba:	b003      	add	sp, #12
    3dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3dc0:	400720c0 	.word	0x400720c0
    3dc4:	40072088 	.word	0x40072088
    3dc8:	1fff0e64 	.word	0x1fff0e64
    3dcc:	1fff0fe4 	.word	0x1fff0fe4

00003dd0 <usb_init>:
usb_init():
C:\Teensy\Projects\HelloWorld/usb_dev.c:1302



void usb_init(void)
{
    3dd0:	b508      	push	{r3, lr}
C:\Teensy\Projects\HelloWorld/usb_dev.c:1308
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    3dd2:	f7ff fb17 	bl	3404 <usb_init_serialnumber>
    3dd6:	2200      	movs	r2, #0
C:\Teensy\Projects\HelloWorld/usb_dev.c:1311 (discriminator 2)

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3dd8:	4b1b      	ldr	r3, [pc, #108]	; (3e48 <usb_init+0x78>)
    3dda:	2100      	movs	r1, #0
    3ddc:	50d1      	str	r1, [r2, r3]
    3dde:	1898      	adds	r0, r3, r2
    3de0:	3208      	adds	r2, #8
C:\Teensy\Projects\HelloWorld/usb_dev.c:1310 (discriminator 2)
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    3de2:	2a88      	cmp	r2, #136	; 0x88
C:\Teensy\Projects\HelloWorld/usb_dev.c:1312 (discriminator 2)
		table[i].desc = 0;
		table[i].addr = 0;
    3de4:	6041      	str	r1, [r0, #4]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1310 (discriminator 2)
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    3de6:	d1f7      	bne.n	3dd8 <usb_init+0x8>
C:\Teensy\Projects\HelloWorld/usb_dev.c:1320
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3de8:	4a18      	ldr	r2, [pc, #96]	; (3e4c <usb_init+0x7c>)
    3dea:	6810      	ldr	r0, [r2, #0]
    3dec:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
    3df0:	6010      	str	r0, [r2, #0]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1322
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    3df2:	4a17      	ldr	r2, [pc, #92]	; (3e50 <usb_init+0x80>)
    3df4:	6810      	ldr	r0, [r2, #0]
    3df6:	f040 7040 	orr.w	r0, r0, #50331648	; 0x3000000
    3dfa:	6010      	str	r0, [r2, #0]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1335
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3dfc:	f502 22c9 	add.w	r2, r2, #411648	; 0x64800
    3e00:	329c      	adds	r2, #156	; 0x9c
    3e02:	f3c3 2007 	ubfx	r0, r3, #8, #8
    3e06:	7010      	strb	r0, [r2, #0]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1336
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3e08:	f3c3 4007 	ubfx	r0, r3, #16, #8
C:\Teensy\Projects\HelloWorld/usb_dev.c:1337
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3e0c:	0e1b      	lsrs	r3, r3, #24
C:\Teensy\Projects\HelloWorld/usb_dev.c:1336
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3e0e:	7510      	strb	r0, [r2, #20]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1337
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3e10:	7613      	strb	r3, [r2, #24]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1340

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    3e12:	23ff      	movs	r3, #255	; 0xff
    3e14:	f802 3c1c 	strb.w	r3, [r2, #-28]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1341
	USB0_ERRSTAT = 0xFF;
    3e18:	f802 3c14 	strb.w	r3, [r2, #-20]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1342
	USB0_OTGISTAT = 0xFF;
    3e1c:	f802 3c8c 	strb.w	r3, [r2, #-140]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1347

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    3e20:	2301      	movs	r3, #1
    3e22:	f802 3c08 	strb.w	r3, [r2, #-8]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1348
	USB0_USBCTRL = 0;
    3e26:	f882 1064 	strb.w	r1, [r2, #100]	; 0x64
C:\Teensy\Projects\HelloWorld/usb_dev.c:1351

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    3e2a:	f802 3c18 	strb.w	r3, [r2, #-24]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1354

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    3e2e:	4b09      	ldr	r3, [pc, #36]	; (3e54 <usb_init+0x84>)
    3e30:	2270      	movs	r2, #112	; 0x70
C:\Teensy\Projects\HelloWorld/usb_dev.c:1355
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3e32:	f46f 714c 	mvn.w	r1, #816	; 0x330
C:\Teensy\Projects\HelloWorld/usb_dev.c:1354

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    3e36:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1355
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3e38:	440b      	add	r3, r1
    3e3a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    3e3e:	601a      	str	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/usb_dev.c:1358

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    3e40:	4b05      	ldr	r3, [pc, #20]	; (3e58 <usb_init+0x88>)
    3e42:	2210      	movs	r2, #16
    3e44:	701a      	strb	r2, [r3, #0]
    3e46:	bd08      	pop	{r3, pc}
    3e48:	1fff0000 	.word	0x1fff0000
    3e4c:	40048034 	.word	0x40048034
    3e50:	4000d800 	.word	0x4000d800
    3e54:	e000e435 	.word	0xe000e435
    3e58:	40072108 	.word	0x40072108

00003e5c <usb_malloc>:
usb_malloc():
C:\Teensy\Projects\HelloWorld/usb_mem.c:53
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    3e5c:	b672      	cpsid	i
C:\Teensy\Projects\HelloWorld/usb_mem.c:54
	avail = usb_buffer_available;
    3e5e:	4a0c      	ldr	r2, [pc, #48]	; (3e90 <usb_malloc+0x34>)
    3e60:	6811      	ldr	r1, [r2, #0]
C:\Teensy\Projects\HelloWorld/usb_mem.c:55
	n = __builtin_clz(avail); // clz = count leading zeros
    3e62:	fab1 f381 	clz	r3, r1
C:\Teensy\Projects\HelloWorld/usb_mem.c:56
	if (n >= NUM_USB_BUFFERS) {
    3e66:	2b0b      	cmp	r3, #11
    3e68:	d902      	bls.n	3e70 <usb_malloc+0x14>
C:\Teensy\Projects\HelloWorld/usb_mem.c:57
		__enable_irq();
    3e6a:	b662      	cpsie	i
C:\Teensy\Projects\HelloWorld/usb_mem.c:58
		return NULL;
    3e6c:	2000      	movs	r0, #0
    3e6e:	4770      	bx	lr
C:\Teensy\Projects\HelloWorld/usb_mem.c:64
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    3e70:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    3e74:	40d8      	lsrs	r0, r3
    3e76:	ea21 0100 	bic.w	r1, r1, r0
    3e7a:	6011      	str	r1, [r2, #0]
C:\Teensy\Projects\HelloWorld/usb_mem.c:65
	__enable_irq();
    3e7c:	b662      	cpsie	i
C:\Teensy\Projects\HelloWorld/usb_mem.c:66
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    3e7e:	4905      	ldr	r1, [pc, #20]	; (3e94 <usb_malloc+0x38>)
    3e80:	2248      	movs	r2, #72	; 0x48
    3e82:	4353      	muls	r3, r2
    3e84:	18c8      	adds	r0, r1, r3
C:\Teensy\Projects\HelloWorld/usb_mem.c:70
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    3e86:	2200      	movs	r2, #0
    3e88:	50ca      	str	r2, [r1, r3]
C:\Teensy\Projects\HelloWorld/usb_mem.c:71
	*(uint32_t *)(p + 4) = 0;
    3e8a:	6042      	str	r2, [r0, #4]
C:\Teensy\Projects\HelloWorld/usb_mem.c:73
	return (usb_packet_t *)p;
}
    3e8c:	4770      	bx	lr
    3e8e:	bf00      	nop
    3e90:	1fff0ab0 	.word	0x1fff0ab0
    3e94:	1fff0400 	.word	0x1fff0400

00003e98 <usb_free>:
usb_free():
C:\Teensy\Projects\HelloWorld/usb_mem.c:84
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    3e98:	4b0c      	ldr	r3, [pc, #48]	; (3ecc <usb_free+0x34>)
    3e9a:	2248      	movs	r2, #72	; 0x48
    3e9c:	1ac3      	subs	r3, r0, r3
    3e9e:	fbb3 f3f2 	udiv	r3, r3, r2
C:\Teensy\Projects\HelloWorld/usb_mem.c:85
	if (n >= NUM_USB_BUFFERS) return;
    3ea2:	2b0b      	cmp	r3, #11
    3ea4:	d811      	bhi.n	3eca <usb_free+0x32>
C:\Teensy\Projects\HelloWorld/usb_mem.c:91
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    3ea6:	4a0a      	ldr	r2, [pc, #40]	; (3ed0 <usb_free+0x38>)
    3ea8:	7812      	ldrb	r2, [r2, #0]
    3eaa:	b122      	cbz	r2, 3eb6 <usb_free+0x1e>
C:\Teensy\Projects\HelloWorld/usb_mem.c:91 (discriminator 1)
    3eac:	4a09      	ldr	r2, [pc, #36]	; (3ed4 <usb_free+0x3c>)
    3eae:	7812      	ldrb	r2, [r2, #0]
    3eb0:	b10a      	cbz	r2, 3eb6 <usb_free+0x1e>
C:\Teensy\Projects\HelloWorld/usb_mem.c:95
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    3eb2:	f7ff bb3f 	b.w	3534 <usb_rx_memory>
C:\Teensy\Projects\HelloWorld/usb_mem.c:100
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    3eb6:	b672      	cpsid	i
C:\Teensy\Projects\HelloWorld/usb_mem.c:101
	usb_buffer_available |= mask;
    3eb8:	4a07      	ldr	r2, [pc, #28]	; (3ed8 <usb_free+0x40>)
C:\Teensy\Projects\HelloWorld/usb_mem.c:99
		//serial_print("\n");
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
    3eba:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    3ebe:	fa21 f303 	lsr.w	r3, r1, r3
C:\Teensy\Projects\HelloWorld/usb_mem.c:101
	__disable_irq();
	usb_buffer_available |= mask;
    3ec2:	6811      	ldr	r1, [r2, #0]
    3ec4:	4319      	orrs	r1, r3
    3ec6:	6011      	str	r1, [r2, #0]
C:\Teensy\Projects\HelloWorld/usb_mem.c:102
	__enable_irq();
    3ec8:	b662      	cpsie	i
    3eca:	4770      	bx	lr
    3ecc:	1fff0400 	.word	0x1fff0400
    3ed0:	1fff0e88 	.word	0x1fff0e88
    3ed4:	1fff0eac 	.word	0x1fff0eac
    3ed8:	1fff0ab0 	.word	0x1fff0ab0

00003edc <usb_serial_getchar>:
usb_serial_getchar():
C:\Teensy\Projects\HelloWorld/usb_serial.c:54

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    3edc:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/usb_serial.c:58
	unsigned int i;
	int c;

	if (!rx_packet) {
    3ede:	4c10      	ldr	r4, [pc, #64]	; (3f20 <usb_serial_getchar+0x44>)
    3ee0:	6823      	ldr	r3, [r4, #0]
    3ee2:	b16b      	cbz	r3, 3f00 <usb_serial_getchar+0x24>
C:\Teensy\Projects\HelloWorld/usb_serial.c:63
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    3ee4:	6820      	ldr	r0, [r4, #0]
    3ee6:	8842      	ldrh	r2, [r0, #2]
C:\Teensy\Projects\HelloWorld/usb_serial.c:64
	c = rx_packet->buf[i++];
    3ee8:	1c53      	adds	r3, r2, #1
    3eea:	4402      	add	r2, r0
    3eec:	7a14      	ldrb	r4, [r2, #8]
C:\Teensy\Projects\HelloWorld/usb_serial.c:65
	if (i >= rx_packet->len) {
    3eee:	8802      	ldrh	r2, [r0, #0]
    3ef0:	4293      	cmp	r3, r2
    3ef2:	d312      	bcc.n	3f1a <usb_serial_getchar+0x3e>
C:\Teensy\Projects\HelloWorld/usb_serial.c:66
		usb_free(rx_packet);
    3ef4:	f7ff ffd0 	bl	3e98 <usb_free>
C:\Teensy\Projects\HelloWorld/usb_serial.c:67
		rx_packet = NULL;
    3ef8:	4b09      	ldr	r3, [pc, #36]	; (3f20 <usb_serial_getchar+0x44>)
    3efa:	2200      	movs	r2, #0
    3efc:	601a      	str	r2, [r3, #0]
    3efe:	e00d      	b.n	3f1c <usb_serial_getchar+0x40>
C:\Teensy\Projects\HelloWorld/usb_serial.c:59
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    3f00:	4b08      	ldr	r3, [pc, #32]	; (3f24 <usb_serial_getchar+0x48>)
    3f02:	781b      	ldrb	r3, [r3, #0]
    3f04:	b913      	cbnz	r3, 3f0c <usb_serial_getchar+0x30>
    3f06:	f04f 30ff 	mov.w	r0, #4294967295
    3f0a:	bd10      	pop	{r4, pc}
C:\Teensy\Projects\HelloWorld/usb_serial.c:60
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    3f0c:	2003      	movs	r0, #3
    3f0e:	f7ff facd 	bl	34ac <usb_rx>
    3f12:	6020      	str	r0, [r4, #0]
C:\Teensy\Projects\HelloWorld/usb_serial.c:61
		if (!rx_packet) return -1;
    3f14:	2800      	cmp	r0, #0
    3f16:	d1e5      	bne.n	3ee4 <usb_serial_getchar+0x8>
    3f18:	e7f5      	b.n	3f06 <usb_serial_getchar+0x2a>
C:\Teensy\Projects\HelloWorld/usb_serial.c:69
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    3f1a:	8043      	strh	r3, [r0, #2]
C:\Teensy\Projects\HelloWorld/usb_serial.c:71
	}
	return c;
    3f1c:	4620      	mov	r0, r4
C:\Teensy\Projects\HelloWorld/usb_serial.c:72
}
    3f1e:	bd10      	pop	{r4, pc}
    3f20:	1fff0f50 	.word	0x1fff0f50
    3f24:	1fff0eac 	.word	0x1fff0eac

00003f28 <usb_serial_peekchar>:
usb_serial_peekchar():
C:\Teensy\Projects\HelloWorld/usb_serial.c:76

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    3f28:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/usb_serial.c:77
	if (!rx_packet) {
    3f2a:	4c0b      	ldr	r4, [pc, #44]	; (3f58 <usb_serial_peekchar+0x30>)
    3f2c:	6823      	ldr	r3, [r4, #0]
    3f2e:	b113      	cbz	r3, 3f36 <usb_serial_peekchar+0xe>
C:\Teensy\Projects\HelloWorld/usb_serial.c:82
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
    3f30:	6823      	ldr	r3, [r4, #0]
    3f32:	b96b      	cbnz	r3, 3f50 <usb_serial_peekchar+0x28>
    3f34:	e002      	b.n	3f3c <usb_serial_peekchar+0x14>
C:\Teensy\Projects\HelloWorld/usb_serial.c:78

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    3f36:	4b09      	ldr	r3, [pc, #36]	; (3f5c <usb_serial_peekchar+0x34>)
    3f38:	781b      	ldrb	r3, [r3, #0]
    3f3a:	b913      	cbnz	r3, 3f42 <usb_serial_peekchar+0x1a>
    3f3c:	f04f 30ff 	mov.w	r0, #4294967295
    3f40:	bd10      	pop	{r4, pc}
C:\Teensy\Projects\HelloWorld/usb_serial.c:79
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    3f42:	2003      	movs	r0, #3
    3f44:	f7ff fab2 	bl	34ac <usb_rx>
    3f48:	6020      	str	r0, [r4, #0]
C:\Teensy\Projects\HelloWorld/usb_serial.c:80
		if (!rx_packet) return -1;
    3f4a:	2800      	cmp	r0, #0
    3f4c:	d1f0      	bne.n	3f30 <usb_serial_peekchar+0x8>
    3f4e:	e7f5      	b.n	3f3c <usb_serial_peekchar+0x14>
C:\Teensy\Projects\HelloWorld/usb_serial.c:83
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    3f50:	885a      	ldrh	r2, [r3, #2]
    3f52:	4413      	add	r3, r2
    3f54:	7a18      	ldrb	r0, [r3, #8]
C:\Teensy\Projects\HelloWorld/usb_serial.c:84
}
    3f56:	bd10      	pop	{r4, pc}
    3f58:	1fff0f50 	.word	0x1fff0f50
    3f5c:	1fff0eac 	.word	0x1fff0eac

00003f60 <usb_serial_available>:
usb_rx_byte_count():
C:\Teensy\Projects\HelloWorld/usb_dev.h:67
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    3f60:	4b04      	ldr	r3, [pc, #16]	; (3f74 <usb_serial_available+0x14>)
usb_serial_available():
C:\Teensy\Projects\HelloWorld/usb_serial.c:90

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    3f62:	8898      	ldrh	r0, [r3, #4]
C:\Teensy\Projects\HelloWorld/usb_serial.c:91
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    3f64:	4b04      	ldr	r3, [pc, #16]	; (3f78 <usb_serial_available+0x18>)
    3f66:	681b      	ldr	r3, [r3, #0]
    3f68:	b11b      	cbz	r3, 3f72 <usb_serial_available+0x12>
C:\Teensy\Projects\HelloWorld/usb_serial.c:91 (discriminator 1)
    3f6a:	881a      	ldrh	r2, [r3, #0]
    3f6c:	885b      	ldrh	r3, [r3, #2]
    3f6e:	1ad3      	subs	r3, r2, r3
    3f70:	4418      	add	r0, r3
C:\Teensy\Projects\HelloWorld/usb_serial.c:93
	return count;
}
    3f72:	4770      	bx	lr
    3f74:	1fff0fdc 	.word	0x1fff0fdc
    3f78:	1fff0f50 	.word	0x1fff0f50

00003f7c <usb_serial_read>:
usb_serial_read():
C:\Teensy\Projects\HelloWorld/usb_serial.c:97

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    3f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3f80:	4680      	mov	r8, r0
    3f82:	460e      	mov	r6, r1
C:\Teensy\Projects\HelloWorld/usb_serial.c:99
	uint8_t *p = (uint8_t *)buffer;
	uint32_t qty, count=0;
    3f84:	2700      	movs	r7, #0
C:\Teensy\Projects\HelloWorld/usb_serial.c:101 (discriminator 1)

	while (size) {
    3f86:	2e00      	cmp	r6, #0
    3f88:	d02e      	beq.n	3fe8 <usb_serial_read+0x6c>
C:\Teensy\Projects\HelloWorld/usb_serial.c:102
		if (!usb_configuration) break;
    3f8a:	4b19      	ldr	r3, [pc, #100]	; (3ff0 <usb_serial_read+0x74>)
    3f8c:	781b      	ldrb	r3, [r3, #0]
    3f8e:	b35b      	cbz	r3, 3fe8 <usb_serial_read+0x6c>
C:\Teensy\Projects\HelloWorld/usb_serial.c:103
		if (!rx_packet) {
    3f90:	4c18      	ldr	r4, [pc, #96]	; (3ff4 <usb_serial_read+0x78>)
    3f92:	6823      	ldr	r3, [r4, #0]
    3f94:	4625      	mov	r5, r4
    3f96:	b94b      	cbnz	r3, 3fac <usb_serial_read+0x30>
C:\Teensy\Projects\HelloWorld/usb_serial.c:105
			rx:
			rx_packet = usb_rx(CDC_RX_ENDPOINT);
    3f98:	2003      	movs	r0, #3
    3f9a:	f7ff fa87 	bl	34ac <usb_rx>
    3f9e:	6028      	str	r0, [r5, #0]
C:\Teensy\Projects\HelloWorld/usb_serial.c:106
			if (!rx_packet) break;
    3fa0:	b310      	cbz	r0, 3fe8 <usb_serial_read+0x6c>
C:\Teensy\Projects\HelloWorld/usb_serial.c:107
			if (rx_packet->len == 0) {
    3fa2:	8803      	ldrh	r3, [r0, #0]
    3fa4:	b913      	cbnz	r3, 3fac <usb_serial_read+0x30>
C:\Teensy\Projects\HelloWorld/usb_serial.c:108
				usb_free(rx_packet);
    3fa6:	f7ff ff77 	bl	3e98 <usb_free>
C:\Teensy\Projects\HelloWorld/usb_serial.c:109
				goto rx;
    3faa:	e7f5      	b.n	3f98 <usb_serial_read+0x1c>
C:\Teensy\Projects\HelloWorld/usb_serial.c:112
			}
		}
		qty = rx_packet->len - rx_packet->index;
    3fac:	6824      	ldr	r4, [r4, #0]
    3fae:	8861      	ldrh	r1, [r4, #2]
    3fb0:	8825      	ldrh	r5, [r4, #0]
    3fb2:	1a6d      	subs	r5, r5, r1
    3fb4:	42ae      	cmp	r6, r5
    3fb6:	bf38      	it	cc
    3fb8:	4635      	movcc	r5, r6
C:\Teensy\Projects\HelloWorld/usb_serial.c:114
		if (qty > size) qty = size;
		memcpy(p, rx_packet->buf + rx_packet->index, qty);
    3fba:	3108      	adds	r1, #8
    3fbc:	4640      	mov	r0, r8
    3fbe:	462a      	mov	r2, r5
    3fc0:	4421      	add	r1, r4
    3fc2:	f002 fb69 	bl	6698 <memcpy>
C:\Teensy\Projects\HelloWorld/usb_serial.c:118
		p += qty;
		count += qty;
		size -= qty;
		rx_packet->index += qty;
    3fc6:	8863      	ldrh	r3, [r4, #2]
C:\Teensy\Projects\HelloWorld/usb_serial.c:115
			}
		}
		qty = rx_packet->len - rx_packet->index;
		if (qty > size) qty = size;
		memcpy(p, rx_packet->buf + rx_packet->index, qty);
		p += qty;
    3fc8:	44a8      	add	r8, r5
C:\Teensy\Projects\HelloWorld/usb_serial.c:116
		count += qty;
    3fca:	442f      	add	r7, r5
C:\Teensy\Projects\HelloWorld/usb_serial.c:117
		size -= qty;
    3fcc:	1b76      	subs	r6, r6, r5
C:\Teensy\Projects\HelloWorld/usb_serial.c:118
		rx_packet->index += qty;
    3fce:	441d      	add	r5, r3
C:\Teensy\Projects\HelloWorld/usb_serial.c:119
		if (rx_packet->index >= rx_packet->len) {
    3fd0:	8823      	ldrh	r3, [r4, #0]
C:\Teensy\Projects\HelloWorld/usb_serial.c:118
		if (qty > size) qty = size;
		memcpy(p, rx_packet->buf + rx_packet->index, qty);
		p += qty;
		count += qty;
		size -= qty;
		rx_packet->index += qty;
    3fd2:	b2ad      	uxth	r5, r5
C:\Teensy\Projects\HelloWorld/usb_serial.c:119
		if (rx_packet->index >= rx_packet->len) {
    3fd4:	42ab      	cmp	r3, r5
C:\Teensy\Projects\HelloWorld/usb_serial.c:118
		if (qty > size) qty = size;
		memcpy(p, rx_packet->buf + rx_packet->index, qty);
		p += qty;
		count += qty;
		size -= qty;
		rx_packet->index += qty;
    3fd6:	8065      	strh	r5, [r4, #2]
C:\Teensy\Projects\HelloWorld/usb_serial.c:119
		if (rx_packet->index >= rx_packet->len) {
    3fd8:	d8d5      	bhi.n	3f86 <usb_serial_read+0xa>
C:\Teensy\Projects\HelloWorld/usb_serial.c:120
			usb_free(rx_packet);
    3fda:	4620      	mov	r0, r4
    3fdc:	f7ff ff5c 	bl	3e98 <usb_free>
C:\Teensy\Projects\HelloWorld/usb_serial.c:121
			rx_packet = NULL;
    3fe0:	4b04      	ldr	r3, [pc, #16]	; (3ff4 <usb_serial_read+0x78>)
    3fe2:	2200      	movs	r2, #0
    3fe4:	601a      	str	r2, [r3, #0]
    3fe6:	e7ce      	b.n	3f86 <usb_serial_read+0xa>
C:\Teensy\Projects\HelloWorld/usb_serial.c:125
		}
	}
	return count;
}
    3fe8:	4638      	mov	r0, r7
    3fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3fee:	bf00      	nop
    3ff0:	1fff0eac 	.word	0x1fff0eac
    3ff4:	1fff0f50 	.word	0x1fff0f50

00003ff8 <usb_serial_flush_input>:
usb_serial_flush_input():
C:\Teensy\Projects\HelloWorld/usb_serial.c:129

// discard any buffered input
void usb_serial_flush_input(void)
{
    3ff8:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/usb_serial.c:132
	usb_packet_t *rx;

	if (!usb_configuration) return;
    3ffa:	4b09      	ldr	r3, [pc, #36]	; (4020 <usb_serial_flush_input+0x28>)
    3ffc:	781b      	ldrb	r3, [r3, #0]
    3ffe:	b16b      	cbz	r3, 401c <usb_serial_flush_input+0x24>
C:\Teensy\Projects\HelloWorld/usb_serial.c:133
	if (rx_packet) {
    4000:	4c08      	ldr	r4, [pc, #32]	; (4024 <usb_serial_flush_input+0x2c>)
    4002:	6820      	ldr	r0, [r4, #0]
    4004:	b118      	cbz	r0, 400e <usb_serial_flush_input+0x16>
C:\Teensy\Projects\HelloWorld/usb_serial.c:134
		usb_free(rx_packet);
    4006:	f7ff ff47 	bl	3e98 <usb_free>
C:\Teensy\Projects\HelloWorld/usb_serial.c:135
		rx_packet = NULL;
    400a:	2300      	movs	r3, #0
    400c:	6023      	str	r3, [r4, #0]
C:\Teensy\Projects\HelloWorld/usb_serial.c:138
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    400e:	2003      	movs	r0, #3
    4010:	f7ff fa4c 	bl	34ac <usb_rx>
C:\Teensy\Projects\HelloWorld/usb_serial.c:139
		if (!rx) break;
    4014:	b110      	cbz	r0, 401c <usb_serial_flush_input+0x24>
C:\Teensy\Projects\HelloWorld/usb_serial.c:140
		usb_free(rx);
    4016:	f7ff ff3f 	bl	3e98 <usb_free>
C:\Teensy\Projects\HelloWorld/usb_serial.c:141
	}
    401a:	e7f8      	b.n	400e <usb_serial_flush_input+0x16>
    401c:	bd10      	pop	{r4, pc}
    401e:	bf00      	nop
    4020:	1fff0eac 	.word	0x1fff0eac
    4024:	1fff0f50 	.word	0x1fff0f50

00004028 <usb_serial_write>:
usb_serial_write():
C:\Teensy\Projects\HelloWorld/usb_serial.c:191
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    4028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
C:\Teensy\Projects\HelloWorld/usb_serial.c:198
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    402c:	4c2a      	ldr	r4, [pc, #168]	; (40d8 <usb_serial_write+0xb0>)
    402e:	2301      	movs	r3, #1
C:\Teensy\Projects\HelloWorld/usb_serial.c:191
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    4030:	4606      	mov	r6, r0
    4032:	4688      	mov	r8, r1
C:\Teensy\Projects\HelloWorld/usb_serial.c:198
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    4034:	7123      	strb	r3, [r4, #4]
C:\Teensy\Projects\HelloWorld/usb_serial.c:199
	while (size > 0) {
    4036:	460d      	mov	r5, r1
C:\Teensy\Projects\HelloWorld/usb_serial.c:199 (discriminator 1)
    4038:	2d00      	cmp	r5, #0
    403a:	d048      	beq.n	40ce <usb_serial_write+0xa6>
C:\Teensy\Projects\HelloWorld/usb_serial.c:200
		if (!tx_packet) {
    403c:	68a3      	ldr	r3, [r4, #8]
    403e:	bb13      	cbnz	r3, 4086 <usb_serial_write+0x5e>
    4040:	f24d 07e9 	movw	r7, #53481	; 0xd0e9
C:\Teensy\Projects\HelloWorld/usb_serial.c:203
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    4044:	4b25      	ldr	r3, [pc, #148]	; (40dc <usb_serial_write+0xb4>)
    4046:	781b      	ldrb	r3, [r3, #0]
    4048:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    404c:	b90b      	cbnz	r3, 4052 <usb_serial_write+0x2a>
C:\Teensy\Projects\HelloWorld/usb_serial.c:204
					tx_noautoflush = 0;
    404e:	7122      	strb	r2, [r4, #4]
    4050:	e012      	b.n	4078 <usb_serial_write+0x50>
C:\Teensy\Projects\HelloWorld/usb_serial.c:207
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    4052:	2004      	movs	r0, #4
    4054:	f7ff fa5a 	bl	350c <usb_tx_packet_count>
    4058:	2807      	cmp	r0, #7
    405a:	d807      	bhi.n	406c <usb_serial_write+0x44>
C:\Teensy\Projects\HelloWorld/usb_serial.c:208
					tx_noautoflush = 1;
    405c:	2301      	movs	r3, #1
    405e:	7123      	strb	r3, [r4, #4]
C:\Teensy\Projects\HelloWorld/usb_serial.c:209
					tx_packet = usb_malloc();
    4060:	f7ff fefc 	bl	3e5c <usb_malloc>
    4064:	60a0      	str	r0, [r4, #8]
C:\Teensy\Projects\HelloWorld/usb_serial.c:210
					if (tx_packet) break;
    4066:	b970      	cbnz	r0, 4086 <usb_serial_write+0x5e>
C:\Teensy\Projects\HelloWorld/usb_serial.c:211
					tx_noautoflush = 0;
    4068:	4b1b      	ldr	r3, [pc, #108]	; (40d8 <usb_serial_write+0xb0>)
    406a:	7118      	strb	r0, [r3, #4]
C:\Teensy\Projects\HelloWorld/usb_serial.c:213
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    406c:	3f01      	subs	r7, #1
    406e:	d001      	beq.n	4074 <usb_serial_write+0x4c>
C:\Teensy\Projects\HelloWorld/usb_serial.c:213 (discriminator 1)
    4070:	7b23      	ldrb	r3, [r4, #12]
    4072:	b12b      	cbz	r3, 4080 <usb_serial_write+0x58>
C:\Teensy\Projects\HelloWorld/usb_serial.c:214
					transmit_previous_timeout = 1;
    4074:	2301      	movs	r3, #1
    4076:	7323      	strb	r3, [r4, #12]
C:\Teensy\Projects\HelloWorld/usb_serial.c:215
					return -1;
    4078:	f04f 30ff 	mov.w	r0, #4294967295
    407c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
C:\Teensy\Projects\HelloWorld/usb_serial.c:217
				}
				yield();
    4080:	f001 fa66 	bl	5550 <yield>
C:\Teensy\Projects\HelloWorld/usb_serial.c:218
			}
    4084:	e7de      	b.n	4044 <usb_serial_write+0x1c>
C:\Teensy\Projects\HelloWorld/usb_serial.c:221
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    4086:	68a3      	ldr	r3, [r4, #8]
    4088:	8859      	ldrh	r1, [r3, #2]
    408a:	f1c1 0740 	rsb	r7, r1, #64	; 0x40
    408e:	42bd      	cmp	r5, r7
    4090:	bf38      	it	cc
    4092:	462f      	movcc	r7, r5
C:\Teensy\Projects\HelloWorld/usb_serial.c:223
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    4094:	f101 0008 	add.w	r0, r1, #8
C:\Teensy\Projects\HelloWorld/usb_serial.c:220
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    4098:	2200      	movs	r2, #0
C:\Teensy\Projects\HelloWorld/usb_serial.c:224
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    409a:	4439      	add	r1, r7
C:\Teensy\Projects\HelloWorld/usb_serial.c:220
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    409c:	7322      	strb	r2, [r4, #12]
C:\Teensy\Projects\HelloWorld/usb_serial.c:223
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    409e:	4418      	add	r0, r3
C:\Teensy\Projects\HelloWorld/usb_serial.c:224
		tx_packet->index += len;
    40a0:	8059      	strh	r1, [r3, #2]
C:\Teensy\Projects\HelloWorld/usb_serial.c:225
		size -= len;
    40a2:	1bed      	subs	r5, r5, r7
C:\Teensy\Projects\HelloWorld/usb_serial.c:226 (discriminator 1)
		while (len-- > 0) *dest++ = *src++;
    40a4:	42ba      	cmp	r2, r7
    40a6:	d003      	beq.n	40b0 <usb_serial_write+0x88>
C:\Teensy\Projects\HelloWorld/usb_serial.c:226 (discriminator 2)
    40a8:	5cb1      	ldrb	r1, [r6, r2]
    40aa:	5481      	strb	r1, [r0, r2]
    40ac:	3201      	adds	r2, #1
    40ae:	e7f9      	b.n	40a4 <usb_serial_write+0x7c>
    40b0:	4416      	add	r6, r2
C:\Teensy\Projects\HelloWorld/usb_serial.c:227
		if (tx_packet->index >= CDC_TX_SIZE) {
    40b2:	885a      	ldrh	r2, [r3, #2]
    40b4:	2a3f      	cmp	r2, #63	; 0x3f
    40b6:	d907      	bls.n	40c8 <usb_serial_write+0xa0>
C:\Teensy\Projects\HelloWorld/usb_serial.c:228
			tx_packet->len = CDC_TX_SIZE;
    40b8:	2240      	movs	r2, #64	; 0x40
    40ba:	801a      	strh	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/usb_serial.c:229
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    40bc:	4619      	mov	r1, r3
    40be:	2004      	movs	r0, #4
    40c0:	f7ff fa76 	bl	35b0 <usb_tx>
C:\Teensy\Projects\HelloWorld/usb_serial.c:230
			tx_packet = NULL;
    40c4:	2300      	movs	r3, #0
    40c6:	60a3      	str	r3, [r4, #8]
C:\Teensy\Projects\HelloWorld/usb_serial.c:232
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    40c8:	2305      	movs	r3, #5
    40ca:	7363      	strb	r3, [r4, #13]
    40cc:	e7b4      	b.n	4038 <usb_serial_write+0x10>
C:\Teensy\Projects\HelloWorld/usb_serial.c:234
	}
	tx_noautoflush = 0;
    40ce:	7125      	strb	r5, [r4, #4]
C:\Teensy\Projects\HelloWorld/usb_serial.c:235
	return ret;
    40d0:	4640      	mov	r0, r8
C:\Teensy\Projects\HelloWorld/usb_serial.c:236
}
    40d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    40d6:	bf00      	nop
    40d8:	1fff0f50 	.word	0x1fff0f50
    40dc:	1fff0eac 	.word	0x1fff0eac

000040e0 <usb_serial_putchar>:
usb_serial_putchar():
C:\Teensy\Projects\HelloWorld/usb_serial.c:185
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    40e0:	b507      	push	{r0, r1, r2, lr}
    40e2:	ab02      	add	r3, sp, #8
C:\Teensy\Projects\HelloWorld/usb_serial.c:186
	return usb_serial_write(&c, 1);
    40e4:	2101      	movs	r1, #1
C:\Teensy\Projects\HelloWorld/usb_serial.c:185
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    40e6:	f803 0d01 	strb.w	r0, [r3, #-1]!
C:\Teensy\Projects\HelloWorld/usb_serial.c:186
	return usb_serial_write(&c, 1);
    40ea:	4618      	mov	r0, r3
    40ec:	f7ff ff9c 	bl	4028 <usb_serial_write>
C:\Teensy\Projects\HelloWorld/usb_serial.c:187
}
    40f0:	b003      	add	sp, #12
    40f2:	f85d fb04 	ldr.w	pc, [sp], #4

000040f6 <usb_serial_write_buffer_free>:
usb_serial_write_buffer_free():
C:\Teensy\Projects\HelloWorld/usb_serial.c:239
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    40f6:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/usb_serial.c:242
	uint32_t len;

	tx_noautoflush = 1;
    40f8:	4c0d      	ldr	r4, [pc, #52]	; (4130 <usb_serial_write_buffer_free+0x3a>)
    40fa:	2301      	movs	r3, #1
    40fc:	7123      	strb	r3, [r4, #4]
C:\Teensy\Projects\HelloWorld/usb_serial.c:243
	if (!tx_packet) {
    40fe:	68a3      	ldr	r3, [r4, #8]
    4100:	b97b      	cbnz	r3, 4122 <usb_serial_write_buffer_free+0x2c>
C:\Teensy\Projects\HelloWorld/usb_serial.c:244
		if (!usb_configuration ||
    4102:	4b0c      	ldr	r3, [pc, #48]	; (4134 <usb_serial_write_buffer_free+0x3e>)
    4104:	781b      	ldrb	r3, [r3, #0]
    4106:	b913      	cbnz	r3, 410e <usb_serial_write_buffer_free+0x18>
C:\Teensy\Projects\HelloWorld/usb_serial.c:247
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    4108:	2000      	movs	r0, #0
    410a:	7120      	strb	r0, [r4, #4]
C:\Teensy\Projects\HelloWorld/usb_serial.c:248
			return 0;
    410c:	bd10      	pop	{r4, pc}
C:\Teensy\Projects\HelloWorld/usb_serial.c:245 (discriminator 1)
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    410e:	2004      	movs	r0, #4
    4110:	f7ff f9fc 	bl	350c <usb_tx_packet_count>
C:\Teensy\Projects\HelloWorld/usb_serial.c:244 (discriminator 1)
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    4114:	2807      	cmp	r0, #7
    4116:	d8f7      	bhi.n	4108 <usb_serial_write_buffer_free+0x12>
C:\Teensy\Projects\HelloWorld/usb_serial.c:246
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    4118:	f7ff fea0 	bl	3e5c <usb_malloc>
    411c:	60a0      	str	r0, [r4, #8]
C:\Teensy\Projects\HelloWorld/usb_serial.c:245
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    411e:	2800      	cmp	r0, #0
    4120:	d0f2      	beq.n	4108 <usb_serial_write_buffer_free+0x12>
C:\Teensy\Projects\HelloWorld/usb_serial.c:251
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    4122:	68a3      	ldr	r3, [r4, #8]
    4124:	8858      	ldrh	r0, [r3, #2]
C:\Teensy\Projects\HelloWorld/usb_serial.c:259
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    4126:	2300      	movs	r3, #0
    4128:	7123      	strb	r3, [r4, #4]
C:\Teensy\Projects\HelloWorld/usb_serial.c:251
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    412a:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
C:\Teensy\Projects\HelloWorld/usb_serial.c:261
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    412e:	bd10      	pop	{r4, pc}
    4130:	1fff0f50 	.word	0x1fff0f50
    4134:	1fff0eac 	.word	0x1fff0eac

00004138 <usb_serial_flush_output>:
usb_serial_flush_output():
C:\Teensy\Projects\HelloWorld/usb_serial.c:264

void usb_serial_flush_output(void)
{
    4138:	b570      	push	{r4, r5, r6, lr}
C:\Teensy\Projects\HelloWorld/usb_serial.c:265
	if (!usb_configuration) return;
    413a:	4b0f      	ldr	r3, [pc, #60]	; (4178 <usb_serial_flush_output+0x40>)
    413c:	781b      	ldrb	r3, [r3, #0]
    413e:	b1d3      	cbz	r3, 4176 <usb_serial_flush_output+0x3e>
C:\Teensy\Projects\HelloWorld/usb_serial.c:266
	tx_noautoflush = 1;
    4140:	4c0e      	ldr	r4, [pc, #56]	; (417c <usb_serial_flush_output+0x44>)
C:\Teensy\Projects\HelloWorld/usb_serial.c:267
	if (tx_packet) {
    4142:	68a5      	ldr	r5, [r4, #8]
C:\Teensy\Projects\HelloWorld/usb_serial.c:266
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    4144:	2601      	movs	r6, #1
    4146:	7126      	strb	r6, [r4, #4]
C:\Teensy\Projects\HelloWorld/usb_serial.c:267
	if (tx_packet) {
    4148:	b14d      	cbz	r5, 415e <usb_serial_flush_output+0x26>
C:\Teensy\Projects\HelloWorld/usb_serial.c:268
		usb_cdc_transmit_flush_timer = 0;
    414a:	2600      	movs	r6, #0
C:\Teensy\Projects\HelloWorld/usb_serial.c:269
		tx_packet->len = tx_packet->index;
    414c:	886b      	ldrh	r3, [r5, #2]
C:\Teensy\Projects\HelloWorld/usb_serial.c:268
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    414e:	7366      	strb	r6, [r4, #13]
C:\Teensy\Projects\HelloWorld/usb_serial.c:270
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    4150:	2004      	movs	r0, #4
C:\Teensy\Projects\HelloWorld/usb_serial.c:269
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    4152:	802b      	strh	r3, [r5, #0]
C:\Teensy\Projects\HelloWorld/usb_serial.c:270
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    4154:	4629      	mov	r1, r5
    4156:	f7ff fa2b 	bl	35b0 <usb_tx>
C:\Teensy\Projects\HelloWorld/usb_serial.c:271
		tx_packet = NULL;
    415a:	60a6      	str	r6, [r4, #8]
    415c:	e009      	b.n	4172 <usb_serial_flush_output+0x3a>
C:\Teensy\Projects\HelloWorld/usb_serial.c:273
	} else {
		usb_packet_t *tx = usb_malloc();
    415e:	f7ff fe7d 	bl	3e5c <usb_malloc>
C:\Teensy\Projects\HelloWorld/usb_serial.c:274
		if (tx) {
    4162:	4601      	mov	r1, r0
    4164:	b120      	cbz	r0, 4170 <usb_serial_flush_output+0x38>
C:\Teensy\Projects\HelloWorld/usb_serial.c:276
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    4166:	2004      	movs	r0, #4
C:\Teensy\Projects\HelloWorld/usb_serial.c:275
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    4168:	7365      	strb	r5, [r4, #13]
C:\Teensy\Projects\HelloWorld/usb_serial.c:276
			usb_tx(CDC_TX_ENDPOINT, tx);
    416a:	f7ff fa21 	bl	35b0 <usb_tx>
    416e:	e000      	b.n	4172 <usb_serial_flush_output+0x3a>
C:\Teensy\Projects\HelloWorld/usb_serial.c:278
		} else {
			usb_cdc_transmit_flush_timer = 1;
    4170:	7366      	strb	r6, [r4, #13]
C:\Teensy\Projects\HelloWorld/usb_serial.c:281
		}
	}
	tx_noautoflush = 0;
    4172:	2300      	movs	r3, #0
    4174:	7123      	strb	r3, [r4, #4]
    4176:	bd70      	pop	{r4, r5, r6, pc}
    4178:	1fff0eac 	.word	0x1fff0eac
    417c:	1fff0f50 	.word	0x1fff0f50

00004180 <usb_serial_flush_callback>:
usb_serial_flush_callback():
C:\Teensy\Projects\HelloWorld/usb_serial.c:285
}

void usb_serial_flush_callback(void)
{
    4180:	b538      	push	{r3, r4, r5, lr}
C:\Teensy\Projects\HelloWorld/usb_serial.c:286
	if (tx_noautoflush) return;
    4182:	4c0d      	ldr	r4, [pc, #52]	; (41b8 <usb_serial_flush_callback+0x38>)
    4184:	7923      	ldrb	r3, [r4, #4]
    4186:	f003 05ff 	and.w	r5, r3, #255	; 0xff
    418a:	b99b      	cbnz	r3, 41b4 <usb_serial_flush_callback+0x34>
C:\Teensy\Projects\HelloWorld/usb_serial.c:287
	if (tx_packet) {
    418c:	68a1      	ldr	r1, [r4, #8]
    418e:	b131      	cbz	r1, 419e <usb_serial_flush_callback+0x1e>
C:\Teensy\Projects\HelloWorld/usb_serial.c:288
		tx_packet->len = tx_packet->index;
    4190:	884b      	ldrh	r3, [r1, #2]
    4192:	800b      	strh	r3, [r1, #0]
C:\Teensy\Projects\HelloWorld/usb_serial.c:289
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    4194:	2004      	movs	r0, #4
    4196:	f7ff fa0b 	bl	35b0 <usb_tx>
C:\Teensy\Projects\HelloWorld/usb_serial.c:290
		tx_packet = NULL;
    419a:	60a5      	str	r5, [r4, #8]
    419c:	bd38      	pop	{r3, r4, r5, pc}
C:\Teensy\Projects\HelloWorld/usb_serial.c:292
	} else {
		usb_packet_t *tx = usb_malloc();
    419e:	f7ff fe5d 	bl	3e5c <usb_malloc>
C:\Teensy\Projects\HelloWorld/usb_serial.c:293
		if (tx) {
    41a2:	4601      	mov	r1, r0
    41a4:	b120      	cbz	r0, 41b0 <usb_serial_flush_callback+0x30>
C:\Teensy\Projects\HelloWorld/usb_serial.c:294
			usb_tx(CDC_TX_ENDPOINT, tx);
    41a6:	2004      	movs	r0, #4
C:\Teensy\Projects\HelloWorld/usb_serial.c:299
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    41a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
C:\Teensy\Projects\HelloWorld/usb_serial.c:294
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    41ac:	f7ff ba00 	b.w	35b0 <usb_tx>
C:\Teensy\Projects\HelloWorld/usb_serial.c:296
		} else {
			usb_cdc_transmit_flush_timer = 1;
    41b0:	2301      	movs	r3, #1
    41b2:	7363      	strb	r3, [r4, #13]
    41b4:	bd38      	pop	{r3, r4, r5, pc}
    41b6:	bf00      	nop
    41b8:	1fff0f50 	.word	0x1fff0f50

000041bc <_ZN5Print5writeEPKc>:
_ZN5Print5writeEPKc():
C:\Teensy\Projects\HelloWorld/Print.h:52
class Print
{
  public:
	Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    41bc:	b538      	push	{r3, r4, r5, lr}
    41be:	4604      	mov	r4, r0
    41c0:	4608      	mov	r0, r1
    41c2:	460d      	mov	r5, r1
    41c4:	f002 fb65 	bl	6892 <strlen>
    41c8:	6823      	ldr	r3, [r4, #0]
    41ca:	4602      	mov	r2, r0
    41cc:	685b      	ldr	r3, [r3, #4]
    41ce:	4620      	mov	r0, r4
    41d0:	4629      	mov	r1, r5
    41d2:	4798      	blx	r3
    41d4:	bd38      	pop	{r3, r4, r5, pc}

000041d6 <_Z12serialEvent1v>:
_Z12serialEvent1v():
C:\Teensy\Projects\HelloWorld/HardwareSerial1.cpp:6
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    41d6:	4770      	bx	lr

000041d8 <_ZN14HardwareSerial5writeEm>:
_ZN14HardwareSerial5writeEm():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:260
	virtual int read(void)          { return serial_getchar(); }
	virtual void flush(void)        { serial_flush(); }
	virtual void clear(void)	{ serial_clear(); }
	virtual int availableForWrite(void) { return serial_write_buffer_free(); }
	virtual size_t write(uint8_t c) { serial_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    41d8:	b508      	push	{r3, lr}
    41da:	6803      	ldr	r3, [r0, #0]
    41dc:	b2c9      	uxtb	r1, r1
    41de:	681b      	ldr	r3, [r3, #0]
    41e0:	4798      	blx	r3
    41e2:	bd08      	pop	{r3, pc}

000041e4 <_ZN14HardwareSerial5writeEl>:
_ZN14HardwareSerial5writeEl():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:261
	virtual size_t write(long n)            { return write((uint8_t)n); }
    41e4:	b508      	push	{r3, lr}
    41e6:	6803      	ldr	r3, [r0, #0]
    41e8:	b2c9      	uxtb	r1, r1
    41ea:	681b      	ldr	r3, [r3, #0]
    41ec:	4798      	blx	r3
    41ee:	bd08      	pop	{r3, pc}

000041f0 <_ZN14HardwareSerial5writeEj>:
_ZN14HardwareSerial5writeEj():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:262
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    41f0:	b508      	push	{r3, lr}
    41f2:	6803      	ldr	r3, [r0, #0]
    41f4:	b2c9      	uxtb	r1, r1
    41f6:	681b      	ldr	r3, [r3, #0]
    41f8:	4798      	blx	r3
    41fa:	bd08      	pop	{r3, pc}

000041fc <_ZN14HardwareSerial5writeEi>:
_ZN14HardwareSerial5writeEi():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:263
	virtual size_t write(int n)             { return write((uint8_t)n); }
    41fc:	b508      	push	{r3, lr}
    41fe:	6803      	ldr	r3, [r0, #0]
    4200:	b2c9      	uxtb	r1, r1
    4202:	681b      	ldr	r3, [r3, #0]
    4204:	4798      	blx	r3
    4206:	bd08      	pop	{r3, pc}

00004208 <_ZN14HardwareSerial5beginEm>:
_ZN14HardwareSerial5beginEm():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:243
#ifdef __cplusplus
#include "Stream.h"
class HardwareSerial : public Stream
{
public:
	virtual void begin(uint32_t baud) { serial_begin(BAUD2DIV(baud)); }
    4208:	4803      	ldr	r0, [pc, #12]	; (4218 <_ZN14HardwareSerial5beginEm+0x10>)
    420a:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    420e:	fbb0 f0f1 	udiv	r0, r0, r1
    4212:	f7fd b969 	b.w	14e8 <serial_begin>
    4216:	bf00      	nop
    4218:	0e4e1c00 	.word	0x0e4e1c00

0000421c <_ZN14HardwareSerial5beginEmm>:
_ZN14HardwareSerial5beginEmm():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:244
	virtual void begin(uint32_t baud, uint32_t format) {
    421c:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:245
					  serial_begin(BAUD2DIV(baud));
    421e:	4806      	ldr	r0, [pc, #24]	; (4238 <_ZN14HardwareSerial5beginEmm+0x1c>)
    4220:	eb00 0051 	add.w	r0, r0, r1, lsr #1
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:244
#include "Stream.h"
class HardwareSerial : public Stream
{
public:
	virtual void begin(uint32_t baud) { serial_begin(BAUD2DIV(baud)); }
	virtual void begin(uint32_t baud, uint32_t format) {
    4224:	4614      	mov	r4, r2
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:245
					  serial_begin(BAUD2DIV(baud));
    4226:	fbb0 f0f1 	udiv	r0, r0, r1
    422a:	f7fd f95d 	bl	14e8 <serial_begin>
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:246
					  serial_format(format); }
    422e:	4620      	mov	r0, r4
    4230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4234:	f7fd b9bc 	b.w	15b0 <serial_format>
    4238:	0e4e1c00 	.word	0x0e4e1c00

0000423c <_ZN14HardwareSerial3endEv>:
_ZN14HardwareSerial3endEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:247
	virtual void end(void)		{ serial_end(); }
    423c:	f7fd b9ee 	b.w	161c <serial_end>

00004240 <_ZN14HardwareSerial17transmitterEnableEh>:
_ZN14HardwareSerial17transmitterEnableEh():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:248
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
    4240:	4608      	mov	r0, r1
    4242:	f7fd ba15 	b.w	1670 <serial_set_transmit_pin>

00004246 <_ZN14HardwareSerial5setRXEh>:
_ZN14HardwareSerial5setRXEh():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:249
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
    4246:	4608      	mov	r0, r1
    4248:	f7fd ba6e 	b.w	1728 <serial_set_rx>

0000424c <_ZN14HardwareSerial5setTXEhb>:
_ZN14HardwareSerial5setTXEhb():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:250
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
    424c:	4608      	mov	r0, r1
    424e:	4611      	mov	r1, r2
    4250:	f7fd ba28 	b.w	16a4 <serial_set_tx>

00004254 <_ZN14HardwareSerial9attachRtsEh>:
_ZN14HardwareSerial9attachRtsEh():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:251
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
    4254:	b508      	push	{r3, lr}
    4256:	4608      	mov	r0, r1
    4258:	f7fd fa9a 	bl	1790 <serial_set_rts>
    425c:	3000      	adds	r0, #0
    425e:	bf18      	it	ne
    4260:	2001      	movne	r0, #1
    4262:	bd08      	pop	{r3, pc}

00004264 <_ZN14HardwareSerial9attachCtsEh>:
_ZN14HardwareSerial9attachCtsEh():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:252
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
    4264:	b508      	push	{r3, lr}
    4266:	4608      	mov	r0, r1
    4268:	f7fd fab4 	bl	17d4 <serial_set_cts>
    426c:	3000      	adds	r0, #0
    426e:	bf18      	it	ne
    4270:	2001      	movne	r0, #1
    4272:	bd08      	pop	{r3, pc}

00004274 <_ZN14HardwareSerial9availableEv>:
_ZN14HardwareSerial9availableEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:253
	virtual int available(void)     { return serial_available(); }
    4274:	f7fd bb82 	b.w	197c <serial_available>

00004278 <_ZN14HardwareSerial4peekEv>:
_ZN14HardwareSerial4peekEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:254
	virtual int peek(void)          { return serial_peek(); }
    4278:	f7fd bbae 	b.w	19d8 <serial_peek>

0000427c <_ZN14HardwareSerial4readEv>:
_ZN14HardwareSerial4readEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:255
	virtual int read(void)          { return serial_getchar(); }
    427c:	f7fd bb8a 	b.w	1994 <serial_getchar>

00004280 <_ZN14HardwareSerial5flushEv>:
_ZN14HardwareSerial5flushEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:256
	virtual void flush(void)        { serial_flush(); }
    4280:	f7fd bb64 	b.w	194c <serial_flush>

00004284 <_ZN14HardwareSerial5clearEv>:
_ZN14HardwareSerial5clearEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:257
	virtual void clear(void)	{ serial_clear(); }
    4284:	f7fd bbbc 	b.w	1a00 <serial_clear>

00004288 <_ZN14HardwareSerial17availableForWriteEv>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:258
	virtual int availableForWrite(void) { return serial_write_buffer_free(); }
    4288:	f7fd bb6a 	b.w	1960 <serial_write_buffer_free>

0000428c <_ZN14HardwareSerial5writeEh>:
_ZN14HardwareSerial5writeEh():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:259
	virtual size_t write(uint8_t c) { serial_putchar(c); return 1; }
    428c:	b508      	push	{r3, lr}
    428e:	4608      	mov	r0, r1
    4290:	f7fd fac6 	bl	1820 <serial_putchar>
    4294:	2001      	movs	r0, #1
    4296:	bd08      	pop	{r3, pc}

00004298 <_ZN14HardwareSerial9write9bitEm>:
_ZN14HardwareSerial9write9bitEm():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:269
	virtual size_t write(const uint8_t *buffer, size_t size)
					{ serial_write(buffer, size); return size; }
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
					  serial_write((const uint8_t *)str, len);
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial_putchar(c); return 1; }
    4298:	b508      	push	{r3, lr}
    429a:	4608      	mov	r0, r1
    429c:	f7fd fac0 	bl	1820 <serial_putchar>
    42a0:	2001      	movs	r0, #1
    42a2:	bd08      	pop	{r3, pc}

000042a4 <_ZN14HardwareSerial5writeEPKhj>:
_ZN14HardwareSerial5writeEPKhj():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:264
	virtual size_t write(uint8_t c) { serial_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
    42a4:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:265
					{ serial_write(buffer, size); return size; }
    42a6:	4608      	mov	r0, r1
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:264
	virtual size_t write(uint8_t c) { serial_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
    42a8:	4614      	mov	r4, r2
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:265
					{ serial_write(buffer, size); return size; }
    42aa:	4611      	mov	r1, r2
    42ac:	f7fd fafe 	bl	18ac <serial_write>
    42b0:	4620      	mov	r0, r4
    42b2:	bd10      	pop	{r4, pc}

000042b4 <_ZN14HardwareSerial5writeEPKc>:
_ZN14HardwareSerial5writeEPKc():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:266
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
    42b4:	b538      	push	{r3, r4, r5, lr}
    42b6:	4608      	mov	r0, r1
    42b8:	460d      	mov	r5, r1
    42ba:	f002 faea 	bl	6892 <strlen>
    42be:	4604      	mov	r4, r0
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:267
					  serial_write((const uint8_t *)str, len);
    42c0:	4621      	mov	r1, r4
    42c2:	4628      	mov	r0, r5
    42c4:	f7fd faf2 	bl	18ac <serial_write>
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:268
					  return len; }
    42c8:	4620      	mov	r0, r4
    42ca:	bd38      	pop	{r3, r4, r5, pc}

000042cc <_GLOBAL__sub_I_Serial1>:
Print():
C:\Teensy\Projects\HelloWorld/Print.h:50
class __FlashStringHelper;

class Print
{
  public:
	Print() : write_error(0) {}
    42cc:	4b04      	ldr	r3, [pc, #16]	; (42e0 <_GLOBAL__sub_I_Serial1+0x14>)
    42ce:	2200      	movs	r2, #0
    42d0:	711a      	strb	r2, [r3, #4]
Stream():
C:\Teensy\Projects\HelloWorld/Stream.h:30
#include "WString.h"

class Stream : public Print
{
  public:
	Stream() : _timeout(1000), read_error(0) {}
    42d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    42d6:	731a      	strb	r2, [r3, #12]
HardwareSerial():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:240

// C++ interface
//
#ifdef __cplusplus
#include "Stream.h"
class HardwareSerial : public Stream
    42d8:	4a02      	ldr	r2, [pc, #8]	; (42e4 <_GLOBAL__sub_I_Serial1+0x18>)
Stream():
C:\Teensy\Projects\HelloWorld/Stream.h:30
    42da:	6099      	str	r1, [r3, #8]
HardwareSerial():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:240
    42dc:	601a      	str	r2, [r3, #0]
    42de:	4770      	bx	lr
    42e0:	1fff0f60 	.word	0x1fff0f60
    42e4:	0000a0c8 	.word	0x0000a0c8

000042e8 <_Z12serialEvent2v>:
_Z12serialEvent2v():
C:\Teensy\Projects\HelloWorld/HardwareSerial2.cpp:6
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    42e8:	4770      	bx	lr

000042ea <_ZN15HardwareSerial25writeEm>:
_ZN15HardwareSerial25writeEm():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:295
	virtual int read(void)          { return serial2_getchar(); }
	virtual void flush(void)        { serial2_flush(); }
	virtual void clear(void)	{ serial2_clear(); }
	virtual int availableForWrite(void) { return serial2_write_buffer_free(); }
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    42ea:	b508      	push	{r3, lr}
    42ec:	6803      	ldr	r3, [r0, #0]
    42ee:	b2c9      	uxtb	r1, r1
    42f0:	681b      	ldr	r3, [r3, #0]
    42f2:	4798      	blx	r3
    42f4:	bd08      	pop	{r3, pc}

000042f6 <_ZN15HardwareSerial25writeEl>:
_ZN15HardwareSerial25writeEl():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:296
	virtual size_t write(long n)            { return write((uint8_t)n); }
    42f6:	b508      	push	{r3, lr}
    42f8:	6803      	ldr	r3, [r0, #0]
    42fa:	b2c9      	uxtb	r1, r1
    42fc:	681b      	ldr	r3, [r3, #0]
    42fe:	4798      	blx	r3
    4300:	bd08      	pop	{r3, pc}

00004302 <_ZN15HardwareSerial25writeEj>:
_ZN15HardwareSerial25writeEj():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:297
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    4302:	b508      	push	{r3, lr}
    4304:	6803      	ldr	r3, [r0, #0]
    4306:	b2c9      	uxtb	r1, r1
    4308:	681b      	ldr	r3, [r3, #0]
    430a:	4798      	blx	r3
    430c:	bd08      	pop	{r3, pc}

0000430e <_ZN15HardwareSerial25writeEi>:
_ZN15HardwareSerial25writeEi():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:298
	virtual size_t write(int n)             { return write((uint8_t)n); }
    430e:	b508      	push	{r3, lr}
    4310:	6803      	ldr	r3, [r0, #0]
    4312:	b2c9      	uxtb	r1, r1
    4314:	681b      	ldr	r3, [r3, #0]
    4316:	4798      	blx	r3
    4318:	bd08      	pop	{r3, pc}
    431a:	ffff 4803 	vtbl.8	d20, {d15}, d3

0000431c <_ZN15HardwareSerial25beginEm>:
_ZN15HardwareSerial25beginEm():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:278
extern void serialEvent1(void);

class HardwareSerial2 : public HardwareSerial
{
public:
	virtual void begin(uint32_t baud) { serial2_begin(BAUD2DIV2(baud)); }
    431c:	4803      	ldr	r0, [pc, #12]	; (432c <_ZN15HardwareSerial25beginEm+0x10>)
    431e:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    4322:	fbb0 f0f1 	udiv	r0, r0, r1
    4326:	f7fd bc2d 	b.w	1b84 <serial2_begin>
    432a:	bf00      	nop
    432c:	0e4e1c00 	.word	0x0e4e1c00

00004330 <_ZN15HardwareSerial25beginEmm>:
_ZN15HardwareSerial25beginEmm():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:279
	virtual void begin(uint32_t baud, uint32_t format) {
    4330:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:280
					  serial2_begin(BAUD2DIV2(baud));
    4332:	4806      	ldr	r0, [pc, #24]	; (434c <_ZN15HardwareSerial25beginEmm+0x1c>)
    4334:	eb00 0051 	add.w	r0, r0, r1, lsr #1
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:279

class HardwareSerial2 : public HardwareSerial
{
public:
	virtual void begin(uint32_t baud) { serial2_begin(BAUD2DIV2(baud)); }
	virtual void begin(uint32_t baud, uint32_t format) {
    4338:	4614      	mov	r4, r2
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:280
					  serial2_begin(BAUD2DIV2(baud));
    433a:	fbb0 f0f1 	udiv	r0, r0, r1
    433e:	f7fd fc21 	bl	1b84 <serial2_begin>
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:281
					  serial2_format(format); }
    4342:	4620      	mov	r0, r4
    4344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4348:	f7fd bc70 	b.w	1c2c <serial2_format>
    434c:	0e4e1c00 	.word	0x0e4e1c00

00004350 <_ZN15HardwareSerial23endEv>:
_ZN15HardwareSerial23endEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:282
	virtual void end(void)		{ serial2_end(); }
    4350:	f7fd bca2 	b.w	1c98 <serial2_end>

00004354 <_ZN15HardwareSerial217transmitterEnableEh>:
_ZN15HardwareSerial217transmitterEnableEh():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:283
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
    4354:	4608      	mov	r0, r1
    4356:	f7fd bce7 	b.w	1d28 <serial2_set_transmit_pin>

0000435a <_ZN15HardwareSerial25setRXEh>:
_ZN15HardwareSerial25setRXEh():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:284
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
    435a:	4608      	mov	r0, r1
    435c:	f7fd bd34 	b.w	1dc8 <serial2_set_rx>

00004360 <_ZN15HardwareSerial25setTXEhb>:
_ZN15HardwareSerial25setTXEhb():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:285
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
    4360:	4608      	mov	r0, r1
    4362:	4611      	mov	r1, r2
    4364:	f7fd bcfa 	b.w	1d5c <serial2_set_tx>

00004368 <_ZN15HardwareSerial29attachRtsEh>:
_ZN15HardwareSerial29attachRtsEh():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:286
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
    4368:	b508      	push	{r3, lr}
    436a:	4608      	mov	r0, r1
    436c:	f7fd fd54 	bl	1e18 <serial2_set_rts>
    4370:	3000      	adds	r0, #0
    4372:	bf18      	it	ne
    4374:	2001      	movne	r0, #1
    4376:	bd08      	pop	{r3, pc}

00004378 <_ZN15HardwareSerial29attachCtsEh>:
_ZN15HardwareSerial29attachCtsEh():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:287
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
    4378:	b508      	push	{r3, lr}
    437a:	4608      	mov	r0, r1
    437c:	f7fd fd6e 	bl	1e5c <serial2_set_cts>
    4380:	3000      	adds	r0, #0
    4382:	bf18      	it	ne
    4384:	2001      	movne	r0, #1
    4386:	bd08      	pop	{r3, pc}

00004388 <_ZN15HardwareSerial29availableEv>:
_ZN15HardwareSerial29availableEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:288
	virtual int available(void)     { return serial2_available(); }
    4388:	f7fd be34 	b.w	1ff4 <serial2_available>

0000438c <_ZN15HardwareSerial24peekEv>:
_ZN15HardwareSerial24peekEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:289
	virtual int peek(void)          { return serial2_peek(); }
    438c:	f7fd be60 	b.w	2050 <serial2_peek>

00004390 <_ZN15HardwareSerial24readEv>:
_ZN15HardwareSerial24readEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:290
	virtual int read(void)          { return serial2_getchar(); }
    4390:	f7fd be3c 	b.w	200c <serial2_getchar>

00004394 <_ZN15HardwareSerial25flushEv>:
_ZN15HardwareSerial25flushEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:291
	virtual void flush(void)        { serial2_flush(); }
    4394:	f7fd be16 	b.w	1fc4 <serial2_flush>

00004398 <_ZN15HardwareSerial25clearEv>:
_ZN15HardwareSerial25clearEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:292
	virtual void clear(void)	{ serial2_clear(); }
    4398:	f7fd be6e 	b.w	2078 <serial2_clear>

0000439c <_ZN15HardwareSerial217availableForWriteEv>:
_ZN15HardwareSerial217availableForWriteEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:293
	virtual int availableForWrite(void) { return serial2_write_buffer_free(); }
    439c:	f7fd be1c 	b.w	1fd8 <serial2_write_buffer_free>

000043a0 <_ZN15HardwareSerial25writeEh>:
_ZN15HardwareSerial25writeEh():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:294
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    43a0:	b508      	push	{r3, lr}
    43a2:	4608      	mov	r0, r1
    43a4:	f7fd fd80 	bl	1ea8 <serial2_putchar>
    43a8:	2001      	movs	r0, #1
    43aa:	bd08      	pop	{r3, pc}

000043ac <_ZN15HardwareSerial29write9bitEm>:
_ZN15HardwareSerial29write9bitEm():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:304
	virtual size_t write(const uint8_t *buffer, size_t size)
					{ serial2_write(buffer, size); return size; }
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
					  serial2_write((const uint8_t *)str, len);
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial2_putchar(c); return 1; }
    43ac:	b508      	push	{r3, lr}
    43ae:	4608      	mov	r0, r1
    43b0:	f7fd fd7a 	bl	1ea8 <serial2_putchar>
    43b4:	2001      	movs	r0, #1
    43b6:	bd08      	pop	{r3, pc}

000043b8 <_ZN15HardwareSerial25writeEPKhj>:
_ZN15HardwareSerial25writeEPKhj():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:299
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
    43b8:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:300
					{ serial2_write(buffer, size); return size; }
    43ba:	4608      	mov	r0, r1
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:299
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
    43bc:	4614      	mov	r4, r2
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:300
					{ serial2_write(buffer, size); return size; }
    43be:	4611      	mov	r1, r2
    43c0:	f7fd fdb0 	bl	1f24 <serial2_write>
    43c4:	4620      	mov	r0, r4
    43c6:	bd10      	pop	{r4, pc}

000043c8 <_ZN15HardwareSerial25writeEPKc>:
_ZN15HardwareSerial25writeEPKc():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:301
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
    43c8:	b538      	push	{r3, r4, r5, lr}
    43ca:	4608      	mov	r0, r1
    43cc:	460d      	mov	r5, r1
    43ce:	f002 fa60 	bl	6892 <strlen>
    43d2:	4604      	mov	r4, r0
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:302
					  serial2_write((const uint8_t *)str, len);
    43d4:	4621      	mov	r1, r4
    43d6:	4628      	mov	r0, r5
    43d8:	f7fd fda4 	bl	1f24 <serial2_write>
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:303
					  return len; }
    43dc:	4620      	mov	r0, r4
    43de:	bd38      	pop	{r3, r4, r5, pc}

000043e0 <_GLOBAL__sub_I_Serial2>:
Print():
C:\Teensy\Projects\HelloWorld/Print.h:50
    43e0:	4b04      	ldr	r3, [pc, #16]	; (43f4 <_GLOBAL__sub_I_Serial2+0x14>)
    43e2:	2200      	movs	r2, #0
    43e4:	711a      	strb	r2, [r3, #4]
Stream():
C:\Teensy\Projects\HelloWorld/Stream.h:30
    43e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    43ea:	731a      	strb	r2, [r3, #12]
HardwareSerial2():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:275
	operator bool()			{ return true; }
};
extern HardwareSerial Serial1;
extern void serialEvent1(void);

class HardwareSerial2 : public HardwareSerial
    43ec:	4a02      	ldr	r2, [pc, #8]	; (43f8 <_GLOBAL__sub_I_Serial2+0x18>)
HardwareSerial():
C:\Teensy\Projects\HelloWorld/Stream.h:30
    43ee:	6099      	str	r1, [r3, #8]
HardwareSerial2():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:275
    43f0:	601a      	str	r2, [r3, #0]
    43f2:	4770      	bx	lr
    43f4:	1fff0f70 	.word	0x1fff0f70
    43f8:	0000a128 	.word	0x0000a128

000043fc <_Z12serialEvent3v>:
_Z12serialEvent3v():
C:\Teensy\Projects\HelloWorld/HardwareSerial3.cpp:6
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    43fc:	4770      	bx	lr

000043fe <_ZN15HardwareSerial35writeEm>:
_ZN15HardwareSerial35writeEm():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:330
	virtual int read(void)          { return serial3_getchar(); }
	virtual void flush(void)        { serial3_flush(); }
	virtual void clear(void)	{ serial3_clear(); }
	virtual int availableForWrite(void) { return serial3_write_buffer_free(); }
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    43fe:	b508      	push	{r3, lr}
    4400:	6803      	ldr	r3, [r0, #0]
    4402:	b2c9      	uxtb	r1, r1
    4404:	681b      	ldr	r3, [r3, #0]
    4406:	4798      	blx	r3
    4408:	bd08      	pop	{r3, pc}

0000440a <_ZN15HardwareSerial35writeEl>:
_ZN15HardwareSerial35writeEl():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:331
	virtual size_t write(long n)            { return write((uint8_t)n); }
    440a:	b508      	push	{r3, lr}
    440c:	6803      	ldr	r3, [r0, #0]
    440e:	b2c9      	uxtb	r1, r1
    4410:	681b      	ldr	r3, [r3, #0]
    4412:	4798      	blx	r3
    4414:	bd08      	pop	{r3, pc}

00004416 <_ZN15HardwareSerial35writeEj>:
_ZN15HardwareSerial35writeEj():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:332
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    4416:	b508      	push	{r3, lr}
    4418:	6803      	ldr	r3, [r0, #0]
    441a:	b2c9      	uxtb	r1, r1
    441c:	681b      	ldr	r3, [r3, #0]
    441e:	4798      	blx	r3
    4420:	bd08      	pop	{r3, pc}

00004422 <_ZN15HardwareSerial35writeEi>:
_ZN15HardwareSerial35writeEi():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:333
	virtual size_t write(int n)             { return write((uint8_t)n); }
    4422:	b508      	push	{r3, lr}
    4424:	6803      	ldr	r3, [r0, #0]
    4426:	b2c9      	uxtb	r1, r1
    4428:	681b      	ldr	r3, [r3, #0]
    442a:	4798      	blx	r3
    442c:	bd08      	pop	{r3, pc}
    442e:	ffff 4803 	vtbl.8	d20, {d15}, d3

00004430 <_ZN15HardwareSerial35beginEm>:
_ZN15HardwareSerial35beginEm():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:313
extern void serialEvent2(void);

class HardwareSerial3 : public HardwareSerial
{
public:
	virtual void begin(uint32_t baud) { serial3_begin(BAUD2DIV3(baud)); }
    4430:	4803      	ldr	r0, [pc, #12]	; (4440 <_ZN15HardwareSerial35beginEm+0x10>)
    4432:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    4436:	fbb0 f0f1 	udiv	r0, r0, r1
    443a:	f7fd beab 	b.w	2194 <serial3_begin>
    443e:	bf00      	nop
    4440:	07270e00 	.word	0x07270e00

00004444 <_ZN15HardwareSerial35beginEmm>:
_ZN15HardwareSerial35beginEmm():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:314
	virtual void begin(uint32_t baud, uint32_t format) {
    4444:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:315
					  serial3_begin(BAUD2DIV3(baud));
    4446:	4806      	ldr	r0, [pc, #24]	; (4460 <_ZN15HardwareSerial35beginEmm+0x1c>)
    4448:	eb00 0051 	add.w	r0, r0, r1, lsr #1
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:314

class HardwareSerial3 : public HardwareSerial
{
public:
	virtual void begin(uint32_t baud) { serial3_begin(BAUD2DIV3(baud)); }
	virtual void begin(uint32_t baud, uint32_t format) {
    444c:	4614      	mov	r4, r2
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:315
					  serial3_begin(BAUD2DIV3(baud));
    444e:	fbb0 f0f1 	udiv	r0, r0, r1
    4452:	f7fd fe9f 	bl	2194 <serial3_begin>
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:316
					  serial3_format(format); }
    4456:	4620      	mov	r0, r4
    4458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    445c:	f7fd bece 	b.w	21fc <serial3_format>
    4460:	07270e00 	.word	0x07270e00

00004464 <_ZN15HardwareSerial33endEv>:
_ZN15HardwareSerial33endEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:317
	virtual void end(void)          { serial3_end(); }
    4464:	f7fd bf00 	b.w	2268 <serial3_end>

00004468 <_ZN15HardwareSerial317transmitterEnableEh>:
_ZN15HardwareSerial317transmitterEnableEh():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:318
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
    4468:	4608      	mov	r0, r1
    446a:	f7fd bf27 	b.w	22bc <serial3_set_transmit_pin>

0000446e <_ZN15HardwareSerial35setRXEh>:
_ZN15HardwareSerial35setRXEh():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:319
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
    446e:	4608      	mov	r0, r1
    4470:	f7fd bf66 	b.w	2340 <serial3_set_rx>

00004474 <_ZN15HardwareSerial35setTXEhb>:
_ZN15HardwareSerial35setTXEhb():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:320
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
    4474:	4608      	mov	r0, r1
    4476:	4611      	mov	r1, r2
    4478:	f7fd bf3a 	b.w	22f0 <serial3_set_tx>

0000447c <_ZN15HardwareSerial39attachRtsEh>:
_ZN15HardwareSerial39attachRtsEh():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:321
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
    447c:	b508      	push	{r3, lr}
    447e:	4608      	mov	r0, r1
    4480:	f7fd ff5f 	bl	2342 <serial3_set_rts>
    4484:	3000      	adds	r0, #0
    4486:	bf18      	it	ne
    4488:	2001      	movne	r0, #1
    448a:	bd08      	pop	{r3, pc}

0000448c <_ZN15HardwareSerial39attachCtsEh>:
_ZN15HardwareSerial39attachCtsEh():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:322
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
    448c:	b508      	push	{r3, lr}
    448e:	4608      	mov	r0, r1
    4490:	f7fd ff78 	bl	2384 <serial3_set_cts>
    4494:	3000      	adds	r0, #0
    4496:	bf18      	it	ne
    4498:	2001      	movne	r0, #1
    449a:	bd08      	pop	{r3, pc}

0000449c <_ZN15HardwareSerial39availableEv>:
_ZN15HardwareSerial39availableEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:323
	virtual int available(void)     { return serial3_available(); }
    449c:	f7fd bff2 	b.w	2484 <serial3_available>

000044a0 <_ZN15HardwareSerial34peekEv>:
_ZN15HardwareSerial34peekEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:324
	virtual int peek(void)          { return serial3_peek(); }
    44a0:	f7fe b81e 	b.w	24e0 <serial3_peek>

000044a4 <_ZN15HardwareSerial34readEv>:
_ZN15HardwareSerial34readEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:325
	virtual int read(void)          { return serial3_getchar(); }
    44a4:	f7fd bffa 	b.w	249c <serial3_getchar>

000044a8 <_ZN15HardwareSerial35flushEv>:
_ZN15HardwareSerial35flushEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:326
	virtual void flush(void)        { serial3_flush(); }
    44a8:	f7fd bfd3 	b.w	2452 <serial3_flush>

000044ac <_ZN15HardwareSerial35clearEv>:
_ZN15HardwareSerial35clearEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:327
	virtual void clear(void)	{ serial3_clear(); }
    44ac:	f7fe b82c 	b.w	2508 <serial3_clear>

000044b0 <_ZN15HardwareSerial317availableForWriteEv>:
_ZN15HardwareSerial317availableForWriteEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:328
	virtual int availableForWrite(void) { return serial3_write_buffer_free(); }
    44b0:	f7fd bfda 	b.w	2468 <serial3_write_buffer_free>

000044b4 <_ZN15HardwareSerial35writeEh>:
_ZN15HardwareSerial35writeEh():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:329
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    44b4:	b508      	push	{r3, lr}
    44b6:	4608      	mov	r0, r1
    44b8:	f7fd ff82 	bl	23c0 <serial3_putchar>
    44bc:	2001      	movs	r0, #1
    44be:	bd08      	pop	{r3, pc}

000044c0 <_ZN15HardwareSerial39write9bitEm>:
_ZN15HardwareSerial39write9bitEm():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:339
	virtual size_t write(const uint8_t *buffer, size_t size)
					{ serial3_write(buffer, size); return size; }
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
					  serial3_write((const uint8_t *)str, len);
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial3_putchar(c); return 1; }
    44c0:	b508      	push	{r3, lr}
    44c2:	4608      	mov	r0, r1
    44c4:	f7fd ff7c 	bl	23c0 <serial3_putchar>
    44c8:	2001      	movs	r0, #1
    44ca:	bd08      	pop	{r3, pc}

000044cc <_ZN15HardwareSerial35writeEPKhj>:
_ZN15HardwareSerial35writeEPKhj():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:334
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
    44cc:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:335
					{ serial3_write(buffer, size); return size; }
    44ce:	4608      	mov	r0, r1
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:334
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
    44d0:	4614      	mov	r4, r2
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:335
					{ serial3_write(buffer, size); return size; }
    44d2:	4611      	mov	r1, r2
    44d4:	f7fd ffb2 	bl	243c <serial3_write>
    44d8:	4620      	mov	r0, r4
    44da:	bd10      	pop	{r4, pc}

000044dc <_ZN15HardwareSerial35writeEPKc>:
_ZN15HardwareSerial35writeEPKc():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:336
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
    44dc:	b538      	push	{r3, r4, r5, lr}
    44de:	4608      	mov	r0, r1
    44e0:	460d      	mov	r5, r1
    44e2:	f002 f9d6 	bl	6892 <strlen>
    44e6:	4604      	mov	r4, r0
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:337
					  serial3_write((const uint8_t *)str, len);
    44e8:	4621      	mov	r1, r4
    44ea:	4628      	mov	r0, r5
    44ec:	f7fd ffa6 	bl	243c <serial3_write>
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:338
					  return len; }
    44f0:	4620      	mov	r0, r4
    44f2:	bd38      	pop	{r3, r4, r5, pc}

000044f4 <_GLOBAL__sub_I_Serial3>:
Print():
C:\Teensy\Projects\HelloWorld/Print.h:50
    44f4:	4b04      	ldr	r3, [pc, #16]	; (4508 <_GLOBAL__sub_I_Serial3+0x14>)
    44f6:	2200      	movs	r2, #0
    44f8:	711a      	strb	r2, [r3, #4]
Stream():
C:\Teensy\Projects\HelloWorld/Stream.h:30
    44fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    44fe:	731a      	strb	r2, [r3, #12]
HardwareSerial3():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:310
	operator bool()			{ return true; }
};
extern HardwareSerial2 Serial2;
extern void serialEvent2(void);

class HardwareSerial3 : public HardwareSerial
    4500:	4a02      	ldr	r2, [pc, #8]	; (450c <_GLOBAL__sub_I_Serial3+0x18>)
HardwareSerial():
C:\Teensy\Projects\HelloWorld/Stream.h:30
    4502:	6099      	str	r1, [r3, #8]
HardwareSerial3():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:310
    4504:	601a      	str	r2, [r3, #0]
    4506:	4770      	bx	lr
    4508:	1fff0f80 	.word	0x1fff0f80
    450c:	0000a188 	.word	0x0000a188

00004510 <_Z12serialEvent4v>:
_Z12serialEvent4v():
C:\Teensy\Projects\HelloWorld/HardwareSerial4.cpp:8
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    4510:	4770      	bx	lr

00004512 <_ZN15HardwareSerial45writeEm>:
_ZN15HardwareSerial45writeEm():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:365
	virtual int read(void)          { return serial4_getchar(); }
	virtual void flush(void)        { serial4_flush(); }
	virtual void clear(void)	{ serial4_clear(); }
	virtual int availableForWrite(void) { return serial4_write_buffer_free(); }
	virtual size_t write(uint8_t c) { serial4_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    4512:	b508      	push	{r3, lr}
    4514:	6803      	ldr	r3, [r0, #0]
    4516:	b2c9      	uxtb	r1, r1
    4518:	681b      	ldr	r3, [r3, #0]
    451a:	4798      	blx	r3
    451c:	bd08      	pop	{r3, pc}

0000451e <_ZN15HardwareSerial45writeEl>:
_ZN15HardwareSerial45writeEl():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:366
	virtual size_t write(long n)            { return write((uint8_t)n); }
    451e:	b508      	push	{r3, lr}
    4520:	6803      	ldr	r3, [r0, #0]
    4522:	b2c9      	uxtb	r1, r1
    4524:	681b      	ldr	r3, [r3, #0]
    4526:	4798      	blx	r3
    4528:	bd08      	pop	{r3, pc}

0000452a <_ZN15HardwareSerial45writeEj>:
_ZN15HardwareSerial45writeEj():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:367
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    452a:	b508      	push	{r3, lr}
    452c:	6803      	ldr	r3, [r0, #0]
    452e:	b2c9      	uxtb	r1, r1
    4530:	681b      	ldr	r3, [r3, #0]
    4532:	4798      	blx	r3
    4534:	bd08      	pop	{r3, pc}

00004536 <_ZN15HardwareSerial45writeEi>:
_ZN15HardwareSerial45writeEi():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:368
	virtual size_t write(int n)             { return write((uint8_t)n); }
    4536:	b508      	push	{r3, lr}
    4538:	6803      	ldr	r3, [r0, #0]
    453a:	b2c9      	uxtb	r1, r1
    453c:	681b      	ldr	r3, [r3, #0]
    453e:	4798      	blx	r3
    4540:	bd08      	pop	{r3, pc}
    4542:	ffff 4803 	vtbl.8	d20, {d15}, d3

00004544 <_ZN15HardwareSerial45beginEm>:
_ZN15HardwareSerial45beginEm():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:348
extern void serialEvent3(void);

class HardwareSerial4 : public HardwareSerial
{
public:
	virtual void begin(uint32_t baud) { serial4_begin(BAUD2DIV3(baud)); }
    4544:	4803      	ldr	r0, [pc, #12]	; (4554 <_ZN15HardwareSerial45beginEm+0x10>)
    4546:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    454a:	fbb0 f0f1 	udiv	r0, r0, r1
    454e:	f7fe b83d 	b.w	25cc <serial4_begin>
    4552:	bf00      	nop
    4554:	07270e00 	.word	0x07270e00

00004558 <_ZN15HardwareSerial45beginEmm>:
_ZN15HardwareSerial45beginEmm():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:349
	virtual void begin(uint32_t baud, uint32_t format) {
    4558:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:350
					  serial4_begin(BAUD2DIV3(baud));
    455a:	4806      	ldr	r0, [pc, #24]	; (4574 <_ZN15HardwareSerial45beginEmm+0x1c>)
    455c:	eb00 0051 	add.w	r0, r0, r1, lsr #1
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:349

class HardwareSerial4 : public HardwareSerial
{
public:
	virtual void begin(uint32_t baud) { serial4_begin(BAUD2DIV3(baud)); }
	virtual void begin(uint32_t baud, uint32_t format) {
    4560:	4614      	mov	r4, r2
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:350
					  serial4_begin(BAUD2DIV3(baud));
    4562:	fbb0 f0f1 	udiv	r0, r0, r1
    4566:	f7fe f831 	bl	25cc <serial4_begin>
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:351
					  serial4_format(format); }
    456a:	4620      	mov	r0, r4
    456c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4570:	f7fe b87e 	b.w	2670 <serial4_format>
    4574:	07270e00 	.word	0x07270e00

00004578 <_ZN15HardwareSerial43endEv>:
_ZN15HardwareSerial43endEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:352
	virtual void end(void)          { serial4_end(); }
    4578:	f7fe b8b0 	b.w	26dc <serial4_end>

0000457c <_ZN15HardwareSerial417transmitterEnableEh>:
_ZN15HardwareSerial417transmitterEnableEh():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:353
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
    457c:	4608      	mov	r0, r1
    457e:	f7fe b8f9 	b.w	2774 <serial4_set_transmit_pin>

00004582 <_ZN15HardwareSerial45setRXEh>:
_ZN15HardwareSerial45setRXEh():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:354
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
    4582:	4608      	mov	r0, r1
    4584:	f7fe b946 	b.w	2814 <serial4_set_rx>

00004588 <_ZN15HardwareSerial45setTXEhb>:
_ZN15HardwareSerial45setTXEhb():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:355
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
    4588:	4608      	mov	r0, r1
    458a:	4611      	mov	r1, r2
    458c:	f7fe b90c 	b.w	27a8 <serial4_set_tx>

00004590 <_ZN15HardwareSerial49attachRtsEh>:
_ZN15HardwareSerial49attachRtsEh():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:356
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
    4590:	b508      	push	{r3, lr}
    4592:	4608      	mov	r0, r1
    4594:	f7fe f966 	bl	2864 <serial4_set_rts>
    4598:	3000      	adds	r0, #0
    459a:	bf18      	it	ne
    459c:	2001      	movne	r0, #1
    459e:	bd08      	pop	{r3, pc}

000045a0 <_ZN15HardwareSerial49attachCtsEh>:
_ZN15HardwareSerial49attachCtsEh():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:357
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
    45a0:	b508      	push	{r3, lr}
    45a2:	4608      	mov	r0, r1
    45a4:	f7fe f980 	bl	28a8 <serial4_set_cts>
    45a8:	3000      	adds	r0, #0
    45aa:	bf18      	it	ne
    45ac:	2001      	movne	r0, #1
    45ae:	bd08      	pop	{r3, pc}

000045b0 <_ZN15HardwareSerial49availableEv>:
_ZN15HardwareSerial49availableEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:358
	virtual int available(void)     { return serial4_available(); }
    45b0:	f7fe b9de 	b.w	2970 <serial4_available>

000045b4 <_ZN15HardwareSerial44peekEv>:
_ZN15HardwareSerial44peekEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:359
	virtual int peek(void)          { return serial4_peek(); }
    45b4:	f7fe ba0a 	b.w	29cc <serial4_peek>

000045b8 <_ZN15HardwareSerial44readEv>:
_ZN15HardwareSerial44readEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:360
	virtual int read(void)          { return serial4_getchar(); }
    45b8:	f7fe b9e6 	b.w	2988 <serial4_getchar>

000045bc <_ZN15HardwareSerial45flushEv>:
_ZN15HardwareSerial45flushEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:361
	virtual void flush(void)        { serial4_flush(); }
    45bc:	f7fe b9bf 	b.w	293e <serial4_flush>

000045c0 <_ZN15HardwareSerial45clearEv>:
_ZN15HardwareSerial45clearEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:362
	virtual void clear(void)	{ serial4_clear(); }
    45c0:	f7fe ba18 	b.w	29f4 <serial4_clear>

000045c4 <_ZN15HardwareSerial417availableForWriteEv>:
_ZN15HardwareSerial417availableForWriteEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:363
	virtual int availableForWrite(void) { return serial4_write_buffer_free(); }
    45c4:	f7fe b9c6 	b.w	2954 <serial4_write_buffer_free>

000045c8 <_ZN15HardwareSerial45writeEh>:
_ZN15HardwareSerial45writeEh():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:364
	virtual size_t write(uint8_t c) { serial4_putchar(c); return 1; }
    45c8:	b508      	push	{r3, lr}
    45ca:	4608      	mov	r0, r1
    45cc:	f7fe f96e 	bl	28ac <serial4_putchar>
    45d0:	2001      	movs	r0, #1
    45d2:	bd08      	pop	{r3, pc}

000045d4 <_ZN15HardwareSerial49write9bitEm>:
_ZN15HardwareSerial49write9bitEm():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:374
	virtual size_t write(const uint8_t *buffer, size_t size)
					{ serial4_write(buffer, size); return size; }
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
					  serial4_write((const uint8_t *)str, len);
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial4_putchar(c); return 1; }
    45d4:	b508      	push	{r3, lr}
    45d6:	4608      	mov	r0, r1
    45d8:	f7fe f968 	bl	28ac <serial4_putchar>
    45dc:	2001      	movs	r0, #1
    45de:	bd08      	pop	{r3, pc}

000045e0 <_ZN15HardwareSerial45writeEPKhj>:
_ZN15HardwareSerial45writeEPKhj():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:369
	virtual size_t write(uint8_t c) { serial4_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
    45e0:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:370
					{ serial4_write(buffer, size); return size; }
    45e2:	4608      	mov	r0, r1
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:369
	virtual size_t write(uint8_t c) { serial4_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
    45e4:	4614      	mov	r4, r2
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:370
					{ serial4_write(buffer, size); return size; }
    45e6:	4611      	mov	r1, r2
    45e8:	f7fe f99e 	bl	2928 <serial4_write>
    45ec:	4620      	mov	r0, r4
    45ee:	bd10      	pop	{r4, pc}

000045f0 <_ZN15HardwareSerial45writeEPKc>:
_ZN15HardwareSerial45writeEPKc():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:371
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
    45f0:	b538      	push	{r3, r4, r5, lr}
    45f2:	4608      	mov	r0, r1
    45f4:	460d      	mov	r5, r1
    45f6:	f002 f94c 	bl	6892 <strlen>
    45fa:	4604      	mov	r4, r0
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:372
					  serial4_write((const uint8_t *)str, len);
    45fc:	4621      	mov	r1, r4
    45fe:	4628      	mov	r0, r5
    4600:	f7fe f992 	bl	2928 <serial4_write>
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:373
					  return len; }
    4604:	4620      	mov	r0, r4
    4606:	bd38      	pop	{r3, r4, r5, pc}

00004608 <_GLOBAL__sub_I_Serial4>:
Print():
C:\Teensy\Projects\HelloWorld/Print.h:50
    4608:	4b04      	ldr	r3, [pc, #16]	; (461c <_GLOBAL__sub_I_Serial4+0x14>)
    460a:	2200      	movs	r2, #0
    460c:	711a      	strb	r2, [r3, #4]
Stream():
C:\Teensy\Projects\HelloWorld/Stream.h:30
    460e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    4612:	731a      	strb	r2, [r3, #12]
HardwareSerial4():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:345
	operator bool()			{ return true; }
};
extern HardwareSerial3 Serial3;
extern void serialEvent3(void);

class HardwareSerial4 : public HardwareSerial
    4614:	4a02      	ldr	r2, [pc, #8]	; (4620 <_GLOBAL__sub_I_Serial4+0x18>)
HardwareSerial():
C:\Teensy\Projects\HelloWorld/Stream.h:30
    4616:	6099      	str	r1, [r3, #8]
HardwareSerial4():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:345
    4618:	601a      	str	r2, [r3, #0]
    461a:	4770      	bx	lr
    461c:	1fff0f90 	.word	0x1fff0f90
    4620:	0000a1e8 	.word	0x0000a1e8

00004624 <_Z12serialEvent5v>:
_Z12serialEvent5v():
C:\Teensy\Projects\HelloWorld/HardwareSerial5.cpp:8
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    4624:	4770      	bx	lr

00004626 <_ZN15HardwareSerial55writeEm>:
_ZN15HardwareSerial55writeEm():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:400
	virtual int read(void)          { return serial5_getchar(); }
	virtual void flush(void)        { serial5_flush(); }
	virtual void clear(void)	{ serial5_clear(); }
	virtual int availableForWrite(void) { return serial5_write_buffer_free(); }
	virtual size_t write(uint8_t c) { serial5_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    4626:	b508      	push	{r3, lr}
    4628:	6803      	ldr	r3, [r0, #0]
    462a:	b2c9      	uxtb	r1, r1
    462c:	681b      	ldr	r3, [r3, #0]
    462e:	4798      	blx	r3
    4630:	bd08      	pop	{r3, pc}

00004632 <_ZN15HardwareSerial55writeEl>:
_ZN15HardwareSerial55writeEl():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:401
	virtual size_t write(long n)            { return write((uint8_t)n); }
    4632:	b508      	push	{r3, lr}
    4634:	6803      	ldr	r3, [r0, #0]
    4636:	b2c9      	uxtb	r1, r1
    4638:	681b      	ldr	r3, [r3, #0]
    463a:	4798      	blx	r3
    463c:	bd08      	pop	{r3, pc}

0000463e <_ZN15HardwareSerial55writeEj>:
_ZN15HardwareSerial55writeEj():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:402
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    463e:	b508      	push	{r3, lr}
    4640:	6803      	ldr	r3, [r0, #0]
    4642:	b2c9      	uxtb	r1, r1
    4644:	681b      	ldr	r3, [r3, #0]
    4646:	4798      	blx	r3
    4648:	bd08      	pop	{r3, pc}

0000464a <_ZN15HardwareSerial55writeEi>:
_ZN15HardwareSerial55writeEi():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:403
	virtual size_t write(int n)             { return write((uint8_t)n); }
    464a:	b508      	push	{r3, lr}
    464c:	6803      	ldr	r3, [r0, #0]
    464e:	b2c9      	uxtb	r1, r1
    4650:	681b      	ldr	r3, [r3, #0]
    4652:	4798      	blx	r3
    4654:	bd08      	pop	{r3, pc}
    4656:	ffff 4803 	vtbl.8	d20, {d15}, d3

00004658 <_ZN15HardwareSerial55beginEm>:
_ZN15HardwareSerial55beginEm():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:383
extern void serialEvent4(void);

class HardwareSerial5 : public HardwareSerial
{
public:
	virtual void begin(uint32_t baud) { serial5_begin(BAUD2DIV3(baud)); }
    4658:	4803      	ldr	r0, [pc, #12]	; (4668 <_ZN15HardwareSerial55beginEm+0x10>)
    465a:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    465e:	fbb0 f0f1 	udiv	r0, r0, r1
    4662:	f7fe ba29 	b.w	2ab8 <serial5_begin>
    4666:	bf00      	nop
    4668:	07270e00 	.word	0x07270e00

0000466c <_ZN15HardwareSerial55beginEmm>:
_ZN15HardwareSerial55beginEmm():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:384
	virtual void begin(uint32_t baud, uint32_t format) {
    466c:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:385
					  serial5_begin(BAUD2DIV3(baud));
    466e:	4806      	ldr	r0, [pc, #24]	; (4688 <_ZN15HardwareSerial55beginEmm+0x1c>)
    4670:	eb00 0051 	add.w	r0, r0, r1, lsr #1
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:384

class HardwareSerial5 : public HardwareSerial
{
public:
	virtual void begin(uint32_t baud) { serial5_begin(BAUD2DIV3(baud)); }
	virtual void begin(uint32_t baud, uint32_t format) {
    4674:	4614      	mov	r4, r2
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:385
					  serial5_begin(BAUD2DIV3(baud));
    4676:	fbb0 f0f1 	udiv	r0, r0, r1
    467a:	f7fe fa1d 	bl	2ab8 <serial5_begin>
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:386
					  serial5_format(format); }
    467e:	4620      	mov	r0, r4
    4680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4684:	f7fe ba4c 	b.w	2b20 <serial5_format>
    4688:	07270e00 	.word	0x07270e00

0000468c <_ZN15HardwareSerial53endEv>:
_ZN15HardwareSerial53endEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:387
	virtual void end(void)          { serial5_end(); }
    468c:	f7fe ba7e 	b.w	2b8c <serial5_end>

00004690 <_ZN15HardwareSerial517transmitterEnableEh>:
_ZN15HardwareSerial517transmitterEnableEh():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:388
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
    4690:	4608      	mov	r0, r1
    4692:	f7fe baa5 	b.w	2be0 <serial5_set_transmit_pin>

00004696 <_ZN15HardwareSerial55setRXEh>:
_ZN15HardwareSerial55setRXEh():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:389
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
    4696:	4608      	mov	r0, r1
    4698:	f7fe bae4 	b.w	2c64 <serial5_set_rx>

0000469c <_ZN15HardwareSerial55setTXEhb>:
_ZN15HardwareSerial55setTXEhb():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:390
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
    469c:	4608      	mov	r0, r1
    469e:	4611      	mov	r1, r2
    46a0:	f7fe bab8 	b.w	2c14 <serial5_set_tx>

000046a4 <_ZN15HardwareSerial59attachRtsEh>:
_ZN15HardwareSerial59attachRtsEh():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:391
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
    46a4:	b508      	push	{r3, lr}
    46a6:	4608      	mov	r0, r1
    46a8:	f7fe fadd 	bl	2c66 <serial5_set_rts>
    46ac:	3000      	adds	r0, #0
    46ae:	bf18      	it	ne
    46b0:	2001      	movne	r0, #1
    46b2:	bd08      	pop	{r3, pc}

000046b4 <_ZN15HardwareSerial59attachCtsEh>:
_ZN15HardwareSerial59attachCtsEh():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:392
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
    46b4:	b508      	push	{r3, lr}
    46b6:	4608      	mov	r0, r1
    46b8:	f7fe faf6 	bl	2ca8 <serial5_set_cts>
    46bc:	3000      	adds	r0, #0
    46be:	bf18      	it	ne
    46c0:	2001      	movne	r0, #1
    46c2:	bd08      	pop	{r3, pc}

000046c4 <_ZN15HardwareSerial59availableEv>:
_ZN15HardwareSerial59availableEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:393
	virtual int available(void)     { return serial5_available(); }
    46c4:	f7fe bb70 	b.w	2da8 <serial5_available>

000046c8 <_ZN15HardwareSerial54peekEv>:
_ZN15HardwareSerial54peekEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:394
	virtual int peek(void)          { return serial5_peek(); }
    46c8:	f7fe bb9c 	b.w	2e04 <serial5_peek>

000046cc <_ZN15HardwareSerial54readEv>:
_ZN15HardwareSerial54readEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:395
	virtual int read(void)          { return serial5_getchar(); }
    46cc:	f7fe bb78 	b.w	2dc0 <serial5_getchar>

000046d0 <_ZN15HardwareSerial55flushEv>:
_ZN15HardwareSerial55flushEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:396
	virtual void flush(void)        { serial5_flush(); }
    46d0:	f7fe bb51 	b.w	2d76 <serial5_flush>

000046d4 <_ZN15HardwareSerial55clearEv>:
_ZN15HardwareSerial55clearEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:397
	virtual void clear(void)	{ serial5_clear(); }
    46d4:	f7fe bbaa 	b.w	2e2c <serial5_clear>

000046d8 <_ZN15HardwareSerial517availableForWriteEv>:
_ZN15HardwareSerial517availableForWriteEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:398
	virtual int availableForWrite(void) { return serial5_write_buffer_free(); }
    46d8:	f7fe bb58 	b.w	2d8c <serial5_write_buffer_free>

000046dc <_ZN15HardwareSerial55writeEh>:
_ZN15HardwareSerial55writeEh():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:399
	virtual size_t write(uint8_t c) { serial5_putchar(c); return 1; }
    46dc:	b508      	push	{r3, lr}
    46de:	4608      	mov	r0, r1
    46e0:	f7fe fb00 	bl	2ce4 <serial5_putchar>
    46e4:	2001      	movs	r0, #1
    46e6:	bd08      	pop	{r3, pc}

000046e8 <_ZN15HardwareSerial59write9bitEm>:
_ZN15HardwareSerial59write9bitEm():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:409
	virtual size_t write(const uint8_t *buffer, size_t size)
					{ serial5_write(buffer, size); return size; }
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
					  serial5_write((const uint8_t *)str, len);
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial5_putchar(c); return 1; }
    46e8:	b508      	push	{r3, lr}
    46ea:	4608      	mov	r0, r1
    46ec:	f7fe fafa 	bl	2ce4 <serial5_putchar>
    46f0:	2001      	movs	r0, #1
    46f2:	bd08      	pop	{r3, pc}

000046f4 <_ZN15HardwareSerial55writeEPKhj>:
_ZN15HardwareSerial55writeEPKhj():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:404
	virtual size_t write(uint8_t c) { serial5_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
    46f4:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:405
					{ serial5_write(buffer, size); return size; }
    46f6:	4608      	mov	r0, r1
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:404
	virtual size_t write(uint8_t c) { serial5_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
    46f8:	4614      	mov	r4, r2
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:405
					{ serial5_write(buffer, size); return size; }
    46fa:	4611      	mov	r1, r2
    46fc:	f7fe fb30 	bl	2d60 <serial5_write>
    4700:	4620      	mov	r0, r4
    4702:	bd10      	pop	{r4, pc}

00004704 <_ZN15HardwareSerial55writeEPKc>:
_ZN15HardwareSerial55writeEPKc():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:406
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
    4704:	b538      	push	{r3, r4, r5, lr}
    4706:	4608      	mov	r0, r1
    4708:	460d      	mov	r5, r1
    470a:	f002 f8c2 	bl	6892 <strlen>
    470e:	4604      	mov	r4, r0
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:407
					  serial5_write((const uint8_t *)str, len);
    4710:	4621      	mov	r1, r4
    4712:	4628      	mov	r0, r5
    4714:	f7fe fb24 	bl	2d60 <serial5_write>
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:408
					  return len; }
    4718:	4620      	mov	r0, r4
    471a:	bd38      	pop	{r3, r4, r5, pc}

0000471c <_GLOBAL__sub_I_Serial5>:
Print():
C:\Teensy\Projects\HelloWorld/Print.h:50
    471c:	4b04      	ldr	r3, [pc, #16]	; (4730 <_GLOBAL__sub_I_Serial5+0x14>)
    471e:	2200      	movs	r2, #0
    4720:	711a      	strb	r2, [r3, #4]
Stream():
C:\Teensy\Projects\HelloWorld/Stream.h:30
    4722:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    4726:	731a      	strb	r2, [r3, #12]
HardwareSerial5():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:380
	operator bool()			{ return true; }
};
extern HardwareSerial4 Serial4;
extern void serialEvent4(void);

class HardwareSerial5 : public HardwareSerial
    4728:	4a02      	ldr	r2, [pc, #8]	; (4734 <_GLOBAL__sub_I_Serial5+0x18>)
HardwareSerial():
C:\Teensy\Projects\HelloWorld/Stream.h:30
    472a:	6099      	str	r1, [r3, #8]
HardwareSerial5():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:380
    472c:	601a      	str	r2, [r3, #0]
    472e:	4770      	bx	lr
    4730:	1fff0fa0 	.word	0x1fff0fa0
    4734:	0000a248 	.word	0x0000a248

00004738 <_Z12serialEvent6v>:
_Z12serialEvent6v():
C:\Teensy\Projects\HelloWorld/HardwareSerial6.cpp:8
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    4738:	4770      	bx	lr

0000473a <_ZN15HardwareSerial65writeEm>:
_ZN15HardwareSerial65writeEm():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:442
	virtual int read(void)          { return serial6_getchar(); }
	virtual void flush(void)        { serial6_flush(); }
	virtual void clear(void)	{ serial6_clear(); }
	virtual int availableForWrite(void) { return serial6_write_buffer_free(); }
	virtual size_t write(uint8_t c) { serial6_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    473a:	b508      	push	{r3, lr}
    473c:	6803      	ldr	r3, [r0, #0]
    473e:	b2c9      	uxtb	r1, r1
    4740:	681b      	ldr	r3, [r3, #0]
    4742:	4798      	blx	r3
    4744:	bd08      	pop	{r3, pc}

00004746 <_ZN15HardwareSerial65writeEl>:
_ZN15HardwareSerial65writeEl():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:443
	virtual size_t write(long n)            { return write((uint8_t)n); }
    4746:	b508      	push	{r3, lr}
    4748:	6803      	ldr	r3, [r0, #0]
    474a:	b2c9      	uxtb	r1, r1
    474c:	681b      	ldr	r3, [r3, #0]
    474e:	4798      	blx	r3
    4750:	bd08      	pop	{r3, pc}

00004752 <_ZN15HardwareSerial65writeEj>:
_ZN15HardwareSerial65writeEj():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:444
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    4752:	b508      	push	{r3, lr}
    4754:	6803      	ldr	r3, [r0, #0]
    4756:	b2c9      	uxtb	r1, r1
    4758:	681b      	ldr	r3, [r3, #0]
    475a:	4798      	blx	r3
    475c:	bd08      	pop	{r3, pc}

0000475e <_ZN15HardwareSerial65writeEi>:
_ZN15HardwareSerial65writeEi():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:445
	virtual size_t write(int n)             { return write((uint8_t)n); }
    475e:	b508      	push	{r3, lr}
    4760:	6803      	ldr	r3, [r0, #0]
    4762:	b2c9      	uxtb	r1, r1
    4764:	681b      	ldr	r3, [r3, #0]
    4766:	4798      	blx	r3
    4768:	bd08      	pop	{r3, pc}

0000476a <_ZN15HardwareSerial65beginEm>:
_ZN15HardwareSerial65beginEm():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:419

class HardwareSerial6 : public HardwareSerial
{
public:
#if defined(__MK66FX1M0__)	// For LPUART just pass baud straight in. 
	virtual void begin(uint32_t baud) { serial6_begin(baud); }
    476a:	4608      	mov	r0, r1
    476c:	f7fe bbc0 	b.w	2ef0 <serial6_begin>

00004770 <_ZN15HardwareSerial65beginEmm>:
_ZN15HardwareSerial65beginEmm():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:420
	virtual void begin(uint32_t baud, uint32_t format) {
    4770:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:421
					  serial6_begin(baud);
    4772:	4608      	mov	r0, r1
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:420
class HardwareSerial6 : public HardwareSerial
{
public:
#if defined(__MK66FX1M0__)	// For LPUART just pass baud straight in. 
	virtual void begin(uint32_t baud) { serial6_begin(baud); }
	virtual void begin(uint32_t baud, uint32_t format) {
    4774:	4614      	mov	r4, r2
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:421
					  serial6_begin(baud);
    4776:	f7fe fbbb 	bl	2ef0 <serial6_begin>
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:422
					  serial6_format(format); }
    477a:	4620      	mov	r0, r4
    477c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4780:	f7fe bc4e 	b.w	3020 <serial6_format>

00004784 <_ZN15HardwareSerial63endEv>:
_ZN15HardwareSerial63endEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:429
	virtual void begin(uint32_t baud) { serial6_begin(BAUD2DIV3(baud)); }
	virtual void begin(uint32_t baud, uint32_t format) {
					  serial6_begin(BAUD2DIV3(baud));
					  serial6_format(format); }
#endif
	virtual void end(void)          { serial6_end(); }
    4784:	f7fe bc86 	b.w	3094 <serial6_end>

00004788 <_ZN15HardwareSerial617transmitterEnableEh>:
_ZN15HardwareSerial617transmitterEnableEh():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:430
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
    4788:	4608      	mov	r0, r1
    478a:	f7fe bcad 	b.w	30e8 <serial6_set_transmit_pin>

0000478e <_ZN15HardwareSerial65setRXEh>:
_ZN15HardwareSerial65setRXEh():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:431
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
    478e:	4608      	mov	r0, r1
    4790:	f7fe bcec 	b.w	316c <serial6_set_rx>

00004794 <_ZN15HardwareSerial65setTXEhb>:
_ZN15HardwareSerial65setTXEhb():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:432
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
    4794:	4608      	mov	r0, r1
    4796:	4611      	mov	r1, r2
    4798:	f7fe bcc0 	b.w	311c <serial6_set_tx>

0000479c <_ZN15HardwareSerial69attachRtsEh>:
_ZN15HardwareSerial69attachRtsEh():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:433
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
    479c:	b508      	push	{r3, lr}
    479e:	4608      	mov	r0, r1
    47a0:	f7fe fce5 	bl	316e <serial6_set_rts>
    47a4:	3000      	adds	r0, #0
    47a6:	bf18      	it	ne
    47a8:	2001      	movne	r0, #1
    47aa:	bd08      	pop	{r3, pc}

000047ac <_ZN15HardwareSerial69attachCtsEh>:
_ZN15HardwareSerial69attachCtsEh():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:434
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
    47ac:	b508      	push	{r3, lr}
    47ae:	4608      	mov	r0, r1
    47b0:	f7fe fcfe 	bl	31b0 <serial6_set_cts>
    47b4:	3000      	adds	r0, #0
    47b6:	bf18      	it	ne
    47b8:	2001      	movne	r0, #1
    47ba:	bd08      	pop	{r3, pc}

000047bc <_ZN15HardwareSerial69availableEv>:
_ZN15HardwareSerial69availableEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:435
	virtual int available(void)     { return serial6_available(); }
    47bc:	f7fe bd7a 	b.w	32b4 <serial6_available>

000047c0 <_ZN15HardwareSerial64peekEv>:
_ZN15HardwareSerial64peekEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:436
	virtual int peek(void)          { return serial6_peek(); }
    47c0:	f7fe bda6 	b.w	3310 <serial6_peek>

000047c4 <_ZN15HardwareSerial64readEv>:
_ZN15HardwareSerial64readEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:437
	virtual int read(void)          { return serial6_getchar(); }
    47c4:	f7fe bd82 	b.w	32cc <serial6_getchar>

000047c8 <_ZN15HardwareSerial65flushEv>:
_ZN15HardwareSerial65flushEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:438
	virtual void flush(void)        { serial6_flush(); }
    47c8:	f7fe bd5b 	b.w	3282 <serial6_flush>

000047cc <_ZN15HardwareSerial65clearEv>:
_ZN15HardwareSerial65clearEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:439
	virtual void clear(void)	{ serial6_clear(); }
    47cc:	f7fe bdb4 	b.w	3338 <serial6_clear>

000047d0 <_ZN15HardwareSerial617availableForWriteEv>:
_ZN15HardwareSerial617availableForWriteEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:440
	virtual int availableForWrite(void) { return serial6_write_buffer_free(); }
    47d0:	f7fe bd62 	b.w	3298 <serial6_write_buffer_free>

000047d4 <_ZN15HardwareSerial65writeEh>:
_ZN15HardwareSerial65writeEh():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:441
	virtual size_t write(uint8_t c) { serial6_putchar(c); return 1; }
    47d4:	b508      	push	{r3, lr}
    47d6:	4608      	mov	r0, r1
    47d8:	f7fe fd08 	bl	31ec <serial6_putchar>
    47dc:	2001      	movs	r0, #1
    47de:	bd08      	pop	{r3, pc}

000047e0 <_ZN15HardwareSerial69write9bitEm>:
_ZN15HardwareSerial69write9bitEm():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:451
	virtual size_t write(const uint8_t *buffer, size_t size)
					{ serial6_write(buffer, size); return size; }
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
					  serial6_write((const uint8_t *)str, len);
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial6_putchar(c); return 1; }
    47e0:	b508      	push	{r3, lr}
    47e2:	4608      	mov	r0, r1
    47e4:	f7fe fd02 	bl	31ec <serial6_putchar>
    47e8:	2001      	movs	r0, #1
    47ea:	bd08      	pop	{r3, pc}

000047ec <_ZN15HardwareSerial65writeEPKhj>:
_ZN15HardwareSerial65writeEPKhj():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:446
	virtual size_t write(uint8_t c) { serial6_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
    47ec:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:447
					{ serial6_write(buffer, size); return size; }
    47ee:	4608      	mov	r0, r1
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:446
	virtual size_t write(uint8_t c) { serial6_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
    47f0:	4614      	mov	r4, r2
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:447
					{ serial6_write(buffer, size); return size; }
    47f2:	4611      	mov	r1, r2
    47f4:	f7fe fd3a 	bl	326c <serial6_write>
    47f8:	4620      	mov	r0, r4
    47fa:	bd10      	pop	{r4, pc}

000047fc <_ZN15HardwareSerial65writeEPKc>:
_ZN15HardwareSerial65writeEPKc():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:448
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
    47fc:	b538      	push	{r3, r4, r5, lr}
    47fe:	4608      	mov	r0, r1
    4800:	460d      	mov	r5, r1
    4802:	f002 f846 	bl	6892 <strlen>
    4806:	4604      	mov	r4, r0
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:449
					  serial6_write((const uint8_t *)str, len);
    4808:	4621      	mov	r1, r4
    480a:	4628      	mov	r0, r5
    480c:	f7fe fd2e 	bl	326c <serial6_write>
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:450
					  return len; }
    4810:	4620      	mov	r0, r4
    4812:	bd38      	pop	{r3, r4, r5, pc}

00004814 <_GLOBAL__sub_I_Serial6>:
Print():
C:\Teensy\Projects\HelloWorld/Print.h:50
    4814:	4b04      	ldr	r3, [pc, #16]	; (4828 <_GLOBAL__sub_I_Serial6+0x14>)
    4816:	2200      	movs	r2, #0
    4818:	711a      	strb	r2, [r3, #4]
Stream():
C:\Teensy\Projects\HelloWorld/Stream.h:30
    481a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    481e:	731a      	strb	r2, [r3, #12]
HardwareSerial6():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:415
	operator bool()			{ return true; }
};
extern HardwareSerial5 Serial5;
extern void serialEvent5(void);

class HardwareSerial6 : public HardwareSerial
    4820:	4a02      	ldr	r2, [pc, #8]	; (482c <_GLOBAL__sub_I_Serial6+0x18>)
HardwareSerial():
C:\Teensy\Projects\HelloWorld/Stream.h:30
    4822:	6099      	str	r1, [r3, #8]
HardwareSerial6():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:415
    4824:	601a      	str	r2, [r3, #0]
    4826:	4770      	bx	lr
    4828:	1fff0fb0 	.word	0x1fff0fb0
    482c:	0000a2a8 	.word	0x0000a2a8

00004830 <main>:
main():
C:\Teensy\Projects\HelloWorld/main.cpp:7
#include "WProgram.h"

#define printf Serial.printf

extern "C" int main(void)
{ 
    4830:	b538      	push	{r3, r4, r5, lr}
C:\Teensy\Projects\HelloWorld/main.cpp:9
  //configure PORTC_PCR5 to be an output.
  (*(volatile uint8_t *)0x43FE1294) = 1;
    4832:	4b14      	ldr	r3, [pc, #80]	; (4884 <main+0x54>)
    4834:	2201      	movs	r2, #1
    4836:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/main.cpp:13

  //configure PORT C pin 5 as fast slew rate,
  //high drive strength, and analog input disabled (p222)
  PORTC_PCR5 = 0x0144;
    4838:	4b13      	ldr	r3, [pc, #76]	; (4888 <main+0x58>)
    483a:	f44f 72a2 	mov.w	r2, #324	; 0x144
    483e:	601a      	str	r2, [r3, #0]
_ZN16usb_serial_class5flushEv():
C:\Teensy\Projects\HelloWorld/usb_serial.h:79
        void begin(long) { /* TODO: call a function that tries to wait for enumeration */ };
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    4840:	f7ff fc7a 	bl	4138 <usb_serial_flush_output>
main():
C:\Teensy\Projects\HelloWorld/main.cpp:19

  uint32_t i = 0;

  Serial.begin(9600);
  Serial.flush(); 
  delay(1000);
    4844:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4848:	f7fc fd70 	bl	132c <delay>
C:\Teensy\Projects\HelloWorld/main.cpp:20
  printf("Starting now!\n");
    484c:	480f      	ldr	r0, [pc, #60]	; (488c <main+0x5c>)
    484e:	4910      	ldr	r1, [pc, #64]	; (4890 <main+0x60>)
    4850:	f000 f86d 	bl	492e <_ZN5Print6printfEPKcz>
C:\Teensy\Projects\HelloWorld/main.cpp:15

  //configure PORT C pin 5 as fast slew rate,
  //high drive strength, and analog input disabled (p222)
  PORTC_PCR5 = 0x0144;

  uint32_t i = 0;
    4854:	2500      	movs	r5, #0
C:\Teensy\Projects\HelloWorld/main.cpp:26 (discriminator 1)


  for(;1;i+=2)
  {
    delay(50);//wait .5s
    GPIOC_PDOR |= 1<<5;//turn on pin 5 of port C (LED pin)
    4856:	4c0f      	ldr	r4, [pc, #60]	; (4894 <main+0x64>)
C:\Teensy\Projects\HelloWorld/main.cpp:25 (discriminator 1)
  printf("Starting now!\n");


  for(;1;i+=2)
  {
    delay(50);//wait .5s
    4858:	2032      	movs	r0, #50	; 0x32
    485a:	f7fc fd67 	bl	132c <delay>
C:\Teensy\Projects\HelloWorld/main.cpp:26 (discriminator 1)
    GPIOC_PDOR |= 1<<5;//turn on pin 5 of port C (LED pin)
    485e:	6823      	ldr	r3, [r4, #0]
    4860:	f043 0320 	orr.w	r3, r3, #32
    4864:	6023      	str	r3, [r4, #0]
C:\Teensy\Projects\HelloWorld/main.cpp:27 (discriminator 1)
    delay(50);//wait .5s
    4866:	2032      	movs	r0, #50	; 0x32
    4868:	f7fc fd60 	bl	132c <delay>
C:\Teensy\Projects\HelloWorld/main.cpp:28 (discriminator 1)
    GPIOC_PDOR &= ~(1<<5);//turn off pin 5
    486c:	6823      	ldr	r3, [r4, #0]
C:\Teensy\Projects\HelloWorld/main.cpp:29 (discriminator 1)
    printf("%d\n",i);
    486e:	4807      	ldr	r0, [pc, #28]	; (488c <main+0x5c>)
    4870:	4909      	ldr	r1, [pc, #36]	; (4898 <main+0x68>)
C:\Teensy\Projects\HelloWorld/main.cpp:28 (discriminator 1)
  for(;1;i+=2)
  {
    delay(50);//wait .5s
    GPIOC_PDOR |= 1<<5;//turn on pin 5 of port C (LED pin)
    delay(50);//wait .5s
    GPIOC_PDOR &= ~(1<<5);//turn off pin 5
    4872:	f023 0320 	bic.w	r3, r3, #32
C:\Teensy\Projects\HelloWorld/main.cpp:29 (discriminator 1)
    printf("%d\n",i);
    4876:	462a      	mov	r2, r5
C:\Teensy\Projects\HelloWorld/main.cpp:28 (discriminator 1)
  for(;1;i+=2)
  {
    delay(50);//wait .5s
    GPIOC_PDOR |= 1<<5;//turn on pin 5 of port C (LED pin)
    delay(50);//wait .5s
    GPIOC_PDOR &= ~(1<<5);//turn off pin 5
    4878:	6023      	str	r3, [r4, #0]
C:\Teensy\Projects\HelloWorld/main.cpp:29 (discriminator 1)
    printf("%d\n",i);
    487a:	f000 f858 	bl	492e <_ZN5Print6printfEPKcz>
C:\Teensy\Projects\HelloWorld/main.cpp:23 (discriminator 1)
  Serial.flush(); 
  delay(1000);
  printf("Starting now!\n");


  for(;1;i+=2)
    487e:	3502      	adds	r5, #2
    4880:	e7e9      	b.n	4856 <main+0x26>
    4882:	bf00      	nop
    4884:	43fe1294 	.word	0x43fe1294
    4888:	4004b014 	.word	0x4004b014
    488c:	1fff0fc0 	.word	0x1fff0fc0
    4890:	0000a300 	.word	0x0000a300
    4894:	400ff080 	.word	0x400ff080
    4898:	0000a30f 	.word	0x0000a30f
$d():
    489c:	ffffffff 	.word	0xffffffff

000048a0 <_ZN5Print5writeEPKhj>:
_ZN5Print5writeEPKhj():
C:\Teensy\Projects\HelloWorld/Print.cpp:31
#include "Print.h"



size_t Print::write(const uint8_t *buffer, size_t size)
{
    48a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48a2:	4606      	mov	r6, r0
    48a4:	460c      	mov	r4, r1
    48a6:	188f      	adds	r7, r1, r2
C:\Teensy\Projects\HelloWorld/Print.cpp:32
	size_t count = 0;
    48a8:	2500      	movs	r5, #0
C:\Teensy\Projects\HelloWorld/Print.cpp:33 (discriminator 1)
	while (size--) count += write(*buffer++);
    48aa:	42bc      	cmp	r4, r7
    48ac:	d007      	beq.n	48be <_ZN5Print5writeEPKhj+0x1e>
C:\Teensy\Projects\HelloWorld/Print.cpp:33 (discriminator 2)
    48ae:	6833      	ldr	r3, [r6, #0]
    48b0:	f814 1b01 	ldrb.w	r1, [r4], #1
    48b4:	681b      	ldr	r3, [r3, #0]
    48b6:	4630      	mov	r0, r6
    48b8:	4798      	blx	r3
    48ba:	4405      	add	r5, r0
    48bc:	e7f5      	b.n	48aa <_ZN5Print5writeEPKhj+0xa>
C:\Teensy\Projects\HelloWorld/Print.cpp:35
	return count;
}
    48be:	4628      	mov	r0, r5
    48c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000048c2 <_ZN5Print5printERK6String>:
_ZN5Print5printERK6String():
C:\Teensy\Projects\HelloWorld/Print.cpp:39


size_t Print::print(const String &s)
{
    48c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
C:\Teensy\Projects\HelloWorld/Print.cpp:42
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
    48c6:	2500      	movs	r5, #0
C:\Teensy\Projects\HelloWorld/Print.cpp:38
	while (size--) count += write(*buffer++);
	return count;
}


size_t Print::print(const String &s)
    48c8:	688c      	ldr	r4, [r1, #8]
C:\Teensy\Projects\HelloWorld/Print.cpp:39
{
    48ca:	b08a      	sub	sp, #40	; 0x28
    48cc:	4607      	mov	r7, r0
    48ce:	4688      	mov	r8, r1
C:\Teensy\Projects\HelloWorld/Print.cpp:41
	uint8_t buffer[33];
	size_t count = 0;
    48d0:	462e      	mov	r6, r5
C:\Teensy\Projects\HelloWorld/Print.cpp:44 (discriminator 1)
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    48d2:	b194      	cbz	r4, 48fa <_ZN5Print5printERK6String+0x38>
C:\Teensy\Projects\HelloWorld/Print.cpp:45
		s.getBytes(buffer, sizeof(buffer), index);
    48d4:	462b      	mov	r3, r5
    48d6:	4640      	mov	r0, r8
    48d8:	a901      	add	r1, sp, #4
    48da:	2221      	movs	r2, #33	; 0x21
    48dc:	f000 fc7f 	bl	51de <_ZNK6String8getBytesEPhjj>
C:\Teensy\Projects\HelloWorld/Print.cpp:50
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
		len -= nbytes;
		count += write(buffer, nbytes);
    48e0:	683b      	ldr	r3, [r7, #0]
    48e2:	2c20      	cmp	r4, #32
    48e4:	bf34      	ite	cc
    48e6:	4622      	movcc	r2, r4
    48e8:	2220      	movcs	r2, #32
    48ea:	685b      	ldr	r3, [r3, #4]
    48ec:	4638      	mov	r0, r7
    48ee:	a901      	add	r1, sp, #4
C:\Teensy\Projects\HelloWorld/Print.cpp:48
	unsigned int len = s.length();
	while (len > 0) {
		s.getBytes(buffer, sizeof(buffer), index);
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
    48f0:	4415      	add	r5, r2
C:\Teensy\Projects\HelloWorld/Print.cpp:49
		len -= nbytes;
    48f2:	1aa4      	subs	r4, r4, r2
C:\Teensy\Projects\HelloWorld/Print.cpp:50
		count += write(buffer, nbytes);
    48f4:	4798      	blx	r3
    48f6:	4406      	add	r6, r0
    48f8:	e7eb      	b.n	48d2 <_ZN5Print5printERK6String+0x10>
C:\Teensy\Projects\HelloWorld/Print.cpp:53
	}
	return count;
}
    48fa:	4630      	mov	r0, r6
    48fc:	b00a      	add	sp, #40	; 0x28
    48fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004902 <_ZN5Print7printlnEv>:
_ZN5Print7printlnEv():
C:\Teensy\Projects\HelloWorld/Print.cpp:69
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    4902:	b507      	push	{r0, r1, r2, lr}
C:\Teensy\Projects\HelloWorld/Print.cpp:70
	uint8_t buf[2]={'\r', '\n'};
    4904:	4b05      	ldr	r3, [pc, #20]	; (491c <_ZN5Print7printlnEv+0x1a>)
    4906:	881b      	ldrh	r3, [r3, #0]
    4908:	f8ad 3004 	strh.w	r3, [sp, #4]
C:\Teensy\Projects\HelloWorld/Print.cpp:71
	return write(buf, 2);
    490c:	6803      	ldr	r3, [r0, #0]
    490e:	a901      	add	r1, sp, #4
    4910:	685b      	ldr	r3, [r3, #4]
    4912:	2202      	movs	r2, #2
    4914:	4798      	blx	r3
C:\Teensy\Projects\HelloWorld/Print.cpp:72
}
    4916:	b003      	add	sp, #12
    4918:	f85d fb04 	ldr.w	pc, [sp], #4
    491c:	0000a318 	.word	0x0000a318

00004920 <_write>:
_write():
C:\Teensy\Projects\HelloWorld/Print.cpp:77

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    4920:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/Print.cpp:78
	((class Print *)file)->write((uint8_t *)ptr, len);
    4922:	6803      	ldr	r3, [r0, #0]
C:\Teensy\Projects\HelloWorld/Print.cpp:77
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    4924:	4614      	mov	r4, r2
C:\Teensy\Projects\HelloWorld/Print.cpp:78
	((class Print *)file)->write((uint8_t *)ptr, len);
    4926:	685b      	ldr	r3, [r3, #4]
    4928:	4798      	blx	r3
C:\Teensy\Projects\HelloWorld/Print.cpp:80
	return len;
}
    492a:	4620      	mov	r0, r4
    492c:	bd10      	pop	{r4, pc}

0000492e <_ZN5Print6printfEPKcz>:
_ZN5Print6printfEPKcz():
C:\Teensy\Projects\HelloWorld/Print.cpp:84
}

int Print::printf(const char *format, ...)
{
    492e:	b40e      	push	{r1, r2, r3}
    4930:	b503      	push	{r0, r1, lr}
    4932:	aa03      	add	r2, sp, #12
    4934:	f852 1b04 	ldr.w	r1, [r2], #4
C:\Teensy\Projects\HelloWorld/Print.cpp:86
	va_list ap;
	va_start(ap, format);
    4938:	9201      	str	r2, [sp, #4]
C:\Teensy\Projects\HelloWorld/Print.cpp:90
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    493a:	f002 ff49 	bl	77d0 <vdiprintf>
C:\Teensy\Projects\HelloWorld/Print.cpp:92
#endif
}
    493e:	b002      	add	sp, #8
    4940:	f85d eb04 	ldr.w	lr, [sp], #4
    4944:	b003      	add	sp, #12
    4946:	4770      	bx	lr

00004948 <_ZN5Print6printfEPK19__FlashStringHelperz>:
_ZN5Print6printfEPK19__FlashStringHelperz():
C:\Teensy\Projects\HelloWorld/Print.cpp:95

int Print::printf(const __FlashStringHelper *format, ...)
{
    4948:	b40e      	push	{r1, r2, r3}
    494a:	b503      	push	{r0, r1, lr}
    494c:	aa03      	add	r2, sp, #12
    494e:	f852 1b04 	ldr.w	r1, [r2], #4
C:\Teensy\Projects\HelloWorld/Print.cpp:97
	va_list ap;
	va_start(ap, format);
    4952:	9201      	str	r2, [sp, #4]
C:\Teensy\Projects\HelloWorld/Print.cpp:101
#ifdef __STRICT_ANSI__
	return 0;
#else
	return vdprintf((int)this, (const char *)format, ap);
    4954:	f002 ff3c 	bl	77d0 <vdiprintf>
C:\Teensy\Projects\HelloWorld/Print.cpp:103
#endif
}
    4958:	b002      	add	sp, #8
    495a:	f85d eb04 	ldr.w	lr, [sp], #4
    495e:	b003      	add	sp, #12
    4960:	4770      	bx	lr

00004962 <_ZN5Print11printNumberEmhh>:
_ZN5Print11printNumberEmhh():
C:\Teensy\Projects\HelloWorld/Print.cpp:243
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    4962:	b570      	push	{r4, r5, r6, lr}
    4964:	4605      	mov	r5, r0
    4966:	b08a      	sub	sp, #40	; 0x28
C:\Teensy\Projects\HelloWorld/Print.cpp:250
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    4968:	b922      	cbnz	r2, 4974 <_ZN5Print11printNumberEmhh+0x12>
C:\Teensy\Projects\HelloWorld/Print.cpp:251
		return write((uint8_t)n);
    496a:	6803      	ldr	r3, [r0, #0]
    496c:	b2c9      	uxtb	r1, r1
    496e:	681b      	ldr	r3, [r3, #0]
    4970:	4798      	blx	r3
    4972:	e02c      	b.n	49ce <_ZN5Print11printNumberEmhh+0x6c>
C:\Teensy\Projects\HelloWorld/Print.cpp:253
	} else if (base == 1) {
		base = 10;
    4974:	2a01      	cmp	r2, #1
    4976:	bf08      	it	eq
    4978:	220a      	moveq	r2, #10
C:\Teensy\Projects\HelloWorld/Print.cpp:257
	}


	if (n == 0) {
    497a:	b921      	cbnz	r1, 4986 <_ZN5Print11printNumberEmhh+0x24>
C:\Teensy\Projects\HelloWorld/Print.cpp:258
		buf[sizeof(buf) - 1] = '0';
    497c:	2230      	movs	r2, #48	; 0x30
    497e:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
C:\Teensy\Projects\HelloWorld/Print.cpp:259
		i = sizeof(buf) - 1;
    4982:	2421      	movs	r4, #33	; 0x21
    4984:	e013      	b.n	49ae <_ZN5Print11printNumberEmhh+0x4c>
C:\Teensy\Projects\HelloWorld/Print.cpp:257
	} else if (base == 1) {
		base = 10;
	}


	if (n == 0) {
    4986:	2421      	movs	r4, #33	; 0x21
C:\Teensy\Projects\HelloWorld/Print.cpp:263
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    4988:	fbb1 f0f2 	udiv	r0, r1, r2
    498c:	fb02 1110 	mls	r1, r2, r0, r1
    4990:	b2c9      	uxtb	r1, r1
C:\Teensy\Projects\HelloWorld/Print.cpp:264
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    4992:	2909      	cmp	r1, #9
    4994:	ae0a      	add	r6, sp, #40	; 0x28
    4996:	bf94      	ite	ls
    4998:	3130      	addls	r1, #48	; 0x30
    499a:	3137      	addhi	r1, #55	; 0x37
    499c:	4426      	add	r6, r4
    499e:	b2c9      	uxtb	r1, r1
    49a0:	f806 1c24 	strb.w	r1, [r6, #-36]
C:\Teensy\Projects\HelloWorld/Print.cpp:266
			n /= base;
			if (n == 0) break;
    49a4:	4601      	mov	r1, r0
    49a6:	b110      	cbz	r0, 49ae <_ZN5Print11printNumberEmhh+0x4c>
C:\Teensy\Projects\HelloWorld/Print.cpp:267
			i--;
    49a8:	3c01      	subs	r4, #1
    49aa:	b2e4      	uxtb	r4, r4
C:\Teensy\Projects\HelloWorld/Print.cpp:257
	} else if (base == 1) {
		base = 10;
	}


	if (n == 0) {
    49ac:	e7ec      	b.n	4988 <_ZN5Print11printNumberEmhh+0x26>
C:\Teensy\Projects\HelloWorld/Print.cpp:270
			n /= base;
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
    49ae:	b133      	cbz	r3, 49be <_ZN5Print11printNumberEmhh+0x5c>
C:\Teensy\Projects\HelloWorld/Print.cpp:271
		i--;
    49b0:	3c01      	subs	r4, #1
    49b2:	b2e4      	uxtb	r4, r4
C:\Teensy\Projects\HelloWorld/Print.cpp:272
		buf[i] = '-';
    49b4:	ab0a      	add	r3, sp, #40	; 0x28
    49b6:	4423      	add	r3, r4
    49b8:	222d      	movs	r2, #45	; 0x2d
    49ba:	f803 2c24 	strb.w	r2, [r3, #-36]
C:\Teensy\Projects\HelloWorld/Print.cpp:274
	}
	return write(buf + i, sizeof(buf) - i);
    49be:	682b      	ldr	r3, [r5, #0]
    49c0:	a901      	add	r1, sp, #4
    49c2:	685b      	ldr	r3, [r3, #4]
    49c4:	4628      	mov	r0, r5
    49c6:	4421      	add	r1, r4
    49c8:	f1c4 0222 	rsb	r2, r4, #34	; 0x22
    49cc:	4798      	blx	r3
C:\Teensy\Projects\HelloWorld/Print.cpp:275
}
    49ce:	b00a      	add	sp, #40	; 0x28
    49d0:	bd70      	pop	{r4, r5, r6, pc}

000049d2 <_ZN5Print5printEl>:
_ZN5Print5printEl():
C:\Teensy\Projects\HelloWorld/Print.cpp:60

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    49d2:	2900      	cmp	r1, #0
C:\Teensy\Projects\HelloWorld/Print.cpp:62
		sign = '-';
		n = -n;
    49d4:	bfba      	itte	lt
    49d6:	4249      	neglt	r1, r1
C:\Teensy\Projects\HelloWorld/Print.cpp:61
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    49d8:	232d      	movlt	r3, #45	; 0x2d
C:\Teensy\Projects\HelloWorld/Print.cpp:58
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    49da:	2300      	movge	r3, #0
C:\Teensy\Projects\HelloWorld/Print.cpp:64

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    49dc:	220a      	movs	r2, #10
    49de:	f7ff bfc0 	b.w	4962 <_ZN5Print11printNumberEmhh>

000049e2 <_ZN5Print10printFloatEdh>:
_ZN5Print10printFloatEdh():
C:\Teensy\Projects\HelloWorld/Print.cpp:280
}

#endif

size_t Print::printFloat(double number, uint8_t digits) 
{
    49e2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    49e6:	4680      	mov	r8, r0
C:\Teensy\Projects\HelloWorld/Print.cpp:284
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    49e8:	4619      	mov	r1, r3
    49ea:	4610      	mov	r0, r2
C:\Teensy\Projects\HelloWorld/Print.cpp:280
}

#endif

size_t Print::printFloat(double number, uint8_t digits) 
{
    49ec:	4614      	mov	r4, r2
    49ee:	461d      	mov	r5, r3
    49f0:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
C:\Teensy\Projects\HelloWorld/Print.cpp:284
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    49f4:	f000 fdda 	bl	55ac <__fpclassifyd>
    49f8:	b910      	cbnz	r0, 4a00 <_ZN5Print10printFloatEdh+0x1e>
_ZN5Print5printEPKc():
C:\Teensy\Projects\HelloWorld/Print.h:57
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    49fa:	4640      	mov	r0, r8
    49fc:	494c      	ldr	r1, [pc, #304]	; (4b30 <_ZN5Print10printFloatEdh+0x14e>)
    49fe:	e007      	b.n	4a10 <_ZN5Print10printFloatEdh+0x2e>
_ZN5Print10printFloatEdh():
C:\Teensy\Projects\HelloWorld/Print.cpp:285 (discriminator 2)
    	if (isinf(number)) return print("inf");
    4a00:	4620      	mov	r0, r4
    4a02:	4629      	mov	r1, r5
    4a04:	f000 fdd2 	bl	55ac <__fpclassifyd>
    4a08:	2801      	cmp	r0, #1
    4a0a:	d105      	bne.n	4a18 <_ZN5Print10printFloatEdh+0x36>
_ZN5Print5printEPKc():
C:\Teensy\Projects\HelloWorld/Print.h:57
    4a0c:	4949      	ldr	r1, [pc, #292]	; (4b34 <_ZN5Print10printFloatEdh+0x152>)
    4a0e:	4640      	mov	r0, r8
    4a10:	f7ff fbd4 	bl	41bc <_ZN5Print5writeEPKc>
    4a14:	4606      	mov	r6, r0
_ZN5Print10printFloatEdh():
C:\Teensy\Projects\HelloWorld/Print.cpp:285
    4a16:	e080      	b.n	4b1a <_ZN5Print10printFloatEdh+0x138>
C:\Teensy\Projects\HelloWorld/Print.cpp:286
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    4a18:	4620      	mov	r0, r4
    4a1a:	4629      	mov	r1, r5
    4a1c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    4a20:	4b45      	ldr	r3, [pc, #276]	; (4b38 <_ZN5Print10printFloatEdh+0x156>)
    4a22:	f001 fa33 	bl	5e8c <__aeabi_dcmpgt>
    4a26:	b110      	cbz	r0, 4a2e <_ZN5Print10printFloatEdh+0x4c>
_ZN5Print5printEPKc():
C:\Teensy\Projects\HelloWorld/Print.h:57
    4a28:	4640      	mov	r0, r8
    4a2a:	4944      	ldr	r1, [pc, #272]	; (4b3c <_ZN5Print10printFloatEdh+0x15a>)
    4a2c:	e7f0      	b.n	4a10 <_ZN5Print10printFloatEdh+0x2e>
_ZN5Print10printFloatEdh():
C:\Teensy\Projects\HelloWorld/Print.cpp:287
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    4a2e:	4620      	mov	r0, r4
    4a30:	4629      	mov	r1, r5
    4a32:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    4a36:	4b42      	ldr	r3, [pc, #264]	; (4b40 <_ZN5Print10printFloatEdh+0x15e>)
    4a38:	f001 fa0a 	bl	5e50 <__aeabi_dcmplt>
    4a3c:	2800      	cmp	r0, #0
    4a3e:	d1f3      	bne.n	4a28 <_ZN5Print10printFloatEdh+0x46>
C:\Teensy\Projects\HelloWorld/Print.cpp:290
	
	// Handle negative numbers
	if (number < 0.0) {
    4a40:	4620      	mov	r0, r4
    4a42:	4629      	mov	r1, r5
    4a44:	2200      	movs	r2, #0
    4a46:	2300      	movs	r3, #0
    4a48:	f001 fa02 	bl	5e50 <__aeabi_dcmplt>
    4a4c:	b120      	cbz	r0, 4a58 <_ZN5Print10printFloatEdh+0x76>
C:\Teensy\Projects\HelloWorld/Print.cpp:292
		sign = 1;
		number = -number;
    4a4e:	f105 4700 	add.w	r7, r5, #2147483648	; 0x80000000
    4a52:	463d      	mov	r5, r7
C:\Teensy\Projects\HelloWorld/Print.cpp:291
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
	
	// Handle negative numbers
	if (number < 0.0) {
		sign = 1;
    4a54:	2601      	movs	r6, #1
    4a56:	e000      	b.n	4a5a <_ZN5Print10printFloatEdh+0x78>
C:\Teensy\Projects\HelloWorld/Print.cpp:281

#endif

size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
    4a58:	4606      	mov	r6, r0
C:\Teensy\Projects\HelloWorld/Print.cpp:296
		sign = 1;
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
    4a5a:	4b3a      	ldr	r3, [pc, #232]	; (4b44 <_ZN5Print10printFloatEdh+0x162>)
C:\Teensy\Projects\HelloWorld/Print.cpp:297
	for (uint8_t i=0; i<digits; ++i) {
    4a5c:	2700      	movs	r7, #0
C:\Teensy\Projects\HelloWorld/Print.cpp:296
		sign = 1;
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
    4a5e:	2200      	movs	r2, #0
C:\Teensy\Projects\HelloWorld/Print.cpp:297 (discriminator 1)
	for (uint8_t i=0; i<digits; ++i) {
    4a60:	b2f9      	uxtb	r1, r7
    4a62:	4549      	cmp	r1, r9
    4a64:	d20a      	bcs.n	4a7c <_ZN5Print10printFloatEdh+0x9a>
C:\Teensy\Projects\HelloWorld/Print.cpp:298 (discriminator 2)
		rounding *= 0.1;
    4a66:	4610      	mov	r0, r2
    4a68:	4619      	mov	r1, r3
    4a6a:	a32f      	add	r3, pc, #188	; (adr r3, 4b28 <_ZN5Print10printFloatEdh+0x146>)
    4a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4a70:	f000 ff7c 	bl	596c <__aeabi_dmul>
    4a74:	3701      	adds	r7, #1
    4a76:	4602      	mov	r2, r0
    4a78:	460b      	mov	r3, r1
    4a7a:	e7f1      	b.n	4a60 <_ZN5Print10printFloatEdh+0x7e>
C:\Teensy\Projects\HelloWorld/Print.cpp:300
	}
	number += rounding;
    4a7c:	4620      	mov	r0, r4
    4a7e:	4629      	mov	r1, r5
    4a80:	f000 fdc2 	bl	5608 <__adddf3>
    4a84:	460d      	mov	r5, r1
    4a86:	4604      	mov	r4, r0
C:\Teensy\Projects\HelloWorld/Print.cpp:303

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    4a88:	f001 fa32 	bl	5ef0 <__aeabi_d2uiz>
    4a8c:	4607      	mov	r7, r0
C:\Teensy\Projects\HelloWorld/Print.cpp:305
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    4a8e:	4633      	mov	r3, r6
    4a90:	4640      	mov	r0, r8
    4a92:	4639      	mov	r1, r7
    4a94:	220a      	movs	r2, #10
    4a96:	f7ff ff64 	bl	4962 <_ZN5Print11printNumberEmhh>
    4a9a:	4606      	mov	r6, r0
C:\Teensy\Projects\HelloWorld/Print.cpp:308

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
    4a9c:	f1b9 0f00 	cmp.w	r9, #0
    4aa0:	d03b      	beq.n	4b1a <_ZN5Print10printFloatEdh+0x138>
C:\Teensy\Projects\HelloWorld/Print.cpp:304
	}
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
    4aa2:	4638      	mov	r0, r7
    4aa4:	f000 feec 	bl	5880 <__aeabi_ui2d>
    4aa8:	f1b9 0f0f 	cmp.w	r9, #15
    4aac:	bf28      	it	cs
    4aae:	f04f 090f 	movcs.w	r9, #15
    4ab2:	460b      	mov	r3, r1
    4ab4:	4602      	mov	r2, r0
    4ab6:	4629      	mov	r1, r5
    4ab8:	4620      	mov	r0, r4
    4aba:	f000 fda3 	bl	5604 <__aeabi_dsub>
    4abe:	f109 0901 	add.w	r9, r9, #1
C:\Teensy\Projects\HelloWorld/Print.cpp:310
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    4ac2:	232e      	movs	r3, #46	; 0x2e
    4ac4:	f88d 3000 	strb.w	r3, [sp]
    4ac8:	fa5f f989 	uxtb.w	r9, r9
    4acc:	f04f 0a01 	mov.w	sl, #1
C:\Teensy\Projects\HelloWorld/Print.cpp:316

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    4ad0:	2200      	movs	r2, #0
    4ad2:	4b1d      	ldr	r3, [pc, #116]	; (4b48 <_ZN5Print10printFloatEdh+0x166>)
    4ad4:	f000 ff4a 	bl	596c <__aeabi_dmul>
    4ad8:	460d      	mov	r5, r1
    4ada:	4604      	mov	r4, r0
C:\Teensy\Projects\HelloWorld/Print.cpp:317
			n = (uint8_t)(remainder);
    4adc:	f001 fa08 	bl	5ef0 <__aeabi_d2uiz>
C:\Teensy\Projects\HelloWorld/Print.cpp:318
			buf[count++] = '0' + n;
    4ae0:	ab04      	add	r3, sp, #16
    4ae2:	4453      	add	r3, sl
C:\Teensy\Projects\HelloWorld/Print.cpp:317
		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
			n = (uint8_t)(remainder);
    4ae4:	b2c0      	uxtb	r0, r0
C:\Teensy\Projects\HelloWorld/Print.cpp:318
			buf[count++] = '0' + n;
    4ae6:	f100 0230 	add.w	r2, r0, #48	; 0x30
    4aea:	f803 2c10 	strb.w	r2, [r3, #-16]
C:\Teensy\Projects\HelloWorld/Print.cpp:319
			remainder -= n; 
    4aee:	f000 fed7 	bl	58a0 <__aeabi_i2d>
C:\Teensy\Projects\HelloWorld/Print.cpp:318
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    4af2:	f10a 0701 	add.w	r7, sl, #1
C:\Teensy\Projects\HelloWorld/Print.cpp:319
			remainder -= n; 
    4af6:	4602      	mov	r2, r0
    4af8:	460b      	mov	r3, r1
C:\Teensy\Projects\HelloWorld/Print.cpp:318
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    4afa:	b2ff      	uxtb	r7, r7
C:\Teensy\Projects\HelloWorld/Print.cpp:319
			remainder -= n; 
    4afc:	4620      	mov	r0, r4
    4afe:	4629      	mov	r1, r5
    4b00:	f000 fd80 	bl	5604 <__aeabi_dsub>
C:\Teensy\Projects\HelloWorld/Print.cpp:315
		buf[0] = '.';

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    4b04:	454f      	cmp	r7, r9
    4b06:	d001      	beq.n	4b0c <_ZN5Print10printFloatEdh+0x12a>
C:\Teensy\Projects\HelloWorld/Print.cpp:318
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    4b08:	46ba      	mov	sl, r7
    4b0a:	e7e1      	b.n	4ad0 <_ZN5Print10printFloatEdh+0xee>
C:\Teensy\Projects\HelloWorld/Print.cpp:321
			remainder -= n; 
		}
		count += write(buf, count);
    4b0c:	f8d8 3000 	ldr.w	r3, [r8]
    4b10:	4640      	mov	r0, r8
    4b12:	685b      	ldr	r3, [r3, #4]
    4b14:	4669      	mov	r1, sp
    4b16:	464a      	mov	r2, r9
    4b18:	4798      	blx	r3
C:\Teensy\Projects\HelloWorld/Print.cpp:324
	}
	return count;
}
    4b1a:	4630      	mov	r0, r6
    4b1c:	b004      	add	sp, #16
    4b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4b22:	bf00      	nop
    4b24:	f3af 8000 	nop.w
    4b28:	9999999a 	.word	0x9999999a
    4b2c:	3fb99999 	.word	0x3fb99999
    4b30:	0000a330 	.word	0x0000a330
    4b34:	0000a334 	.word	0x0000a334
    4b38:	41efffff 	.word	0x41efffff
    4b3c:	0000a338 	.word	0x0000a338
    4b40:	c1efffff 	.word	0xc1efffff
    4b44:	3fe00000 	.word	0x3fe00000
    4b48:	40240000 	.word	0x40240000
$t():
    4b4c:	f3af 8000 	nop.w

00004b50 <_Z11serialEventv>:
_Z11serialEventv():
C:\Teensy\Projects\HelloWorld/usb_inst.cpp:64
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    4b50:	4770      	bx	lr

00004b52 <_ZN16usb_serial_class9availableEv>:
_ZN16usb_serial_class9availableEv():
C:\Teensy\Projects\HelloWorld/usb_serial.h:76
class usb_serial_class : public Stream
{
public:
        void begin(long) { /* TODO: call a function that tries to wait for enumeration */ };
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    4b52:	f7ff ba05 	b.w	3f60 <usb_serial_available>

00004b56 <_ZN16usb_serial_class4readEv>:
_ZN16usb_serial_class4readEv():
C:\Teensy\Projects\HelloWorld/usb_serial.h:77
        virtual int read() { return usb_serial_getchar(); }
    4b56:	f7ff b9c1 	b.w	3edc <usb_serial_getchar>

00004b5a <_ZN16usb_serial_class4peekEv>:
_ZN16usb_serial_class4peekEv():
C:\Teensy\Projects\HelloWorld/usb_serial.h:78
        virtual int peek() { return usb_serial_peekchar(); }
    4b5a:	f7ff b9e5 	b.w	3f28 <usb_serial_peekchar>

00004b5e <_ZN16usb_serial_class5flushEv>:
_ZN16usb_serial_class5flushEv():
C:\Teensy\Projects\HelloWorld/usb_serial.h:79
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    4b5e:	f7ff baeb 	b.w	4138 <usb_serial_flush_output>

00004b62 <_ZN16usb_serial_class5clearEv>:
_ZN16usb_serial_class5clearEv():
C:\Teensy\Projects\HelloWorld/usb_serial.h:80
        virtual void clear(void) { usb_serial_flush_input(); }
    4b62:	f7ff ba49 	b.w	3ff8 <usb_serial_flush_input>

00004b66 <_ZN16usb_serial_class5writeEh>:
_ZN16usb_serial_class5writeEh():
C:\Teensy\Projects\HelloWorld/usb_serial.h:81
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    4b66:	4608      	mov	r0, r1
    4b68:	f7ff baba 	b.w	40e0 <usb_serial_putchar>

00004b6c <_ZN16usb_serial_class5writeEPKhj>:
_ZN16usb_serial_class5writeEPKhj():
C:\Teensy\Projects\HelloWorld/usb_serial.h:82
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4b6c:	4608      	mov	r0, r1
    4b6e:	4611      	mov	r1, r2
    4b70:	f7ff ba5a 	b.w	4028 <usb_serial_write>

00004b74 <_GLOBAL__sub_I_Serial>:
Print():
C:\Teensy\Projects\HelloWorld/Print.h:50
class __FlashStringHelper;

class Print
{
  public:
	Print() : write_error(0) {}
    4b74:	4b04      	ldr	r3, [pc, #16]	; (4b88 <_GLOBAL__sub_I_Serial+0x14>)
    4b76:	2200      	movs	r2, #0
    4b78:	711a      	strb	r2, [r3, #4]
Stream():
C:\Teensy\Projects\HelloWorld/Stream.h:30
    4b7a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    4b7e:	731a      	strb	r2, [r3, #12]
usb_serial_class():
C:\Teensy\Projects\HelloWorld/usb_serial.h:71
#define USB_SERIAL_RTS  0x02

// C++ interface
#ifdef __cplusplus
#include "Stream.h"
class usb_serial_class : public Stream
    4b80:	4a02      	ldr	r2, [pc, #8]	; (4b8c <_GLOBAL__sub_I_Serial+0x18>)
Stream():
C:\Teensy\Projects\HelloWorld/Stream.h:30
    4b82:	6099      	str	r1, [r3, #8]
usb_serial_class():
C:\Teensy\Projects\HelloWorld/usb_serial.h:71
    4b84:	601a      	str	r2, [r3, #0]
    4b86:	4770      	bx	lr
    4b88:	1fff0fc0 	.word	0x1fff0fc0
    4b8c:	0000a348 	.word	0x0000a348

00004b90 <_ZN6StringC1EOS_>:
_ZN6String4initEv():
C:\Teensy\Projects\HelloWorld/WString.cpp:124
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    4b90:	2200      	movs	r2, #0
_ZN6StringC2EOS_():
C:\Teensy\Projects\HelloWorld/WString.cpp:48
	init();
	*this = value;
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String::String(String &&rval)
    4b92:	b510      	push	{r4, lr}
_ZN6String4initEv():
C:\Teensy\Projects\HelloWorld/WString.cpp:124
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    4b94:	6002      	str	r2, [r0, #0]
C:\Teensy\Projects\HelloWorld/WString.cpp:125
	capacity = 0;
    4b96:	6042      	str	r2, [r0, #4]
_ZN6String4moveERS_():
C:\Teensy\Projects\HelloWorld/WString.cpp:187
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
    4b98:	680c      	ldr	r4, [r1, #0]
_ZN6String4initEv():
C:\Teensy\Projects\HelloWorld/WString.cpp:126

inline void String::init(void)
{
	buffer = NULL;
	capacity = 0;
	len = 0;
    4b9a:	6082      	str	r2, [r0, #8]
_ZN6String4moveERS_():
C:\Teensy\Projects\HelloWorld/WString.cpp:187
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
    4b9c:	6004      	str	r4, [r0, #0]
C:\Teensy\Projects\HelloWorld/WString.cpp:188
	capacity = rhs.capacity;
    4b9e:	684c      	ldr	r4, [r1, #4]
    4ba0:	6044      	str	r4, [r0, #4]
C:\Teensy\Projects\HelloWorld/WString.cpp:189
	len = rhs.len;
    4ba2:	688c      	ldr	r4, [r1, #8]
_ZN6String4initEv():
C:\Teensy\Projects\HelloWorld/WString.cpp:127
inline void String::init(void)
{
	buffer = NULL;
	capacity = 0;
	len = 0;
	flags = 0;
    4ba4:	7302      	strb	r2, [r0, #12]
_ZN6String4moveERS_():
C:\Teensy\Projects\HelloWorld/WString.cpp:189
			free(buffer);
		}
	}
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
    4ba6:	6084      	str	r4, [r0, #8]
C:\Teensy\Projects\HelloWorld/WString.cpp:190
	rhs.buffer = NULL;
    4ba8:	600a      	str	r2, [r1, #0]
C:\Teensy\Projects\HelloWorld/WString.cpp:191
	rhs.capacity = 0;
    4baa:	604a      	str	r2, [r1, #4]
C:\Teensy\Projects\HelloWorld/WString.cpp:192
	rhs.len = 0;
    4bac:	608a      	str	r2, [r1, #8]
_ZN6StringC2EOS_():
C:\Teensy\Projects\HelloWorld/WString.cpp:52
#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String::String(String &&rval)
{
	init();
	move(rval);
}
    4bae:	bd10      	pop	{r4, pc}

00004bb0 <_ZN6StringC1EO15StringSumHelper>:
_ZN6String4initEv():
C:\Teensy\Projects\HelloWorld/WString.cpp:124
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    4bb0:	2200      	movs	r2, #0
_ZN6StringC2EO15StringSumHelper():
C:\Teensy\Projects\HelloWorld/WString.cpp:53
String::String(String &&rval)
{
	init();
	move(rval);
}
String::String(StringSumHelper &&rval)
    4bb2:	b510      	push	{r4, lr}
_ZN6String4initEv():
C:\Teensy\Projects\HelloWorld/WString.cpp:124
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    4bb4:	6002      	str	r2, [r0, #0]
C:\Teensy\Projects\HelloWorld/WString.cpp:125
	capacity = 0;
    4bb6:	6042      	str	r2, [r0, #4]
_ZN6String4moveERS_():
C:\Teensy\Projects\HelloWorld/WString.cpp:187
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
    4bb8:	680c      	ldr	r4, [r1, #0]
_ZN6String4initEv():
C:\Teensy\Projects\HelloWorld/WString.cpp:126

inline void String::init(void)
{
	buffer = NULL;
	capacity = 0;
	len = 0;
    4bba:	6082      	str	r2, [r0, #8]
_ZN6String4moveERS_():
C:\Teensy\Projects\HelloWorld/WString.cpp:187
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
    4bbc:	6004      	str	r4, [r0, #0]
C:\Teensy\Projects\HelloWorld/WString.cpp:188
	capacity = rhs.capacity;
    4bbe:	684c      	ldr	r4, [r1, #4]
    4bc0:	6044      	str	r4, [r0, #4]
C:\Teensy\Projects\HelloWorld/WString.cpp:189
	len = rhs.len;
    4bc2:	688c      	ldr	r4, [r1, #8]
_ZN6String4initEv():
C:\Teensy\Projects\HelloWorld/WString.cpp:127
inline void String::init(void)
{
	buffer = NULL;
	capacity = 0;
	len = 0;
	flags = 0;
    4bc4:	7302      	strb	r2, [r0, #12]
_ZN6String4moveERS_():
C:\Teensy\Projects\HelloWorld/WString.cpp:189
			free(buffer);
		}
	}
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
    4bc6:	6084      	str	r4, [r0, #8]
C:\Teensy\Projects\HelloWorld/WString.cpp:190
	rhs.buffer = NULL;
    4bc8:	600a      	str	r2, [r1, #0]
C:\Teensy\Projects\HelloWorld/WString.cpp:191
	rhs.capacity = 0;
    4bca:	604a      	str	r2, [r1, #4]
C:\Teensy\Projects\HelloWorld/WString.cpp:192
	rhs.len = 0;
    4bcc:	608a      	str	r2, [r1, #8]
_ZN6StringC2EO15StringSumHelper():
C:\Teensy\Projects\HelloWorld/WString.cpp:57
}
String::String(StringSumHelper &&rval)
{
	init();
	move(rval);
}
    4bce:	bd10      	pop	{r4, pc}

00004bd0 <_ZN6StringD1Ev>:
_ZN6StringD2Ev():
C:\Teensy\Projects\HelloWorld/WString.cpp:113
	init();
	char buf[40];
	*this = dtostrf(num, digits + 2, digits, buf);
}

String::~String()
    4bd0:	b510      	push	{r4, lr}
    4bd2:	4604      	mov	r4, r0
C:\Teensy\Projects\HelloWorld/WString.cpp:115
{
	free(buffer);
    4bd4:	6800      	ldr	r0, [r0, #0]
    4bd6:	f001 fd57 	bl	6688 <free>
C:\Teensy\Projects\HelloWorld/WString.cpp:116
}
    4bda:	4620      	mov	r0, r4
    4bdc:	bd10      	pop	{r4, pc}

00004bde <_ZN6String12changeBufferEj>:
_ZN6String12changeBufferEj():
C:\Teensy\Projects\HelloWorld/WString.cpp:141
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    4bde:	b538      	push	{r3, r4, r5, lr}
    4be0:	4604      	mov	r4, r0
    4be2:	460d      	mov	r5, r1
C:\Teensy\Projects\HelloWorld/WString.cpp:142
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    4be4:	6800      	ldr	r0, [r0, #0]
    4be6:	3101      	adds	r1, #1
    4be8:	f001 fe1a 	bl	6820 <realloc>
C:\Teensy\Projects\HelloWorld/WString.cpp:143
	if (newbuffer) {
    4bec:	b110      	cbz	r0, 4bf4 <_ZN6String12changeBufferEj+0x16>
C:\Teensy\Projects\HelloWorld/WString.cpp:145
		buffer = newbuffer;
		capacity = maxStrLen;
    4bee:	e884 0021 	stmia.w	r4, {r0, r5}
C:\Teensy\Projects\HelloWorld/WString.cpp:146
		return 1;
    4bf2:	2001      	movs	r0, #1
C:\Teensy\Projects\HelloWorld/WString.cpp:149
	}
	return 0;
}
    4bf4:	bd38      	pop	{r3, r4, r5, pc}

00004bf6 <_ZN6String7reserveEj>:
_ZN6String7reserveEj():
C:\Teensy\Projects\HelloWorld/WString.cpp:132
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
    4bf6:	6843      	ldr	r3, [r0, #4]
    4bf8:	428b      	cmp	r3, r1
C:\Teensy\Projects\HelloWorld/WString.cpp:131
	len = 0;
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
    4bfa:	b510      	push	{r4, lr}
    4bfc:	4604      	mov	r4, r0
C:\Teensy\Projects\HelloWorld/WString.cpp:132
	if (capacity >= size) return 1;
    4bfe:	d206      	bcs.n	4c0e <_ZN6String7reserveEj+0x18>
C:\Teensy\Projects\HelloWorld/WString.cpp:133
	if (changeBuffer(size)) {
    4c00:	f7ff ffed 	bl	4bde <_ZN6String12changeBufferEj>
    4c04:	b120      	cbz	r0, 4c10 <_ZN6String7reserveEj+0x1a>
C:\Teensy\Projects\HelloWorld/WString.cpp:134
		if (len == 0) buffer[0] = 0;
    4c06:	68a3      	ldr	r3, [r4, #8]
    4c08:	b90b      	cbnz	r3, 4c0e <_ZN6String7reserveEj+0x18>
    4c0a:	6822      	ldr	r2, [r4, #0]
    4c0c:	7013      	strb	r3, [r2, #0]
    4c0e:	2001      	movs	r0, #1
C:\Teensy\Projects\HelloWorld/WString.cpp:138
		return 1;
	}
	return 0;
}
    4c10:	bd10      	pop	{r4, pc}

00004c12 <_ZN6String4copyEPKcj>:
_ZN6String4copyEPKcj():
C:\Teensy\Projects\HelloWorld/WString.cpp:156
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    4c12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c14:	4604      	mov	r4, r0
    4c16:	460f      	mov	r7, r1
C:\Teensy\Projects\HelloWorld/WString.cpp:157
	if (length == 0) {
    4c18:	4615      	mov	r5, r2
    4c1a:	b922      	cbnz	r2, 4c26 <_ZN6String4copyEPKcj+0x14>
C:\Teensy\Projects\HelloWorld/WString.cpp:158
		if (buffer) buffer[0] = 0;
    4c1c:	6803      	ldr	r3, [r0, #0]
    4c1e:	b103      	cbz	r3, 4c22 <_ZN6String4copyEPKcj+0x10>
C:\Teensy\Projects\HelloWorld/WString.cpp:158 (discriminator 1)
    4c20:	701a      	strb	r2, [r3, #0]
C:\Teensy\Projects\HelloWorld/WString.cpp:159
		len = 0;
    4c22:	2300      	movs	r3, #0
    4c24:	e00b      	b.n	4c3e <_ZN6String4copyEPKcj+0x2c>
C:\Teensy\Projects\HelloWorld/WString.cpp:162
		return *this;
	}
	if (!reserve(length)) {
    4c26:	4611      	mov	r1, r2
    4c28:	f7ff ffe5 	bl	4bf6 <_ZN6String7reserveEj>
    4c2c:	4606      	mov	r6, r0
    4c2e:	b940      	cbnz	r0, 4c42 <_ZN6String4copyEPKcj+0x30>
C:\Teensy\Projects\HelloWorld/WString.cpp:163
		if (buffer) {
    4c30:	6820      	ldr	r0, [r4, #0]
    4c32:	b110      	cbz	r0, 4c3a <_ZN6String4copyEPKcj+0x28>
C:\Teensy\Projects\HelloWorld/WString.cpp:164
			free(buffer);
    4c34:	f001 fd28 	bl	6688 <free>
C:\Teensy\Projects\HelloWorld/WString.cpp:165
			buffer = NULL;
    4c38:	6026      	str	r6, [r4, #0]
C:\Teensy\Projects\HelloWorld/WString.cpp:167
		}
		len = capacity = 0;
    4c3a:	2300      	movs	r3, #0
    4c3c:	6063      	str	r3, [r4, #4]
    4c3e:	60a3      	str	r3, [r4, #8]
    4c40:	e004      	b.n	4c4c <_ZN6String4copyEPKcj+0x3a>
C:\Teensy\Projects\HelloWorld/WString.cpp:170
		return *this;
	}
	len = length;
    4c42:	60a5      	str	r5, [r4, #8]
C:\Teensy\Projects\HelloWorld/WString.cpp:171
	strcpy(buffer, cstr);
    4c44:	6820      	ldr	r0, [r4, #0]
    4c46:	4639      	mov	r1, r7
    4c48:	f001 fe1b 	bl	6882 <strcpy>
C:\Teensy\Projects\HelloWorld/WString.cpp:173
	return *this;
}
    4c4c:	4620      	mov	r0, r4
    4c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004c50 <_ZN6StringC1EPKc>:
_ZN6StringC2EPKc():
C:\Teensy\Projects\HelloWorld/WString.cpp:29

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    4c50:	b538      	push	{r3, r4, r5, lr}
_ZN6String4initEv():
C:\Teensy\Projects\HelloWorld/WString.cpp:124
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    4c52:	2300      	movs	r3, #0
_ZN6StringC2EPKc():
C:\Teensy\Projects\HelloWorld/WString.cpp:29

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    4c54:	4604      	mov	r4, r0
_ZN6String4initEv():
C:\Teensy\Projects\HelloWorld/WString.cpp:124
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    4c56:	6003      	str	r3, [r0, #0]
C:\Teensy\Projects\HelloWorld/WString.cpp:125
	capacity = 0;
    4c58:	6043      	str	r3, [r0, #4]
C:\Teensy\Projects\HelloWorld/WString.cpp:126
	len = 0;
    4c5a:	6083      	str	r3, [r0, #8]
C:\Teensy\Projects\HelloWorld/WString.cpp:127
	flags = 0;
    4c5c:	7303      	strb	r3, [r0, #12]
_ZN6StringC2EPKc():
C:\Teensy\Projects\HelloWorld/WString.cpp:32
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    4c5e:	460d      	mov	r5, r1
    4c60:	b139      	cbz	r1, 4c72 <_ZN6StringC1EPKc+0x22>
C:\Teensy\Projects\HelloWorld/WString.cpp:32 (discriminator 1)
    4c62:	4608      	mov	r0, r1
    4c64:	f001 fe15 	bl	6892 <strlen>
    4c68:	4629      	mov	r1, r5
    4c6a:	4602      	mov	r2, r0
    4c6c:	4620      	mov	r0, r4
    4c6e:	f7ff ffd0 	bl	4c12 <_ZN6String4copyEPKcj>
C:\Teensy\Projects\HelloWorld/WString.cpp:33
}
    4c72:	4620      	mov	r0, r4
    4c74:	bd38      	pop	{r3, r4, r5, pc}

00004c76 <_ZN6StringC1EPK19__FlashStringHelper>:
_ZN6StringC2EPK19__FlashStringHelper():
C:\Teensy\Projects\HelloWorld/WString.cpp:35

String::String(const __FlashStringHelper *pgmstr)
    4c76:	b510      	push	{r4, lr}
_ZN6String4initEv():
C:\Teensy\Projects\HelloWorld/WString.cpp:124
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    4c78:	2300      	movs	r3, #0
_ZN6StringC2EPK19__FlashStringHelper():
C:\Teensy\Projects\HelloWorld/WString.cpp:35
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const __FlashStringHelper *pgmstr)
    4c7a:	4604      	mov	r4, r0
_ZN6String4initEv():
C:\Teensy\Projects\HelloWorld/WString.cpp:124
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    4c7c:	6003      	str	r3, [r0, #0]
C:\Teensy\Projects\HelloWorld/WString.cpp:125
	capacity = 0;
    4c7e:	6043      	str	r3, [r0, #4]
C:\Teensy\Projects\HelloWorld/WString.cpp:126
	len = 0;
    4c80:	6083      	str	r3, [r0, #8]
C:\Teensy\Projects\HelloWorld/WString.cpp:127
	flags = 0;
    4c82:	7303      	strb	r3, [r0, #12]
_ZN6StringaSEPK19__FlashStringHelper():
C:\Teensy\Projects\HelloWorld/WString.cpp:227
	return *this;
}

String & String::operator = (const __FlashStringHelper *pgmstr)
{
	copy(pgmstr);
    4c84:	f000 fc56 	bl	5534 <_ZN6String4copyEPK19__FlashStringHelper>
_ZN6StringC2EPK19__FlashStringHelper():
C:\Teensy\Projects\HelloWorld/WString.cpp:39

String::String(const __FlashStringHelper *pgmstr)
{
	init();
	*this = pgmstr;
}
    4c88:	4620      	mov	r0, r4
    4c8a:	bd10      	pop	{r4, pc}

00004c8c <_ZN6String4moveERS_>:
_ZN6String4moveERS_():
C:\Teensy\Projects\HelloWorld/WString.cpp:176
	strcpy(buffer, cstr);
	return *this;
}

void String::move(String &rhs)
{
    4c8c:	b538      	push	{r3, r4, r5, lr}
    4c8e:	4605      	mov	r5, r0
C:\Teensy\Projects\HelloWorld/WString.cpp:177
	if (buffer) {
    4c90:	6800      	ldr	r0, [r0, #0]
C:\Teensy\Projects\HelloWorld/WString.cpp:176
	strcpy(buffer, cstr);
	return *this;
}

void String::move(String &rhs)
{
    4c92:	460c      	mov	r4, r1
C:\Teensy\Projects\HelloWorld/WString.cpp:177
	if (buffer) {
    4c94:	b160      	cbz	r0, 4cb0 <_ZN6String4moveERS_+0x24>
C:\Teensy\Projects\HelloWorld/WString.cpp:178
		if (capacity >= rhs.len) {
    4c96:	686a      	ldr	r2, [r5, #4]
    4c98:	688b      	ldr	r3, [r1, #8]
    4c9a:	429a      	cmp	r2, r3
    4c9c:	d306      	bcc.n	4cac <_ZN6String4moveERS_+0x20>
C:\Teensy\Projects\HelloWorld/WString.cpp:179
			strcpy(buffer, rhs.buffer);
    4c9e:	6809      	ldr	r1, [r1, #0]
    4ca0:	f001 fdef 	bl	6882 <strcpy>
C:\Teensy\Projects\HelloWorld/WString.cpp:180
			len = rhs.len;
    4ca4:	68a3      	ldr	r3, [r4, #8]
    4ca6:	60ab      	str	r3, [r5, #8]
C:\Teensy\Projects\HelloWorld/WString.cpp:181
			rhs.len = 0;
    4ca8:	2300      	movs	r3, #0
    4caa:	e00a      	b.n	4cc2 <_ZN6String4moveERS_+0x36>
C:\Teensy\Projects\HelloWorld/WString.cpp:184
			return;
		} else {
			free(buffer);
    4cac:	f001 fcec 	bl	6688 <free>
C:\Teensy\Projects\HelloWorld/WString.cpp:187
		}
	}
	buffer = rhs.buffer;
    4cb0:	6823      	ldr	r3, [r4, #0]
    4cb2:	602b      	str	r3, [r5, #0]
C:\Teensy\Projects\HelloWorld/WString.cpp:188
	capacity = rhs.capacity;
    4cb4:	6863      	ldr	r3, [r4, #4]
    4cb6:	606b      	str	r3, [r5, #4]
C:\Teensy\Projects\HelloWorld/WString.cpp:189
	len = rhs.len;
    4cb8:	68a3      	ldr	r3, [r4, #8]
    4cba:	60ab      	str	r3, [r5, #8]
C:\Teensy\Projects\HelloWorld/WString.cpp:190
	rhs.buffer = NULL;
    4cbc:	2300      	movs	r3, #0
    4cbe:	6023      	str	r3, [r4, #0]
C:\Teensy\Projects\HelloWorld/WString.cpp:191
	rhs.capacity = 0;
    4cc0:	6063      	str	r3, [r4, #4]
C:\Teensy\Projects\HelloWorld/WString.cpp:192
	rhs.len = 0;
    4cc2:	60a3      	str	r3, [r4, #8]
    4cc4:	bd38      	pop	{r3, r4, r5, pc}

00004cc6 <_ZN6StringaSERKS_>:
_ZN6StringaSERKS_():
C:\Teensy\Projects\HelloWorld/WString.cpp:197
}

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
    4cc6:	4281      	cmp	r1, r0
C:\Teensy\Projects\HelloWorld/WString.cpp:196
	rhs.capacity = 0;
	rhs.len = 0;
}

String & String::operator = (const String &rhs)
{
    4cc8:	460b      	mov	r3, r1
C:\Teensy\Projects\HelloWorld/WString.cpp:197
	if (this == &rhs) return *this;
    4cca:	d003      	beq.n	4cd4 <_ZN6StringaSERKS_+0xe>
C:\Teensy\Projects\HelloWorld/WString.cpp:198
	return copy(rhs.buffer, rhs.len);
    4ccc:	6809      	ldr	r1, [r1, #0]
    4cce:	689a      	ldr	r2, [r3, #8]
    4cd0:	f7ff bf9f 	b.w	4c12 <_ZN6String4copyEPKcj>
C:\Teensy\Projects\HelloWorld/WString.cpp:199
}
    4cd4:	4770      	bx	lr

00004cd6 <_ZN6StringC1ERKS_>:
_ZN6StringC2ERKS_():
C:\Teensy\Projects\HelloWorld/WString.cpp:41
{
	init();
	*this = pgmstr;
}

String::String(const String &value)
    4cd6:	b510      	push	{r4, lr}
_ZN6String4initEv():
C:\Teensy\Projects\HelloWorld/WString.cpp:124
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    4cd8:	2300      	movs	r3, #0
_ZN6StringC2ERKS_():
C:\Teensy\Projects\HelloWorld/WString.cpp:41
{
	init();
	*this = pgmstr;
}

String::String(const String &value)
    4cda:	4604      	mov	r4, r0
_ZN6String4initEv():
C:\Teensy\Projects\HelloWorld/WString.cpp:124
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    4cdc:	6003      	str	r3, [r0, #0]
C:\Teensy\Projects\HelloWorld/WString.cpp:125
	capacity = 0;
    4cde:	6043      	str	r3, [r0, #4]
C:\Teensy\Projects\HelloWorld/WString.cpp:126
	len = 0;
    4ce0:	6083      	str	r3, [r0, #8]
C:\Teensy\Projects\HelloWorld/WString.cpp:127
	flags = 0;
    4ce2:	7303      	strb	r3, [r0, #12]
_ZN6StringC2ERKS_():
C:\Teensy\Projects\HelloWorld/WString.cpp:44
}

String::String(const String &value)
{
	init();
	*this = value;
    4ce4:	f7ff ffef 	bl	4cc6 <_ZN6StringaSERKS_>
C:\Teensy\Projects\HelloWorld/WString.cpp:45
}
    4ce8:	4620      	mov	r0, r4
    4cea:	bd10      	pop	{r4, pc}

00004cec <_ZN6StringaSEOS_>:
_ZN6StringaSEOS_():
C:\Teensy\Projects\HelloWorld/WString.cpp:204
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
    4cec:	4288      	cmp	r0, r1
C:\Teensy\Projects\HelloWorld/WString.cpp:203
	return copy(rhs.buffer, rhs.len);
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String & String::operator = (String &&rval)
{
    4cee:	b510      	push	{r4, lr}
    4cf0:	4604      	mov	r4, r0
C:\Teensy\Projects\HelloWorld/WString.cpp:204
	if (this != &rval) move(rval);
    4cf2:	d001      	beq.n	4cf8 <_ZN6StringaSEOS_+0xc>
C:\Teensy\Projects\HelloWorld/WString.cpp:204 (discriminator 1)
    4cf4:	f7ff ffca 	bl	4c8c <_ZN6String4moveERS_>
C:\Teensy\Projects\HelloWorld/WString.cpp:206
	return *this;
}
    4cf8:	4620      	mov	r0, r4
    4cfa:	bd10      	pop	{r4, pc}

00004cfc <_ZN6StringaSEO15StringSumHelper>:
_ZN6StringaSEO15StringSumHelper():
C:\Teensy\Projects\HelloWorld/WString.cpp:210

String & String::operator = (StringSumHelper &&rval)
{
	if (this != &rval) move(rval);
    4cfc:	4288      	cmp	r0, r1
C:\Teensy\Projects\HelloWorld/WString.cpp:209
	if (this != &rval) move(rval);
	return *this;
}

String & String::operator = (StringSumHelper &&rval)
{
    4cfe:	b510      	push	{r4, lr}
    4d00:	4604      	mov	r4, r0
C:\Teensy\Projects\HelloWorld/WString.cpp:210
	if (this != &rval) move(rval);
    4d02:	d001      	beq.n	4d08 <_ZN6StringaSEO15StringSumHelper+0xc>
C:\Teensy\Projects\HelloWorld/WString.cpp:210 (discriminator 1)
    4d04:	f7ff ffc2 	bl	4c8c <_ZN6String4moveERS_>
C:\Teensy\Projects\HelloWorld/WString.cpp:212
	return *this;
}
    4d08:	4620      	mov	r0, r4
    4d0a:	bd10      	pop	{r4, pc}

00004d0c <_ZN6StringaSEPKc>:
_ZN6StringaSEPKc():
C:\Teensy\Projects\HelloWorld/WString.cpp:216
#endif

String & String::operator = (const char *cstr)
{
    4d0c:	b538      	push	{r3, r4, r5, lr}
    4d0e:	4605      	mov	r5, r0
C:\Teensy\Projects\HelloWorld/WString.cpp:217
	if (cstr) {
    4d10:	460c      	mov	r4, r1
    4d12:	b141      	cbz	r1, 4d26 <_ZN6StringaSEPKc+0x1a>
C:\Teensy\Projects\HelloWorld/WString.cpp:218
		copy(cstr, strlen(cstr));
    4d14:	4608      	mov	r0, r1
    4d16:	f001 fdbc 	bl	6892 <strlen>
    4d1a:	4621      	mov	r1, r4
    4d1c:	4602      	mov	r2, r0
    4d1e:	4628      	mov	r0, r5
    4d20:	f7ff ff77 	bl	4c12 <_ZN6String4copyEPKcj>
    4d24:	e000      	b.n	4d28 <_ZN6StringaSEPKc+0x1c>
C:\Teensy\Projects\HelloWorld/WString.cpp:220
	} else {
		len = 0;
    4d26:	60a9      	str	r1, [r5, #8]
C:\Teensy\Projects\HelloWorld/WString.cpp:223
	}
	return *this;
}
    4d28:	4628      	mov	r0, r5
    4d2a:	bd38      	pop	{r3, r4, r5, pc}

00004d2c <_ZN6StringC1Eh>:
_ZN6StringC2Eh():
C:\Teensy\Projects\HelloWorld/WString.cpp:66
{
	init();
	*this = c;
}

String::String(unsigned char c)
    4d2c:	b513      	push	{r0, r1, r4, lr}
_ZN6String4initEv():
C:\Teensy\Projects\HelloWorld/WString.cpp:124
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    4d2e:	2300      	movs	r3, #0
_ZN6StringC2Eh():
C:\Teensy\Projects\HelloWorld/WString.cpp:66
{
	init();
	*this = c;
}

String::String(unsigned char c)
    4d30:	4604      	mov	r4, r0
_ZN6String4initEv():
C:\Teensy\Projects\HelloWorld/WString.cpp:124
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    4d32:	6003      	str	r3, [r0, #0]
C:\Teensy\Projects\HelloWorld/WString.cpp:125
	capacity = 0;
    4d34:	6043      	str	r3, [r0, #4]
C:\Teensy\Projects\HelloWorld/WString.cpp:126
	len = 0;
    4d36:	6083      	str	r3, [r0, #8]
C:\Teensy\Projects\HelloWorld/WString.cpp:127
	flags = 0;
    4d38:	7303      	strb	r3, [r0, #12]
utoa():
C:\Teensy\Projects\HelloWorld/avr_functions.h:100
char * ultoa(unsigned long val, char *buf, int radix);
char * ltoa(long val, char *buf, int radix);

#if defined(_NEWLIB_VERSION) && (__NEWLIB__ < 2 || __NEWLIB__ == 2 && __NEWLIB_MINOR__ < 2)
static inline char * utoa(unsigned int val, char *buf, int radix) __attribute__((always_inline, unused));
static inline char * utoa(unsigned int val, char *buf, int radix) { return ultoa(val, buf, radix); }
    4d3a:	220a      	movs	r2, #10
    4d3c:	4608      	mov	r0, r1
    4d3e:	a901      	add	r1, sp, #4
    4d40:	f7fb fdc8 	bl	8d4 <ultoa>
_ZN6StringC2Eh():
C:\Teensy\Projects\HelloWorld/WString.cpp:71
String::String(unsigned char c)
{
	init();
	char buf[4];
	utoa(c, buf, 10);
	*this = buf;
    4d44:	4620      	mov	r0, r4
    4d46:	a901      	add	r1, sp, #4
    4d48:	f7ff ffe0 	bl	4d0c <_ZN6StringaSEPKc>
C:\Teensy\Projects\HelloWorld/WString.cpp:72
}
    4d4c:	4620      	mov	r0, r4
    4d4e:	b002      	add	sp, #8
    4d50:	bd10      	pop	{r4, pc}

00004d52 <_ZN6StringC1Eih>:
_ZN6StringC2Eih():
C:\Teensy\Projects\HelloWorld/WString.cpp:74

String::String(const int value, unsigned char base)
    4d52:	b510      	push	{r4, lr}
_ZN6String4initEv():
C:\Teensy\Projects\HelloWorld/WString.cpp:124
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    4d54:	2300      	movs	r3, #0
_ZN6StringC2Eih():
C:\Teensy\Projects\HelloWorld/WString.cpp:74
	char buf[4];
	utoa(c, buf, 10);
	*this = buf;
}

String::String(const int value, unsigned char base)
    4d56:	b086      	sub	sp, #24
    4d58:	4604      	mov	r4, r0
_ZN6String4initEv():
C:\Teensy\Projects\HelloWorld/WString.cpp:124
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    4d5a:	6003      	str	r3, [r0, #0]
C:\Teensy\Projects\HelloWorld/WString.cpp:125
	capacity = 0;
    4d5c:	6043      	str	r3, [r0, #4]
C:\Teensy\Projects\HelloWorld/WString.cpp:126
	len = 0;
    4d5e:	6083      	str	r3, [r0, #8]
C:\Teensy\Projects\HelloWorld/WString.cpp:127
	flags = 0;
    4d60:	7303      	strb	r3, [r0, #12]
itoa():
C:\Teensy\Projects\HelloWorld/avr_functions.h:102
static inline char * itoa(int val, char *buf, int radix) __attribute__((always_inline, unused));
static inline char * itoa(int val, char *buf, int radix) { return ltoa(val, buf, radix); }
    4d62:	4608      	mov	r0, r1
    4d64:	a901      	add	r1, sp, #4
    4d66:	f7fb fdd3 	bl	910 <ltoa>
_ZN6StringC2Eih():
C:\Teensy\Projects\HelloWorld/WString.cpp:79
String::String(const int value, unsigned char base)
{
	init();
	char buf[18];
	itoa(value, buf, base);
	*this = buf;
    4d6a:	4620      	mov	r0, r4
    4d6c:	a901      	add	r1, sp, #4
    4d6e:	f7ff ffcd 	bl	4d0c <_ZN6StringaSEPKc>
C:\Teensy\Projects\HelloWorld/WString.cpp:80
}
    4d72:	4620      	mov	r0, r4
    4d74:	b006      	add	sp, #24
    4d76:	bd10      	pop	{r4, pc}

00004d78 <_ZN6StringC1Ejh>:
_ZN6StringC2Ejh():
C:\Teensy\Projects\HelloWorld/WString.cpp:82

String::String(unsigned int value, unsigned char base)
    4d78:	b510      	push	{r4, lr}
_ZN6String4initEv():
C:\Teensy\Projects\HelloWorld/WString.cpp:124
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    4d7a:	2300      	movs	r3, #0
_ZN6StringC2Ejh():
C:\Teensy\Projects\HelloWorld/WString.cpp:82
	char buf[18];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
    4d7c:	b086      	sub	sp, #24
    4d7e:	4604      	mov	r4, r0
_ZN6String4initEv():
C:\Teensy\Projects\HelloWorld/WString.cpp:124
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    4d80:	6003      	str	r3, [r0, #0]
C:\Teensy\Projects\HelloWorld/WString.cpp:125
	capacity = 0;
    4d82:	6043      	str	r3, [r0, #4]
C:\Teensy\Projects\HelloWorld/WString.cpp:126
	len = 0;
    4d84:	6083      	str	r3, [r0, #8]
C:\Teensy\Projects\HelloWorld/WString.cpp:127
	flags = 0;
    4d86:	7303      	strb	r3, [r0, #12]
utoa():
C:\Teensy\Projects\HelloWorld/avr_functions.h:100
char * ultoa(unsigned long val, char *buf, int radix);
char * ltoa(long val, char *buf, int radix);

#if defined(_NEWLIB_VERSION) && (__NEWLIB__ < 2 || __NEWLIB__ == 2 && __NEWLIB_MINOR__ < 2)
static inline char * utoa(unsigned int val, char *buf, int radix) __attribute__((always_inline, unused));
static inline char * utoa(unsigned int val, char *buf, int radix) { return ultoa(val, buf, radix); }
    4d88:	4608      	mov	r0, r1
    4d8a:	a901      	add	r1, sp, #4
    4d8c:	f7fb fda2 	bl	8d4 <ultoa>
_ZN6StringC2Ejh():
C:\Teensy\Projects\HelloWorld/WString.cpp:87
String::String(unsigned int value, unsigned char base)
{
	init();
	char buf[17];
  	utoa(value, buf, base);
	*this = buf;
    4d90:	4620      	mov	r0, r4
    4d92:	a901      	add	r1, sp, #4
    4d94:	f7ff ffba 	bl	4d0c <_ZN6StringaSEPKc>
C:\Teensy\Projects\HelloWorld/WString.cpp:88
}
    4d98:	4620      	mov	r0, r4
    4d9a:	b006      	add	sp, #24
    4d9c:	bd10      	pop	{r4, pc}

00004d9e <_ZN6StringC1Elh>:
_ZN6StringC2Elh():
C:\Teensy\Projects\HelloWorld/WString.cpp:90

String::String(long value, unsigned char base)
    4d9e:	b510      	push	{r4, lr}
_ZN6String4initEv():
C:\Teensy\Projects\HelloWorld/WString.cpp:124
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    4da0:	2300      	movs	r3, #0
_ZN6StringC2Elh():
C:\Teensy\Projects\HelloWorld/WString.cpp:90
	char buf[17];
  	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
    4da2:	b08a      	sub	sp, #40	; 0x28
    4da4:	4604      	mov	r4, r0
_ZN6String4initEv():
C:\Teensy\Projects\HelloWorld/WString.cpp:124
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    4da6:	6003      	str	r3, [r0, #0]
C:\Teensy\Projects\HelloWorld/WString.cpp:125
	capacity = 0;
    4da8:	6043      	str	r3, [r0, #4]
C:\Teensy\Projects\HelloWorld/WString.cpp:126
	len = 0;
    4daa:	6083      	str	r3, [r0, #8]
C:\Teensy\Projects\HelloWorld/WString.cpp:127
	flags = 0;
    4dac:	7303      	strb	r3, [r0, #12]
_ZN6StringC2Elh():
C:\Teensy\Projects\HelloWorld/WString.cpp:94

String::String(long value, unsigned char base)
{
	init();
	char buf[34];
	ltoa(value, buf, base);
    4dae:	4608      	mov	r0, r1
    4db0:	a901      	add	r1, sp, #4
    4db2:	f7fb fdad 	bl	910 <ltoa>
C:\Teensy\Projects\HelloWorld/WString.cpp:95
	*this = buf;
    4db6:	4620      	mov	r0, r4
    4db8:	a901      	add	r1, sp, #4
    4dba:	f7ff ffa7 	bl	4d0c <_ZN6StringaSEPKc>
C:\Teensy\Projects\HelloWorld/WString.cpp:96
}
    4dbe:	4620      	mov	r0, r4
    4dc0:	b00a      	add	sp, #40	; 0x28
    4dc2:	bd10      	pop	{r4, pc}

00004dc4 <_ZN6StringC1Emh>:
_ZN6StringC2Emh():
C:\Teensy\Projects\HelloWorld/WString.cpp:98

String::String(unsigned long value, unsigned char base)
    4dc4:	b510      	push	{r4, lr}
_ZN6String4initEv():
C:\Teensy\Projects\HelloWorld/WString.cpp:124
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    4dc6:	2300      	movs	r3, #0
_ZN6StringC2Emh():
C:\Teensy\Projects\HelloWorld/WString.cpp:98
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
    4dc8:	b08a      	sub	sp, #40	; 0x28
    4dca:	4604      	mov	r4, r0
_ZN6String4initEv():
C:\Teensy\Projects\HelloWorld/WString.cpp:124
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    4dcc:	6003      	str	r3, [r0, #0]
C:\Teensy\Projects\HelloWorld/WString.cpp:125
	capacity = 0;
    4dce:	6043      	str	r3, [r0, #4]
C:\Teensy\Projects\HelloWorld/WString.cpp:126
	len = 0;
    4dd0:	6083      	str	r3, [r0, #8]
C:\Teensy\Projects\HelloWorld/WString.cpp:127
	flags = 0;
    4dd2:	7303      	strb	r3, [r0, #12]
_ZN6StringC2Emh():
C:\Teensy\Projects\HelloWorld/WString.cpp:102

String::String(unsigned long value, unsigned char base)
{
	init();
	char buf[33];
	ultoa(value, buf, base);
    4dd4:	4608      	mov	r0, r1
    4dd6:	a901      	add	r1, sp, #4
    4dd8:	f7fb fd7c 	bl	8d4 <ultoa>
C:\Teensy\Projects\HelloWorld/WString.cpp:103
	*this = buf;
    4ddc:	4620      	mov	r0, r4
    4dde:	a901      	add	r1, sp, #4
    4de0:	f7ff ff94 	bl	4d0c <_ZN6StringaSEPKc>
C:\Teensy\Projects\HelloWorld/WString.cpp:104
}
    4de4:	4620      	mov	r0, r4
    4de6:	b00a      	add	sp, #40	; 0x28
    4de8:	bd10      	pop	{r4, pc}

00004dea <_ZN6StringC1Efh>:
_ZN6StringC2Efh():
C:\Teensy\Projects\HelloWorld/WString.cpp:106

String::String(float num, unsigned char digits)
    4dea:	b510      	push	{r4, lr}
_ZN6String4initEv():
C:\Teensy\Projects\HelloWorld/WString.cpp:124
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    4dec:	2300      	movs	r3, #0
_ZN6StringC2Efh():
C:\Teensy\Projects\HelloWorld/WString.cpp:106
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float num, unsigned char digits)
    4dee:	b08a      	sub	sp, #40	; 0x28
    4df0:	4604      	mov	r4, r0
_ZN6String4initEv():
C:\Teensy\Projects\HelloWorld/WString.cpp:124
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    4df2:	6003      	str	r3, [r0, #0]
C:\Teensy\Projects\HelloWorld/WString.cpp:125
	capacity = 0;
    4df4:	6043      	str	r3, [r0, #4]
C:\Teensy\Projects\HelloWorld/WString.cpp:126
	len = 0;
    4df6:	6083      	str	r3, [r0, #8]
C:\Teensy\Projects\HelloWorld/WString.cpp:127
	flags = 0;
    4df8:	7303      	strb	r3, [r0, #12]
_ZN6StringC2Efh():
C:\Teensy\Projects\HelloWorld/WString.cpp:110

String::String(float num, unsigned char digits)
{
	init();
	char buf[40];
	*this = dtostrf(num, digits + 2, digits, buf);
    4dfa:	466b      	mov	r3, sp
    4dfc:	4608      	mov	r0, r1
    4dfe:	1c91      	adds	r1, r2, #2
    4e00:	f7fb fd96 	bl	930 <dtostrf>
    4e04:	4601      	mov	r1, r0
    4e06:	4620      	mov	r0, r4
    4e08:	f7ff ff80 	bl	4d0c <_ZN6StringaSEPKc>
C:\Teensy\Projects\HelloWorld/WString.cpp:111
}
    4e0c:	4620      	mov	r0, r4
    4e0e:	b00a      	add	sp, #40	; 0x28
    4e10:	bd10      	pop	{r4, pc}

00004e12 <_ZN6StringaSEPK19__FlashStringHelper>:
_ZN6StringaSEPK19__FlashStringHelper():
C:\Teensy\Projects\HelloWorld/WString.cpp:226
	}
	return *this;
}

String & String::operator = (const __FlashStringHelper *pgmstr)
{
    4e12:	b510      	push	{r4, lr}
    4e14:	4604      	mov	r4, r0
C:\Teensy\Projects\HelloWorld/WString.cpp:227
	copy(pgmstr);
    4e16:	f000 fb8d 	bl	5534 <_ZN6String4copyEPK19__FlashStringHelper>
C:\Teensy\Projects\HelloWorld/WString.cpp:229
	return *this;
}
    4e1a:	4620      	mov	r0, r4
    4e1c:	bd10      	pop	{r4, pc}

00004e1e <_ZN6StringaSEc>:
_ZN6StringaSEc():
C:\Teensy\Projects\HelloWorld/WString.cpp:232

String & String::operator = (char c)
{
    4e1e:	b507      	push	{r0, r1, r2, lr}
C:\Teensy\Projects\HelloWorld/WString.cpp:235
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
    4e20:	2300      	movs	r3, #0
C:\Teensy\Projects\HelloWorld/WString.cpp:234
}

String & String::operator = (char c)
{
	char buf[2];
	buf[0] = c;
    4e22:	f88d 1004 	strb.w	r1, [sp, #4]
C:\Teensy\Projects\HelloWorld/WString.cpp:236
	buf[1] = 0;
	return copy(buf, 1);
    4e26:	2201      	movs	r2, #1
    4e28:	a901      	add	r1, sp, #4
C:\Teensy\Projects\HelloWorld/WString.cpp:235

String & String::operator = (char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
    4e2a:	f88d 3005 	strb.w	r3, [sp, #5]
C:\Teensy\Projects\HelloWorld/WString.cpp:236
	return copy(buf, 1);
    4e2e:	f7ff fef0 	bl	4c12 <_ZN6String4copyEPKcj>
C:\Teensy\Projects\HelloWorld/WString.cpp:237
}
    4e32:	b003      	add	sp, #12
    4e34:	f85d fb04 	ldr.w	pc, [sp], #4

00004e38 <_ZN6StringC1Ec>:
_ZN6StringC2Ec():
C:\Teensy\Projects\HelloWorld/WString.cpp:60
	init();
	move(rval);
}
#endif

String::String(char c)
    4e38:	b510      	push	{r4, lr}
_ZN6String4initEv():
C:\Teensy\Projects\HelloWorld/WString.cpp:124
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    4e3a:	2300      	movs	r3, #0
_ZN6StringC2Ec():
C:\Teensy\Projects\HelloWorld/WString.cpp:60
	init();
	move(rval);
}
#endif

String::String(char c)
    4e3c:	4604      	mov	r4, r0
_ZN6String4initEv():
C:\Teensy\Projects\HelloWorld/WString.cpp:124
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    4e3e:	6003      	str	r3, [r0, #0]
C:\Teensy\Projects\HelloWorld/WString.cpp:125
	capacity = 0;
    4e40:	6043      	str	r3, [r0, #4]
C:\Teensy\Projects\HelloWorld/WString.cpp:126
	len = 0;
    4e42:	6083      	str	r3, [r0, #8]
C:\Teensy\Projects\HelloWorld/WString.cpp:127
	flags = 0;
    4e44:	7303      	strb	r3, [r0, #12]
_ZN6StringC2Ec():
C:\Teensy\Projects\HelloWorld/WString.cpp:63
#endif

String::String(char c)
{
	init();
	*this = c;
    4e46:	f7ff ffea 	bl	4e1e <_ZN6StringaSEc>
C:\Teensy\Projects\HelloWorld/WString.cpp:64
}
    4e4a:	4620      	mov	r0, r4
    4e4c:	bd10      	pop	{r4, pc}

00004e4e <_ZN6String6appendEPKcj>:
_ZN6String6appendEPKcj():
C:\Teensy\Projects\HelloWorld/WString.cpp:249
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    4e4e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
C:\Teensy\Projects\HelloWorld/WString.cpp:253
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    4e52:	6803      	ldr	r3, [r0, #0]
C:\Teensy\Projects\HelloWorld/WString.cpp:250
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    4e54:	6886      	ldr	r6, [r0, #8]
C:\Teensy\Projects\HelloWorld/WString.cpp:253
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    4e56:	4299      	cmp	r1, r3
C:\Teensy\Projects\HelloWorld/WString.cpp:249
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    4e58:	4604      	mov	r4, r0
    4e5a:	460d      	mov	r5, r1
    4e5c:	4690      	mov	r8, r2
C:\Teensy\Projects\HelloWorld/WString.cpp:253
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    4e5e:	d306      	bcc.n	4e6e <_ZN6String6appendEPKcj+0x20>
C:\Teensy\Projects\HelloWorld/WString.cpp:253 (discriminator 1)
    4e60:	199a      	adds	r2, r3, r6
    4e62:	4291      	cmp	r1, r2
    4e64:	d203      	bcs.n	4e6e <_ZN6String6appendEPKcj+0x20>
C:\Teensy\Projects\HelloWorld/WString.cpp:255
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
    4e66:	ebc3 0901 	rsb	r9, r3, r1
C:\Teensy\Projects\HelloWorld/WString.cpp:254
{
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
    4e6a:	2701      	movs	r7, #1
    4e6c:	e000      	b.n	4e70 <_ZN6String6appendEPKcj+0x22>
C:\Teensy\Projects\HelloWorld/WString.cpp:251
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	bool self = false;
    4e6e:	2700      	movs	r7, #0
C:\Teensy\Projects\HelloWorld/WString.cpp:257
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    4e70:	f1b8 0f00 	cmp.w	r8, #0
    4e74:	d016      	beq.n	4ea4 <_ZN6String6appendEPKcj+0x56>
C:\Teensy\Projects\HelloWorld/WString.cpp:250 (discriminator 2)
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    4e76:	4446      	add	r6, r8
C:\Teensy\Projects\HelloWorld/WString.cpp:257 (discriminator 2)
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    4e78:	4620      	mov	r0, r4
    4e7a:	4631      	mov	r1, r6
    4e7c:	f7ff febb 	bl	4bf6 <_ZN6String7reserveEj>
    4e80:	b180      	cbz	r0, 4ea4 <_ZN6String6appendEPKcj+0x56>
    4e82:	68a0      	ldr	r0, [r4, #8]
    4e84:	6821      	ldr	r1, [r4, #0]
C:\Teensy\Projects\HelloWorld/WString.cpp:258
	if ( self ) {
    4e86:	b147      	cbz	r7, 4e9a <_ZN6String6appendEPKcj+0x4c>
C:\Teensy\Projects\HelloWorld/WString.cpp:259
		memcpy(buffer + len, buffer+buffer_offset, length);
    4e88:	4408      	add	r0, r1
    4e8a:	4642      	mov	r2, r8
    4e8c:	4449      	add	r1, r9
    4e8e:	f001 fc03 	bl	6698 <memcpy>
C:\Teensy\Projects\HelloWorld/WString.cpp:260
		buffer[newlen] = 0;
    4e92:	6823      	ldr	r3, [r4, #0]
    4e94:	2200      	movs	r2, #0
    4e96:	559a      	strb	r2, [r3, r6]
    4e98:	e003      	b.n	4ea2 <_ZN6String6appendEPKcj+0x54>
C:\Teensy\Projects\HelloWorld/WString.cpp:263
		}
	else
		strcpy(buffer + len, cstr);
    4e9a:	4408      	add	r0, r1
    4e9c:	4629      	mov	r1, r5
    4e9e:	f001 fcf0 	bl	6882 <strcpy>
C:\Teensy\Projects\HelloWorld/WString.cpp:264
	len = newlen;
    4ea2:	60a6      	str	r6, [r4, #8]
C:\Teensy\Projects\HelloWorld/WString.cpp:266
	return *this;
}
    4ea4:	4620      	mov	r0, r4
    4ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00004eaa <_ZN6String6appendERKS_>:
_ZN6String6appendERKS_():
C:\Teensy\Projects\HelloWorld/WString.cpp:244
/*********************************************/
/*  Append                                   */
/*********************************************/

String & String::append(const String &s)
{
    4eaa:	460b      	mov	r3, r1
C:\Teensy\Projects\HelloWorld/WString.cpp:245
	return append(s.buffer, s.len);
    4eac:	6809      	ldr	r1, [r1, #0]
    4eae:	689a      	ldr	r2, [r3, #8]
    4eb0:	f7ff bfcd 	b.w	4e4e <_ZN6String6appendEPKcj>

00004eb4 <_ZN6String6appendEPKc>:
_ZN6String6appendEPKc():
C:\Teensy\Projects\HelloWorld/WString.cpp:269
	len = newlen;
	return *this;
}

String & String::append(const char *cstr)
{
    4eb4:	b538      	push	{r3, r4, r5, lr}
    4eb6:	4605      	mov	r5, r0
C:\Teensy\Projects\HelloWorld/WString.cpp:270
	if (cstr) append(cstr, strlen(cstr));
    4eb8:	460c      	mov	r4, r1
    4eba:	b139      	cbz	r1, 4ecc <_ZN6String6appendEPKc+0x18>
C:\Teensy\Projects\HelloWorld/WString.cpp:270 (discriminator 1)
    4ebc:	4608      	mov	r0, r1
    4ebe:	f001 fce8 	bl	6892 <strlen>
    4ec2:	4621      	mov	r1, r4
    4ec4:	4602      	mov	r2, r0
    4ec6:	4628      	mov	r0, r5
    4ec8:	f7ff ffc1 	bl	4e4e <_ZN6String6appendEPKcj>
C:\Teensy\Projects\HelloWorld/WString.cpp:272
	return *this;
}
    4ecc:	4628      	mov	r0, r5
    4ece:	bd38      	pop	{r3, r4, r5, pc}

00004ed0 <_ZN6String6appendEc>:
_ZN6String6appendEc():
C:\Teensy\Projects\HelloWorld/WString.cpp:275

String & String::append(char c)
{
    4ed0:	b513      	push	{r0, r1, r4, lr}
C:\Teensy\Projects\HelloWorld/WString.cpp:278
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
    4ed2:	2300      	movs	r3, #0
C:\Teensy\Projects\HelloWorld/WString.cpp:277
}

String & String::append(char c)
{
	char buf[2];
	buf[0] = c;
    4ed4:	f88d 1004 	strb.w	r1, [sp, #4]
C:\Teensy\Projects\HelloWorld/WString.cpp:279
	buf[1] = 0;
	append(buf, 1);
    4ed8:	2201      	movs	r2, #1
    4eda:	a901      	add	r1, sp, #4
C:\Teensy\Projects\HelloWorld/WString.cpp:275
	if (cstr) append(cstr, strlen(cstr));
	return *this;
}

String & String::append(char c)
{
    4edc:	4604      	mov	r4, r0
C:\Teensy\Projects\HelloWorld/WString.cpp:278
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
    4ede:	f88d 3005 	strb.w	r3, [sp, #5]
C:\Teensy\Projects\HelloWorld/WString.cpp:279
	append(buf, 1);
    4ee2:	f7ff ffb4 	bl	4e4e <_ZN6String6appendEPKcj>
C:\Teensy\Projects\HelloWorld/WString.cpp:281
	return *this;
}
    4ee6:	4620      	mov	r0, r4
    4ee8:	b002      	add	sp, #8
    4eea:	bd10      	pop	{r4, pc}

00004eec <_ZN6String6appendEi>:
_ZN6String6appendEi():
C:\Teensy\Projects\HelloWorld/WString.cpp:284

String & String::append(int num)
{
    4eec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4eee:	4604      	mov	r4, r0
C:\Teensy\Projects\HelloWorld/WString.cpp:286
	char buf[12];
	ltoa((long)num, buf, 10);
    4ef0:	220a      	movs	r2, #10
    4ef2:	4608      	mov	r0, r1
    4ef4:	a901      	add	r1, sp, #4
    4ef6:	f7fb fd0b 	bl	910 <ltoa>
C:\Teensy\Projects\HelloWorld/WString.cpp:287
	append(buf, strlen(buf));
    4efa:	a801      	add	r0, sp, #4
    4efc:	f001 fcc9 	bl	6892 <strlen>
    4f00:	a901      	add	r1, sp, #4
    4f02:	4602      	mov	r2, r0
    4f04:	4620      	mov	r0, r4
    4f06:	f7ff ffa2 	bl	4e4e <_ZN6String6appendEPKcj>
C:\Teensy\Projects\HelloWorld/WString.cpp:289
	return *this;
}
    4f0a:	4620      	mov	r0, r4
    4f0c:	b004      	add	sp, #16
    4f0e:	bd10      	pop	{r4, pc}

00004f10 <_ZN6String6appendEj>:
_ZN6String6appendEj():
C:\Teensy\Projects\HelloWorld/WString.cpp:292

String & String::append(unsigned int num)
{
    4f10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4f12:	4604      	mov	r4, r0
C:\Teensy\Projects\HelloWorld/WString.cpp:294
	char buf[11];
	ultoa((unsigned long)num, buf, 10);
    4f14:	220a      	movs	r2, #10
    4f16:	4608      	mov	r0, r1
    4f18:	a901      	add	r1, sp, #4
    4f1a:	f7fb fcdb 	bl	8d4 <ultoa>
C:\Teensy\Projects\HelloWorld/WString.cpp:295
	append(buf, strlen(buf));
    4f1e:	a801      	add	r0, sp, #4
    4f20:	f001 fcb7 	bl	6892 <strlen>
    4f24:	a901      	add	r1, sp, #4
    4f26:	4602      	mov	r2, r0
    4f28:	4620      	mov	r0, r4
    4f2a:	f7ff ff90 	bl	4e4e <_ZN6String6appendEPKcj>
C:\Teensy\Projects\HelloWorld/WString.cpp:297
	return *this;
}
    4f2e:	4620      	mov	r0, r4
    4f30:	b004      	add	sp, #16
    4f32:	bd10      	pop	{r4, pc}

00004f34 <_ZN6String6appendEl>:
_ZN6String6appendEl():
C:\Teensy\Projects\HelloWorld/WString.cpp:300

String & String::append(long num)
{
    4f34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4f36:	4604      	mov	r4, r0
C:\Teensy\Projects\HelloWorld/WString.cpp:302
	char buf[12];
	ltoa(num, buf, 10);
    4f38:	220a      	movs	r2, #10
    4f3a:	4608      	mov	r0, r1
    4f3c:	a901      	add	r1, sp, #4
    4f3e:	f7fb fce7 	bl	910 <ltoa>
C:\Teensy\Projects\HelloWorld/WString.cpp:303
	append(buf, strlen(buf));
    4f42:	a801      	add	r0, sp, #4
    4f44:	f001 fca5 	bl	6892 <strlen>
    4f48:	a901      	add	r1, sp, #4
    4f4a:	4602      	mov	r2, r0
    4f4c:	4620      	mov	r0, r4
    4f4e:	f7ff ff7e 	bl	4e4e <_ZN6String6appendEPKcj>
C:\Teensy\Projects\HelloWorld/WString.cpp:305
	return *this;
}
    4f52:	4620      	mov	r0, r4
    4f54:	b004      	add	sp, #16
    4f56:	bd10      	pop	{r4, pc}

00004f58 <_ZN6String6appendEm>:
_ZN6String6appendEm():
C:\Teensy\Projects\HelloWorld/WString.cpp:308

String & String::append(unsigned long num)
{
    4f58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4f5a:	4604      	mov	r4, r0
C:\Teensy\Projects\HelloWorld/WString.cpp:310
	char buf[11];
	ultoa(num, buf, 10);
    4f5c:	220a      	movs	r2, #10
    4f5e:	4608      	mov	r0, r1
    4f60:	a901      	add	r1, sp, #4
    4f62:	f7fb fcb7 	bl	8d4 <ultoa>
C:\Teensy\Projects\HelloWorld/WString.cpp:311
	append(buf, strlen(buf));
    4f66:	a801      	add	r0, sp, #4
    4f68:	f001 fc93 	bl	6892 <strlen>
    4f6c:	a901      	add	r1, sp, #4
    4f6e:	4602      	mov	r2, r0
    4f70:	4620      	mov	r0, r4
    4f72:	f7ff ff6c 	bl	4e4e <_ZN6String6appendEPKcj>
C:\Teensy\Projects\HelloWorld/WString.cpp:313
	return *this;
}
    4f76:	4620      	mov	r0, r4
    4f78:	b004      	add	sp, #16
    4f7a:	bd10      	pop	{r4, pc}

00004f7c <_ZN6String6appendEf>:
_ZN6String6appendEf():
C:\Teensy\Projects\HelloWorld/WString.cpp:316

String & String::append(float num)
{
    4f7c:	b510      	push	{r4, lr}
    4f7e:	b088      	sub	sp, #32
    4f80:	4604      	mov	r4, r0
C:\Teensy\Projects\HelloWorld/WString.cpp:318
	char buf[30];
	dtostrf(num, 4, 2, buf); 
    4f82:	466b      	mov	r3, sp
    4f84:	2202      	movs	r2, #2
    4f86:	4608      	mov	r0, r1
    4f88:	2104      	movs	r1, #4
    4f8a:	f7fb fcd1 	bl	930 <dtostrf>
C:\Teensy\Projects\HelloWorld/WString.cpp:319
	append(buf, strlen(buf));
    4f8e:	4668      	mov	r0, sp
    4f90:	f001 fc7f 	bl	6892 <strlen>
    4f94:	4669      	mov	r1, sp
    4f96:	4602      	mov	r2, r0
    4f98:	4620      	mov	r0, r4
    4f9a:	f7ff ff58 	bl	4e4e <_ZN6String6appendEPKcj>
C:\Teensy\Projects\HelloWorld/WString.cpp:321
	return *this;
}
    4f9e:	4620      	mov	r0, r4
    4fa0:	b008      	add	sp, #32
    4fa2:	bd10      	pop	{r4, pc}

00004fa4 <_ZplRK15StringSumHelperRK6String>:
_ZplRK15StringSumHelperRK6String():
C:\Teensy\Projects\HelloWorld/WString.cpp:330
/*  Concatenate                              */
/*********************************************/


StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    4fa4:	b510      	push	{r4, lr}
    4fa6:	460b      	mov	r3, r1
    4fa8:	4604      	mov	r4, r0
C:\Teensy\Projects\HelloWorld/WString.cpp:332
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	a.append(rhs.buffer, rhs.len);
    4faa:	6809      	ldr	r1, [r1, #0]
    4fac:	689a      	ldr	r2, [r3, #8]
    4fae:	f7ff ff4e 	bl	4e4e <_ZN6String6appendEPKcj>
C:\Teensy\Projects\HelloWorld/WString.cpp:334
	return a;
}
    4fb2:	4620      	mov	r0, r4
    4fb4:	bd10      	pop	{r4, pc}

00004fb6 <_ZplRK15StringSumHelperPKc>:
_ZplRK15StringSumHelperPKc():
C:\Teensy\Projects\HelloWorld/WString.cpp:337

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    4fb6:	b538      	push	{r3, r4, r5, lr}
    4fb8:	4605      	mov	r5, r0
C:\Teensy\Projects\HelloWorld/WString.cpp:339
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (cstr) a.append(cstr, strlen(cstr));
    4fba:	460c      	mov	r4, r1
    4fbc:	b139      	cbz	r1, 4fce <_ZplRK15StringSumHelperPKc+0x18>
C:\Teensy\Projects\HelloWorld/WString.cpp:339 (discriminator 1)
    4fbe:	4608      	mov	r0, r1
    4fc0:	f001 fc67 	bl	6892 <strlen>
    4fc4:	4621      	mov	r1, r4
    4fc6:	4602      	mov	r2, r0
    4fc8:	4628      	mov	r0, r5
    4fca:	f7ff ff40 	bl	4e4e <_ZN6String6appendEPKcj>
C:\Teensy\Projects\HelloWorld/WString.cpp:341
	return a;
}
    4fce:	4628      	mov	r0, r5
    4fd0:	bd38      	pop	{r3, r4, r5, pc}

00004fd2 <_ZplRK15StringSumHelperPK19__FlashStringHelper>:
_ZplRK15StringSumHelperPK19__FlashStringHelper():
C:\Teensy\Projects\HelloWorld/WString.cpp:344

StringSumHelper & operator + (const StringSumHelper &lhs, const __FlashStringHelper *pgmstr)
{
    4fd2:	b538      	push	{r3, r4, r5, lr}
    4fd4:	4604      	mov	r4, r0
_ZN6String6appendEPK19__FlashStringHelper():
C:\Teensy\Projects\HelloWorld/WString.h:90
	String & operator = (char c);

	// append
	String & append(const String &str);
	String & append(const char *cstr);
	String & append(const __FlashStringHelper *s)	{return append((const char *)s, strlen((const char *)s)); }
    4fd6:	4608      	mov	r0, r1
_ZplRK15StringSumHelperPK19__FlashStringHelper():
C:\Teensy\Projects\HelloWorld/WString.cpp:344
    4fd8:	460d      	mov	r5, r1
_ZN6String6appendEPK19__FlashStringHelper():
C:\Teensy\Projects\HelloWorld/WString.h:90
    4fda:	f001 fc5a 	bl	6892 <strlen>
    4fde:	4629      	mov	r1, r5
    4fe0:	4602      	mov	r2, r0
    4fe2:	4620      	mov	r0, r4
    4fe4:	f7ff ff33 	bl	4e4e <_ZN6String6appendEPKcj>
_ZplRK15StringSumHelperPK19__FlashStringHelper():
C:\Teensy\Projects\HelloWorld/WString.cpp:348
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	a.append(pgmstr);
	return a;
}
    4fe8:	4620      	mov	r0, r4
    4fea:	bd38      	pop	{r3, r4, r5, pc}

00004fec <_ZplRK15StringSumHelperc>:
_ZplRK15StringSumHelperc():
C:\Teensy\Projects\HelloWorld/WString.cpp:351

StringSumHelper & operator + (const StringSumHelper &lhs, char c)
{
    4fec:	b510      	push	{r4, lr}
    4fee:	4604      	mov	r4, r0
C:\Teensy\Projects\HelloWorld/WString.cpp:353
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	a.append(c);
    4ff0:	f7ff ff6e 	bl	4ed0 <_ZN6String6appendEc>
C:\Teensy\Projects\HelloWorld/WString.cpp:355
	return a;
}
    4ff4:	4620      	mov	r0, r4
    4ff6:	bd10      	pop	{r4, pc}

00004ff8 <_ZplRK15StringSumHelperh>:
_ZplRK15StringSumHelperh():
C:\Teensy\Projects\HelloWorld/WString.cpp:358

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned char c)
{
    4ff8:	b510      	push	{r4, lr}
    4ffa:	4604      	mov	r4, r0
_ZN6String6appendEh():
C:\Teensy\Projects\HelloWorld/WString.h:92
	String & append(char c);
	String & append(unsigned char c)		{return append((int)c);}
    4ffc:	f7ff ff76 	bl	4eec <_ZN6String6appendEi>
_ZplRK15StringSumHelperh():
C:\Teensy\Projects\HelloWorld/WString.cpp:362
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	a.append(c);
	return a;
}
    5000:	4620      	mov	r0, r4
    5002:	bd10      	pop	{r4, pc}

00005004 <_ZplRK15StringSumHelperi>:
_ZplRK15StringSumHelperi():
C:\Teensy\Projects\HelloWorld/WString.cpp:365

StringSumHelper & operator + (const StringSumHelper &lhs, int num)
{
    5004:	b510      	push	{r4, lr}
    5006:	4604      	mov	r4, r0
C:\Teensy\Projects\HelloWorld/WString.cpp:367
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	a.append((long)num);
    5008:	f7ff ff94 	bl	4f34 <_ZN6String6appendEl>
C:\Teensy\Projects\HelloWorld/WString.cpp:369
	return a;
}
    500c:	4620      	mov	r0, r4
    500e:	bd10      	pop	{r4, pc}

00005010 <_ZplRK15StringSumHelperj>:
_ZplRK15StringSumHelperj():
C:\Teensy\Projects\HelloWorld/WString.cpp:372

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned int num)
{
    5010:	b510      	push	{r4, lr}
    5012:	4604      	mov	r4, r0
C:\Teensy\Projects\HelloWorld/WString.cpp:374
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	a.append((unsigned long)num);
    5014:	f7ff ffa0 	bl	4f58 <_ZN6String6appendEm>
C:\Teensy\Projects\HelloWorld/WString.cpp:376
	return a;
}
    5018:	4620      	mov	r0, r4
    501a:	bd10      	pop	{r4, pc}

0000501c <_ZplRK15StringSumHelperl>:
_ZplRK15StringSumHelperl():
C:\Teensy\Projects\HelloWorld/WString.cpp:379

StringSumHelper & operator + (const StringSumHelper &lhs, long num)
{
    501c:	b510      	push	{r4, lr}
    501e:	4604      	mov	r4, r0
C:\Teensy\Projects\HelloWorld/WString.cpp:381
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	a.append(num);
    5020:	f7ff ff88 	bl	4f34 <_ZN6String6appendEl>
C:\Teensy\Projects\HelloWorld/WString.cpp:383
	return a;
}
    5024:	4620      	mov	r0, r4
    5026:	bd10      	pop	{r4, pc}

00005028 <_ZplRK15StringSumHelperm>:
_ZplRK15StringSumHelperm():
C:\Teensy\Projects\HelloWorld/WString.cpp:386

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned long num)
{
    5028:	b510      	push	{r4, lr}
    502a:	4604      	mov	r4, r0
C:\Teensy\Projects\HelloWorld/WString.cpp:388
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	a.append(num);
    502c:	f7ff ff94 	bl	4f58 <_ZN6String6appendEm>
C:\Teensy\Projects\HelloWorld/WString.cpp:390
	return a;
}
    5030:	4620      	mov	r0, r4
    5032:	bd10      	pop	{r4, pc}

00005034 <_ZplRK15StringSumHelperf>:
_ZplRK15StringSumHelperf():
C:\Teensy\Projects\HelloWorld/WString.cpp:393

StringSumHelper & operator + (const StringSumHelper &lhs, float num)
{
    5034:	b510      	push	{r4, lr}
    5036:	4604      	mov	r4, r0
C:\Teensy\Projects\HelloWorld/WString.cpp:395
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	a.append(num);
    5038:	f7ff ffa0 	bl	4f7c <_ZN6String6appendEf>
C:\Teensy\Projects\HelloWorld/WString.cpp:397
	return a;
}
    503c:	4620      	mov	r0, r4
    503e:	bd10      	pop	{r4, pc}

00005040 <_ZplRK15StringSumHelperd>:
_ZplRK15StringSumHelperd():
C:\Teensy\Projects\HelloWorld/WString.cpp:400

StringSumHelper & operator + (const StringSumHelper &lhs, double num)
{
    5040:	b510      	push	{r4, lr}
_ZN6String6appendEd():
C:\Teensy\Projects\HelloWorld/WString.h:98
	String & append(int num);
	String & append(unsigned int num);
	String & append(long num);
	String & append(unsigned long num);
	String & append(float num);
	String & append(double num)			{return append((float)num);}
    5042:	4619      	mov	r1, r3
_ZplRK15StringSumHelperd():
C:\Teensy\Projects\HelloWorld/WString.cpp:400
    5044:	4604      	mov	r4, r0
_ZN6String6appendEd():
C:\Teensy\Projects\HelloWorld/WString.h:98
    5046:	4610      	mov	r0, r2
    5048:	f000 ff72 	bl	5f30 <__aeabi_d2f>
    504c:	4601      	mov	r1, r0
    504e:	4620      	mov	r0, r4
    5050:	f7ff ff94 	bl	4f7c <_ZN6String6appendEf>
_ZplRK15StringSumHelperd():
C:\Teensy\Projects\HelloWorld/WString.cpp:404
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	a.append(num);
	return a;
}
    5054:	4620      	mov	r0, r4
    5056:	bd10      	pop	{r4, pc}

00005058 <_ZNK6String9compareToERKS_>:
_ZNK6String9compareToERKS_():
C:\Teensy\Projects\HelloWorld/WString.cpp:412
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
    5058:	6803      	ldr	r3, [r0, #0]
    505a:	680a      	ldr	r2, [r1, #0]
    505c:	b10b      	cbz	r3, 5062 <_ZNK6String9compareToERKS_+0xa>
C:\Teensy\Projects\HelloWorld/WString.cpp:412 (discriminator 1)
    505e:	b95a      	cbnz	r2, 5078 <_ZNK6String9compareToERKS_+0x20>
    5060:	e005      	b.n	506e <_ZNK6String9compareToERKS_+0x16>
C:\Teensy\Projects\HelloWorld/WString.cpp:413
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
    5062:	b122      	cbz	r2, 506e <_ZNK6String9compareToERKS_+0x16>
C:\Teensy\Projects\HelloWorld/WString.cpp:413 (discriminator 1)
    5064:	6889      	ldr	r1, [r1, #8]
    5066:	b111      	cbz	r1, 506e <_ZNK6String9compareToERKS_+0x16>
    5068:	7810      	ldrb	r0, [r2, #0]
    506a:	4240      	negs	r0, r0
    506c:	4770      	bx	lr
C:\Teensy\Projects\HelloWorld/WString.cpp:414
		if (buffer && len > 0) return *(unsigned char *)buffer;
    506e:	b13b      	cbz	r3, 5080 <_ZNK6String9compareToERKS_+0x28>
C:\Teensy\Projects\HelloWorld/WString.cpp:414 (discriminator 1)
    5070:	6880      	ldr	r0, [r0, #8]
    5072:	b130      	cbz	r0, 5082 <_ZNK6String9compareToERKS_+0x2a>
    5074:	7818      	ldrb	r0, [r3, #0]
    5076:	4770      	bx	lr
C:\Teensy\Projects\HelloWorld/WString.cpp:417
		return 0;
	}
	return strcmp(buffer, s.buffer);
    5078:	4618      	mov	r0, r3
    507a:	4611      	mov	r1, r2
    507c:	f001 bbf7 	b.w	686e <strcmp>
C:\Teensy\Projects\HelloWorld/WString.cpp:415
int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
		return 0;
    5080:	4618      	mov	r0, r3
C:\Teensy\Projects\HelloWorld/WString.cpp:418
	}
	return strcmp(buffer, s.buffer);
}
    5082:	4770      	bx	lr

00005084 <_ZNK6String6equalsERKS_>:
_ZNK6String6equalsERKS_():
C:\Teensy\Projects\HelloWorld/WString.cpp:421

unsigned char String::equals(const String &s2) const
{
    5084:	b508      	push	{r3, lr}
C:\Teensy\Projects\HelloWorld/WString.cpp:422
	return (len == s2.len && compareTo(s2) == 0);
    5086:	6882      	ldr	r2, [r0, #8]
    5088:	688b      	ldr	r3, [r1, #8]
    508a:	429a      	cmp	r2, r3
    508c:	d106      	bne.n	509c <_ZNK6String6equalsERKS_+0x18>
C:\Teensy\Projects\HelloWorld/WString.cpp:422 (discriminator 1)
    508e:	f7ff ffe3 	bl	5058 <_ZNK6String9compareToERKS_>
    5092:	f1d0 0001 	rsbs	r0, r0, #1
    5096:	bf38      	it	cc
    5098:	2000      	movcc	r0, #0
    509a:	bd08      	pop	{r3, pc}
C:\Teensy\Projects\HelloWorld/WString.cpp:422
    509c:	2000      	movs	r0, #0
C:\Teensy\Projects\HelloWorld/WString.cpp:423
}
    509e:	bd08      	pop	{r3, pc}

000050a0 <_ZNK6String6equalsEPKc>:
_ZNK6String6equalsEPKc():
C:\Teensy\Projects\HelloWorld/WString.cpp:427

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    50a0:	6882      	ldr	r2, [r0, #8]
C:\Teensy\Projects\HelloWorld/WString.cpp:426
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
    50a2:	b508      	push	{r3, lr}
    50a4:	460b      	mov	r3, r1
C:\Teensy\Projects\HelloWorld/WString.cpp:427
	if (len == 0) return (cstr == NULL || *cstr == 0);
    50a6:	b912      	cbnz	r2, 50ae <_ZNK6String6equalsEPKc+0xe>
C:\Teensy\Projects\HelloWorld/WString.cpp:427 (discriminator 1)
    50a8:	b919      	cbnz	r1, 50b2 <_ZNK6String6equalsEPKc+0x12>
C:\Teensy\Projects\HelloWorld/WString.cpp:427
    50aa:	2001      	movs	r0, #1
    50ac:	bd08      	pop	{r3, pc}
C:\Teensy\Projects\HelloWorld/WString.cpp:428
	if (cstr == NULL) return buffer[0] == 0;
    50ae:	b911      	cbnz	r1, 50b6 <_ZNK6String6equalsEPKc+0x16>
C:\Teensy\Projects\HelloWorld/WString.cpp:428 (discriminator 1)
    50b0:	6803      	ldr	r3, [r0, #0]
    50b2:	7818      	ldrb	r0, [r3, #0]
    50b4:	e002      	b.n	50bc <_ZNK6String6equalsEPKc+0x1c>
C:\Teensy\Projects\HelloWorld/WString.cpp:429
	return strcmp(buffer, cstr) == 0;
    50b6:	6800      	ldr	r0, [r0, #0]
    50b8:	f001 fbd9 	bl	686e <strcmp>
    50bc:	f1d0 0001 	rsbs	r0, r0, #1
    50c0:	bf38      	it	cc
    50c2:	2000      	movcc	r0, #0
C:\Teensy\Projects\HelloWorld/WString.cpp:430
}
    50c4:	bd08      	pop	{r3, pc}

000050c6 <_ZNK6StringltERKS_>:
_ZNK6StringltERKS_():
C:\Teensy\Projects\HelloWorld/WString.cpp:433

unsigned char String::operator<(const String &rhs) const
{
    50c6:	b508      	push	{r3, lr}
C:\Teensy\Projects\HelloWorld/WString.cpp:434
	return compareTo(rhs) < 0;
    50c8:	f7ff ffc6 	bl	5058 <_ZNK6String9compareToERKS_>
C:\Teensy\Projects\HelloWorld/WString.cpp:435
}
    50cc:	0fc0      	lsrs	r0, r0, #31
    50ce:	bd08      	pop	{r3, pc}

000050d0 <_ZNK6StringgtERKS_>:
_ZNK6StringgtERKS_():
C:\Teensy\Projects\HelloWorld/WString.cpp:438

unsigned char String::operator>(const String &rhs) const
{
    50d0:	b508      	push	{r3, lr}
C:\Teensy\Projects\HelloWorld/WString.cpp:439
	return compareTo(rhs) > 0;
    50d2:	f7ff ffc1 	bl	5058 <_ZNK6String9compareToERKS_>
C:\Teensy\Projects\HelloWorld/WString.cpp:440
}
    50d6:	2800      	cmp	r0, #0
    50d8:	bfd4      	ite	le
    50da:	2000      	movle	r0, #0
    50dc:	2001      	movgt	r0, #1
    50de:	bd08      	pop	{r3, pc}

000050e0 <_ZNK6StringleERKS_>:
_ZNK6StringleERKS_():
C:\Teensy\Projects\HelloWorld/WString.cpp:443

unsigned char String::operator<=(const String &rhs) const
{
    50e0:	b508      	push	{r3, lr}
C:\Teensy\Projects\HelloWorld/WString.cpp:444
	return compareTo(rhs) <= 0;
    50e2:	f7ff ffb9 	bl	5058 <_ZNK6String9compareToERKS_>
C:\Teensy\Projects\HelloWorld/WString.cpp:445
}
    50e6:	2800      	cmp	r0, #0
    50e8:	bfcc      	ite	gt
    50ea:	2000      	movgt	r0, #0
    50ec:	2001      	movle	r0, #1
    50ee:	bd08      	pop	{r3, pc}

000050f0 <_ZNK6StringgeERKS_>:
_ZNK6StringgeERKS_():
C:\Teensy\Projects\HelloWorld/WString.cpp:448

unsigned char String::operator>=(const String &rhs) const
{
    50f0:	b508      	push	{r3, lr}
C:\Teensy\Projects\HelloWorld/WString.cpp:449
	return compareTo(rhs) >= 0;
    50f2:	f7ff ffb1 	bl	5058 <_ZNK6String9compareToERKS_>
C:\Teensy\Projects\HelloWorld/WString.cpp:450
}
    50f6:	43c0      	mvns	r0, r0
    50f8:	0fc0      	lsrs	r0, r0, #31
    50fa:	bd08      	pop	{r3, pc}

000050fc <_ZNK6String16equalsIgnoreCaseERKS_>:
_ZNK6String16equalsIgnoreCaseERKS_():
C:\Teensy\Projects\HelloWorld/WString.cpp:454

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
	if (this == &s2) return 1;
    50fc:	4288      	cmp	r0, r1
C:\Teensy\Projects\HelloWorld/WString.cpp:453
{
	return compareTo(rhs) >= 0;
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
    50fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:\Teensy\Projects\HelloWorld/WString.cpp:454
	if (this == &s2) return 1;
    5100:	d014      	beq.n	512c <_ZNK6String16equalsIgnoreCaseERKS_+0x30>
C:\Teensy\Projects\HelloWorld/WString.cpp:455
	if (len != s2.len) return 0;
    5102:	6883      	ldr	r3, [r0, #8]
    5104:	688a      	ldr	r2, [r1, #8]
    5106:	4293      	cmp	r3, r2
    5108:	d112      	bne.n	5130 <_ZNK6String16equalsIgnoreCaseERKS_+0x34>
C:\Teensy\Projects\HelloWorld/WString.cpp:456
	if (len == 0) return 1;
    510a:	b17b      	cbz	r3, 512c <_ZNK6String16equalsIgnoreCaseERKS_+0x30>
C:\Teensy\Projects\HelloWorld/WString.cpp:457
	const char *p1 = buffer;
    510c:	6806      	ldr	r6, [r0, #0]
C:\Teensy\Projects\HelloWorld/WString.cpp:458
	const char *p2 = s2.buffer;
    510e:	680d      	ldr	r5, [r1, #0]
C:\Teensy\Projects\HelloWorld/WString.cpp:459
	while (*p1) {
    5110:	2400      	movs	r4, #0
C:\Teensy\Projects\HelloWorld/WString.cpp:459 (discriminator 1)
    5112:	5d30      	ldrb	r0, [r6, r4]
    5114:	b150      	cbz	r0, 512c <_ZNK6String16equalsIgnoreCaseERKS_+0x30>
C:\Teensy\Projects\HelloWorld/WString.cpp:460
		if (tolower(*p1++) != tolower(*p2++)) return 0;
    5116:	f002 fb13 	bl	7740 <tolower>
    511a:	4607      	mov	r7, r0
    511c:	5d28      	ldrb	r0, [r5, r4]
    511e:	f002 fb0f 	bl	7740 <tolower>
    5122:	4287      	cmp	r7, r0
    5124:	f104 0401 	add.w	r4, r4, #1
    5128:	d0f3      	beq.n	5112 <_ZNK6String16equalsIgnoreCaseERKS_+0x16>
    512a:	e001      	b.n	5130 <_ZNK6String16equalsIgnoreCaseERKS_+0x34>
C:\Teensy\Projects\HelloWorld/WString.cpp:454
	return compareTo(rhs) >= 0;
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
	if (this == &s2) return 1;
    512c:	2001      	movs	r0, #1
    512e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:\Teensy\Projects\HelloWorld/WString.cpp:455
	if (len != s2.len) return 0;
    5130:	2000      	movs	r0, #0
C:\Teensy\Projects\HelloWorld/WString.cpp:463
	const char *p2 = s2.buffer;
	while (*p1) {
		if (tolower(*p1++) != tolower(*p2++)) return 0;
	} 
	return 1;
}
    5132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005134 <_ZNK6String10startsWithERKS_j>:
_ZNK6String10startsWithERKS_j():
C:\Teensy\Projects\HelloWorld/WString.cpp:472
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
    5134:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/WString.cpp:473
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    5136:	688b      	ldr	r3, [r1, #8]
    5138:	6884      	ldr	r4, [r0, #8]
    513a:	1ae4      	subs	r4, r4, r3
    513c:	42a2      	cmp	r2, r4
    513e:	d80c      	bhi.n	515a <_ZNK6String10startsWithERKS_j+0x26>
C:\Teensy\Projects\HelloWorld/WString.cpp:473 (discriminator 2)
    5140:	6800      	ldr	r0, [r0, #0]
    5142:	b168      	cbz	r0, 5160 <_ZNK6String10startsWithERKS_j+0x2c>
C:\Teensy\Projects\HelloWorld/WString.cpp:473 (discriminator 1)
    5144:	6809      	ldr	r1, [r1, #0]
    5146:	b151      	cbz	r1, 515e <_ZNK6String10startsWithERKS_j+0x2a>
C:\Teensy\Projects\HelloWorld/WString.cpp:474
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
    5148:	4410      	add	r0, r2
    514a:	461a      	mov	r2, r3
    514c:	f001 fba9 	bl	68a2 <strncmp>
    5150:	f1d0 0001 	rsbs	r0, r0, #1
    5154:	bf38      	it	cc
    5156:	2000      	movcc	r0, #0
    5158:	bd10      	pop	{r4, pc}
C:\Teensy\Projects\HelloWorld/WString.cpp:473
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    515a:	2000      	movs	r0, #0
    515c:	bd10      	pop	{r4, pc}
    515e:	4608      	mov	r0, r1
C:\Teensy\Projects\HelloWorld/WString.cpp:475
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}
    5160:	bd10      	pop	{r4, pc}

00005162 <_ZNK6String10startsWithERKS_>:
_ZNK6String10startsWithERKS_():
C:\Teensy\Projects\HelloWorld/WString.cpp:467
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
    5162:	6882      	ldr	r2, [r0, #8]
    5164:	688b      	ldr	r3, [r1, #8]
    5166:	429a      	cmp	r2, r3
    5168:	d302      	bcc.n	5170 <_ZNK6String10startsWithERKS_+0xe>
C:\Teensy\Projects\HelloWorld/WString.cpp:468
	return startsWith(s2, 0);
    516a:	2200      	movs	r2, #0
    516c:	f7ff bfe2 	b.w	5134 <_ZNK6String10startsWithERKS_j>
C:\Teensy\Projects\HelloWorld/WString.cpp:469
}
    5170:	2000      	movs	r0, #0
    5172:	4770      	bx	lr

00005174 <_ZNK6String8endsWithERKS_>:
_ZNK6String8endsWithERKS_():
C:\Teensy\Projects\HelloWorld/WString.cpp:478
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
    5174:	b508      	push	{r3, lr}
C:\Teensy\Projects\HelloWorld/WString.cpp:479
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
    5176:	6882      	ldr	r2, [r0, #8]
    5178:	688b      	ldr	r3, [r1, #8]
    517a:	429a      	cmp	r2, r3
    517c:	d30c      	bcc.n	5198 <_ZNK6String8endsWithERKS_+0x24>
C:\Teensy\Projects\HelloWorld/WString.cpp:479 (discriminator 2)
    517e:	6800      	ldr	r0, [r0, #0]
    5180:	b168      	cbz	r0, 519e <_ZNK6String8endsWithERKS_+0x2a>
C:\Teensy\Projects\HelloWorld/WString.cpp:479 (discriminator 1)
    5182:	6809      	ldr	r1, [r1, #0]
    5184:	b151      	cbz	r1, 519c <_ZNK6String8endsWithERKS_+0x28>
C:\Teensy\Projects\HelloWorld/WString.cpp:480
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
    5186:	1ad3      	subs	r3, r2, r3
    5188:	4418      	add	r0, r3
    518a:	f001 fb70 	bl	686e <strcmp>
    518e:	f1d0 0001 	rsbs	r0, r0, #1
    5192:	bf38      	it	cc
    5194:	2000      	movcc	r0, #0
    5196:	bd08      	pop	{r3, pc}
C:\Teensy\Projects\HelloWorld/WString.cpp:479
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
    5198:	2000      	movs	r0, #0
    519a:	bd08      	pop	{r3, pc}
    519c:	4608      	mov	r0, r1
C:\Teensy\Projects\HelloWorld/WString.cpp:481
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
}
    519e:	bd08      	pop	{r3, pc}

000051a0 <_ZN6String9setCharAtEjc>:
_ZN6String9setCharAtEjc():
C:\Teensy\Projects\HelloWorld/WString.cpp:494
	return operator[](loc);
}

void String::setCharAt(unsigned int loc, char c) 
{
	if (loc < len) buffer[loc] = c;
    51a0:	6883      	ldr	r3, [r0, #8]
    51a2:	4299      	cmp	r1, r3
    51a4:	bf3c      	itt	cc
    51a6:	6803      	ldrcc	r3, [r0, #0]
    51a8:	545a      	strbcc	r2, [r3, r1]
    51aa:	4770      	bx	lr

000051ac <_ZN6StringixEj>:
_ZN6StringixEj():
C:\Teensy\Projects\HelloWorld/WString.cpp:500
}

char & String::operator[](unsigned int index)
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
    51ac:	6883      	ldr	r3, [r0, #8]
    51ae:	4299      	cmp	r1, r3
    51b0:	d201      	bcs.n	51b6 <_ZN6StringixEj+0xa>
C:\Teensy\Projects\HelloWorld/WString.cpp:500 (discriminator 1)
    51b2:	6800      	ldr	r0, [r0, #0]
    51b4:	b918      	cbnz	r0, 51be <_ZN6StringixEj+0x12>
C:\Teensy\Projects\HelloWorld/WString.cpp:501
		dummy_writable_char = 0;
    51b6:	4803      	ldr	r0, [pc, #12]	; (51c4 <_ZN6StringixEj+0x18>)
    51b8:	2300      	movs	r3, #0
    51ba:	7003      	strb	r3, [r0, #0]
C:\Teensy\Projects\HelloWorld/WString.cpp:502
		return dummy_writable_char;
    51bc:	4770      	bx	lr
C:\Teensy\Projects\HelloWorld/WString.cpp:504
	}
	return buffer[index];
    51be:	4408      	add	r0, r1
C:\Teensy\Projects\HelloWorld/WString.cpp:505
}
    51c0:	4770      	bx	lr
    51c2:	bf00      	nop
    51c4:	1fff0fd0 	.word	0x1fff0fd0

000051c8 <_ZNK6StringixEj>:
_ZNK6StringixEj():
C:\Teensy\Projects\HelloWorld/WString.cpp:509

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
    51c8:	6883      	ldr	r3, [r0, #8]
    51ca:	4299      	cmp	r1, r3
    51cc:	d203      	bcs.n	51d6 <_ZNK6StringixEj+0xe>
C:\Teensy\Projects\HelloWorld/WString.cpp:509 (discriminator 2)
    51ce:	6800      	ldr	r0, [r0, #0]
    51d0:	b110      	cbz	r0, 51d8 <_ZNK6StringixEj+0x10>
C:\Teensy\Projects\HelloWorld/WString.cpp:510
	return buffer[index];
    51d2:	5c40      	ldrb	r0, [r0, r1]
    51d4:	4770      	bx	lr
C:\Teensy\Projects\HelloWorld/WString.cpp:509
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
    51d6:	2000      	movs	r0, #0
C:\Teensy\Projects\HelloWorld/WString.cpp:511
	return buffer[index];
}
    51d8:	4770      	bx	lr

000051da <_ZNK6String6charAtEj>:
_ZNK6String6charAtEj():
C:\Teensy\Projects\HelloWorld/WString.cpp:489
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
    51da:	f7ff bff5 	b.w	51c8 <_ZNK6StringixEj>

000051de <_ZNK6String8getBytesEPhjj>:
_ZNK6String8getBytesEPhjj():
C:\Teensy\Projects\HelloWorld/WString.cpp:514
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    51de:	b538      	push	{r3, r4, r5, lr}
    51e0:	460c      	mov	r4, r1
C:\Teensy\Projects\HelloWorld/WString.cpp:515
	if (!bufsize || !buf) return;
    51e2:	b19a      	cbz	r2, 520c <_ZNK6String8getBytesEPhjj+0x2e>
C:\Teensy\Projects\HelloWorld/WString.cpp:515 (discriminator 2)
    51e4:	b191      	cbz	r1, 520c <_ZNK6String8getBytesEPhjj+0x2e>
C:\Teensy\Projects\HelloWorld/WString.cpp:516
	if (index >= len) {
    51e6:	6881      	ldr	r1, [r0, #8]
    51e8:	428b      	cmp	r3, r1
    51ea:	d302      	bcc.n	51f2 <_ZNK6String8getBytesEPhjj+0x14>
C:\Teensy\Projects\HelloWorld/WString.cpp:517
		buf[0] = 0;
    51ec:	2300      	movs	r3, #0
    51ee:	7023      	strb	r3, [r4, #0]
C:\Teensy\Projects\HelloWorld/WString.cpp:518
		return;
    51f0:	bd38      	pop	{r3, r4, r5, pc}
C:\Teensy\Projects\HelloWorld/WString.cpp:521
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
    51f2:	1ac9      	subs	r1, r1, r3
C:\Teensy\Projects\HelloWorld/WString.cpp:520
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
    51f4:	1e55      	subs	r5, r2, #1
    51f6:	428d      	cmp	r5, r1
    51f8:	bf28      	it	cs
    51fa:	460d      	movcs	r5, r1
C:\Teensy\Projects\HelloWorld/WString.cpp:522
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    51fc:	6801      	ldr	r1, [r0, #0]
    51fe:	462a      	mov	r2, r5
    5200:	4419      	add	r1, r3
    5202:	4620      	mov	r0, r4
    5204:	f001 fb64 	bl	68d0 <strncpy>
C:\Teensy\Projects\HelloWorld/WString.cpp:523
	buf[n] = 0;
    5208:	2300      	movs	r3, #0
    520a:	5563      	strb	r3, [r4, r5]
    520c:	bd38      	pop	{r3, r4, r5, pc}

0000520e <_ZNK6String7indexOfEcj>:
_ZNK6String7indexOfEcj():
C:\Teensy\Projects\HelloWorld/WString.cpp:537
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
	if (fromIndex >= len) return -1;
    520e:	6883      	ldr	r3, [r0, #8]
    5210:	429a      	cmp	r2, r3
C:\Teensy\Projects\HelloWorld/WString.cpp:536
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
    5212:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/WString.cpp:537
	if (fromIndex >= len) return -1;
    5214:	d206      	bcs.n	5224 <_ZNK6String7indexOfEcj+0x16>
C:\Teensy\Projects\HelloWorld/WString.cpp:538
	const char* temp = strchr(buffer + fromIndex, ch);
    5216:	6804      	ldr	r4, [r0, #0]
    5218:	18a0      	adds	r0, r4, r2
    521a:	f001 fb1b 	bl	6854 <strchr>
C:\Teensy\Projects\HelloWorld/WString.cpp:539
	if (temp == NULL) return -1;
    521e:	b108      	cbz	r0, 5224 <_ZNK6String7indexOfEcj+0x16>
C:\Teensy\Projects\HelloWorld/WString.cpp:540
	return temp - buffer;
    5220:	1b00      	subs	r0, r0, r4
    5222:	bd10      	pop	{r4, pc}
C:\Teensy\Projects\HelloWorld/WString.cpp:537
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
	if (fromIndex >= len) return -1;
    5224:	f04f 30ff 	mov.w	r0, #4294967295
C:\Teensy\Projects\HelloWorld/WString.cpp:541
	const char* temp = strchr(buffer + fromIndex, ch);
	if (temp == NULL) return -1;
	return temp - buffer;
}
    5228:	bd10      	pop	{r4, pc}

0000522a <_ZNK6String7indexOfEc>:
_ZNK6String7indexOfEc():
C:\Teensy\Projects\HelloWorld/WString.cpp:532
/*  Search                                   */
/*********************************************/

int String::indexOf(char c) const
{
	return indexOf(c, 0);
    522a:	2200      	movs	r2, #0
    522c:	f7ff bfef 	b.w	520e <_ZNK6String7indexOfEcj>

00005230 <_ZNK6String7indexOfERKS_j>:
_ZNK6String7indexOfERKS_j():
C:\Teensy\Projects\HelloWorld/WString.cpp:550
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
    5230:	6883      	ldr	r3, [r0, #8]
    5232:	429a      	cmp	r2, r3
C:\Teensy\Projects\HelloWorld/WString.cpp:549
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
    5234:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/WString.cpp:550
	if (fromIndex >= len) return -1;
    5236:	d207      	bcs.n	5248 <_ZNK6String7indexOfERKS_j+0x18>
C:\Teensy\Projects\HelloWorld/WString.cpp:551
	const char *found = strstr(buffer + fromIndex, s2.buffer);
    5238:	6804      	ldr	r4, [r0, #0]
    523a:	6809      	ldr	r1, [r1, #0]
    523c:	18a0      	adds	r0, r4, r2
    523e:	f001 fb6c 	bl	691a <strstr>
C:\Teensy\Projects\HelloWorld/WString.cpp:552
	if (found == NULL) return -1;
    5242:	b108      	cbz	r0, 5248 <_ZNK6String7indexOfERKS_j+0x18>
C:\Teensy\Projects\HelloWorld/WString.cpp:553
	return found - buffer;
    5244:	1b00      	subs	r0, r0, r4
    5246:	bd10      	pop	{r4, pc}
C:\Teensy\Projects\HelloWorld/WString.cpp:550
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
    5248:	f04f 30ff 	mov.w	r0, #4294967295
C:\Teensy\Projects\HelloWorld/WString.cpp:554
	const char *found = strstr(buffer + fromIndex, s2.buffer);
	if (found == NULL) return -1;
	return found - buffer;
}
    524c:	bd10      	pop	{r4, pc}

0000524e <_ZNK6String7indexOfERKS_>:
_ZNK6String7indexOfERKS_():
C:\Teensy\Projects\HelloWorld/WString.cpp:545
	return temp - buffer;
}

int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
    524e:	2200      	movs	r2, #0
    5250:	f7ff bfee 	b.w	5230 <_ZNK6String7indexOfERKS_j>

00005254 <_ZNK6String11lastIndexOfEcj>:
_ZNK6String11lastIndexOfEcj():
C:\Teensy\Projects\HelloWorld/WString.cpp:562
{
	return lastIndexOf(theChar, len - 1);
}

int String::lastIndexOf(char ch, unsigned int fromIndex) const
{
    5254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:\Teensy\Projects\HelloWorld/WString.cpp:563
	if (fromIndex >= len || fromIndex < 0) return -1;
    5256:	6883      	ldr	r3, [r0, #8]
    5258:	429a      	cmp	r2, r3
C:\Teensy\Projects\HelloWorld/WString.cpp:562
{
	return lastIndexOf(theChar, len - 1);
}

int String::lastIndexOf(char ch, unsigned int fromIndex) const
{
    525a:	4604      	mov	r4, r0
C:\Teensy\Projects\HelloWorld/WString.cpp:563
	if (fromIndex >= len || fromIndex < 0) return -1;
    525c:	d302      	bcc.n	5264 <_ZNK6String11lastIndexOfEcj+0x10>
    525e:	f04f 30ff 	mov.w	r0, #4294967295
    5262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:\Teensy\Projects\HelloWorld/WString.cpp:564
	char tempchar = buffer[fromIndex + 1];
    5264:	6803      	ldr	r3, [r0, #0]
    5266:	1c55      	adds	r5, r2, #1
C:\Teensy\Projects\HelloWorld/WString.cpp:565
	buffer[fromIndex + 1] = '\0';
    5268:	2200      	movs	r2, #0
C:\Teensy\Projects\HelloWorld/WString.cpp:564
}

int String::lastIndexOf(char ch, unsigned int fromIndex) const
{
	if (fromIndex >= len || fromIndex < 0) return -1;
	char tempchar = buffer[fromIndex + 1];
    526a:	5d5f      	ldrb	r7, [r3, r5]
C:\Teensy\Projects\HelloWorld/WString.cpp:565
	buffer[fromIndex + 1] = '\0';
    526c:	555a      	strb	r2, [r3, r5]
C:\Teensy\Projects\HelloWorld/WString.cpp:566
	char* temp = strrchr( buffer, ch );
    526e:	6806      	ldr	r6, [r0, #0]
    5270:	4630      	mov	r0, r6
    5272:	f001 fb3f 	bl	68f4 <strrchr>
C:\Teensy\Projects\HelloWorld/WString.cpp:567
	buffer[fromIndex + 1] = tempchar;
    5276:	5577      	strb	r7, [r6, r5]
C:\Teensy\Projects\HelloWorld/WString.cpp:568
	if (temp == NULL) return -1;
    5278:	2800      	cmp	r0, #0
    527a:	d0f0      	beq.n	525e <_ZNK6String11lastIndexOfEcj+0xa>
C:\Teensy\Projects\HelloWorld/WString.cpp:569
	return temp - buffer;
    527c:	6823      	ldr	r3, [r4, #0]
    527e:	1ac0      	subs	r0, r0, r3
C:\Teensy\Projects\HelloWorld/WString.cpp:570
}
    5280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005282 <_ZNK6String11lastIndexOfEc>:
_ZNK6String11lastIndexOfEc():
C:\Teensy\Projects\HelloWorld/WString.cpp:558
	return found - buffer;
}

int String::lastIndexOf( char theChar ) const
{
	return lastIndexOf(theChar, len - 1);
    5282:	6882      	ldr	r2, [r0, #8]
    5284:	3a01      	subs	r2, #1
    5286:	f7ff bfe5 	b.w	5254 <_ZNK6String11lastIndexOfEcj>

0000528a <_ZNK6String11lastIndexOfERKS_j>:
_ZNK6String11lastIndexOfERKS_j():
C:\Teensy\Projects\HelloWorld/WString.cpp:578
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
    528a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    528c:	4615      	mov	r5, r2
C:\Teensy\Projects\HelloWorld/WString.cpp:579
  	if (s2.len == 0 || len == 0 || s2.len > len || fromIndex < 0) return -1;
    528e:	688a      	ldr	r2, [r1, #8]
C:\Teensy\Projects\HelloWorld/WString.cpp:578
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
    5290:	460f      	mov	r7, r1
C:\Teensy\Projects\HelloWorld/WString.cpp:579
  	if (s2.len == 0 || len == 0 || s2.len > len || fromIndex < 0) return -1;
    5292:	b1c2      	cbz	r2, 52c6 <_ZNK6String11lastIndexOfERKS_j+0x3c>
C:\Teensy\Projects\HelloWorld/WString.cpp:579 (discriminator 2)
    5294:	6883      	ldr	r3, [r0, #8]
    5296:	b1b3      	cbz	r3, 52c6 <_ZNK6String11lastIndexOfERKS_j+0x3c>
C:\Teensy\Projects\HelloWorld/WString.cpp:579 (discriminator 1)
    5298:	429a      	cmp	r2, r3
    529a:	d814      	bhi.n	52c6 <_ZNK6String11lastIndexOfERKS_j+0x3c>
C:\Teensy\Projects\HelloWorld/WString.cpp:582
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    529c:	6806      	ldr	r6, [r0, #0]
C:\Teensy\Projects\HelloWorld/WString.cpp:580
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len || fromIndex < 0) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
    529e:	429d      	cmp	r5, r3
    52a0:	bf28      	it	cs
    52a2:	f103 35ff 	addcs.w	r5, r3, #4294967295
C:\Teensy\Projects\HelloWorld/WString.cpp:582
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    52a6:	4630      	mov	r0, r6
C:\Teensy\Projects\HelloWorld/WString.cpp:581

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len || fromIndex < 0) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
    52a8:	f04f 34ff 	mov.w	r4, #4294967295
C:\Teensy\Projects\HelloWorld/WString.cpp:582 (discriminator 1)
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    52ac:	1973      	adds	r3, r6, r5
    52ae:	4298      	cmp	r0, r3
    52b0:	d80c      	bhi.n	52cc <_ZNK6String11lastIndexOfERKS_j+0x42>
C:\Teensy\Projects\HelloWorld/WString.cpp:583
		p = strstr(p, s2.buffer);
    52b2:	6839      	ldr	r1, [r7, #0]
    52b4:	f001 fb31 	bl	691a <strstr>
C:\Teensy\Projects\HelloWorld/WString.cpp:584
		if (!p) break;
    52b8:	b140      	cbz	r0, 52cc <_ZNK6String11lastIndexOfERKS_j+0x42>
C:\Teensy\Projects\HelloWorld/WString.cpp:585
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
    52ba:	1b83      	subs	r3, r0, r6
C:\Teensy\Projects\HelloWorld/WString.cpp:582
int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len || fromIndex < 0) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    52bc:	42ab      	cmp	r3, r5
    52be:	bf98      	it	ls
    52c0:	461c      	movls	r4, r3
    52c2:	3001      	adds	r0, #1
    52c4:	e7f2      	b.n	52ac <_ZNK6String11lastIndexOfERKS_j+0x22>
C:\Teensy\Projects\HelloWorld/WString.cpp:579
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len || fromIndex < 0) return -1;
    52c6:	f04f 30ff 	mov.w	r0, #4294967295
    52ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    52cc:	4620      	mov	r0, r4
C:\Teensy\Projects\HelloWorld/WString.cpp:588
		p = strstr(p, s2.buffer);
		if (!p) break;
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
	}
	return found;
}
    52ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000052d0 <_ZNK6String11lastIndexOfERKS_>:
_ZNK6String11lastIndexOfERKS_():
C:\Teensy\Projects\HelloWorld/WString.cpp:574
	return temp - buffer;
}

int String::lastIndexOf(const String &s2) const
{
	return lastIndexOf(s2, len - s2.len);
    52d0:	6882      	ldr	r2, [r0, #8]
    52d2:	688b      	ldr	r3, [r1, #8]
    52d4:	1ad2      	subs	r2, r2, r3
    52d6:	f7ff bfd8 	b.w	528a <_ZNK6String11lastIndexOfERKS_j>

000052da <_ZNK6String9substringEjj>:
_ZNK6String9substringEjj():
C:\Teensy\Projects\HelloWorld/WString.cpp:597
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
    52da:	429a      	cmp	r2, r3
C:\Teensy\Projects\HelloWorld/WString.cpp:596
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
    52dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    52de:	4604      	mov	r4, r0
    52e0:	460d      	mov	r5, r1
C:\Teensy\Projects\HelloWorld/WString.cpp:597
	if (left > right) {
    52e2:	d902      	bls.n	52ea <_ZNK6String9substringEjj+0x10>
    52e4:	4611      	mov	r1, r2
    52e6:	461a      	mov	r2, r3
    52e8:	460b      	mov	r3, r1
_ZN6String4initEv():
C:\Teensy\Projects\HelloWorld/WString.cpp:124
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    52ea:	2000      	movs	r0, #0
C:\Teensy\Projects\HelloWorld/WString.cpp:126
	capacity = 0;
	len = 0;
    52ec:	60a0      	str	r0, [r4, #8]
_ZNK6String9substringEjj():
C:\Teensy\Projects\HelloWorld/WString.cpp:603
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
	if (left > len) return out;
    52ee:	68ae      	ldr	r6, [r5, #8]
String():
C:\Teensy\Projects\HelloWorld/WString.cpp:124
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    52f0:	6020      	str	r0, [r4, #0]
_ZNK6String9substringEjj():
C:\Teensy\Projects\HelloWorld/WString.cpp:603
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
	if (left > len) return out;
    52f2:	42b2      	cmp	r2, r6
_ZN6String4initEv():
C:\Teensy\Projects\HelloWorld/WString.cpp:125
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
	capacity = 0;
    52f4:	6060      	str	r0, [r4, #4]
C:\Teensy\Projects\HelloWorld/WString.cpp:127
	len = 0;
	flags = 0;
    52f6:	7320      	strb	r0, [r4, #12]
_ZNK6String9substringEjj():
C:\Teensy\Projects\HelloWorld/WString.cpp:603
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
	if (left > len) return out;
    52f8:	d80c      	bhi.n	5314 <_ZNK6String9substringEjj+0x3a>
    52fa:	42b3      	cmp	r3, r6
    52fc:	bf38      	it	cc
    52fe:	461e      	movcc	r6, r3
C:\Teensy\Projects\HelloWorld/WString.cpp:605
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    5300:	682b      	ldr	r3, [r5, #0]
    5302:	5d9f      	ldrb	r7, [r3, r6]
C:\Teensy\Projects\HelloWorld/WString.cpp:606
	buffer[right] = '\0';	
    5304:	5598      	strb	r0, [r3, r6]
C:\Teensy\Projects\HelloWorld/WString.cpp:607
	out = buffer + left;  // pointer arithmetic
    5306:	6829      	ldr	r1, [r5, #0]
    5308:	4620      	mov	r0, r4
    530a:	4411      	add	r1, r2
    530c:	f7ff fcfe 	bl	4d0c <_ZN6StringaSEPKc>
C:\Teensy\Projects\HelloWorld/WString.cpp:608
	buffer[right] = temp;  //restore character
    5310:	682b      	ldr	r3, [r5, #0]
    5312:	559f      	strb	r7, [r3, r6]
C:\Teensy\Projects\HelloWorld/WString.cpp:610
	return out;
}
    5314:	4620      	mov	r0, r4
    5316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005318 <_ZNK6String9substringEj>:
_ZNK6String9substringEj():
C:\Teensy\Projects\HelloWorld/WString.cpp:591
	}
	return found;
}

String String::substring( unsigned int left ) const
{
    5318:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/WString.cpp:592
	return substring(left, len);
    531a:	688b      	ldr	r3, [r1, #8]
C:\Teensy\Projects\HelloWorld/WString.cpp:591
	}
	return found;
}

String String::substring( unsigned int left ) const
{
    531c:	4604      	mov	r4, r0
C:\Teensy\Projects\HelloWorld/WString.cpp:592
	return substring(left, len);
    531e:	f7ff ffdc 	bl	52da <_ZNK6String9substringEjj>
C:\Teensy\Projects\HelloWorld/WString.cpp:593
}
    5322:	4620      	mov	r0, r4
    5324:	bd10      	pop	{r4, pc}

00005326 <_ZN6String7replaceEcc>:
_ZN6String7replaceEcc():
C:\Teensy\Projects\HelloWorld/WString.cpp:618
/*  Modification                             */
/*********************************************/

String & String::replace(char find, char replace)
{
	if (!buffer) return *this;
    5326:	6803      	ldr	r3, [r0, #0]
C:\Teensy\Projects\HelloWorld/WString.cpp:617
/*********************************************/
/*  Modification                             */
/*********************************************/

String & String::replace(char find, char replace)
{
    5328:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/WString.cpp:618
	if (!buffer) return *this;
    532a:	b13b      	cbz	r3, 533c <_ZN6String7replaceEcc+0x16>
C:\Teensy\Projects\HelloWorld/WString.cpp:619 (discriminator 1)
	for (char *p = buffer; *p; p++) {
    532c:	f813 4b01 	ldrb.w	r4, [r3], #1
    5330:	b124      	cbz	r4, 533c <_ZN6String7replaceEcc+0x16>
C:\Teensy\Projects\HelloWorld/WString.cpp:620
		if (*p == find) *p = replace;
    5332:	428c      	cmp	r4, r1
    5334:	bf08      	it	eq
    5336:	f803 2c01 	strbeq.w	r2, [r3, #-1]
    533a:	e7f7      	b.n	532c <_ZN6String7replaceEcc+0x6>
C:\Teensy\Projects\HelloWorld/WString.cpp:623
	}
	return *this;
}
    533c:	bd10      	pop	{r4, pc}

0000533e <_ZN6String7replaceERKS_S1_>:
_ZN6String7replaceERKS_S1_():
C:\Teensy\Projects\HelloWorld/WString.cpp:626

String & String::replace(const String& find, const String& replace)
{
    533e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
C:\Teensy\Projects\HelloWorld/WString.cpp:627
	if (len == 0 || find.len == 0) return *this;
    5342:	f8d0 a008 	ldr.w	sl, [r0, #8]
C:\Teensy\Projects\HelloWorld/WString.cpp:626
	}
	return *this;
}

String & String::replace(const String& find, const String& replace)
{
    5346:	4604      	mov	r4, r0
    5348:	460f      	mov	r7, r1
    534a:	4616      	mov	r6, r2
C:\Teensy\Projects\HelloWorld/WString.cpp:627
	if (len == 0 || find.len == 0) return *this;
    534c:	f1ba 0f00 	cmp.w	sl, #0
    5350:	d075      	beq.n	543e <_ZN6String7replaceERKS_S1_+0x100>
C:\Teensy\Projects\HelloWorld/WString.cpp:627 (discriminator 2)
    5352:	f8d1 b008 	ldr.w	fp, [r1, #8]
    5356:	f1bb 0f00 	cmp.w	fp, #0
    535a:	d070      	beq.n	543e <_ZN6String7replaceERKS_S1_+0x100>
C:\Teensy\Projects\HelloWorld/WString.cpp:628
	int diff = replace.len - find.len;
    535c:	6893      	ldr	r3, [r2, #8]
C:\Teensy\Projects\HelloWorld/WString.cpp:629
	char *readFrom = buffer;
    535e:	6805      	ldr	r5, [r0, #0]
C:\Teensy\Projects\HelloWorld/WString.cpp:628
}

String & String::replace(const String& find, const String& replace)
{
	if (len == 0 || find.len == 0) return *this;
	int diff = replace.len - find.len;
    5360:	ebcb 0803 	rsb	r8, fp, r3
C:\Teensy\Projects\HelloWorld/WString.cpp:631
	char *readFrom = buffer;
	char *foundAt;
	if (diff == 0) {
    5364:	f1b8 0f00 	cmp.w	r8, #0
    5368:	d10d      	bne.n	5386 <_ZN6String7replaceERKS_S1_+0x48>
C:\Teensy\Projects\HelloWorld/WString.cpp:632 (discriminator 1)
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    536a:	4628      	mov	r0, r5
    536c:	6839      	ldr	r1, [r7, #0]
    536e:	f001 fad4 	bl	691a <strstr>
    5372:	4605      	mov	r5, r0
    5374:	2800      	cmp	r0, #0
    5376:	d062      	beq.n	543e <_ZN6String7replaceERKS_S1_+0x100>
C:\Teensy\Projects\HelloWorld/WString.cpp:633
			memcpy(foundAt, replace.buffer, replace.len);
    5378:	6831      	ldr	r1, [r6, #0]
    537a:	68b2      	ldr	r2, [r6, #8]
    537c:	f001 f98c 	bl	6698 <memcpy>
C:\Teensy\Projects\HelloWorld/WString.cpp:634
			readFrom = foundAt + replace.len;
    5380:	68b3      	ldr	r3, [r6, #8]
    5382:	441d      	add	r5, r3
    5384:	e7f1      	b.n	536a <_ZN6String7replaceERKS_S1_+0x2c>
C:\Teensy\Projects\HelloWorld/WString.cpp:636
		}
	} else if (diff < 0) {
    5386:	db02      	blt.n	538e <_ZN6String7replaceERKS_S1_+0x50>
C:\Teensy\Projects\HelloWorld/WString.cpp:650
			len += diff;
		}
		strcpy(writeTo, readFrom);
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    5388:	680b      	ldr	r3, [r1, #0]
    538a:	46d1      	mov	r9, sl
    538c:	e020      	b.n	53d0 <_ZN6String7replaceERKS_S1_+0x92>
C:\Teensy\Projects\HelloWorld/WString.cpp:636
	if (diff == 0) {
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
    538e:	46a9      	mov	r9, r5
C:\Teensy\Projects\HelloWorld/WString.cpp:638 (discriminator 1)
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    5390:	4628      	mov	r0, r5
    5392:	6839      	ldr	r1, [r7, #0]
    5394:	f001 fac1 	bl	691a <strstr>
    5398:	4682      	mov	sl, r0
    539a:	b1a0      	cbz	r0, 53c6 <_ZN6String7replaceERKS_S1_+0x88>
C:\Teensy\Projects\HelloWorld/WString.cpp:639
			unsigned int n = foundAt - readFrom;
    539c:	ebc5 0b0a 	rsb	fp, r5, sl
C:\Teensy\Projects\HelloWorld/WString.cpp:640
			memcpy(writeTo, readFrom, n);
    53a0:	4629      	mov	r1, r5
    53a2:	4648      	mov	r0, r9
    53a4:	465a      	mov	r2, fp
C:\Teensy\Projects\HelloWorld/WString.cpp:641
			writeTo += n;
    53a6:	44d9      	add	r9, fp
C:\Teensy\Projects\HelloWorld/WString.cpp:640
		}
	} else if (diff < 0) {
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			unsigned int n = foundAt - readFrom;
			memcpy(writeTo, readFrom, n);
    53a8:	f001 f976 	bl	6698 <memcpy>
C:\Teensy\Projects\HelloWorld/WString.cpp:642
			writeTo += n;
			memcpy(writeTo, replace.buffer, replace.len);
    53ac:	4648      	mov	r0, r9
    53ae:	6831      	ldr	r1, [r6, #0]
    53b0:	68b2      	ldr	r2, [r6, #8]
    53b2:	f001 f971 	bl	6698 <memcpy>
C:\Teensy\Projects\HelloWorld/WString.cpp:643
			writeTo += replace.len;
    53b6:	68b3      	ldr	r3, [r6, #8]
C:\Teensy\Projects\HelloWorld/WString.cpp:644
			readFrom = foundAt + find.len;
    53b8:	68bd      	ldr	r5, [r7, #8]
C:\Teensy\Projects\HelloWorld/WString.cpp:643
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			unsigned int n = foundAt - readFrom;
			memcpy(writeTo, readFrom, n);
			writeTo += n;
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
    53ba:	4499      	add	r9, r3
C:\Teensy\Projects\HelloWorld/WString.cpp:645
			readFrom = foundAt + find.len;
			len += diff;
    53bc:	68a3      	ldr	r3, [r4, #8]
    53be:	4443      	add	r3, r8
C:\Teensy\Projects\HelloWorld/WString.cpp:644
			unsigned int n = foundAt - readFrom;
			memcpy(writeTo, readFrom, n);
			writeTo += n;
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
    53c0:	4455      	add	r5, sl
C:\Teensy\Projects\HelloWorld/WString.cpp:645
			len += diff;
    53c2:	60a3      	str	r3, [r4, #8]
    53c4:	e7e4      	b.n	5390 <_ZN6String7replaceERKS_S1_+0x52>
C:\Teensy\Projects\HelloWorld/WString.cpp:647
		}
		strcpy(writeTo, readFrom);
    53c6:	4648      	mov	r0, r9
    53c8:	4629      	mov	r1, r5
    53ca:	f001 fa5a 	bl	6882 <strcpy>
    53ce:	e036      	b.n	543e <_ZN6String7replaceERKS_S1_+0x100>
C:\Teensy\Projects\HelloWorld/WString.cpp:650 (discriminator 1)
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    53d0:	4619      	mov	r1, r3
    53d2:	4628      	mov	r0, r5
    53d4:	9301      	str	r3, [sp, #4]
    53d6:	f001 faa0 	bl	691a <strstr>
    53da:	9b01      	ldr	r3, [sp, #4]
    53dc:	b118      	cbz	r0, 53e6 <_ZN6String7replaceERKS_S1_+0xa8>
C:\Teensy\Projects\HelloWorld/WString.cpp:651
			readFrom = foundAt + find.len;
    53de:	eb00 050b 	add.w	r5, r0, fp
C:\Teensy\Projects\HelloWorld/WString.cpp:652
			size += diff;
    53e2:	44c1      	add	r9, r8
    53e4:	e7f4      	b.n	53d0 <_ZN6String7replaceERKS_S1_+0x92>
C:\Teensy\Projects\HelloWorld/WString.cpp:654
		}
		if (size == len) return *this;
    53e6:	45d1      	cmp	r9, sl
    53e8:	d029      	beq.n	543e <_ZN6String7replaceERKS_S1_+0x100>
C:\Teensy\Projects\HelloWorld/WString.cpp:655
		if (size > capacity && !changeBuffer(size)) return *this;
    53ea:	6863      	ldr	r3, [r4, #4]
    53ec:	4599      	cmp	r9, r3
    53ee:	d904      	bls.n	53fa <_ZN6String7replaceERKS_S1_+0xbc>
C:\Teensy\Projects\HelloWorld/WString.cpp:655 (discriminator 1)
    53f0:	4620      	mov	r0, r4
    53f2:	4649      	mov	r1, r9
    53f4:	f7ff fbf3 	bl	4bde <_ZN6String12changeBufferEj>
    53f8:	b308      	cbz	r0, 543e <_ZN6String7replaceERKS_S1_+0x100>
C:\Teensy\Projects\HelloWorld/WString.cpp:656
		int index = len - 1;
    53fa:	68a2      	ldr	r2, [r4, #8]
    53fc:	3a01      	subs	r2, #1
C:\Teensy\Projects\HelloWorld/WString.cpp:657 (discriminator 1)
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
    53fe:	2a00      	cmp	r2, #0
    5400:	db1d      	blt.n	543e <_ZN6String7replaceERKS_S1_+0x100>
    5402:	4620      	mov	r0, r4
    5404:	4639      	mov	r1, r7
    5406:	f7ff ff40 	bl	528a <_ZNK6String11lastIndexOfERKS_j>
    540a:	1e05      	subs	r5, r0, #0
    540c:	db17      	blt.n	543e <_ZN6String7replaceERKS_S1_+0x100>
C:\Teensy\Projects\HelloWorld/WString.cpp:658
			readFrom = buffer + index + find.len;
    540e:	68ba      	ldr	r2, [r7, #8]
    5410:	6821      	ldr	r1, [r4, #0]
C:\Teensy\Projects\HelloWorld/WString.cpp:659
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
    5412:	68a3      	ldr	r3, [r4, #8]
C:\Teensy\Projects\HelloWorld/WString.cpp:658
		}
		if (size == len) return *this;
		if (size > capacity && !changeBuffer(size)) return *this;
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
			readFrom = buffer + index + find.len;
    5414:	442a      	add	r2, r5
C:\Teensy\Projects\HelloWorld/WString.cpp:659
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
    5416:	4411      	add	r1, r2
    5418:	eb01 0008 	add.w	r0, r1, r8
    541c:	1a9a      	subs	r2, r3, r2
    541e:	f001 f944 	bl	66aa <memmove>
C:\Teensy\Projects\HelloWorld/WString.cpp:660
			len += diff;
    5422:	68a3      	ldr	r3, [r4, #8]
C:\Teensy\Projects\HelloWorld/WString.cpp:661
			buffer[len] = 0;
    5424:	6822      	ldr	r2, [r4, #0]
C:\Teensy\Projects\HelloWorld/WString.cpp:660
		if (size > capacity && !changeBuffer(size)) return *this;
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
			readFrom = buffer + index + find.len;
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
			len += diff;
    5426:	4443      	add	r3, r8
C:\Teensy\Projects\HelloWorld/WString.cpp:661
			buffer[len] = 0;
    5428:	2100      	movs	r1, #0
C:\Teensy\Projects\HelloWorld/WString.cpp:660
		if (size > capacity && !changeBuffer(size)) return *this;
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
			readFrom = buffer + index + find.len;
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
			len += diff;
    542a:	60a3      	str	r3, [r4, #8]
C:\Teensy\Projects\HelloWorld/WString.cpp:661
			buffer[len] = 0;
    542c:	54d1      	strb	r1, [r2, r3]
C:\Teensy\Projects\HelloWorld/WString.cpp:662
			memcpy(buffer + index, replace.buffer, replace.len);
    542e:	6820      	ldr	r0, [r4, #0]
    5430:	68b2      	ldr	r2, [r6, #8]
    5432:	6831      	ldr	r1, [r6, #0]
    5434:	4428      	add	r0, r5
    5436:	f001 f92f 	bl	6698 <memcpy>
C:\Teensy\Projects\HelloWorld/WString.cpp:663
			index--;
    543a:	1e6a      	subs	r2, r5, #1
    543c:	e7df      	b.n	53fe <_ZN6String7replaceERKS_S1_+0xc0>
C:\Teensy\Projects\HelloWorld/WString.cpp:667
		}
	}
	return *this;
}
    543e:	4620      	mov	r0, r4
    5440:	b003      	add	sp, #12
    5442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00005446 <_ZN6String6removeEj>:
_ZN6String6removeEj():
C:\Teensy\Projects\HelloWorld/WString.cpp:671

String & String::remove(unsigned int index)
{
	if (index < len) {
    5446:	6883      	ldr	r3, [r0, #8]
    5448:	4299      	cmp	r1, r3
    544a:	d203      	bcs.n	5454 <_ZN6String6removeEj+0xe>
C:\Teensy\Projects\HelloWorld/WString.cpp:673
		len = index;
		buffer[len] = 0;
    544c:	6803      	ldr	r3, [r0, #0]
C:\Teensy\Projects\HelloWorld/WString.cpp:672
}

String & String::remove(unsigned int index)
{
	if (index < len) {
		len = index;
    544e:	6081      	str	r1, [r0, #8]
C:\Teensy\Projects\HelloWorld/WString.cpp:673
		buffer[len] = 0;
    5450:	2200      	movs	r2, #0
    5452:	545a      	strb	r2, [r3, r1]
C:\Teensy\Projects\HelloWorld/WString.cpp:676
	}
	return *this;
}
    5454:	4770      	bx	lr

00005456 <_ZN6String6removeEjj>:
_ZN6String6removeEjj():
C:\Teensy\Projects\HelloWorld/WString.cpp:679

String & String::remove(unsigned int index, unsigned int count)
{
    5456:	b538      	push	{r3, r4, r5, lr}
    5458:	460b      	mov	r3, r1
C:\Teensy\Projects\HelloWorld/WString.cpp:680
	if (index < len && count > 0) {
    545a:	6881      	ldr	r1, [r0, #8]
    545c:	428b      	cmp	r3, r1
C:\Teensy\Projects\HelloWorld/WString.cpp:679
	}
	return *this;
}

String & String::remove(unsigned int index, unsigned int count)
{
    545e:	4604      	mov	r4, r0
C:\Teensy\Projects\HelloWorld/WString.cpp:680
	if (index < len && count > 0) {
    5460:	d212      	bcs.n	5488 <_ZN6String6removeEjj+0x32>
C:\Teensy\Projects\HelloWorld/WString.cpp:680 (discriminator 1)
    5462:	b18a      	cbz	r2, 5488 <_ZN6String6removeEjj+0x32>
C:\Teensy\Projects\HelloWorld/WString.cpp:681
  		if (index + count > len) count = len - index;
    5464:	1898      	adds	r0, r3, r2
    5466:	4288      	cmp	r0, r1
    5468:	bf88      	it	hi
    546a:	ebc3 0201 	rsbhi	r2, r3, r1
C:\Teensy\Projects\HelloWorld/WString.cpp:682
		len = len - count;
    546e:	1a8d      	subs	r5, r1, r2
C:\Teensy\Projects\HelloWorld/WString.cpp:683
		memmove(buffer + index, buffer + index + count, len - index);
    5470:	6821      	ldr	r1, [r4, #0]
C:\Teensy\Projects\HelloWorld/WString.cpp:682

String & String::remove(unsigned int index, unsigned int count)
{
	if (index < len && count > 0) {
  		if (index + count > len) count = len - index;
		len = len - count;
    5472:	60a5      	str	r5, [r4, #8]
C:\Teensy\Projects\HelloWorld/WString.cpp:683
		memmove(buffer + index, buffer + index + count, len - index);
    5474:	441a      	add	r2, r3
    5476:	18c8      	adds	r0, r1, r3
    5478:	4411      	add	r1, r2
    547a:	1aea      	subs	r2, r5, r3
    547c:	f001 f915 	bl	66aa <memmove>
C:\Teensy\Projects\HelloWorld/WString.cpp:684
		buffer[len] = 0;
    5480:	6822      	ldr	r2, [r4, #0]
    5482:	68a3      	ldr	r3, [r4, #8]
    5484:	2100      	movs	r1, #0
    5486:	54d1      	strb	r1, [r2, r3]
C:\Teensy\Projects\HelloWorld/WString.cpp:687
	}
	return *this;
}
    5488:	4620      	mov	r0, r4
    548a:	bd38      	pop	{r3, r4, r5, pc}

0000548c <_ZN6String11toLowerCaseEv>:
_ZN6String11toLowerCaseEv():
C:\Teensy\Projects\HelloWorld/WString.cpp:690

String & String::toLowerCase(void)
{
    548c:	b538      	push	{r3, r4, r5, lr}
C:\Teensy\Projects\HelloWorld/WString.cpp:691
	if (!buffer) return *this;
    548e:	6804      	ldr	r4, [r0, #0]
C:\Teensy\Projects\HelloWorld/WString.cpp:690
	}
	return *this;
}

String & String::toLowerCase(void)
{
    5490:	4605      	mov	r5, r0
C:\Teensy\Projects\HelloWorld/WString.cpp:691
	if (!buffer) return *this;
    5492:	b13c      	cbz	r4, 54a4 <_ZN6String11toLowerCaseEv+0x18>
C:\Teensy\Projects\HelloWorld/WString.cpp:692 (discriminator 1)
	for (char *p = buffer; *p; p++) {
    5494:	f814 0b01 	ldrb.w	r0, [r4], #1
    5498:	b120      	cbz	r0, 54a4 <_ZN6String11toLowerCaseEv+0x18>
C:\Teensy\Projects\HelloWorld/WString.cpp:693 (discriminator 2)
		*p = tolower(*p);
    549a:	f002 f951 	bl	7740 <tolower>
    549e:	f804 0c01 	strb.w	r0, [r4, #-1]
    54a2:	e7f7      	b.n	5494 <_ZN6String11toLowerCaseEv+0x8>
C:\Teensy\Projects\HelloWorld/WString.cpp:696
	}
	return *this;
}
    54a4:	4628      	mov	r0, r5
    54a6:	bd38      	pop	{r3, r4, r5, pc}

000054a8 <_ZN6String11toUpperCaseEv>:
_ZN6String11toUpperCaseEv():
C:\Teensy\Projects\HelloWorld/WString.cpp:699

String & String::toUpperCase(void)
{
    54a8:	b538      	push	{r3, r4, r5, lr}
C:\Teensy\Projects\HelloWorld/WString.cpp:700
	if (!buffer) return *this;
    54aa:	6804      	ldr	r4, [r0, #0]
C:\Teensy\Projects\HelloWorld/WString.cpp:699
	}
	return *this;
}

String & String::toUpperCase(void)
{
    54ac:	4605      	mov	r5, r0
C:\Teensy\Projects\HelloWorld/WString.cpp:700
	if (!buffer) return *this;
    54ae:	b13c      	cbz	r4, 54c0 <_ZN6String11toUpperCaseEv+0x18>
C:\Teensy\Projects\HelloWorld/WString.cpp:701 (discriminator 1)
	for (char *p = buffer; *p; p++) {
    54b0:	f814 0b01 	ldrb.w	r0, [r4], #1
    54b4:	b120      	cbz	r0, 54c0 <_ZN6String11toUpperCaseEv+0x18>
C:\Teensy\Projects\HelloWorld/WString.cpp:702 (discriminator 2)
		*p = toupper(*p);
    54b6:	f002 f94f 	bl	7758 <toupper>
    54ba:	f804 0c01 	strb.w	r0, [r4, #-1]
    54be:	e7f7      	b.n	54b0 <_ZN6String11toUpperCaseEv+0x8>
C:\Teensy\Projects\HelloWorld/WString.cpp:705
	}
	return *this;
}
    54c0:	4628      	mov	r0, r5
    54c2:	bd38      	pop	{r3, r4, r5, pc}

000054c4 <_ZN6String4trimEv>:
_ZN6String4trimEv():
C:\Teensy\Projects\HelloWorld/WString.cpp:708

String & String::trim(void)
{
    54c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
C:\Teensy\Projects\HelloWorld/WString.cpp:709
	if (!buffer || len == 0) return *this;
    54c8:	6806      	ldr	r6, [r0, #0]
C:\Teensy\Projects\HelloWorld/WString.cpp:708
	}
	return *this;
}

String & String::trim(void)
{
    54ca:	4604      	mov	r4, r0
C:\Teensy\Projects\HelloWorld/WString.cpp:709
	if (!buffer || len == 0) return *this;
    54cc:	b316      	cbz	r6, 5514 <_ZN6String4trimEv+0x50>
C:\Teensy\Projects\HelloWorld/WString.cpp:709 (discriminator 2)
    54ce:	6887      	ldr	r7, [r0, #8]
    54d0:	b307      	cbz	r7, 5514 <_ZN6String4trimEv+0x50>
    54d2:	46b0      	mov	r8, r6
    54d4:	4645      	mov	r5, r8
    54d6:	f108 0801 	add.w	r8, r8, #1
C:\Teensy\Projects\HelloWorld/WString.cpp:711 (discriminator 1)
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    54da:	7828      	ldrb	r0, [r5, #0]
    54dc:	f001 f8c2 	bl	6664 <isspace>
    54e0:	2800      	cmp	r0, #0
    54e2:	d1f7      	bne.n	54d4 <_ZN6String4trimEv+0x10>
C:\Teensy\Projects\HelloWorld/WString.cpp:712
	char *end = buffer + len - 1;
    54e4:	3f01      	subs	r7, #1
    54e6:	4437      	add	r7, r6
C:\Teensy\Projects\HelloWorld/WString.cpp:713 (discriminator 1)
	while (isspace(*end) && end >= begin) end--;
    54e8:	7838      	ldrb	r0, [r7, #0]
    54ea:	f001 f8bb 	bl	6664 <isspace>
    54ee:	b948      	cbnz	r0, 5504 <_ZN6String4trimEv+0x40>
C:\Teensy\Projects\HelloWorld/WString.cpp:714
	len = end + 1 - begin;
    54f0:	3701      	adds	r7, #1
    54f2:	1b7a      	subs	r2, r7, r5
C:\Teensy\Projects\HelloWorld/WString.cpp:715
	if (begin > buffer) memcpy(buffer, begin, len);
    54f4:	42b5      	cmp	r5, r6
C:\Teensy\Projects\HelloWorld/WString.cpp:714
	if (!buffer || len == 0) return *this;
	char *begin = buffer;
	while (isspace(*begin)) begin++;
	char *end = buffer + len - 1;
	while (isspace(*end) && end >= begin) end--;
	len = end + 1 - begin;
    54f6:	60a2      	str	r2, [r4, #8]
C:\Teensy\Projects\HelloWorld/WString.cpp:715
	if (begin > buffer) memcpy(buffer, begin, len);
    54f8:	d908      	bls.n	550c <_ZN6String4trimEv+0x48>
C:\Teensy\Projects\HelloWorld/WString.cpp:715 (discriminator 1)
    54fa:	4630      	mov	r0, r6
    54fc:	4629      	mov	r1, r5
    54fe:	f001 f8cb 	bl	6698 <memcpy>
    5502:	e003      	b.n	550c <_ZN6String4trimEv+0x48>
C:\Teensy\Projects\HelloWorld/WString.cpp:713 (discriminator 2)
{
	if (!buffer || len == 0) return *this;
	char *begin = buffer;
	while (isspace(*begin)) begin++;
	char *end = buffer + len - 1;
	while (isspace(*end) && end >= begin) end--;
    5504:	42af      	cmp	r7, r5
    5506:	d3f3      	bcc.n	54f0 <_ZN6String4trimEv+0x2c>
C:\Teensy\Projects\HelloWorld/WString.cpp:713 (discriminator 1)
    5508:	3f01      	subs	r7, #1
    550a:	e7ed      	b.n	54e8 <_ZN6String4trimEv+0x24>
C:\Teensy\Projects\HelloWorld/WString.cpp:716
	len = end + 1 - begin;
	if (begin > buffer) memcpy(buffer, begin, len);
	buffer[len] = 0;
    550c:	6822      	ldr	r2, [r4, #0]
    550e:	68a3      	ldr	r3, [r4, #8]
    5510:	2100      	movs	r1, #0
    5512:	54d1      	strb	r1, [r2, r3]
C:\Teensy\Projects\HelloWorld/WString.cpp:718
	return *this;
}
    5514:	4620      	mov	r0, r4
    5516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000551a <_ZNK6String5toIntEv>:
_ZNK6String5toIntEv():
C:\Teensy\Projects\HelloWorld/WString.cpp:726
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    551a:	6800      	ldr	r0, [r0, #0]
    551c:	b108      	cbz	r0, 5522 <_ZNK6String5toIntEv+0x8>
C:\Teensy\Projects\HelloWorld/WString.cpp:726 (discriminator 1)
    551e:	f001 b861 	b.w	65e4 <atol>
C:\Teensy\Projects\HelloWorld/WString.cpp:728
	return 0;
}
    5522:	4770      	bx	lr

00005524 <_ZNK6String7toFloatEv>:
_ZNK6String7toFloatEv():
C:\Teensy\Projects\HelloWorld/WString.cpp:732

float String::toFloat(void) const
{
	if (buffer) return strtof(buffer, (char **)NULL);
    5524:	6800      	ldr	r0, [r0, #0]
    5526:	b110      	cbz	r0, 552e <_ZNK6String7toFloatEv+0xa>
C:\Teensy\Projects\HelloWorld/WString.cpp:732 (discriminator 1)
    5528:	2100      	movs	r1, #0
    552a:	f002 b861 	b.w	75f0 <strtof>
C:\Teensy\Projects\HelloWorld/WString.cpp:734
	return 0.0;
}
    552e:	2000      	movs	r0, #0
    5530:	4770      	bx	lr
    5532:	bf00      	nop

00005534 <_ZN6String4copyEPK19__FlashStringHelper>:
_ZN6String4copyEPK19__FlashStringHelper():
C:\Teensy\Projects\HelloWorld/WString.h:76
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}

	// copy and move
	String & copy(const char *cstr, unsigned int length);
	String & copy(const __FlashStringHelper *s) { return copy((const char *)s, strlen((const char *)s)); }
    5534:	b538      	push	{r3, r4, r5, lr}
    5536:	4605      	mov	r5, r0
    5538:	4608      	mov	r0, r1
    553a:	460c      	mov	r4, r1
    553c:	f001 f9a9 	bl	6892 <strlen>
    5540:	4621      	mov	r1, r4
    5542:	4602      	mov	r2, r0
    5544:	4628      	mov	r0, r5
    5546:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    554a:	f7ff bb62 	b.w	4c12 <_ZN6String4copyEPKcj>
    554e:	ffff b510 	vsli.32	d27, d0, #31

00005550 <yield>:
yield():
C:\Teensy\Projects\HelloWorld/yield.cpp:38
#include "usb_serial.h"
#include "usb_seremu.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    5550:	b510      	push	{r4, lr}
C:\Teensy\Projects\HelloWorld/yield.cpp:41
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    5552:	4c15      	ldr	r4, [pc, #84]	; (55a8 <yield+0x58>)
    5554:	7823      	ldrb	r3, [r4, #0]
    5556:	bb33      	cbnz	r3, 55a6 <yield+0x56>
C:\Teensy\Projects\HelloWorld/yield.cpp:42
	running = 1;
    5558:	2301      	movs	r3, #1
    555a:	7023      	strb	r3, [r4, #0]
_ZN16usb_serial_class9availableEv():
C:\Teensy\Projects\HelloWorld/usb_serial.h:76
{
public:
        void begin(long) { /* TODO: call a function that tries to wait for enumeration */ };
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    555c:	f7fe fd00 	bl	3f60 <usb_serial_available>
yield():
C:\Teensy\Projects\HelloWorld/yield.cpp:43
	if (Serial.available()) serialEvent();
    5560:	b108      	cbz	r0, 5566 <yield+0x16>
C:\Teensy\Projects\HelloWorld/yield.cpp:43 (discriminator 1)
    5562:	f7ff faf5 	bl	4b50 <_Z11serialEventv>
_ZN14HardwareSerial9availableEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:253
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    5566:	f7fc fa09 	bl	197c <serial_available>
yield():
C:\Teensy\Projects\HelloWorld/yield.cpp:44
	if (Serial1.available()) serialEvent1();
    556a:	b108      	cbz	r0, 5570 <yield+0x20>
C:\Teensy\Projects\HelloWorld/yield.cpp:44 (discriminator 1)
    556c:	f7fe fe33 	bl	41d6 <_Z12serialEvent1v>
_ZN15HardwareSerial29availableEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:288
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    5570:	f7fc fd40 	bl	1ff4 <serial2_available>
yield():
C:\Teensy\Projects\HelloWorld/yield.cpp:45
	if (Serial2.available()) serialEvent2();
    5574:	b108      	cbz	r0, 557a <yield+0x2a>
C:\Teensy\Projects\HelloWorld/yield.cpp:45 (discriminator 1)
    5576:	f7fe feb7 	bl	42e8 <_Z12serialEvent2v>
_ZN15HardwareSerial39availableEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:323
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    557a:	f7fc ff83 	bl	2484 <serial3_available>
yield():
C:\Teensy\Projects\HelloWorld/yield.cpp:46
	if (Serial3.available()) serialEvent3();
    557e:	b108      	cbz	r0, 5584 <yield+0x34>
C:\Teensy\Projects\HelloWorld/yield.cpp:46 (discriminator 1)
    5580:	f7fe ff3c 	bl	43fc <_Z12serialEvent3v>
_ZN15HardwareSerial49availableEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:358
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    5584:	f7fd f9f4 	bl	2970 <serial4_available>
yield():
C:\Teensy\Projects\HelloWorld/yield.cpp:47
	if (Serial4.available()) serialEvent4();
    5588:	b108      	cbz	r0, 558e <yield+0x3e>
C:\Teensy\Projects\HelloWorld/yield.cpp:47 (discriminator 1)
    558a:	f7fe ffc1 	bl	4510 <_Z12serialEvent4v>
_ZN15HardwareSerial59availableEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:393
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    558e:	f7fd fc0b 	bl	2da8 <serial5_available>
yield():
C:\Teensy\Projects\HelloWorld/yield.cpp:48
	if (Serial5.available()) serialEvent5();
    5592:	b108      	cbz	r0, 5598 <yield+0x48>
C:\Teensy\Projects\HelloWorld/yield.cpp:48 (discriminator 1)
    5594:	f7ff f846 	bl	4624 <_Z12serialEvent5v>
_ZN15HardwareSerial69availableEv():
C:\Teensy\Projects\HelloWorld/HardwareSerial.h:435
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    5598:	f7fd fe8c 	bl	32b4 <serial6_available>
yield():
C:\Teensy\Projects\HelloWorld/yield.cpp:49
	if (Serial6.available()) serialEvent6();
    559c:	b108      	cbz	r0, 55a2 <yield+0x52>
C:\Teensy\Projects\HelloWorld/yield.cpp:49 (discriminator 1)
    559e:	f7ff f8cb 	bl	4738 <_Z12serialEvent6v>
C:\Teensy\Projects\HelloWorld/yield.cpp:50
	running = 0;
    55a2:	2300      	movs	r3, #0
    55a4:	7023      	strb	r3, [r4, #0]
    55a6:	bd10      	pop	{r4, pc}
    55a8:	1fff0fd1 	.word	0x1fff0fd1

000055ac <__fpclassifyd>:
__fpclassifyd():
    55ac:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    55b0:	b410      	push	{r4}
    55b2:	d008      	beq.n	55c6 <__fpclassifyd+0x1a>
    55b4:	4a0f      	ldr	r2, [pc, #60]	; (55f4 <__fpclassifyd+0x48>)
    55b6:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
    55ba:	4294      	cmp	r4, r2
    55bc:	d80a      	bhi.n	55d4 <__fpclassifyd+0x28>
    55be:	2004      	movs	r0, #4
    55c0:	f85d 4b04 	ldr.w	r4, [sp], #4
    55c4:	4770      	bx	lr
    55c6:	2800      	cmp	r0, #0
    55c8:	bf0c      	ite	eq
    55ca:	2002      	moveq	r0, #2
    55cc:	2003      	movne	r0, #3
    55ce:	f85d 4b04 	ldr.w	r4, [sp], #4
    55d2:	4770      	bx	lr
    55d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    55d8:	d201      	bcs.n	55de <__fpclassifyd+0x32>
    55da:	2003      	movs	r0, #3
    55dc:	e7f7      	b.n	55ce <__fpclassifyd+0x22>
    55de:	4a06      	ldr	r2, [pc, #24]	; (55f8 <__fpclassifyd+0x4c>)
    55e0:	4293      	cmp	r3, r2
    55e2:	d001      	beq.n	55e8 <__fpclassifyd+0x3c>
    55e4:	2000      	movs	r0, #0
    55e6:	e7f2      	b.n	55ce <__fpclassifyd+0x22>
    55e8:	f1d0 0001 	rsbs	r0, r0, #1
    55ec:	bf38      	it	cc
    55ee:	2000      	movcc	r0, #0
    55f0:	e7ed      	b.n	55ce <__fpclassifyd+0x22>
    55f2:	bf00      	nop
    55f4:	7fdfffff 	.word	0x7fdfffff
    55f8:	7ff00000 	.word	0x7ff00000

000055fc <__aeabi_drsub>:
$t():
    55fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    5600:	e002      	b.n	5608 <__adddf3>
    5602:	bf00      	nop

00005604 <__aeabi_dsub>:
__aeabi_dsub():
    5604:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00005608 <__adddf3>:
    5608:	b530      	push	{r4, r5, lr}
    560a:	ea4f 0441 	mov.w	r4, r1, lsl #1
    560e:	ea4f 0543 	mov.w	r5, r3, lsl #1
    5612:	ea94 0f05 	teq	r4, r5
    5616:	bf08      	it	eq
    5618:	ea90 0f02 	teqeq	r0, r2
    561c:	bf1f      	itttt	ne
    561e:	ea54 0c00 	orrsne.w	ip, r4, r0
    5622:	ea55 0c02 	orrsne.w	ip, r5, r2
    5626:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    562a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    562e:	f000 80e2 	beq.w	57f6 <__adddf3+0x1ee>
    5632:	ea4f 5454 	mov.w	r4, r4, lsr #21
    5636:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    563a:	bfb8      	it	lt
    563c:	426d      	neglt	r5, r5
    563e:	dd0c      	ble.n	565a <__adddf3+0x52>
    5640:	442c      	add	r4, r5
    5642:	ea80 0202 	eor.w	r2, r0, r2
    5646:	ea81 0303 	eor.w	r3, r1, r3
    564a:	ea82 0000 	eor.w	r0, r2, r0
    564e:	ea83 0101 	eor.w	r1, r3, r1
    5652:	ea80 0202 	eor.w	r2, r0, r2
    5656:	ea81 0303 	eor.w	r3, r1, r3
    565a:	2d36      	cmp	r5, #54	; 0x36
    565c:	bf88      	it	hi
    565e:	bd30      	pophi	{r4, r5, pc}
    5660:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    5664:	ea4f 3101 	mov.w	r1, r1, lsl #12
    5668:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    566c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    5670:	d002      	beq.n	5678 <__adddf3+0x70>
    5672:	4240      	negs	r0, r0
    5674:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    5678:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    567c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    5680:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    5684:	d002      	beq.n	568c <__adddf3+0x84>
    5686:	4252      	negs	r2, r2
    5688:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    568c:	ea94 0f05 	teq	r4, r5
    5690:	f000 80a7 	beq.w	57e2 <__adddf3+0x1da>
    5694:	f1a4 0401 	sub.w	r4, r4, #1
    5698:	f1d5 0e20 	rsbs	lr, r5, #32
    569c:	db0d      	blt.n	56ba <__adddf3+0xb2>
    569e:	fa02 fc0e 	lsl.w	ip, r2, lr
    56a2:	fa22 f205 	lsr.w	r2, r2, r5
    56a6:	1880      	adds	r0, r0, r2
    56a8:	f141 0100 	adc.w	r1, r1, #0
    56ac:	fa03 f20e 	lsl.w	r2, r3, lr
    56b0:	1880      	adds	r0, r0, r2
    56b2:	fa43 f305 	asr.w	r3, r3, r5
    56b6:	4159      	adcs	r1, r3
    56b8:	e00e      	b.n	56d8 <__adddf3+0xd0>
    56ba:	f1a5 0520 	sub.w	r5, r5, #32
    56be:	f10e 0e20 	add.w	lr, lr, #32
    56c2:	2a01      	cmp	r2, #1
    56c4:	fa03 fc0e 	lsl.w	ip, r3, lr
    56c8:	bf28      	it	cs
    56ca:	f04c 0c02 	orrcs.w	ip, ip, #2
    56ce:	fa43 f305 	asr.w	r3, r3, r5
    56d2:	18c0      	adds	r0, r0, r3
    56d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    56d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    56dc:	d507      	bpl.n	56ee <__adddf3+0xe6>
    56de:	f04f 0e00 	mov.w	lr, #0
    56e2:	f1dc 0c00 	rsbs	ip, ip, #0
    56e6:	eb7e 0000 	sbcs.w	r0, lr, r0
    56ea:	eb6e 0101 	sbc.w	r1, lr, r1
    56ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    56f2:	d31b      	bcc.n	572c <__adddf3+0x124>
    56f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    56f8:	d30c      	bcc.n	5714 <__adddf3+0x10c>
    56fa:	0849      	lsrs	r1, r1, #1
    56fc:	ea5f 0030 	movs.w	r0, r0, rrx
    5700:	ea4f 0c3c 	mov.w	ip, ip, rrx
    5704:	f104 0401 	add.w	r4, r4, #1
    5708:	ea4f 5244 	mov.w	r2, r4, lsl #21
    570c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    5710:	f080 809a 	bcs.w	5848 <__adddf3+0x240>
    5714:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    5718:	bf08      	it	eq
    571a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    571e:	f150 0000 	adcs.w	r0, r0, #0
    5722:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    5726:	ea41 0105 	orr.w	r1, r1, r5
    572a:	bd30      	pop	{r4, r5, pc}
    572c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    5730:	4140      	adcs	r0, r0
    5732:	eb41 0101 	adc.w	r1, r1, r1
    5736:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    573a:	f1a4 0401 	sub.w	r4, r4, #1
    573e:	d1e9      	bne.n	5714 <__adddf3+0x10c>
    5740:	f091 0f00 	teq	r1, #0
    5744:	bf04      	itt	eq
    5746:	4601      	moveq	r1, r0
    5748:	2000      	moveq	r0, #0
    574a:	fab1 f381 	clz	r3, r1
    574e:	bf08      	it	eq
    5750:	3320      	addeq	r3, #32
    5752:	f1a3 030b 	sub.w	r3, r3, #11
    5756:	f1b3 0220 	subs.w	r2, r3, #32
    575a:	da0c      	bge.n	5776 <__adddf3+0x16e>
    575c:	320c      	adds	r2, #12
    575e:	dd08      	ble.n	5772 <__adddf3+0x16a>
    5760:	f102 0c14 	add.w	ip, r2, #20
    5764:	f1c2 020c 	rsb	r2, r2, #12
    5768:	fa01 f00c 	lsl.w	r0, r1, ip
    576c:	fa21 f102 	lsr.w	r1, r1, r2
    5770:	e00c      	b.n	578c <__adddf3+0x184>
    5772:	f102 0214 	add.w	r2, r2, #20
    5776:	bfd8      	it	le
    5778:	f1c2 0c20 	rsble	ip, r2, #32
    577c:	fa01 f102 	lsl.w	r1, r1, r2
    5780:	fa20 fc0c 	lsr.w	ip, r0, ip
    5784:	bfdc      	itt	le
    5786:	ea41 010c 	orrle.w	r1, r1, ip
    578a:	4090      	lslle	r0, r2
    578c:	1ae4      	subs	r4, r4, r3
    578e:	bfa2      	ittt	ge
    5790:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    5794:	4329      	orrge	r1, r5
    5796:	bd30      	popge	{r4, r5, pc}
    5798:	ea6f 0404 	mvn.w	r4, r4
    579c:	3c1f      	subs	r4, #31
    579e:	da1c      	bge.n	57da <__adddf3+0x1d2>
    57a0:	340c      	adds	r4, #12
    57a2:	dc0e      	bgt.n	57c2 <__adddf3+0x1ba>
    57a4:	f104 0414 	add.w	r4, r4, #20
    57a8:	f1c4 0220 	rsb	r2, r4, #32
    57ac:	fa20 f004 	lsr.w	r0, r0, r4
    57b0:	fa01 f302 	lsl.w	r3, r1, r2
    57b4:	ea40 0003 	orr.w	r0, r0, r3
    57b8:	fa21 f304 	lsr.w	r3, r1, r4
    57bc:	ea45 0103 	orr.w	r1, r5, r3
    57c0:	bd30      	pop	{r4, r5, pc}
    57c2:	f1c4 040c 	rsb	r4, r4, #12
    57c6:	f1c4 0220 	rsb	r2, r4, #32
    57ca:	fa20 f002 	lsr.w	r0, r0, r2
    57ce:	fa01 f304 	lsl.w	r3, r1, r4
    57d2:	ea40 0003 	orr.w	r0, r0, r3
    57d6:	4629      	mov	r1, r5
    57d8:	bd30      	pop	{r4, r5, pc}
    57da:	fa21 f004 	lsr.w	r0, r1, r4
    57de:	4629      	mov	r1, r5
    57e0:	bd30      	pop	{r4, r5, pc}
    57e2:	f094 0f00 	teq	r4, #0
    57e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    57ea:	bf06      	itte	eq
    57ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    57f0:	3401      	addeq	r4, #1
    57f2:	3d01      	subne	r5, #1
    57f4:	e74e      	b.n	5694 <__adddf3+0x8c>
    57f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    57fa:	bf18      	it	ne
    57fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    5800:	d029      	beq.n	5856 <__adddf3+0x24e>
    5802:	ea94 0f05 	teq	r4, r5
    5806:	bf08      	it	eq
    5808:	ea90 0f02 	teqeq	r0, r2
    580c:	d005      	beq.n	581a <__adddf3+0x212>
    580e:	ea54 0c00 	orrs.w	ip, r4, r0
    5812:	bf04      	itt	eq
    5814:	4619      	moveq	r1, r3
    5816:	4610      	moveq	r0, r2
    5818:	bd30      	pop	{r4, r5, pc}
    581a:	ea91 0f03 	teq	r1, r3
    581e:	bf1e      	ittt	ne
    5820:	2100      	movne	r1, #0
    5822:	2000      	movne	r0, #0
    5824:	bd30      	popne	{r4, r5, pc}
    5826:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    582a:	d105      	bne.n	5838 <__adddf3+0x230>
    582c:	0040      	lsls	r0, r0, #1
    582e:	4149      	adcs	r1, r1
    5830:	bf28      	it	cs
    5832:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    5836:	bd30      	pop	{r4, r5, pc}
    5838:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    583c:	bf3c      	itt	cc
    583e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    5842:	bd30      	popcc	{r4, r5, pc}
    5844:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    5848:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    584c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    5850:	f04f 0000 	mov.w	r0, #0
    5854:	bd30      	pop	{r4, r5, pc}
    5856:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    585a:	bf1a      	itte	ne
    585c:	4619      	movne	r1, r3
    585e:	4610      	movne	r0, r2
    5860:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    5864:	bf1c      	itt	ne
    5866:	460b      	movne	r3, r1
    5868:	4602      	movne	r2, r0
    586a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    586e:	bf06      	itte	eq
    5870:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    5874:	ea91 0f03 	teqeq	r1, r3
    5878:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    587c:	bd30      	pop	{r4, r5, pc}
__adddf3():
    587e:	bf00      	nop

00005880 <__aeabi_ui2d>:
__aeabi_ui2d():
    5880:	f090 0f00 	teq	r0, #0
    5884:	bf04      	itt	eq
    5886:	2100      	moveq	r1, #0
    5888:	4770      	bxeq	lr
    588a:	b530      	push	{r4, r5, lr}
    588c:	f44f 6480 	mov.w	r4, #1024	; 0x400
    5890:	f104 0432 	add.w	r4, r4, #50	; 0x32
    5894:	f04f 0500 	mov.w	r5, #0
    5898:	f04f 0100 	mov.w	r1, #0
    589c:	e750      	b.n	5740 <__adddf3+0x138>
    589e:	bf00      	nop

000058a0 <__aeabi_i2d>:
__floatsidf():
    58a0:	f090 0f00 	teq	r0, #0
    58a4:	bf04      	itt	eq
    58a6:	2100      	moveq	r1, #0
    58a8:	4770      	bxeq	lr
    58aa:	b530      	push	{r4, r5, lr}
    58ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
    58b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
    58b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    58b8:	bf48      	it	mi
    58ba:	4240      	negmi	r0, r0
    58bc:	f04f 0100 	mov.w	r1, #0
    58c0:	e73e      	b.n	5740 <__adddf3+0x138>
    58c2:	bf00      	nop

000058c4 <__aeabi_f2d>:
__extendsfdf2():
    58c4:	0042      	lsls	r2, r0, #1
    58c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
    58ca:	ea4f 0131 	mov.w	r1, r1, rrx
    58ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
    58d2:	bf1f      	itttt	ne
    58d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    58d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    58dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    58e0:	4770      	bxne	lr
    58e2:	f092 0f00 	teq	r2, #0
    58e6:	bf14      	ite	ne
    58e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    58ec:	4770      	bxeq	lr
    58ee:	b530      	push	{r4, r5, lr}
    58f0:	f44f 7460 	mov.w	r4, #896	; 0x380
    58f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    58f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    58fc:	e720      	b.n	5740 <__adddf3+0x138>
    58fe:	bf00      	nop

00005900 <__aeabi_ul2d>:
__aeabi_ul2d():
    5900:	ea50 0201 	orrs.w	r2, r0, r1
    5904:	bf08      	it	eq
    5906:	4770      	bxeq	lr
    5908:	b530      	push	{r4, r5, lr}
    590a:	f04f 0500 	mov.w	r5, #0
    590e:	e00a      	b.n	5926 <__aeabi_l2d+0x16>

00005910 <__aeabi_l2d>:
    5910:	ea50 0201 	orrs.w	r2, r0, r1
    5914:	bf08      	it	eq
    5916:	4770      	bxeq	lr
    5918:	b530      	push	{r4, r5, lr}
    591a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    591e:	d502      	bpl.n	5926 <__aeabi_l2d+0x16>
    5920:	4240      	negs	r0, r0
    5922:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    5926:	f44f 6480 	mov.w	r4, #1024	; 0x400
    592a:	f104 0432 	add.w	r4, r4, #50	; 0x32
    592e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    5932:	f43f aedc 	beq.w	56ee <__adddf3+0xe6>
    5936:	f04f 0203 	mov.w	r2, #3
    593a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    593e:	bf18      	it	ne
    5940:	3203      	addne	r2, #3
    5942:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    5946:	bf18      	it	ne
    5948:	3203      	addne	r2, #3
    594a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    594e:	f1c2 0320 	rsb	r3, r2, #32
    5952:	fa00 fc03 	lsl.w	ip, r0, r3
    5956:	fa20 f002 	lsr.w	r0, r0, r2
    595a:	fa01 fe03 	lsl.w	lr, r1, r3
    595e:	ea40 000e 	orr.w	r0, r0, lr
    5962:	fa21 f102 	lsr.w	r1, r1, r2
    5966:	4414      	add	r4, r2
    5968:	e6c1      	b.n	56ee <__adddf3+0xe6>
__floatdidf():
    596a:	bf00      	nop

0000596c <__aeabi_dmul>:
__aeabi_dmul():
    596c:	b570      	push	{r4, r5, r6, lr}
    596e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    5972:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    5976:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    597a:	bf1d      	ittte	ne
    597c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    5980:	ea94 0f0c 	teqne	r4, ip
    5984:	ea95 0f0c 	teqne	r5, ip
    5988:	f000 f8de 	bleq	5b48 <__aeabi_dmul+0x1dc>
    598c:	442c      	add	r4, r5
    598e:	ea81 0603 	eor.w	r6, r1, r3
    5992:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    5996:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    599a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    599e:	bf18      	it	ne
    59a0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    59a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    59a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    59ac:	d038      	beq.n	5a20 <__aeabi_dmul+0xb4>
    59ae:	fba0 ce02 	umull	ip, lr, r0, r2
    59b2:	f04f 0500 	mov.w	r5, #0
    59b6:	fbe1 e502 	umlal	lr, r5, r1, r2
    59ba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    59be:	fbe0 e503 	umlal	lr, r5, r0, r3
    59c2:	f04f 0600 	mov.w	r6, #0
    59c6:	fbe1 5603 	umlal	r5, r6, r1, r3
    59ca:	f09c 0f00 	teq	ip, #0
    59ce:	bf18      	it	ne
    59d0:	f04e 0e01 	orrne.w	lr, lr, #1
    59d4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    59d8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    59dc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    59e0:	d204      	bcs.n	59ec <__aeabi_dmul+0x80>
    59e2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    59e6:	416d      	adcs	r5, r5
    59e8:	eb46 0606 	adc.w	r6, r6, r6
    59ec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    59f0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    59f4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    59f8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    59fc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    5a00:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    5a04:	bf88      	it	hi
    5a06:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    5a0a:	d81e      	bhi.n	5a4a <__aeabi_dmul+0xde>
    5a0c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    5a10:	bf08      	it	eq
    5a12:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    5a16:	f150 0000 	adcs.w	r0, r0, #0
    5a1a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    5a1e:	bd70      	pop	{r4, r5, r6, pc}
    5a20:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    5a24:	ea46 0101 	orr.w	r1, r6, r1
    5a28:	ea40 0002 	orr.w	r0, r0, r2
    5a2c:	ea81 0103 	eor.w	r1, r1, r3
    5a30:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    5a34:	bfc2      	ittt	gt
    5a36:	ebd4 050c 	rsbsgt	r5, r4, ip
    5a3a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    5a3e:	bd70      	popgt	{r4, r5, r6, pc}
    5a40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    5a44:	f04f 0e00 	mov.w	lr, #0
    5a48:	3c01      	subs	r4, #1
    5a4a:	f300 80ab 	bgt.w	5ba4 <__aeabi_dmul+0x238>
    5a4e:	f114 0f36 	cmn.w	r4, #54	; 0x36
    5a52:	bfde      	ittt	le
    5a54:	2000      	movle	r0, #0
    5a56:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    5a5a:	bd70      	pople	{r4, r5, r6, pc}
    5a5c:	f1c4 0400 	rsb	r4, r4, #0
    5a60:	3c20      	subs	r4, #32
    5a62:	da35      	bge.n	5ad0 <__aeabi_dmul+0x164>
    5a64:	340c      	adds	r4, #12
    5a66:	dc1b      	bgt.n	5aa0 <__aeabi_dmul+0x134>
    5a68:	f104 0414 	add.w	r4, r4, #20
    5a6c:	f1c4 0520 	rsb	r5, r4, #32
    5a70:	fa00 f305 	lsl.w	r3, r0, r5
    5a74:	fa20 f004 	lsr.w	r0, r0, r4
    5a78:	fa01 f205 	lsl.w	r2, r1, r5
    5a7c:	ea40 0002 	orr.w	r0, r0, r2
    5a80:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    5a84:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    5a88:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    5a8c:	fa21 f604 	lsr.w	r6, r1, r4
    5a90:	eb42 0106 	adc.w	r1, r2, r6
    5a94:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    5a98:	bf08      	it	eq
    5a9a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    5a9e:	bd70      	pop	{r4, r5, r6, pc}
    5aa0:	f1c4 040c 	rsb	r4, r4, #12
    5aa4:	f1c4 0520 	rsb	r5, r4, #32
    5aa8:	fa00 f304 	lsl.w	r3, r0, r4
    5aac:	fa20 f005 	lsr.w	r0, r0, r5
    5ab0:	fa01 f204 	lsl.w	r2, r1, r4
    5ab4:	ea40 0002 	orr.w	r0, r0, r2
    5ab8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    5abc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    5ac0:	f141 0100 	adc.w	r1, r1, #0
    5ac4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    5ac8:	bf08      	it	eq
    5aca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    5ace:	bd70      	pop	{r4, r5, r6, pc}
    5ad0:	f1c4 0520 	rsb	r5, r4, #32
    5ad4:	fa00 f205 	lsl.w	r2, r0, r5
    5ad8:	ea4e 0e02 	orr.w	lr, lr, r2
    5adc:	fa20 f304 	lsr.w	r3, r0, r4
    5ae0:	fa01 f205 	lsl.w	r2, r1, r5
    5ae4:	ea43 0302 	orr.w	r3, r3, r2
    5ae8:	fa21 f004 	lsr.w	r0, r1, r4
    5aec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    5af0:	fa21 f204 	lsr.w	r2, r1, r4
    5af4:	ea20 0002 	bic.w	r0, r0, r2
    5af8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    5afc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    5b00:	bf08      	it	eq
    5b02:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    5b06:	bd70      	pop	{r4, r5, r6, pc}
    5b08:	f094 0f00 	teq	r4, #0
    5b0c:	d10f      	bne.n	5b2e <__aeabi_dmul+0x1c2>
    5b0e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    5b12:	0040      	lsls	r0, r0, #1
    5b14:	eb41 0101 	adc.w	r1, r1, r1
    5b18:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    5b1c:	bf08      	it	eq
    5b1e:	3c01      	subeq	r4, #1
    5b20:	d0f7      	beq.n	5b12 <__aeabi_dmul+0x1a6>
    5b22:	ea41 0106 	orr.w	r1, r1, r6
    5b26:	f095 0f00 	teq	r5, #0
    5b2a:	bf18      	it	ne
    5b2c:	4770      	bxne	lr
    5b2e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    5b32:	0052      	lsls	r2, r2, #1
    5b34:	eb43 0303 	adc.w	r3, r3, r3
    5b38:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    5b3c:	bf08      	it	eq
    5b3e:	3d01      	subeq	r5, #1
    5b40:	d0f7      	beq.n	5b32 <__aeabi_dmul+0x1c6>
    5b42:	ea43 0306 	orr.w	r3, r3, r6
    5b46:	4770      	bx	lr
    5b48:	ea94 0f0c 	teq	r4, ip
    5b4c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    5b50:	bf18      	it	ne
    5b52:	ea95 0f0c 	teqne	r5, ip
    5b56:	d00c      	beq.n	5b72 <__aeabi_dmul+0x206>
    5b58:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    5b5c:	bf18      	it	ne
    5b5e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    5b62:	d1d1      	bne.n	5b08 <__aeabi_dmul+0x19c>
    5b64:	ea81 0103 	eor.w	r1, r1, r3
    5b68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    5b6c:	f04f 0000 	mov.w	r0, #0
    5b70:	bd70      	pop	{r4, r5, r6, pc}
    5b72:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    5b76:	bf06      	itte	eq
    5b78:	4610      	moveq	r0, r2
    5b7a:	4619      	moveq	r1, r3
    5b7c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    5b80:	d019      	beq.n	5bb6 <__aeabi_dmul+0x24a>
    5b82:	ea94 0f0c 	teq	r4, ip
    5b86:	d102      	bne.n	5b8e <__aeabi_dmul+0x222>
    5b88:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    5b8c:	d113      	bne.n	5bb6 <__aeabi_dmul+0x24a>
    5b8e:	ea95 0f0c 	teq	r5, ip
    5b92:	d105      	bne.n	5ba0 <__aeabi_dmul+0x234>
    5b94:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    5b98:	bf1c      	itt	ne
    5b9a:	4610      	movne	r0, r2
    5b9c:	4619      	movne	r1, r3
    5b9e:	d10a      	bne.n	5bb6 <__aeabi_dmul+0x24a>
    5ba0:	ea81 0103 	eor.w	r1, r1, r3
    5ba4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    5ba8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    5bac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    5bb0:	f04f 0000 	mov.w	r0, #0
    5bb4:	bd70      	pop	{r4, r5, r6, pc}
    5bb6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    5bba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    5bbe:	bd70      	pop	{r4, r5, r6, pc}

00005bc0 <__aeabi_ddiv>:
__aeabi_ddiv():
    5bc0:	b570      	push	{r4, r5, r6, lr}
    5bc2:	f04f 0cff 	mov.w	ip, #255	; 0xff
    5bc6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    5bca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    5bce:	bf1d      	ittte	ne
    5bd0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    5bd4:	ea94 0f0c 	teqne	r4, ip
    5bd8:	ea95 0f0c 	teqne	r5, ip
    5bdc:	f000 f8a7 	bleq	5d2e <__aeabi_ddiv+0x16e>
    5be0:	eba4 0405 	sub.w	r4, r4, r5
    5be4:	ea81 0e03 	eor.w	lr, r1, r3
    5be8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    5bec:	ea4f 3101 	mov.w	r1, r1, lsl #12
    5bf0:	f000 8088 	beq.w	5d04 <__aeabi_ddiv+0x144>
    5bf4:	ea4f 3303 	mov.w	r3, r3, lsl #12
    5bf8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    5bfc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    5c00:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    5c04:	ea4f 2202 	mov.w	r2, r2, lsl #8
    5c08:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    5c0c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    5c10:	ea4f 2600 	mov.w	r6, r0, lsl #8
    5c14:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    5c18:	429d      	cmp	r5, r3
    5c1a:	bf08      	it	eq
    5c1c:	4296      	cmpeq	r6, r2
    5c1e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    5c22:	f504 7440 	add.w	r4, r4, #768	; 0x300
    5c26:	d202      	bcs.n	5c2e <__aeabi_ddiv+0x6e>
    5c28:	085b      	lsrs	r3, r3, #1
    5c2a:	ea4f 0232 	mov.w	r2, r2, rrx
    5c2e:	1ab6      	subs	r6, r6, r2
    5c30:	eb65 0503 	sbc.w	r5, r5, r3
    5c34:	085b      	lsrs	r3, r3, #1
    5c36:	ea4f 0232 	mov.w	r2, r2, rrx
    5c3a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    5c3e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    5c42:	ebb6 0e02 	subs.w	lr, r6, r2
    5c46:	eb75 0e03 	sbcs.w	lr, r5, r3
    5c4a:	bf22      	ittt	cs
    5c4c:	1ab6      	subcs	r6, r6, r2
    5c4e:	4675      	movcs	r5, lr
    5c50:	ea40 000c 	orrcs.w	r0, r0, ip
    5c54:	085b      	lsrs	r3, r3, #1
    5c56:	ea4f 0232 	mov.w	r2, r2, rrx
    5c5a:	ebb6 0e02 	subs.w	lr, r6, r2
    5c5e:	eb75 0e03 	sbcs.w	lr, r5, r3
    5c62:	bf22      	ittt	cs
    5c64:	1ab6      	subcs	r6, r6, r2
    5c66:	4675      	movcs	r5, lr
    5c68:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    5c6c:	085b      	lsrs	r3, r3, #1
    5c6e:	ea4f 0232 	mov.w	r2, r2, rrx
    5c72:	ebb6 0e02 	subs.w	lr, r6, r2
    5c76:	eb75 0e03 	sbcs.w	lr, r5, r3
    5c7a:	bf22      	ittt	cs
    5c7c:	1ab6      	subcs	r6, r6, r2
    5c7e:	4675      	movcs	r5, lr
    5c80:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    5c84:	085b      	lsrs	r3, r3, #1
    5c86:	ea4f 0232 	mov.w	r2, r2, rrx
    5c8a:	ebb6 0e02 	subs.w	lr, r6, r2
    5c8e:	eb75 0e03 	sbcs.w	lr, r5, r3
    5c92:	bf22      	ittt	cs
    5c94:	1ab6      	subcs	r6, r6, r2
    5c96:	4675      	movcs	r5, lr
    5c98:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    5c9c:	ea55 0e06 	orrs.w	lr, r5, r6
    5ca0:	d018      	beq.n	5cd4 <__aeabi_ddiv+0x114>
    5ca2:	ea4f 1505 	mov.w	r5, r5, lsl #4
    5ca6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    5caa:	ea4f 1606 	mov.w	r6, r6, lsl #4
    5cae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    5cb2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    5cb6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    5cba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    5cbe:	d1c0      	bne.n	5c42 <__aeabi_ddiv+0x82>
    5cc0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    5cc4:	d10b      	bne.n	5cde <__aeabi_ddiv+0x11e>
    5cc6:	ea41 0100 	orr.w	r1, r1, r0
    5cca:	f04f 0000 	mov.w	r0, #0
    5cce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    5cd2:	e7b6      	b.n	5c42 <__aeabi_ddiv+0x82>
    5cd4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    5cd8:	bf04      	itt	eq
    5cda:	4301      	orreq	r1, r0
    5cdc:	2000      	moveq	r0, #0
    5cde:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    5ce2:	bf88      	it	hi
    5ce4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    5ce8:	f63f aeaf 	bhi.w	5a4a <__aeabi_dmul+0xde>
    5cec:	ebb5 0c03 	subs.w	ip, r5, r3
    5cf0:	bf04      	itt	eq
    5cf2:	ebb6 0c02 	subseq.w	ip, r6, r2
    5cf6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    5cfa:	f150 0000 	adcs.w	r0, r0, #0
    5cfe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    5d02:	bd70      	pop	{r4, r5, r6, pc}
    5d04:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    5d08:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    5d0c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    5d10:	bfc2      	ittt	gt
    5d12:	ebd4 050c 	rsbsgt	r5, r4, ip
    5d16:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    5d1a:	bd70      	popgt	{r4, r5, r6, pc}
    5d1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    5d20:	f04f 0e00 	mov.w	lr, #0
    5d24:	3c01      	subs	r4, #1
    5d26:	e690      	b.n	5a4a <__aeabi_dmul+0xde>
    5d28:	ea45 0e06 	orr.w	lr, r5, r6
    5d2c:	e68d      	b.n	5a4a <__aeabi_dmul+0xde>
    5d2e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    5d32:	ea94 0f0c 	teq	r4, ip
    5d36:	bf08      	it	eq
    5d38:	ea95 0f0c 	teqeq	r5, ip
    5d3c:	f43f af3b 	beq.w	5bb6 <__aeabi_dmul+0x24a>
    5d40:	ea94 0f0c 	teq	r4, ip
    5d44:	d10a      	bne.n	5d5c <__aeabi_ddiv+0x19c>
    5d46:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    5d4a:	f47f af34 	bne.w	5bb6 <__aeabi_dmul+0x24a>
    5d4e:	ea95 0f0c 	teq	r5, ip
    5d52:	f47f af25 	bne.w	5ba0 <__aeabi_dmul+0x234>
    5d56:	4610      	mov	r0, r2
    5d58:	4619      	mov	r1, r3
    5d5a:	e72c      	b.n	5bb6 <__aeabi_dmul+0x24a>
    5d5c:	ea95 0f0c 	teq	r5, ip
    5d60:	d106      	bne.n	5d70 <__aeabi_ddiv+0x1b0>
    5d62:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    5d66:	f43f aefd 	beq.w	5b64 <__aeabi_dmul+0x1f8>
    5d6a:	4610      	mov	r0, r2
    5d6c:	4619      	mov	r1, r3
    5d6e:	e722      	b.n	5bb6 <__aeabi_dmul+0x24a>
    5d70:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    5d74:	bf18      	it	ne
    5d76:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    5d7a:	f47f aec5 	bne.w	5b08 <__aeabi_dmul+0x19c>
    5d7e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    5d82:	f47f af0d 	bne.w	5ba0 <__aeabi_dmul+0x234>
    5d86:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    5d8a:	f47f aeeb 	bne.w	5b64 <__aeabi_dmul+0x1f8>
    5d8e:	e712      	b.n	5bb6 <__aeabi_dmul+0x24a>

00005d90 <__gedf2>:
__gtdf2():
    5d90:	f04f 3cff 	mov.w	ip, #4294967295
    5d94:	e006      	b.n	5da4 <__cmpdf2+0x4>
    5d96:	bf00      	nop

00005d98 <__ledf2>:
    5d98:	f04f 0c01 	mov.w	ip, #1
    5d9c:	e002      	b.n	5da4 <__cmpdf2+0x4>
    5d9e:	bf00      	nop

00005da0 <__cmpdf2>:
    5da0:	f04f 0c01 	mov.w	ip, #1
    5da4:	f84d cd04 	str.w	ip, [sp, #-4]!
    5da8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    5dac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    5db0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    5db4:	bf18      	it	ne
    5db6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    5dba:	d01b      	beq.n	5df4 <__cmpdf2+0x54>
    5dbc:	b001      	add	sp, #4
    5dbe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    5dc2:	bf0c      	ite	eq
    5dc4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    5dc8:	ea91 0f03 	teqne	r1, r3
    5dcc:	bf02      	ittt	eq
    5dce:	ea90 0f02 	teqeq	r0, r2
    5dd2:	2000      	moveq	r0, #0
    5dd4:	4770      	bxeq	lr
    5dd6:	f110 0f00 	cmn.w	r0, #0
    5dda:	ea91 0f03 	teq	r1, r3
    5dde:	bf58      	it	pl
    5de0:	4299      	cmppl	r1, r3
    5de2:	bf08      	it	eq
    5de4:	4290      	cmpeq	r0, r2
    5de6:	bf2c      	ite	cs
    5de8:	17d8      	asrcs	r0, r3, #31
    5dea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    5dee:	f040 0001 	orr.w	r0, r0, #1
    5df2:	4770      	bx	lr
    5df4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    5df8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    5dfc:	d102      	bne.n	5e04 <__cmpdf2+0x64>
    5dfe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    5e02:	d107      	bne.n	5e14 <__cmpdf2+0x74>
    5e04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    5e08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    5e0c:	d1d6      	bne.n	5dbc <__cmpdf2+0x1c>
    5e0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    5e12:	d0d3      	beq.n	5dbc <__cmpdf2+0x1c>
    5e14:	f85d 0b04 	ldr.w	r0, [sp], #4
    5e18:	4770      	bx	lr
__cmpdf2():
    5e1a:	bf00      	nop

00005e1c <__aeabi_cdrcmple>:
__aeabi_cdrcmple():
    5e1c:	4684      	mov	ip, r0
    5e1e:	4610      	mov	r0, r2
    5e20:	4662      	mov	r2, ip
    5e22:	468c      	mov	ip, r1
    5e24:	4619      	mov	r1, r3
    5e26:	4663      	mov	r3, ip
    5e28:	e000      	b.n	5e2c <__aeabi_cdcmpeq>
    5e2a:	bf00      	nop

00005e2c <__aeabi_cdcmpeq>:
    5e2c:	b501      	push	{r0, lr}
    5e2e:	f7ff ffb7 	bl	5da0 <__cmpdf2>
    5e32:	2800      	cmp	r0, #0
    5e34:	bf48      	it	mi
    5e36:	f110 0f00 	cmnmi.w	r0, #0
    5e3a:	bd01      	pop	{r0, pc}

00005e3c <__aeabi_dcmpeq>:
__aeabi_dcmpeq():
    5e3c:	f84d ed08 	str.w	lr, [sp, #-8]!
    5e40:	f7ff fff4 	bl	5e2c <__aeabi_cdcmpeq>
    5e44:	bf0c      	ite	eq
    5e46:	2001      	moveq	r0, #1
    5e48:	2000      	movne	r0, #0
    5e4a:	f85d fb08 	ldr.w	pc, [sp], #8
    5e4e:	bf00      	nop

00005e50 <__aeabi_dcmplt>:
__aeabi_dcmplt():
    5e50:	f84d ed08 	str.w	lr, [sp, #-8]!
    5e54:	f7ff ffea 	bl	5e2c <__aeabi_cdcmpeq>
    5e58:	bf34      	ite	cc
    5e5a:	2001      	movcc	r0, #1
    5e5c:	2000      	movcs	r0, #0
    5e5e:	f85d fb08 	ldr.w	pc, [sp], #8
    5e62:	bf00      	nop

00005e64 <__aeabi_dcmple>:
__aeabi_dcmple():
    5e64:	f84d ed08 	str.w	lr, [sp, #-8]!
    5e68:	f7ff ffe0 	bl	5e2c <__aeabi_cdcmpeq>
    5e6c:	bf94      	ite	ls
    5e6e:	2001      	movls	r0, #1
    5e70:	2000      	movhi	r0, #0
    5e72:	f85d fb08 	ldr.w	pc, [sp], #8
    5e76:	bf00      	nop

00005e78 <__aeabi_dcmpge>:
__aeabi_dcmpge():
    5e78:	f84d ed08 	str.w	lr, [sp, #-8]!
    5e7c:	f7ff ffce 	bl	5e1c <__aeabi_cdrcmple>
    5e80:	bf94      	ite	ls
    5e82:	2001      	movls	r0, #1
    5e84:	2000      	movhi	r0, #0
    5e86:	f85d fb08 	ldr.w	pc, [sp], #8
    5e8a:	bf00      	nop

00005e8c <__aeabi_dcmpgt>:
__aeabi_dcmpgt():
    5e8c:	f84d ed08 	str.w	lr, [sp, #-8]!
    5e90:	f7ff ffc4 	bl	5e1c <__aeabi_cdrcmple>
    5e94:	bf34      	ite	cc
    5e96:	2001      	movcc	r0, #1
    5e98:	2000      	movcs	r0, #0
    5e9a:	f85d fb08 	ldr.w	pc, [sp], #8
    5e9e:	bf00      	nop

00005ea0 <__aeabi_d2iz>:
__fixdfsi():
    5ea0:	ea4f 0241 	mov.w	r2, r1, lsl #1
    5ea4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    5ea8:	d215      	bcs.n	5ed6 <__aeabi_d2iz+0x36>
    5eaa:	d511      	bpl.n	5ed0 <__aeabi_d2iz+0x30>
    5eac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    5eb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    5eb4:	d912      	bls.n	5edc <__aeabi_d2iz+0x3c>
    5eb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    5eba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    5ebe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    5ec2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    5ec6:	fa23 f002 	lsr.w	r0, r3, r2
    5eca:	bf18      	it	ne
    5ecc:	4240      	negne	r0, r0
    5ece:	4770      	bx	lr
    5ed0:	f04f 0000 	mov.w	r0, #0
    5ed4:	4770      	bx	lr
    5ed6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    5eda:	d105      	bne.n	5ee8 <__aeabi_d2iz+0x48>
    5edc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    5ee0:	bf08      	it	eq
    5ee2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    5ee6:	4770      	bx	lr
    5ee8:	f04f 0000 	mov.w	r0, #0
    5eec:	4770      	bx	lr
    5eee:	bf00      	nop

00005ef0 <__aeabi_d2uiz>:
__fixunsdfsi():
    5ef0:	004a      	lsls	r2, r1, #1
    5ef2:	d211      	bcs.n	5f18 <__aeabi_d2uiz+0x28>
    5ef4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    5ef8:	d211      	bcs.n	5f1e <__aeabi_d2uiz+0x2e>
    5efa:	d50d      	bpl.n	5f18 <__aeabi_d2uiz+0x28>
    5efc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    5f00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    5f04:	d40e      	bmi.n	5f24 <__aeabi_d2uiz+0x34>
    5f06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    5f0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    5f0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    5f12:	fa23 f002 	lsr.w	r0, r3, r2
    5f16:	4770      	bx	lr
    5f18:	f04f 0000 	mov.w	r0, #0
    5f1c:	4770      	bx	lr
    5f1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    5f22:	d102      	bne.n	5f2a <__aeabi_d2uiz+0x3a>
    5f24:	f04f 30ff 	mov.w	r0, #4294967295
    5f28:	4770      	bx	lr
    5f2a:	f04f 0000 	mov.w	r0, #0
    5f2e:	4770      	bx	lr

00005f30 <__aeabi_d2f>:
__aeabi_d2f():
    5f30:	ea4f 0241 	mov.w	r2, r1, lsl #1
    5f34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    5f38:	bf24      	itt	cs
    5f3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    5f3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    5f42:	d90d      	bls.n	5f60 <__aeabi_d2f+0x30>
    5f44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    5f48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    5f4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    5f50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    5f54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    5f58:	bf08      	it	eq
    5f5a:	f020 0001 	biceq.w	r0, r0, #1
    5f5e:	4770      	bx	lr
    5f60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    5f64:	d121      	bne.n	5faa <__aeabi_d2f+0x7a>
    5f66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    5f6a:	bfbc      	itt	lt
    5f6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    5f70:	4770      	bxlt	lr
    5f72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    5f76:	ea4f 5252 	mov.w	r2, r2, lsr #21
    5f7a:	f1c2 0218 	rsb	r2, r2, #24
    5f7e:	f1c2 0c20 	rsb	ip, r2, #32
    5f82:	fa10 f30c 	lsls.w	r3, r0, ip
    5f86:	fa20 f002 	lsr.w	r0, r0, r2
    5f8a:	bf18      	it	ne
    5f8c:	f040 0001 	orrne.w	r0, r0, #1
    5f90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    5f94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    5f98:	fa03 fc0c 	lsl.w	ip, r3, ip
    5f9c:	ea40 000c 	orr.w	r0, r0, ip
    5fa0:	fa23 f302 	lsr.w	r3, r3, r2
    5fa4:	ea4f 0343 	mov.w	r3, r3, lsl #1
    5fa8:	e7cc      	b.n	5f44 <__aeabi_d2f+0x14>
    5faa:	ea7f 5362 	mvns.w	r3, r2, asr #21
    5fae:	d107      	bne.n	5fc0 <__aeabi_d2f+0x90>
    5fb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    5fb4:	bf1e      	ittt	ne
    5fb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    5fba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    5fbe:	4770      	bxne	lr
    5fc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    5fc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    5fc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    5fcc:	4770      	bx	lr
    5fce:	bf00      	nop

00005fd0 <__aeabi_frsub>:
__aeabi_frsub():
    5fd0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    5fd4:	e002      	b.n	5fdc <__addsf3>
    5fd6:	bf00      	nop

00005fd8 <__aeabi_fsub>:
    5fd8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00005fdc <__addsf3>:
    5fdc:	0042      	lsls	r2, r0, #1
    5fde:	bf1f      	itttt	ne
    5fe0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    5fe4:	ea92 0f03 	teqne	r2, r3
    5fe8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    5fec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    5ff0:	d06a      	beq.n	60c8 <__addsf3+0xec>
    5ff2:	ea4f 6212 	mov.w	r2, r2, lsr #24
    5ff6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    5ffa:	bfc1      	itttt	gt
    5ffc:	18d2      	addgt	r2, r2, r3
    5ffe:	4041      	eorgt	r1, r0
    6000:	4048      	eorgt	r0, r1
    6002:	4041      	eorgt	r1, r0
    6004:	bfb8      	it	lt
    6006:	425b      	neglt	r3, r3
    6008:	2b19      	cmp	r3, #25
    600a:	bf88      	it	hi
    600c:	4770      	bxhi	lr
    600e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    6012:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    6016:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    601a:	bf18      	it	ne
    601c:	4240      	negne	r0, r0
    601e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    6022:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    6026:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    602a:	bf18      	it	ne
    602c:	4249      	negne	r1, r1
    602e:	ea92 0f03 	teq	r2, r3
    6032:	d03f      	beq.n	60b4 <__addsf3+0xd8>
    6034:	f1a2 0201 	sub.w	r2, r2, #1
    6038:	fa41 fc03 	asr.w	ip, r1, r3
    603c:	eb10 000c 	adds.w	r0, r0, ip
    6040:	f1c3 0320 	rsb	r3, r3, #32
    6044:	fa01 f103 	lsl.w	r1, r1, r3
    6048:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    604c:	d502      	bpl.n	6054 <__addsf3+0x78>
    604e:	4249      	negs	r1, r1
    6050:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    6054:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    6058:	d313      	bcc.n	6082 <__addsf3+0xa6>
    605a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    605e:	d306      	bcc.n	606e <__addsf3+0x92>
    6060:	0840      	lsrs	r0, r0, #1
    6062:	ea4f 0131 	mov.w	r1, r1, rrx
    6066:	f102 0201 	add.w	r2, r2, #1
    606a:	2afe      	cmp	r2, #254	; 0xfe
    606c:	d251      	bcs.n	6112 <__addsf3+0x136>
    606e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    6072:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    6076:	bf08      	it	eq
    6078:	f020 0001 	biceq.w	r0, r0, #1
    607c:	ea40 0003 	orr.w	r0, r0, r3
    6080:	4770      	bx	lr
    6082:	0049      	lsls	r1, r1, #1
    6084:	eb40 0000 	adc.w	r0, r0, r0
    6088:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    608c:	f1a2 0201 	sub.w	r2, r2, #1
    6090:	d1ed      	bne.n	606e <__addsf3+0x92>
    6092:	fab0 fc80 	clz	ip, r0
    6096:	f1ac 0c08 	sub.w	ip, ip, #8
    609a:	ebb2 020c 	subs.w	r2, r2, ip
    609e:	fa00 f00c 	lsl.w	r0, r0, ip
    60a2:	bfaa      	itet	ge
    60a4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    60a8:	4252      	neglt	r2, r2
    60aa:	4318      	orrge	r0, r3
    60ac:	bfbc      	itt	lt
    60ae:	40d0      	lsrlt	r0, r2
    60b0:	4318      	orrlt	r0, r3
    60b2:	4770      	bx	lr
    60b4:	f092 0f00 	teq	r2, #0
    60b8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    60bc:	bf06      	itte	eq
    60be:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    60c2:	3201      	addeq	r2, #1
    60c4:	3b01      	subne	r3, #1
    60c6:	e7b5      	b.n	6034 <__addsf3+0x58>
    60c8:	ea4f 0341 	mov.w	r3, r1, lsl #1
    60cc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    60d0:	bf18      	it	ne
    60d2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    60d6:	d021      	beq.n	611c <__addsf3+0x140>
    60d8:	ea92 0f03 	teq	r2, r3
    60dc:	d004      	beq.n	60e8 <__addsf3+0x10c>
    60de:	f092 0f00 	teq	r2, #0
    60e2:	bf08      	it	eq
    60e4:	4608      	moveq	r0, r1
    60e6:	4770      	bx	lr
    60e8:	ea90 0f01 	teq	r0, r1
    60ec:	bf1c      	itt	ne
    60ee:	2000      	movne	r0, #0
    60f0:	4770      	bxne	lr
    60f2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    60f6:	d104      	bne.n	6102 <__addsf3+0x126>
    60f8:	0040      	lsls	r0, r0, #1
    60fa:	bf28      	it	cs
    60fc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    6100:	4770      	bx	lr
    6102:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    6106:	bf3c      	itt	cc
    6108:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    610c:	4770      	bxcc	lr
    610e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    6112:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    6116:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    611a:	4770      	bx	lr
    611c:	ea7f 6222 	mvns.w	r2, r2, asr #24
    6120:	bf16      	itet	ne
    6122:	4608      	movne	r0, r1
    6124:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    6128:	4601      	movne	r1, r0
    612a:	0242      	lsls	r2, r0, #9
    612c:	bf06      	itte	eq
    612e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    6132:	ea90 0f01 	teqeq	r0, r1
    6136:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    613a:	4770      	bx	lr

0000613c <__aeabi_ui2f>:
__aeabi_ui2f():
    613c:	f04f 0300 	mov.w	r3, #0
    6140:	e004      	b.n	614c <__aeabi_i2f+0x8>
    6142:	bf00      	nop

00006144 <__aeabi_i2f>:
    6144:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    6148:	bf48      	it	mi
    614a:	4240      	negmi	r0, r0
    614c:	ea5f 0c00 	movs.w	ip, r0
    6150:	bf08      	it	eq
    6152:	4770      	bxeq	lr
    6154:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    6158:	4601      	mov	r1, r0
    615a:	f04f 0000 	mov.w	r0, #0
    615e:	e01c      	b.n	619a <__aeabi_l2f+0x2a>

00006160 <__aeabi_ul2f>:
__floatundisf():
    6160:	ea50 0201 	orrs.w	r2, r0, r1
    6164:	bf08      	it	eq
    6166:	4770      	bxeq	lr
    6168:	f04f 0300 	mov.w	r3, #0
    616c:	e00a      	b.n	6184 <__aeabi_l2f+0x14>
    616e:	bf00      	nop

00006170 <__aeabi_l2f>:
    6170:	ea50 0201 	orrs.w	r2, r0, r1
    6174:	bf08      	it	eq
    6176:	4770      	bxeq	lr
    6178:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    617c:	d502      	bpl.n	6184 <__aeabi_l2f+0x14>
    617e:	4240      	negs	r0, r0
    6180:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    6184:	ea5f 0c01 	movs.w	ip, r1
    6188:	bf02      	ittt	eq
    618a:	4684      	moveq	ip, r0
    618c:	4601      	moveq	r1, r0
    618e:	2000      	moveq	r0, #0
    6190:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    6194:	bf08      	it	eq
    6196:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    619a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    619e:	fabc f28c 	clz	r2, ip
    61a2:	3a08      	subs	r2, #8
    61a4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    61a8:	db10      	blt.n	61cc <__aeabi_l2f+0x5c>
    61aa:	fa01 fc02 	lsl.w	ip, r1, r2
    61ae:	4463      	add	r3, ip
    61b0:	fa00 fc02 	lsl.w	ip, r0, r2
    61b4:	f1c2 0220 	rsb	r2, r2, #32
    61b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    61bc:	fa20 f202 	lsr.w	r2, r0, r2
    61c0:	eb43 0002 	adc.w	r0, r3, r2
    61c4:	bf08      	it	eq
    61c6:	f020 0001 	biceq.w	r0, r0, #1
    61ca:	4770      	bx	lr
    61cc:	f102 0220 	add.w	r2, r2, #32
    61d0:	fa01 fc02 	lsl.w	ip, r1, r2
    61d4:	f1c2 0220 	rsb	r2, r2, #32
    61d8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    61dc:	fa21 f202 	lsr.w	r2, r1, r2
    61e0:	eb43 0002 	adc.w	r0, r3, r2
    61e4:	bf08      	it	eq
    61e6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    61ea:	4770      	bx	lr

000061ec <__aeabi_fmul>:
__mulsf3():
    61ec:	f04f 0cff 	mov.w	ip, #255	; 0xff
    61f0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    61f4:	bf1e      	ittt	ne
    61f6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    61fa:	ea92 0f0c 	teqne	r2, ip
    61fe:	ea93 0f0c 	teqne	r3, ip
    6202:	d06f      	beq.n	62e4 <__aeabi_fmul+0xf8>
    6204:	441a      	add	r2, r3
    6206:	ea80 0c01 	eor.w	ip, r0, r1
    620a:	0240      	lsls	r0, r0, #9
    620c:	bf18      	it	ne
    620e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    6212:	d01e      	beq.n	6252 <__aeabi_fmul+0x66>
    6214:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    6218:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    621c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    6220:	fba0 3101 	umull	r3, r1, r0, r1
    6224:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    6228:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    622c:	bf3e      	ittt	cc
    622e:	0049      	lslcc	r1, r1, #1
    6230:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    6234:	005b      	lslcc	r3, r3, #1
    6236:	ea40 0001 	orr.w	r0, r0, r1
    623a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    623e:	2afd      	cmp	r2, #253	; 0xfd
    6240:	d81d      	bhi.n	627e <__aeabi_fmul+0x92>
    6242:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    6246:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    624a:	bf08      	it	eq
    624c:	f020 0001 	biceq.w	r0, r0, #1
    6250:	4770      	bx	lr
    6252:	f090 0f00 	teq	r0, #0
    6256:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    625a:	bf08      	it	eq
    625c:	0249      	lsleq	r1, r1, #9
    625e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    6262:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    6266:	3a7f      	subs	r2, #127	; 0x7f
    6268:	bfc2      	ittt	gt
    626a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    626e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    6272:	4770      	bxgt	lr
    6274:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    6278:	f04f 0300 	mov.w	r3, #0
    627c:	3a01      	subs	r2, #1
    627e:	dc5d      	bgt.n	633c <__aeabi_fmul+0x150>
    6280:	f112 0f19 	cmn.w	r2, #25
    6284:	bfdc      	itt	le
    6286:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    628a:	4770      	bxle	lr
    628c:	f1c2 0200 	rsb	r2, r2, #0
    6290:	0041      	lsls	r1, r0, #1
    6292:	fa21 f102 	lsr.w	r1, r1, r2
    6296:	f1c2 0220 	rsb	r2, r2, #32
    629a:	fa00 fc02 	lsl.w	ip, r0, r2
    629e:	ea5f 0031 	movs.w	r0, r1, rrx
    62a2:	f140 0000 	adc.w	r0, r0, #0
    62a6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    62aa:	bf08      	it	eq
    62ac:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    62b0:	4770      	bx	lr
    62b2:	f092 0f00 	teq	r2, #0
    62b6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    62ba:	bf02      	ittt	eq
    62bc:	0040      	lsleq	r0, r0, #1
    62be:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    62c2:	3a01      	subeq	r2, #1
    62c4:	d0f9      	beq.n	62ba <__aeabi_fmul+0xce>
    62c6:	ea40 000c 	orr.w	r0, r0, ip
    62ca:	f093 0f00 	teq	r3, #0
    62ce:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    62d2:	bf02      	ittt	eq
    62d4:	0049      	lsleq	r1, r1, #1
    62d6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    62da:	3b01      	subeq	r3, #1
    62dc:	d0f9      	beq.n	62d2 <__aeabi_fmul+0xe6>
    62de:	ea41 010c 	orr.w	r1, r1, ip
    62e2:	e78f      	b.n	6204 <__aeabi_fmul+0x18>
    62e4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    62e8:	ea92 0f0c 	teq	r2, ip
    62ec:	bf18      	it	ne
    62ee:	ea93 0f0c 	teqne	r3, ip
    62f2:	d00a      	beq.n	630a <__aeabi_fmul+0x11e>
    62f4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    62f8:	bf18      	it	ne
    62fa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    62fe:	d1d8      	bne.n	62b2 <__aeabi_fmul+0xc6>
    6300:	ea80 0001 	eor.w	r0, r0, r1
    6304:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    6308:	4770      	bx	lr
    630a:	f090 0f00 	teq	r0, #0
    630e:	bf17      	itett	ne
    6310:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    6314:	4608      	moveq	r0, r1
    6316:	f091 0f00 	teqne	r1, #0
    631a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    631e:	d014      	beq.n	634a <__aeabi_fmul+0x15e>
    6320:	ea92 0f0c 	teq	r2, ip
    6324:	d101      	bne.n	632a <__aeabi_fmul+0x13e>
    6326:	0242      	lsls	r2, r0, #9
    6328:	d10f      	bne.n	634a <__aeabi_fmul+0x15e>
    632a:	ea93 0f0c 	teq	r3, ip
    632e:	d103      	bne.n	6338 <__aeabi_fmul+0x14c>
    6330:	024b      	lsls	r3, r1, #9
    6332:	bf18      	it	ne
    6334:	4608      	movne	r0, r1
    6336:	d108      	bne.n	634a <__aeabi_fmul+0x15e>
    6338:	ea80 0001 	eor.w	r0, r0, r1
    633c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    6340:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    6344:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    6348:	4770      	bx	lr
    634a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    634e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    6352:	4770      	bx	lr

00006354 <__aeabi_fdiv>:
__divsf3():
    6354:	f04f 0cff 	mov.w	ip, #255	; 0xff
    6358:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    635c:	bf1e      	ittt	ne
    635e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    6362:	ea92 0f0c 	teqne	r2, ip
    6366:	ea93 0f0c 	teqne	r3, ip
    636a:	d069      	beq.n	6440 <__aeabi_fdiv+0xec>
    636c:	eba2 0203 	sub.w	r2, r2, r3
    6370:	ea80 0c01 	eor.w	ip, r0, r1
    6374:	0249      	lsls	r1, r1, #9
    6376:	ea4f 2040 	mov.w	r0, r0, lsl #9
    637a:	d037      	beq.n	63ec <__aeabi_fdiv+0x98>
    637c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6380:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    6384:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    6388:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    638c:	428b      	cmp	r3, r1
    638e:	bf38      	it	cc
    6390:	005b      	lslcc	r3, r3, #1
    6392:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    6396:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    639a:	428b      	cmp	r3, r1
    639c:	bf24      	itt	cs
    639e:	1a5b      	subcs	r3, r3, r1
    63a0:	ea40 000c 	orrcs.w	r0, r0, ip
    63a4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    63a8:	bf24      	itt	cs
    63aa:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    63ae:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    63b2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    63b6:	bf24      	itt	cs
    63b8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    63bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    63c0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    63c4:	bf24      	itt	cs
    63c6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    63ca:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    63ce:	011b      	lsls	r3, r3, #4
    63d0:	bf18      	it	ne
    63d2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    63d6:	d1e0      	bne.n	639a <__aeabi_fdiv+0x46>
    63d8:	2afd      	cmp	r2, #253	; 0xfd
    63da:	f63f af50 	bhi.w	627e <__aeabi_fmul+0x92>
    63de:	428b      	cmp	r3, r1
    63e0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    63e4:	bf08      	it	eq
    63e6:	f020 0001 	biceq.w	r0, r0, #1
    63ea:	4770      	bx	lr
    63ec:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    63f0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    63f4:	327f      	adds	r2, #127	; 0x7f
    63f6:	bfc2      	ittt	gt
    63f8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    63fc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    6400:	4770      	bxgt	lr
    6402:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    6406:	f04f 0300 	mov.w	r3, #0
    640a:	3a01      	subs	r2, #1
    640c:	e737      	b.n	627e <__aeabi_fmul+0x92>
    640e:	f092 0f00 	teq	r2, #0
    6412:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    6416:	bf02      	ittt	eq
    6418:	0040      	lsleq	r0, r0, #1
    641a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    641e:	3a01      	subeq	r2, #1
    6420:	d0f9      	beq.n	6416 <__aeabi_fdiv+0xc2>
    6422:	ea40 000c 	orr.w	r0, r0, ip
    6426:	f093 0f00 	teq	r3, #0
    642a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    642e:	bf02      	ittt	eq
    6430:	0049      	lsleq	r1, r1, #1
    6432:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    6436:	3b01      	subeq	r3, #1
    6438:	d0f9      	beq.n	642e <__aeabi_fdiv+0xda>
    643a:	ea41 010c 	orr.w	r1, r1, ip
    643e:	e795      	b.n	636c <__aeabi_fdiv+0x18>
    6440:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    6444:	ea92 0f0c 	teq	r2, ip
    6448:	d108      	bne.n	645c <__aeabi_fdiv+0x108>
    644a:	0242      	lsls	r2, r0, #9
    644c:	f47f af7d 	bne.w	634a <__aeabi_fmul+0x15e>
    6450:	ea93 0f0c 	teq	r3, ip
    6454:	f47f af70 	bne.w	6338 <__aeabi_fmul+0x14c>
    6458:	4608      	mov	r0, r1
    645a:	e776      	b.n	634a <__aeabi_fmul+0x15e>
    645c:	ea93 0f0c 	teq	r3, ip
    6460:	d104      	bne.n	646c <__aeabi_fdiv+0x118>
    6462:	024b      	lsls	r3, r1, #9
    6464:	f43f af4c 	beq.w	6300 <__aeabi_fmul+0x114>
    6468:	4608      	mov	r0, r1
    646a:	e76e      	b.n	634a <__aeabi_fmul+0x15e>
    646c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    6470:	bf18      	it	ne
    6472:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    6476:	d1ca      	bne.n	640e <__aeabi_fdiv+0xba>
    6478:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    647c:	f47f af5c 	bne.w	6338 <__aeabi_fmul+0x14c>
    6480:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    6484:	f47f af3c 	bne.w	6300 <__aeabi_fmul+0x114>
    6488:	e75f      	b.n	634a <__aeabi_fmul+0x15e>
    648a:	bf00      	nop

0000648c <__gesf2>:
__gtsf2():
    648c:	f04f 3cff 	mov.w	ip, #4294967295
    6490:	e006      	b.n	64a0 <__cmpsf2+0x4>
    6492:	bf00      	nop

00006494 <__lesf2>:
    6494:	f04f 0c01 	mov.w	ip, #1
    6498:	e002      	b.n	64a0 <__cmpsf2+0x4>
    649a:	bf00      	nop

0000649c <__cmpsf2>:
    649c:	f04f 0c01 	mov.w	ip, #1
    64a0:	f84d cd04 	str.w	ip, [sp, #-4]!
    64a4:	ea4f 0240 	mov.w	r2, r0, lsl #1
    64a8:	ea4f 0341 	mov.w	r3, r1, lsl #1
    64ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    64b0:	bf18      	it	ne
    64b2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    64b6:	d011      	beq.n	64dc <__cmpsf2+0x40>
    64b8:	b001      	add	sp, #4
    64ba:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
    64be:	bf18      	it	ne
    64c0:	ea90 0f01 	teqne	r0, r1
    64c4:	bf58      	it	pl
    64c6:	ebb2 0003 	subspl.w	r0, r2, r3
    64ca:	bf88      	it	hi
    64cc:	17c8      	asrhi	r0, r1, #31
    64ce:	bf38      	it	cc
    64d0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
    64d4:	bf18      	it	ne
    64d6:	f040 0001 	orrne.w	r0, r0, #1
    64da:	4770      	bx	lr
    64dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    64e0:	d102      	bne.n	64e8 <__cmpsf2+0x4c>
    64e2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    64e6:	d105      	bne.n	64f4 <__cmpsf2+0x58>
    64e8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    64ec:	d1e4      	bne.n	64b8 <__cmpsf2+0x1c>
    64ee:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    64f2:	d0e1      	beq.n	64b8 <__cmpsf2+0x1c>
    64f4:	f85d 0b04 	ldr.w	r0, [sp], #4
    64f8:	4770      	bx	lr
__nesf2():
    64fa:	bf00      	nop

000064fc <__aeabi_cfrcmple>:
__aeabi_cfrcmple():
    64fc:	4684      	mov	ip, r0
    64fe:	4608      	mov	r0, r1
    6500:	4661      	mov	r1, ip
    6502:	e7ff      	b.n	6504 <__aeabi_cfcmpeq>

00006504 <__aeabi_cfcmpeq>:
    6504:	b50f      	push	{r0, r1, r2, r3, lr}
    6506:	f7ff ffc9 	bl	649c <__cmpsf2>
    650a:	2800      	cmp	r0, #0
    650c:	bf48      	it	mi
    650e:	f110 0f00 	cmnmi.w	r0, #0
    6512:	bd0f      	pop	{r0, r1, r2, r3, pc}

00006514 <__aeabi_fcmpeq>:
__aeabi_fcmpeq():
    6514:	f84d ed08 	str.w	lr, [sp, #-8]!
    6518:	f7ff fff4 	bl	6504 <__aeabi_cfcmpeq>
    651c:	bf0c      	ite	eq
    651e:	2001      	moveq	r0, #1
    6520:	2000      	movne	r0, #0
    6522:	f85d fb08 	ldr.w	pc, [sp], #8
    6526:	bf00      	nop

00006528 <__aeabi_fcmplt>:
__aeabi_fcmplt():
    6528:	f84d ed08 	str.w	lr, [sp, #-8]!
    652c:	f7ff ffea 	bl	6504 <__aeabi_cfcmpeq>
    6530:	bf34      	ite	cc
    6532:	2001      	movcc	r0, #1
    6534:	2000      	movcs	r0, #0
    6536:	f85d fb08 	ldr.w	pc, [sp], #8
    653a:	bf00      	nop

0000653c <__aeabi_fcmple>:
__aeabi_fcmple():
    653c:	f84d ed08 	str.w	lr, [sp, #-8]!
    6540:	f7ff ffe0 	bl	6504 <__aeabi_cfcmpeq>
    6544:	bf94      	ite	ls
    6546:	2001      	movls	r0, #1
    6548:	2000      	movhi	r0, #0
    654a:	f85d fb08 	ldr.w	pc, [sp], #8
    654e:	bf00      	nop

00006550 <__aeabi_fcmpge>:
__aeabi_fcmpge():
    6550:	f84d ed08 	str.w	lr, [sp, #-8]!
    6554:	f7ff ffd2 	bl	64fc <__aeabi_cfrcmple>
    6558:	bf94      	ite	ls
    655a:	2001      	movls	r0, #1
    655c:	2000      	movhi	r0, #0
    655e:	f85d fb08 	ldr.w	pc, [sp], #8
    6562:	bf00      	nop

00006564 <__aeabi_fcmpgt>:
__aeabi_fcmpgt():
    6564:	f84d ed08 	str.w	lr, [sp, #-8]!
    6568:	f7ff ffc8 	bl	64fc <__aeabi_cfrcmple>
    656c:	bf34      	ite	cc
    656e:	2001      	movcc	r0, #1
    6570:	2000      	movcs	r0, #0
    6572:	f85d fb08 	ldr.w	pc, [sp], #8
    6576:	bf00      	nop

00006578 <__aeabi_fcmpun>:
__aeabi_fcmpun():
    6578:	ea4f 0240 	mov.w	r2, r0, lsl #1
    657c:	ea4f 0341 	mov.w	r3, r1, lsl #1
    6580:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    6584:	d102      	bne.n	658c <__aeabi_fcmpun+0x14>
    6586:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    658a:	d108      	bne.n	659e <__aeabi_fcmpun+0x26>
    658c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    6590:	d102      	bne.n	6598 <__aeabi_fcmpun+0x20>
    6592:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    6596:	d102      	bne.n	659e <__aeabi_fcmpun+0x26>
    6598:	f04f 0000 	mov.w	r0, #0
    659c:	4770      	bx	lr
    659e:	f04f 0001 	mov.w	r0, #1
    65a2:	4770      	bx	lr

000065a4 <__aeabi_f2uiz>:
__aeabi_f2uiz():
    65a4:	0042      	lsls	r2, r0, #1
    65a6:	d20e      	bcs.n	65c6 <__aeabi_f2uiz+0x22>
    65a8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    65ac:	d30b      	bcc.n	65c6 <__aeabi_f2uiz+0x22>
    65ae:	f04f 039e 	mov.w	r3, #158	; 0x9e
    65b2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    65b6:	d409      	bmi.n	65cc <__aeabi_f2uiz+0x28>
    65b8:	ea4f 2300 	mov.w	r3, r0, lsl #8
    65bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    65c0:	fa23 f002 	lsr.w	r0, r3, r2
    65c4:	4770      	bx	lr
    65c6:	f04f 0000 	mov.w	r0, #0
    65ca:	4770      	bx	lr
    65cc:	f112 0f61 	cmn.w	r2, #97	; 0x61
    65d0:	d101      	bne.n	65d6 <__aeabi_f2uiz+0x32>
    65d2:	0242      	lsls	r2, r0, #9
    65d4:	d102      	bne.n	65dc <__aeabi_f2uiz+0x38>
    65d6:	f04f 30ff 	mov.w	r0, #4294967295
    65da:	4770      	bx	lr
    65dc:	f04f 0000 	mov.w	r0, #0
    65e0:	4770      	bx	lr
    65e2:	bf00      	nop

000065e4 <atol>:
atol():
    65e4:	2100      	movs	r1, #0
    65e6:	220a      	movs	r2, #10
    65e8:	f001 b89c 	b.w	7724 <strtol>

000065ec <fcvt>:
fcvt():
    65ec:	b513      	push	{r0, r1, r4, lr}
    65ee:	9c04      	ldr	r4, [sp, #16]
    65f0:	9400      	str	r4, [sp, #0]
    65f2:	2400      	movs	r4, #0
    65f4:	9401      	str	r4, [sp, #4]
    65f6:	f001 f90b 	bl	7810 <fcvtbuf>
    65fa:	b002      	add	sp, #8
    65fc:	bd10      	pop	{r4, pc}

000065fe <fcvtf>:
fcvtf():
    65fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6600:	4614      	mov	r4, r2
    6602:	461e      	mov	r6, r3
    6604:	460d      	mov	r5, r1
    6606:	f7ff f95d 	bl	58c4 <__aeabi_f2d>
    660a:	9600      	str	r6, [sp, #0]
    660c:	462a      	mov	r2, r5
    660e:	4623      	mov	r3, r4
    6610:	f7ff ffec 	bl	65ec <fcvt>
    6614:	b002      	add	sp, #8
    6616:	bd70      	pop	{r4, r5, r6, pc}

00006618 <__libc_init_array>:
__libc_init_array():
    6618:	b570      	push	{r4, r5, r6, lr}
    661a:	4b0e      	ldr	r3, [pc, #56]	; (6654 <__libc_init_array+0x3c>)
    661c:	4d0e      	ldr	r5, [pc, #56]	; (6658 <__libc_init_array+0x40>)
    661e:	1aed      	subs	r5, r5, r3
    6620:	10ad      	asrs	r5, r5, #2
    6622:	2400      	movs	r4, #0
    6624:	461e      	mov	r6, r3
    6626:	42ac      	cmp	r4, r5
    6628:	d004      	beq.n	6634 <__libc_init_array+0x1c>
    662a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
    662e:	4790      	blx	r2
    6630:	3401      	adds	r4, #1
    6632:	e7f8      	b.n	6626 <__libc_init_array+0xe>
    6634:	f004 f81a 	bl	a66c <_init>
    6638:	4d08      	ldr	r5, [pc, #32]	; (665c <__libc_init_array+0x44>)
    663a:	4b09      	ldr	r3, [pc, #36]	; (6660 <__libc_init_array+0x48>)
    663c:	1aed      	subs	r5, r5, r3
    663e:	10ad      	asrs	r5, r5, #2
    6640:	2400      	movs	r4, #0
    6642:	461e      	mov	r6, r3
    6644:	42ac      	cmp	r4, r5
    6646:	d004      	beq.n	6652 <__libc_init_array+0x3a>
    6648:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
    664c:	4790      	blx	r2
    664e:	3401      	adds	r4, #1
    6650:	e7f8      	b.n	6644 <__libc_init_array+0x2c>
    6652:	bd70      	pop	{r4, r5, r6, pc}
    6654:	0000a678 	.word	0x0000a678
    6658:	0000a678 	.word	0x0000a678
    665c:	0000a698 	.word	0x0000a698
    6660:	0000a678 	.word	0x0000a678

00006664 <isspace>:
isspace():
    6664:	4b03      	ldr	r3, [pc, #12]	; (6674 <isspace+0x10>)
    6666:	681b      	ldr	r3, [r3, #0]
    6668:	4418      	add	r0, r3
    666a:	7840      	ldrb	r0, [r0, #1]
    666c:	f000 0008 	and.w	r0, r0, #8
    6670:	4770      	bx	lr
    6672:	bf00      	nop
    6674:	1fff0b18 	.word	0x1fff0b18

00006678 <malloc>:
malloc():
    6678:	4b02      	ldr	r3, [pc, #8]	; (6684 <malloc+0xc>)
    667a:	4601      	mov	r1, r0
    667c:	6818      	ldr	r0, [r3, #0]
    667e:	f000 b87b 	b.w	6778 <_malloc_r>
    6682:	bf00      	nop
    6684:	1fff0b14 	.word	0x1fff0b14

00006688 <free>:
free():
    6688:	4b02      	ldr	r3, [pc, #8]	; (6694 <free+0xc>)
    668a:	4601      	mov	r1, r0
    668c:	6818      	ldr	r0, [r3, #0]
    668e:	f000 b82f 	b.w	66f0 <_free_r>
    6692:	bf00      	nop
    6694:	1fff0b14 	.word	0x1fff0b14

00006698 <memcpy>:
memcpy():
    6698:	b510      	push	{r4, lr}
    669a:	2300      	movs	r3, #0
    669c:	4293      	cmp	r3, r2
    669e:	d003      	beq.n	66a8 <memcpy+0x10>
    66a0:	5ccc      	ldrb	r4, [r1, r3]
    66a2:	54c4      	strb	r4, [r0, r3]
    66a4:	3301      	adds	r3, #1
    66a6:	e7f9      	b.n	669c <memcpy+0x4>
    66a8:	bd10      	pop	{r4, pc}

000066aa <memmove>:
memmove():
    66aa:	4281      	cmp	r1, r0
    66ac:	b570      	push	{r4, r5, r6, lr}
    66ae:	d301      	bcc.n	66b4 <memmove+0xa>
    66b0:	2300      	movs	r3, #0
    66b2:	e00e      	b.n	66d2 <memmove+0x28>
    66b4:	188c      	adds	r4, r1, r2
    66b6:	42a0      	cmp	r0, r4
    66b8:	d2fa      	bcs.n	66b0 <memmove+0x6>
    66ba:	1885      	adds	r5, r0, r2
    66bc:	4613      	mov	r3, r2
    66be:	f113 33ff 	adds.w	r3, r3, #4294967295
    66c2:	d305      	bcc.n	66d0 <memmove+0x26>
    66c4:	4251      	negs	r1, r2
    66c6:	1866      	adds	r6, r4, r1
    66c8:	4429      	add	r1, r5
    66ca:	5cf6      	ldrb	r6, [r6, r3]
    66cc:	54ce      	strb	r6, [r1, r3]
    66ce:	e7f6      	b.n	66be <memmove+0x14>
    66d0:	bd70      	pop	{r4, r5, r6, pc}
    66d2:	4293      	cmp	r3, r2
    66d4:	d003      	beq.n	66de <memmove+0x34>
    66d6:	5ccc      	ldrb	r4, [r1, r3]
    66d8:	54c4      	strb	r4, [r0, r3]
    66da:	3301      	adds	r3, #1
    66dc:	e7f9      	b.n	66d2 <memmove+0x28>
    66de:	bd70      	pop	{r4, r5, r6, pc}

000066e0 <memset>:
memset():
    66e0:	4402      	add	r2, r0
    66e2:	4603      	mov	r3, r0
    66e4:	4293      	cmp	r3, r2
    66e6:	d002      	beq.n	66ee <memset+0xe>
    66e8:	f803 1b01 	strb.w	r1, [r3], #1
    66ec:	e7fa      	b.n	66e4 <memset+0x4>
    66ee:	4770      	bx	lr

000066f0 <_free_r>:
_free_r():
    66f0:	b530      	push	{r4, r5, lr}
    66f2:	2900      	cmp	r1, #0
    66f4:	d03c      	beq.n	6770 <_free_r+0x80>
    66f6:	f851 2c04 	ldr.w	r2, [r1, #-4]
    66fa:	1f0b      	subs	r3, r1, #4
    66fc:	491d      	ldr	r1, [pc, #116]	; (6774 <_free_r+0x84>)
    66fe:	2a00      	cmp	r2, #0
    6700:	bfb8      	it	lt
    6702:	189b      	addlt	r3, r3, r2
    6704:	680a      	ldr	r2, [r1, #0]
    6706:	460c      	mov	r4, r1
    6708:	b912      	cbnz	r2, 6710 <_free_r+0x20>
    670a:	605a      	str	r2, [r3, #4]
    670c:	600b      	str	r3, [r1, #0]
    670e:	bd30      	pop	{r4, r5, pc}
    6710:	4293      	cmp	r3, r2
    6712:	d20d      	bcs.n	6730 <_free_r+0x40>
    6714:	6819      	ldr	r1, [r3, #0]
    6716:	1858      	adds	r0, r3, r1
    6718:	4290      	cmp	r0, r2
    671a:	d103      	bne.n	6724 <_free_r+0x34>
    671c:	585a      	ldr	r2, [r3, r1]
    671e:	4411      	add	r1, r2
    6720:	6842      	ldr	r2, [r0, #4]
    6722:	6019      	str	r1, [r3, #0]
    6724:	605a      	str	r2, [r3, #4]
    6726:	6023      	str	r3, [r4, #0]
    6728:	bd30      	pop	{r4, r5, pc}
    672a:	4299      	cmp	r1, r3
    672c:	d803      	bhi.n	6736 <_free_r+0x46>
    672e:	460a      	mov	r2, r1
    6730:	6851      	ldr	r1, [r2, #4]
    6732:	2900      	cmp	r1, #0
    6734:	d1f9      	bne.n	672a <_free_r+0x3a>
    6736:	6814      	ldr	r4, [r2, #0]
    6738:	1915      	adds	r5, r2, r4
    673a:	429d      	cmp	r5, r3
    673c:	d10a      	bne.n	6754 <_free_r+0x64>
    673e:	681b      	ldr	r3, [r3, #0]
    6740:	4423      	add	r3, r4
    6742:	18d0      	adds	r0, r2, r3
    6744:	4288      	cmp	r0, r1
    6746:	6013      	str	r3, [r2, #0]
    6748:	d112      	bne.n	6770 <_free_r+0x80>
    674a:	6808      	ldr	r0, [r1, #0]
    674c:	4403      	add	r3, r0
    674e:	6013      	str	r3, [r2, #0]
    6750:	684b      	ldr	r3, [r1, #4]
    6752:	e00c      	b.n	676e <_free_r+0x7e>
    6754:	d902      	bls.n	675c <_free_r+0x6c>
    6756:	230c      	movs	r3, #12
    6758:	6003      	str	r3, [r0, #0]
    675a:	bd30      	pop	{r4, r5, pc}
    675c:	6818      	ldr	r0, [r3, #0]
    675e:	181c      	adds	r4, r3, r0
    6760:	428c      	cmp	r4, r1
    6762:	d103      	bne.n	676c <_free_r+0x7c>
    6764:	680c      	ldr	r4, [r1, #0]
    6766:	6849      	ldr	r1, [r1, #4]
    6768:	4420      	add	r0, r4
    676a:	6018      	str	r0, [r3, #0]
    676c:	6059      	str	r1, [r3, #4]
    676e:	6053      	str	r3, [r2, #4]
    6770:	bd30      	pop	{r4, r5, pc}
    6772:	bf00      	nop
    6774:	1fff0fd8 	.word	0x1fff0fd8

00006778 <_malloc_r>:
_malloc_r():
    6778:	b570      	push	{r4, r5, r6, lr}
    677a:	1ccd      	adds	r5, r1, #3
    677c:	f025 0503 	bic.w	r5, r5, #3
    6780:	3508      	adds	r5, #8
    6782:	2d0c      	cmp	r5, #12
    6784:	bf38      	it	cc
    6786:	250c      	movcc	r5, #12
    6788:	2d00      	cmp	r5, #0
    678a:	4606      	mov	r6, r0
    678c:	db3f      	blt.n	680e <_malloc_r+0x96>
    678e:	428d      	cmp	r5, r1
    6790:	d33d      	bcc.n	680e <_malloc_r+0x96>
    6792:	4b21      	ldr	r3, [pc, #132]	; (6818 <_malloc_r+0xa0>)
    6794:	681c      	ldr	r4, [r3, #0]
    6796:	4618      	mov	r0, r3
    6798:	4621      	mov	r1, r4
    679a:	b1a1      	cbz	r1, 67c6 <_malloc_r+0x4e>
    679c:	680b      	ldr	r3, [r1, #0]
    679e:	1b5b      	subs	r3, r3, r5
    67a0:	d40e      	bmi.n	67c0 <_malloc_r+0x48>
    67a2:	2b0b      	cmp	r3, #11
    67a4:	d903      	bls.n	67ae <_malloc_r+0x36>
    67a6:	600b      	str	r3, [r1, #0]
    67a8:	18cc      	adds	r4, r1, r3
    67aa:	50cd      	str	r5, [r1, r3]
    67ac:	e01f      	b.n	67ee <_malloc_r+0x76>
    67ae:	428c      	cmp	r4, r1
    67b0:	d102      	bne.n	67b8 <_malloc_r+0x40>
    67b2:	6862      	ldr	r2, [r4, #4]
    67b4:	6002      	str	r2, [r0, #0]
    67b6:	e01a      	b.n	67ee <_malloc_r+0x76>
    67b8:	684b      	ldr	r3, [r1, #4]
    67ba:	6063      	str	r3, [r4, #4]
    67bc:	460c      	mov	r4, r1
    67be:	e016      	b.n	67ee <_malloc_r+0x76>
    67c0:	460c      	mov	r4, r1
    67c2:	6849      	ldr	r1, [r1, #4]
    67c4:	e7e9      	b.n	679a <_malloc_r+0x22>
    67c6:	4c15      	ldr	r4, [pc, #84]	; (681c <_malloc_r+0xa4>)
    67c8:	6823      	ldr	r3, [r4, #0]
    67ca:	b91b      	cbnz	r3, 67d4 <_malloc_r+0x5c>
    67cc:	4630      	mov	r0, r6
    67ce:	f000 f831 	bl	6834 <_sbrk_r>
    67d2:	6020      	str	r0, [r4, #0]
    67d4:	4629      	mov	r1, r5
    67d6:	4630      	mov	r0, r6
    67d8:	f000 f82c 	bl	6834 <_sbrk_r>
    67dc:	1c43      	adds	r3, r0, #1
    67de:	4601      	mov	r1, r0
    67e0:	d015      	beq.n	680e <_malloc_r+0x96>
    67e2:	1cc4      	adds	r4, r0, #3
    67e4:	f024 0403 	bic.w	r4, r4, #3
    67e8:	4284      	cmp	r4, r0
    67ea:	d10a      	bne.n	6802 <_malloc_r+0x8a>
    67ec:	6025      	str	r5, [r4, #0]
    67ee:	f104 000b 	add.w	r0, r4, #11
    67f2:	1d23      	adds	r3, r4, #4
    67f4:	f020 0007 	bic.w	r0, r0, #7
    67f8:	1ac3      	subs	r3, r0, r3
    67fa:	d00b      	beq.n	6814 <_malloc_r+0x9c>
    67fc:	425a      	negs	r2, r3
    67fe:	50e2      	str	r2, [r4, r3]
    6800:	bd70      	pop	{r4, r5, r6, pc}
    6802:	4630      	mov	r0, r6
    6804:	1a61      	subs	r1, r4, r1
    6806:	f000 f815 	bl	6834 <_sbrk_r>
    680a:	3001      	adds	r0, #1
    680c:	d1ee      	bne.n	67ec <_malloc_r+0x74>
    680e:	230c      	movs	r3, #12
    6810:	6033      	str	r3, [r6, #0]
    6812:	2000      	movs	r0, #0
    6814:	bd70      	pop	{r4, r5, r6, pc}
    6816:	bf00      	nop
    6818:	1fff0fd8 	.word	0x1fff0fd8
    681c:	1fff0fd4 	.word	0x1fff0fd4

00006820 <realloc>:
realloc():
    6820:	460a      	mov	r2, r1
    6822:	4903      	ldr	r1, [pc, #12]	; (6830 <realloc+0x10>)
    6824:	4603      	mov	r3, r0
    6826:	6808      	ldr	r0, [r1, #0]
    6828:	4619      	mov	r1, r3
    682a:	f002 b83c 	b.w	88a6 <_realloc_r>
    682e:	bf00      	nop
    6830:	1fff0b14 	.word	0x1fff0b14

00006834 <_sbrk_r>:
_sbrk_r():
    6834:	b538      	push	{r3, r4, r5, lr}
    6836:	4c06      	ldr	r4, [pc, #24]	; (6850 <_sbrk_r+0x1c>)
    6838:	2300      	movs	r3, #0
    683a:	4605      	mov	r5, r0
    683c:	4608      	mov	r0, r1
    683e:	6023      	str	r3, [r4, #0]
    6840:	f7fa f807 	bl	852 <_sbrk>
    6844:	1c43      	adds	r3, r0, #1
    6846:	d102      	bne.n	684e <_sbrk_r+0x1a>
    6848:	6823      	ldr	r3, [r4, #0]
    684a:	b103      	cbz	r3, 684e <_sbrk_r+0x1a>
    684c:	602b      	str	r3, [r5, #0]
    684e:	bd38      	pop	{r3, r4, r5, pc}
    6850:	1fff10f0 	.word	0x1fff10f0

00006854 <strchr>:
strchr():
    6854:	b2c9      	uxtb	r1, r1
    6856:	4602      	mov	r2, r0
    6858:	f810 3b01 	ldrb.w	r3, [r0], #1
    685c:	b11b      	cbz	r3, 6866 <strchr+0x12>
    685e:	428b      	cmp	r3, r1
    6860:	d1f9      	bne.n	6856 <strchr+0x2>
    6862:	4610      	mov	r0, r2
    6864:	4770      	bx	lr
    6866:	2900      	cmp	r1, #0
    6868:	d0fb      	beq.n	6862 <strchr+0xe>
    686a:	4618      	mov	r0, r3
    686c:	4770      	bx	lr

0000686e <strcmp>:
$t():
    686e:	f810 2b01 	ldrb.w	r2, [r0], #1
    6872:	f811 3b01 	ldrb.w	r3, [r1], #1
    6876:	2a01      	cmp	r2, #1
    6878:	bf28      	it	cs
    687a:	429a      	cmpcs	r2, r3
    687c:	d0f7      	beq.n	686e <strcmp>
    687e:	1ad0      	subs	r0, r2, r3
    6880:	4770      	bx	lr

00006882 <strcpy>:
strcpy():
    6882:	4603      	mov	r3, r0
    6884:	f811 2b01 	ldrb.w	r2, [r1], #1
    6888:	f803 2b01 	strb.w	r2, [r3], #1
    688c:	2a00      	cmp	r2, #0
    688e:	d1f9      	bne.n	6884 <strcpy+0x2>
    6890:	4770      	bx	lr

00006892 <strlen>:
strlen():
    6892:	4603      	mov	r3, r0
    6894:	f813 2b01 	ldrb.w	r2, [r3], #1
    6898:	2a00      	cmp	r2, #0
    689a:	d1fb      	bne.n	6894 <strlen+0x2>
    689c:	1a18      	subs	r0, r3, r0
    689e:	3801      	subs	r0, #1
    68a0:	4770      	bx	lr

000068a2 <strncmp>:
strncmp():
    68a2:	b570      	push	{r4, r5, r6, lr}
    68a4:	b192      	cbz	r2, 68cc <strncmp+0x2a>
    68a6:	460b      	mov	r3, r1
    68a8:	4605      	mov	r5, r0
    68aa:	781c      	ldrb	r4, [r3, #0]
    68ac:	f810 6b01 	ldrb.w	r6, [r0], #1
    68b0:	42b4      	cmp	r4, r6
    68b2:	f101 0101 	add.w	r1, r1, #1
    68b6:	d101      	bne.n	68bc <strncmp+0x1a>
    68b8:	2a01      	cmp	r2, #1
    68ba:	d103      	bne.n	68c4 <strncmp+0x22>
    68bc:	7828      	ldrb	r0, [r5, #0]
    68be:	781b      	ldrb	r3, [r3, #0]
    68c0:	1ac0      	subs	r0, r0, r3
    68c2:	bd70      	pop	{r4, r5, r6, pc}
    68c4:	3a01      	subs	r2, #1
    68c6:	2c00      	cmp	r4, #0
    68c8:	d1ed      	bne.n	68a6 <strncmp+0x4>
    68ca:	e7f7      	b.n	68bc <strncmp+0x1a>
    68cc:	4610      	mov	r0, r2
    68ce:	bd70      	pop	{r4, r5, r6, pc}

000068d0 <strncpy>:
strncpy():
    68d0:	b510      	push	{r4, lr}
    68d2:	4603      	mov	r3, r0
    68d4:	b132      	cbz	r2, 68e4 <strncpy+0x14>
    68d6:	f811 4b01 	ldrb.w	r4, [r1], #1
    68da:	f803 4b01 	strb.w	r4, [r3], #1
    68de:	3a01      	subs	r2, #1
    68e0:	2c00      	cmp	r4, #0
    68e2:	d1f7      	bne.n	68d4 <strncpy+0x4>
    68e4:	441a      	add	r2, r3
    68e6:	4293      	cmp	r3, r2
    68e8:	d003      	beq.n	68f2 <strncpy+0x22>
    68ea:	2100      	movs	r1, #0
    68ec:	f803 1b01 	strb.w	r1, [r3], #1
    68f0:	e7f9      	b.n	68e6 <strncpy+0x16>
    68f2:	bd10      	pop	{r4, pc}

000068f4 <strrchr>:
strrchr():
    68f4:	b538      	push	{r3, r4, r5, lr}
    68f6:	4602      	mov	r2, r0
    68f8:	460d      	mov	r5, r1
    68fa:	b141      	cbz	r1, 690e <strrchr+0x1a>
    68fc:	2400      	movs	r4, #0
    68fe:	4610      	mov	r0, r2
    6900:	4629      	mov	r1, r5
    6902:	f7ff ffa7 	bl	6854 <strchr>
    6906:	b130      	cbz	r0, 6916 <strrchr+0x22>
    6908:	1c42      	adds	r2, r0, #1
    690a:	4604      	mov	r4, r0
    690c:	e7f7      	b.n	68fe <strrchr+0xa>
    690e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6912:	f7ff bf9f 	b.w	6854 <strchr>
    6916:	4620      	mov	r0, r4
    6918:	bd38      	pop	{r3, r4, r5, pc}

0000691a <strstr>:
strstr():
    691a:	b530      	push	{r4, r5, lr}
    691c:	7803      	ldrb	r3, [r0, #0]
    691e:	b10b      	cbz	r3, 6924 <strstr+0xa>
    6920:	4604      	mov	r4, r0
    6922:	e004      	b.n	692e <strstr+0x14>
    6924:	780b      	ldrb	r3, [r1, #0]
    6926:	2b00      	cmp	r3, #0
    6928:	bf18      	it	ne
    692a:	2000      	movne	r0, #0
    692c:	bd30      	pop	{r4, r5, pc}
    692e:	4622      	mov	r2, r4
    6930:	3401      	adds	r4, #1
    6932:	7810      	ldrb	r0, [r2, #0]
    6934:	b138      	cbz	r0, 6946 <strstr+0x2c>
    6936:	2300      	movs	r3, #0
    6938:	5cc8      	ldrb	r0, [r1, r3]
    693a:	b128      	cbz	r0, 6948 <strstr+0x2e>
    693c:	5cd5      	ldrb	r5, [r2, r3]
    693e:	4285      	cmp	r5, r0
    6940:	d1f5      	bne.n	692e <strstr+0x14>
    6942:	3301      	adds	r3, #1
    6944:	e7f8      	b.n	6938 <strstr+0x1e>
    6946:	bd30      	pop	{r4, r5, pc}
    6948:	4610      	mov	r0, r2
    694a:	bd30      	pop	{r4, r5, pc}

0000694c <match>:
match():
    694c:	b530      	push	{r4, r5, lr}
    694e:	6802      	ldr	r2, [r0, #0]
    6950:	f811 5b01 	ldrb.w	r5, [r1], #1
    6954:	1c54      	adds	r4, r2, #1
    6956:	b155      	cbz	r5, 696e <match+0x22>
    6958:	7853      	ldrb	r3, [r2, #1]
    695a:	4622      	mov	r2, r4
    695c:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
    6960:	2c19      	cmp	r4, #25
    6962:	bf98      	it	ls
    6964:	3320      	addls	r3, #32
    6966:	42ab      	cmp	r3, r5
    6968:	d0f2      	beq.n	6950 <match+0x4>
    696a:	2000      	movs	r0, #0
    696c:	bd30      	pop	{r4, r5, pc}
    696e:	6004      	str	r4, [r0, #0]
    6970:	2001      	movs	r0, #1
    6972:	bd30      	pop	{r4, r5, pc}

00006974 <sulp>:
sulp():
    6974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6978:	460d      	mov	r5, r1
    697a:	4690      	mov	r8, r2
    697c:	f001 fe5c 	bl	8638 <__ulp>
    6980:	4606      	mov	r6, r0
    6982:	460f      	mov	r7, r1
    6984:	f1b8 0f00 	cmp.w	r8, #0
    6988:	d00f      	beq.n	69aa <sulp+0x36>
    698a:	f3c5 530a 	ubfx	r3, r5, #20, #11
    698e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    6992:	2b00      	cmp	r3, #0
    6994:	dd09      	ble.n	69aa <sulp+0x36>
    6996:	051c      	lsls	r4, r3, #20
    6998:	f104 537f 	add.w	r3, r4, #1069547520	; 0x3fc00000
    699c:	f503 1340 	add.w	r3, r3, #3145728	; 0x300000
    69a0:	2200      	movs	r2, #0
    69a2:	f7fe ffe3 	bl	596c <__aeabi_dmul>
    69a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    69aa:	4630      	mov	r0, r6
    69ac:	4639      	mov	r1, r7
    69ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    69b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    69b6:	ffff e92d 	vtbl.8	d30, {d15-d16}, d29

000069b8 <_strtod_r>:
_strtod_r():
    69b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    69bc:	b09f      	sub	sp, #124	; 0x7c
    69be:	2300      	movs	r3, #0
    69c0:	4681      	mov	r9, r0
    69c2:	9104      	str	r1, [sp, #16]
    69c4:	9215      	str	r2, [sp, #84]	; 0x54
    69c6:	931a      	str	r3, [sp, #104]	; 0x68
    69c8:	f04f 0a00 	mov.w	sl, #0
    69cc:	f04f 0b00 	mov.w	fp, #0
    69d0:	9119      	str	r1, [sp, #100]	; 0x64
    69d2:	9a19      	ldr	r2, [sp, #100]	; 0x64
    69d4:	7813      	ldrb	r3, [r2, #0]
    69d6:	2b0d      	cmp	r3, #13
    69d8:	d805      	bhi.n	69e6 <_strtod_r+0x2e>
    69da:	2b09      	cmp	r3, #9
    69dc:	d214      	bcs.n	6a08 <_strtod_r+0x50>
    69de:	2b00      	cmp	r3, #0
    69e0:	f000 81b1 	beq.w	6d46 <_strtod_r+0x38e>
    69e4:	e013      	b.n	6a0e <_strtod_r+0x56>
    69e6:	2b2b      	cmp	r3, #43	; 0x2b
    69e8:	d007      	beq.n	69fa <_strtod_r+0x42>
    69ea:	2b2d      	cmp	r3, #45	; 0x2d
    69ec:	d002      	beq.n	69f4 <_strtod_r+0x3c>
    69ee:	2b20      	cmp	r3, #32
    69f0:	d10d      	bne.n	6a0e <_strtod_r+0x56>
    69f2:	e009      	b.n	6a08 <_strtod_r+0x50>
    69f4:	2601      	movs	r6, #1
    69f6:	9609      	str	r6, [sp, #36]	; 0x24
    69f8:	e001      	b.n	69fe <_strtod_r+0x46>
    69fa:	2700      	movs	r7, #0
    69fc:	9709      	str	r7, [sp, #36]	; 0x24
    69fe:	1c53      	adds	r3, r2, #1
    6a00:	9319      	str	r3, [sp, #100]	; 0x64
    6a02:	7853      	ldrb	r3, [r2, #1]
    6a04:	b92b      	cbnz	r3, 6a12 <_strtod_r+0x5a>
    6a06:	e19e      	b.n	6d46 <_strtod_r+0x38e>
    6a08:	3201      	adds	r2, #1
    6a0a:	9219      	str	r2, [sp, #100]	; 0x64
    6a0c:	e7e1      	b.n	69d2 <_strtod_r+0x1a>
    6a0e:	2600      	movs	r6, #0
    6a10:	9609      	str	r6, [sp, #36]	; 0x24
    6a12:	9c19      	ldr	r4, [sp, #100]	; 0x64
    6a14:	7823      	ldrb	r3, [r4, #0]
    6a16:	2b30      	cmp	r3, #48	; 0x30
    6a18:	d15a      	bne.n	6ad0 <_strtod_r+0x118>
    6a1a:	7863      	ldrb	r3, [r4, #1]
    6a1c:	2b58      	cmp	r3, #88	; 0x58
    6a1e:	d001      	beq.n	6a24 <_strtod_r+0x6c>
    6a20:	2b78      	cmp	r3, #120	; 0x78
    6a22:	d149      	bne.n	6ab8 <_strtod_r+0x100>
    6a24:	ab1a      	add	r3, sp, #104	; 0x68
    6a26:	9f09      	ldr	r7, [sp, #36]	; 0x24
    6a28:	9300      	str	r3, [sp, #0]
    6a2a:	9701      	str	r7, [sp, #4]
    6a2c:	4648      	mov	r0, r9
    6a2e:	a919      	add	r1, sp, #100	; 0x64
    6a30:	4a9c      	ldr	r2, [pc, #624]	; (6ca4 <_strtod_r+0x2ec>)
    6a32:	ab1b      	add	r3, sp, #108	; 0x6c
    6a34:	f001 f858 	bl	7ae8 <__gethex>
    6a38:	f010 0607 	ands.w	r6, r0, #7
    6a3c:	4605      	mov	r5, r0
    6a3e:	f000 85ad 	beq.w	759c <_strtod_r+0xbe4>
    6a42:	2e06      	cmp	r6, #6
    6a44:	d102      	bne.n	6a4c <_strtod_r+0x94>
    6a46:	3401      	adds	r4, #1
    6a48:	9419      	str	r4, [sp, #100]	; 0x64
    6a4a:	e17e      	b.n	6d4a <_strtod_r+0x392>
    6a4c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    6a4e:	b13a      	cbz	r2, 6a60 <_strtod_r+0xa8>
    6a50:	a81c      	add	r0, sp, #112	; 0x70
    6a52:	2135      	movs	r1, #53	; 0x35
    6a54:	f001 fedc 	bl	8810 <__copybits>
    6a58:	4648      	mov	r0, r9
    6a5a:	991a      	ldr	r1, [sp, #104]	; 0x68
    6a5c:	f001 fb4f 	bl	80fe <_Bfree>
    6a60:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    6a62:	2e06      	cmp	r6, #6
    6a64:	d821      	bhi.n	6aaa <_strtod_r+0xf2>
    6a66:	e8df f006 	tbb	[pc, r6]
    6a6a:	0d04      	.short	0x0d04
    6a6c:	0d1c1708 	.word	0x0d1c1708
    6a70:	04          	.byte	0x04
    6a71:	00          	.byte	0x00
    6a72:	f04f 0b00 	mov.w	fp, #0
    6a76:	46da      	mov	sl, fp
    6a78:	e017      	b.n	6aaa <_strtod_r+0xf2>
    6a7a:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
    6a7e:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
    6a82:	e012      	b.n	6aaa <_strtod_r+0xf2>
    6a84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    6a86:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
    6a8a:	f202 4233 	addw	r2, r2, #1075	; 0x433
    6a8e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    6a92:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
    6a96:	e008      	b.n	6aaa <_strtod_r+0xf2>
    6a98:	f8df b20c 	ldr.w	fp, [pc, #524]	; 6ca8 <_strtod_r+0x2f0>
    6a9c:	f04f 0a00 	mov.w	sl, #0
    6aa0:	e003      	b.n	6aaa <_strtod_r+0xf2>
    6aa2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
    6aa6:	f04f 3aff 	mov.w	sl, #4294967295
    6aaa:	072b      	lsls	r3, r5, #28
    6aac:	f140 8576 	bpl.w	759c <_strtod_r+0xbe4>
    6ab0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
    6ab4:	f000 bd72 	b.w	759c <_strtod_r+0xbe4>
    6ab8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    6aba:	1c5a      	adds	r2, r3, #1
    6abc:	9219      	str	r2, [sp, #100]	; 0x64
    6abe:	785b      	ldrb	r3, [r3, #1]
    6ac0:	2b30      	cmp	r3, #48	; 0x30
    6ac2:	d0f9      	beq.n	6ab8 <_strtod_r+0x100>
    6ac4:	2b00      	cmp	r3, #0
    6ac6:	f000 8569 	beq.w	759c <_strtod_r+0xbe4>
    6aca:	2301      	movs	r3, #1
    6acc:	9305      	str	r3, [sp, #20]
    6ace:	e001      	b.n	6ad4 <_strtod_r+0x11c>
    6ad0:	2600      	movs	r6, #0
    6ad2:	9605      	str	r6, [sp, #20]
    6ad4:	f04f 0800 	mov.w	r8, #0
    6ad8:	9f19      	ldr	r7, [sp, #100]	; 0x64
    6ada:	9707      	str	r7, [sp, #28]
    6adc:	f8cd 800c 	str.w	r8, [sp, #12]
    6ae0:	4644      	mov	r4, r8
    6ae2:	9e19      	ldr	r6, [sp, #100]	; 0x64
    6ae4:	7835      	ldrb	r5, [r6, #0]
    6ae6:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
    6aea:	b2da      	uxtb	r2, r3
    6aec:	2a09      	cmp	r2, #9
    6aee:	d810      	bhi.n	6b12 <_strtod_r+0x15a>
    6af0:	2c08      	cmp	r4, #8
    6af2:	bfd8      	it	le
    6af4:	9f03      	ldrle	r7, [sp, #12]
    6af6:	f04f 020a 	mov.w	r2, #10
    6afa:	bfd8      	it	le
    6afc:	fb02 3707 	mlale	r7, r2, r7, r3
    6b00:	f106 0601 	add.w	r6, r6, #1
    6b04:	bfd4      	ite	le
    6b06:	9703      	strle	r7, [sp, #12]
    6b08:	fb02 3808 	mlagt	r8, r2, r8, r3
    6b0c:	3401      	adds	r4, #1
    6b0e:	9619      	str	r6, [sp, #100]	; 0x64
    6b10:	e7e7      	b.n	6ae2 <_strtod_r+0x12a>
    6b12:	4648      	mov	r0, r9
    6b14:	f001 faba 	bl	808c <_localeconv_r>
    6b18:	6807      	ldr	r7, [r0, #0]
    6b1a:	4648      	mov	r0, r9
    6b1c:	f001 fab6 	bl	808c <_localeconv_r>
    6b20:	6800      	ldr	r0, [r0, #0]
    6b22:	f7ff feb6 	bl	6892 <strlen>
    6b26:	4639      	mov	r1, r7
    6b28:	4602      	mov	r2, r0
    6b2a:	4630      	mov	r0, r6
    6b2c:	f7ff feb9 	bl	68a2 <strncmp>
    6b30:	4606      	mov	r6, r0
    6b32:	b128      	cbz	r0, 6b40 <_strtod_r+0x188>
    6b34:	2300      	movs	r3, #0
    6b36:	462a      	mov	r2, r5
    6b38:	4619      	mov	r1, r3
    6b3a:	4625      	mov	r5, r4
    6b3c:	930a      	str	r3, [sp, #40]	; 0x28
    6b3e:	e05f      	b.n	6c00 <_strtod_r+0x248>
    6b40:	4648      	mov	r0, r9
    6b42:	9d19      	ldr	r5, [sp, #100]	; 0x64
    6b44:	f001 faa2 	bl	808c <_localeconv_r>
    6b48:	6800      	ldr	r0, [r0, #0]
    6b4a:	f7ff fea2 	bl	6892 <strlen>
    6b4e:	182b      	adds	r3, r5, r0
    6b50:	9319      	str	r3, [sp, #100]	; 0x64
    6b52:	5c2a      	ldrb	r2, [r5, r0]
    6b54:	2c00      	cmp	r4, #0
    6b56:	d145      	bne.n	6be4 <_strtod_r+0x22c>
    6b58:	4623      	mov	r3, r4
    6b5a:	2a30      	cmp	r2, #48	; 0x30
    6b5c:	d105      	bne.n	6b6a <_strtod_r+0x1b2>
    6b5e:	9a19      	ldr	r2, [sp, #100]	; 0x64
    6b60:	1c51      	adds	r1, r2, #1
    6b62:	9119      	str	r1, [sp, #100]	; 0x64
    6b64:	3301      	adds	r3, #1
    6b66:	7852      	ldrb	r2, [r2, #1]
    6b68:	e7f7      	b.n	6b5a <_strtod_r+0x1a2>
    6b6a:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
    6b6e:	2908      	cmp	r1, #8
    6b70:	d842      	bhi.n	6bf8 <_strtod_r+0x240>
    6b72:	9e19      	ldr	r6, [sp, #100]	; 0x64
    6b74:	9607      	str	r6, [sp, #28]
    6b76:	4619      	mov	r1, r3
    6b78:	2300      	movs	r3, #0
    6b7a:	461d      	mov	r5, r3
    6b7c:	3a30      	subs	r2, #48	; 0x30
    6b7e:	f103 0001 	add.w	r0, r3, #1
    6b82:	d029      	beq.n	6bd8 <_strtod_r+0x220>
    6b84:	4401      	add	r1, r0
    6b86:	1c6e      	adds	r6, r5, #1
    6b88:	1b77      	subs	r7, r6, r5
    6b8a:	4287      	cmp	r7, r0
    6b8c:	da10      	bge.n	6bb0 <_strtod_r+0x1f8>
    6b8e:	1e77      	subs	r7, r6, #1
    6b90:	2f08      	cmp	r7, #8
    6b92:	dc06      	bgt.n	6ba2 <_strtod_r+0x1ea>
    6b94:	9f03      	ldr	r7, [sp, #12]
    6b96:	f04f 0c0a 	mov.w	ip, #10
    6b9a:	fb0c f707 	mul.w	r7, ip, r7
    6b9e:	9703      	str	r7, [sp, #12]
    6ba0:	e004      	b.n	6bac <_strtod_r+0x1f4>
    6ba2:	2e10      	cmp	r6, #16
    6ba4:	bfdc      	itt	le
    6ba6:	270a      	movle	r7, #10
    6ba8:	fb07 f808 	mulle.w	r8, r7, r8
    6bac:	3601      	adds	r6, #1
    6bae:	e7eb      	b.n	6b88 <_strtod_r+0x1d0>
    6bb0:	2b00      	cmp	r3, #0
    6bb2:	bfac      	ite	ge
    6bb4:	18eb      	addge	r3, r5, r3
    6bb6:	1c2b      	addlt	r3, r5, #0
    6bb8:	2b08      	cmp	r3, #8
    6bba:	f103 0501 	add.w	r5, r3, #1
    6bbe:	dc05      	bgt.n	6bcc <_strtod_r+0x214>
    6bc0:	9e03      	ldr	r6, [sp, #12]
    6bc2:	230a      	movs	r3, #10
    6bc4:	fb03 2606 	mla	r6, r3, r6, r2
    6bc8:	9603      	str	r6, [sp, #12]
    6bca:	e004      	b.n	6bd6 <_strtod_r+0x21e>
    6bcc:	2d10      	cmp	r5, #16
    6bce:	bfdc      	itt	le
    6bd0:	230a      	movle	r3, #10
    6bd2:	fb03 2808 	mlale	r8, r3, r8, r2
    6bd6:	2000      	movs	r0, #0
    6bd8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    6bda:	1c5a      	adds	r2, r3, #1
    6bdc:	9219      	str	r2, [sp, #100]	; 0x64
    6bde:	785a      	ldrb	r2, [r3, #1]
    6be0:	4603      	mov	r3, r0
    6be2:	e002      	b.n	6bea <_strtod_r+0x232>
    6be4:	4625      	mov	r5, r4
    6be6:	4633      	mov	r3, r6
    6be8:	4631      	mov	r1, r6
    6bea:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
    6bee:	2809      	cmp	r0, #9
    6bf0:	d9c4      	bls.n	6b7c <_strtod_r+0x1c4>
    6bf2:	2701      	movs	r7, #1
    6bf4:	970a      	str	r7, [sp, #40]	; 0x28
    6bf6:	e003      	b.n	6c00 <_strtod_r+0x248>
    6bf8:	2500      	movs	r5, #0
    6bfa:	2001      	movs	r0, #1
    6bfc:	4629      	mov	r1, r5
    6bfe:	900a      	str	r0, [sp, #40]	; 0x28
    6c00:	f022 0620 	bic.w	r6, r2, #32
    6c04:	2e45      	cmp	r6, #69	; 0x45
    6c06:	d153      	bne.n	6cb0 <_strtod_r+0x2f8>
    6c08:	b925      	cbnz	r5, 6c14 <_strtod_r+0x25c>
    6c0a:	b91b      	cbnz	r3, 6c14 <_strtod_r+0x25c>
    6c0c:	9e05      	ldr	r6, [sp, #20]
    6c0e:	2e00      	cmp	r6, #0
    6c10:	f000 8099 	beq.w	6d46 <_strtod_r+0x38e>
    6c14:	9f19      	ldr	r7, [sp, #100]	; 0x64
    6c16:	9704      	str	r7, [sp, #16]
    6c18:	1c7a      	adds	r2, r7, #1
    6c1a:	9219      	str	r2, [sp, #100]	; 0x64
    6c1c:	787a      	ldrb	r2, [r7, #1]
    6c1e:	2a2b      	cmp	r2, #43	; 0x2b
    6c20:	d004      	beq.n	6c2c <_strtod_r+0x274>
    6c22:	2a2d      	cmp	r2, #45	; 0x2d
    6c24:	d005      	beq.n	6c32 <_strtod_r+0x27a>
    6c26:	2600      	movs	r6, #0
    6c28:	960f      	str	r6, [sp, #60]	; 0x3c
    6c2a:	e008      	b.n	6c3e <_strtod_r+0x286>
    6c2c:	2000      	movs	r0, #0
    6c2e:	900f      	str	r0, [sp, #60]	; 0x3c
    6c30:	e001      	b.n	6c36 <_strtod_r+0x27e>
    6c32:	2701      	movs	r7, #1
    6c34:	970f      	str	r7, [sp, #60]	; 0x3c
    6c36:	9e04      	ldr	r6, [sp, #16]
    6c38:	1cb2      	adds	r2, r6, #2
    6c3a:	9219      	str	r2, [sp, #100]	; 0x64
    6c3c:	78b2      	ldrb	r2, [r6, #2]
    6c3e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
    6c42:	2f09      	cmp	r7, #9
    6c44:	d832      	bhi.n	6cac <_strtod_r+0x2f4>
    6c46:	2a30      	cmp	r2, #48	; 0x30
    6c48:	d104      	bne.n	6c54 <_strtod_r+0x29c>
    6c4a:	9a19      	ldr	r2, [sp, #100]	; 0x64
    6c4c:	1c57      	adds	r7, r2, #1
    6c4e:	9719      	str	r7, [sp, #100]	; 0x64
    6c50:	7852      	ldrb	r2, [r2, #1]
    6c52:	e7f8      	b.n	6c46 <_strtod_r+0x28e>
    6c54:	f1a2 0731 	sub.w	r7, r2, #49	; 0x31
    6c58:	2f08      	cmp	r7, #8
    6c5a:	d829      	bhi.n	6cb0 <_strtod_r+0x2f8>
    6c5c:	9819      	ldr	r0, [sp, #100]	; 0x64
    6c5e:	9006      	str	r0, [sp, #24]
    6c60:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
    6c64:	9a19      	ldr	r2, [sp, #100]	; 0x64
    6c66:	1c56      	adds	r6, r2, #1
    6c68:	9619      	str	r6, [sp, #100]	; 0x64
    6c6a:	7852      	ldrb	r2, [r2, #1]
    6c6c:	960e      	str	r6, [sp, #56]	; 0x38
    6c6e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
    6c72:	2e09      	cmp	r6, #9
    6c74:	d805      	bhi.n	6c82 <_strtod_r+0x2ca>
    6c76:	f04f 0c0a 	mov.w	ip, #10
    6c7a:	fb0c 2707 	mla	r7, ip, r7, r2
    6c7e:	3f30      	subs	r7, #48	; 0x30
    6c80:	e7f0      	b.n	6c64 <_strtod_r+0x2ac>
    6c82:	980e      	ldr	r0, [sp, #56]	; 0x38
    6c84:	9e06      	ldr	r6, [sp, #24]
    6c86:	ebc6 0c00 	rsb	ip, r6, r0
    6c8a:	f1bc 0f08 	cmp.w	ip, #8
    6c8e:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
    6c92:	dc02      	bgt.n	6c9a <_strtod_r+0x2e2>
    6c94:	4567      	cmp	r7, ip
    6c96:	bfb8      	it	lt
    6c98:	46bc      	movlt	ip, r7
    6c9a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    6c9c:	b157      	cbz	r7, 6cb4 <_strtod_r+0x2fc>
    6c9e:	f1cc 0c00 	rsb	ip, ip, #0
    6ca2:	e007      	b.n	6cb4 <_strtod_r+0x2fc>
    6ca4:	0000a398 	.word	0x0000a398
    6ca8:	7ff00000 	.word	0x7ff00000
    6cac:	9e04      	ldr	r6, [sp, #16]
    6cae:	9619      	str	r6, [sp, #100]	; 0x64
    6cb0:	f04f 0c00 	mov.w	ip, #0
    6cb4:	2d00      	cmp	r5, #0
    6cb6:	d14c      	bne.n	6d52 <_strtod_r+0x39a>
    6cb8:	2b00      	cmp	r3, #0
    6cba:	f040 846f 	bne.w	759c <_strtod_r+0xbe4>
    6cbe:	9f05      	ldr	r7, [sp, #20]
    6cc0:	2f00      	cmp	r7, #0
    6cc2:	f040 846b 	bne.w	759c <_strtod_r+0xbe4>
    6cc6:	980a      	ldr	r0, [sp, #40]	; 0x28
    6cc8:	2800      	cmp	r0, #0
    6cca:	d13c      	bne.n	6d46 <_strtod_r+0x38e>
    6ccc:	2a4e      	cmp	r2, #78	; 0x4e
    6cce:	d01b      	beq.n	6d08 <_strtod_r+0x350>
    6cd0:	dc02      	bgt.n	6cd8 <_strtod_r+0x320>
    6cd2:	2a49      	cmp	r2, #73	; 0x49
    6cd4:	d005      	beq.n	6ce2 <_strtod_r+0x32a>
    6cd6:	e036      	b.n	6d46 <_strtod_r+0x38e>
    6cd8:	2a69      	cmp	r2, #105	; 0x69
    6cda:	d002      	beq.n	6ce2 <_strtod_r+0x32a>
    6cdc:	2a6e      	cmp	r2, #110	; 0x6e
    6cde:	d013      	beq.n	6d08 <_strtod_r+0x350>
    6ce0:	e031      	b.n	6d46 <_strtod_r+0x38e>
    6ce2:	a819      	add	r0, sp, #100	; 0x64
    6ce4:	49ac      	ldr	r1, [pc, #688]	; (6f98 <_strtod_r+0x5e0>)
    6ce6:	f7ff fe31 	bl	694c <match>
    6cea:	b360      	cbz	r0, 6d46 <_strtod_r+0x38e>
    6cec:	9b19      	ldr	r3, [sp, #100]	; 0x64
    6cee:	49ab      	ldr	r1, [pc, #684]	; (6f9c <_strtod_r+0x5e4>)
    6cf0:	3b01      	subs	r3, #1
    6cf2:	a819      	add	r0, sp, #100	; 0x64
    6cf4:	9319      	str	r3, [sp, #100]	; 0x64
    6cf6:	f7ff fe29 	bl	694c <match>
    6cfa:	b910      	cbnz	r0, 6d02 <_strtod_r+0x34a>
    6cfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
    6cfe:	3301      	adds	r3, #1
    6d00:	9319      	str	r3, [sp, #100]	; 0x64
    6d02:	f8df b2b4 	ldr.w	fp, [pc, #692]	; 6fb8 <_strtod_r+0x600>
    6d06:	e01a      	b.n	6d3e <_strtod_r+0x386>
    6d08:	a819      	add	r0, sp, #100	; 0x64
    6d0a:	49a5      	ldr	r1, [pc, #660]	; (6fa0 <_strtod_r+0x5e8>)
    6d0c:	f7ff fe1e 	bl	694c <match>
    6d10:	b1c8      	cbz	r0, 6d46 <_strtod_r+0x38e>
    6d12:	9b19      	ldr	r3, [sp, #100]	; 0x64
    6d14:	781b      	ldrb	r3, [r3, #0]
    6d16:	2b28      	cmp	r3, #40	; 0x28
    6d18:	d10f      	bne.n	6d3a <_strtod_r+0x382>
    6d1a:	a819      	add	r0, sp, #100	; 0x64
    6d1c:	49a1      	ldr	r1, [pc, #644]	; (6fa4 <_strtod_r+0x5ec>)
    6d1e:	aa1c      	add	r2, sp, #112	; 0x70
    6d20:	f001 f924 	bl	7f6c <__hexnan>
    6d24:	2805      	cmp	r0, #5
    6d26:	d108      	bne.n	6d3a <_strtod_r+0x382>
    6d28:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    6d2a:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
    6d2e:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
    6d32:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
    6d36:	f000 bc31 	b.w	759c <_strtod_r+0xbe4>
    6d3a:	f8df b280 	ldr.w	fp, [pc, #640]	; 6fbc <_strtod_r+0x604>
    6d3e:	f04f 0a00 	mov.w	sl, #0
    6d42:	f000 bc2b 	b.w	759c <_strtod_r+0xbe4>
    6d46:	9b04      	ldr	r3, [sp, #16]
    6d48:	9319      	str	r3, [sp, #100]	; 0x64
    6d4a:	2600      	movs	r6, #0
    6d4c:	9609      	str	r6, [sp, #36]	; 0x24
    6d4e:	f000 bc25 	b.w	759c <_strtod_r+0xbe4>
    6d52:	ebc1 010c 	rsb	r1, r1, ip
    6d56:	9803      	ldr	r0, [sp, #12]
    6d58:	9106      	str	r1, [sp, #24]
    6d5a:	2d10      	cmp	r5, #16
    6d5c:	bfb4      	ite	lt
    6d5e:	46ac      	movlt	ip, r5
    6d60:	f04f 0c10 	movge.w	ip, #16
    6d64:	f8cd c008 	str.w	ip, [sp, #8]
    6d68:	f7fe fd8a 	bl	5880 <__aeabi_ui2d>
    6d6c:	f8dd c008 	ldr.w	ip, [sp, #8]
    6d70:	2c00      	cmp	r4, #0
    6d72:	bf08      	it	eq
    6d74:	462c      	moveq	r4, r5
    6d76:	f1bc 0f09 	cmp.w	ip, #9
    6d7a:	4682      	mov	sl, r0
    6d7c:	468b      	mov	fp, r1
    6d7e:	dd15      	ble.n	6dac <_strtod_r+0x3f4>
    6d80:	4b89      	ldr	r3, [pc, #548]	; (6fa8 <_strtod_r+0x5f0>)
    6d82:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
    6d86:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
    6d8a:	f7fe fdef 	bl	596c <__aeabi_dmul>
    6d8e:	4606      	mov	r6, r0
    6d90:	4640      	mov	r0, r8
    6d92:	460f      	mov	r7, r1
    6d94:	f7fe fd74 	bl	5880 <__aeabi_ui2d>
    6d98:	4602      	mov	r2, r0
    6d9a:	460b      	mov	r3, r1
    6d9c:	4630      	mov	r0, r6
    6d9e:	4639      	mov	r1, r7
    6da0:	f7fe fc32 	bl	5608 <__adddf3>
    6da4:	f8dd c008 	ldr.w	ip, [sp, #8]
    6da8:	4682      	mov	sl, r0
    6daa:	468b      	mov	fp, r1
    6dac:	2d0f      	cmp	r5, #15
    6dae:	dc37      	bgt.n	6e20 <_strtod_r+0x468>
    6db0:	9f06      	ldr	r7, [sp, #24]
    6db2:	2f00      	cmp	r7, #0
    6db4:	f000 83f2 	beq.w	759c <_strtod_r+0xbe4>
    6db8:	dd23      	ble.n	6e02 <_strtod_r+0x44a>
    6dba:	2f16      	cmp	r7, #22
    6dbc:	dc07      	bgt.n	6dce <_strtod_r+0x416>
    6dbe:	497a      	ldr	r1, [pc, #488]	; (6fa8 <_strtod_r+0x5f0>)
    6dc0:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
    6dc4:	e9d1 0100 	ldrd	r0, r1, [r1]
    6dc8:	4652      	mov	r2, sl
    6dca:	465b      	mov	r3, fp
    6dcc:	e014      	b.n	6df8 <_strtod_r+0x440>
    6dce:	9e06      	ldr	r6, [sp, #24]
    6dd0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
    6dd4:	429e      	cmp	r6, r3
    6dd6:	dc23      	bgt.n	6e20 <_strtod_r+0x468>
    6dd8:	4c73      	ldr	r4, [pc, #460]	; (6fa8 <_strtod_r+0x5f0>)
    6dda:	f1c5 050f 	rsb	r5, r5, #15
    6dde:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
    6de2:	1b75      	subs	r5, r6, r5
    6de4:	e9d3 0100 	ldrd	r0, r1, [r3]
    6de8:	4652      	mov	r2, sl
    6dea:	465b      	mov	r3, fp
    6dec:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    6df0:	f7fe fdbc 	bl	596c <__aeabi_dmul>
    6df4:	e9d4 2300 	ldrd	r2, r3, [r4]
    6df8:	f7fe fdb8 	bl	596c <__aeabi_dmul>
    6dfc:	4682      	mov	sl, r0
    6dfe:	468b      	mov	fp, r1
    6e00:	e3cc      	b.n	759c <_strtod_r+0xbe4>
    6e02:	9f06      	ldr	r7, [sp, #24]
    6e04:	3716      	adds	r7, #22
    6e06:	db0b      	blt.n	6e20 <_strtod_r+0x468>
    6e08:	f8dd c018 	ldr.w	ip, [sp, #24]
    6e0c:	4f66      	ldr	r7, [pc, #408]	; (6fa8 <_strtod_r+0x5f0>)
    6e0e:	eba7 07cc 	sub.w	r7, r7, ip, lsl #3
    6e12:	4650      	mov	r0, sl
    6e14:	4659      	mov	r1, fp
    6e16:	e9d7 2300 	ldrd	r2, r3, [r7]
    6e1a:	f7fe fed1 	bl	5bc0 <__aeabi_ddiv>
    6e1e:	e7ed      	b.n	6dfc <_strtod_r+0x444>
    6e20:	9e06      	ldr	r6, [sp, #24]
    6e22:	ebcc 0805 	rsb	r8, ip, r5
    6e26:	44b0      	add	r8, r6
    6e28:	f1b8 0f00 	cmp.w	r8, #0
    6e2c:	dd61      	ble.n	6ef2 <_strtod_r+0x53a>
    6e2e:	f018 030f 	ands.w	r3, r8, #15
    6e32:	d00a      	beq.n	6e4a <_strtod_r+0x492>
    6e34:	4a5c      	ldr	r2, [pc, #368]	; (6fa8 <_strtod_r+0x5f0>)
    6e36:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6e3a:	e9d3 0100 	ldrd	r0, r1, [r3]
    6e3e:	4652      	mov	r2, sl
    6e40:	465b      	mov	r3, fp
    6e42:	f7fe fd93 	bl	596c <__aeabi_dmul>
    6e46:	4682      	mov	sl, r0
    6e48:	468b      	mov	fp, r1
    6e4a:	f038 080f 	bics.w	r8, r8, #15
    6e4e:	f000 80c8 	beq.w	6fe2 <_strtod_r+0x62a>
    6e52:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
    6e56:	dd13      	ble.n	6e80 <_strtod_r+0x4c8>
    6e58:	f04f 0800 	mov.w	r8, #0
    6e5c:	f8cd 800c 	str.w	r8, [sp, #12]
    6e60:	f8cd 801c 	str.w	r8, [sp, #28]
    6e64:	f8cd 8014 	str.w	r8, [sp, #20]
    6e68:	9f07      	ldr	r7, [sp, #28]
    6e6a:	f8df b14c 	ldr.w	fp, [pc, #332]	; 6fb8 <_strtod_r+0x600>
    6e6e:	2322      	movs	r3, #34	; 0x22
    6e70:	f8c9 3000 	str.w	r3, [r9]
    6e74:	f04f 0a00 	mov.w	sl, #0
    6e78:	2f00      	cmp	r7, #0
    6e7a:	f040 837b 	bne.w	7574 <_strtod_r+0xbbc>
    6e7e:	e38d      	b.n	759c <_strtod_r+0xbe4>
    6e80:	ea4f 1828 	mov.w	r8, r8, asr #4
    6e84:	4650      	mov	r0, sl
    6e86:	4659      	mov	r1, fp
    6e88:	2600      	movs	r6, #0
    6e8a:	f1b8 0f01 	cmp.w	r8, #1
    6e8e:	dd0d      	ble.n	6eac <_strtod_r+0x4f4>
    6e90:	f018 0f01 	tst.w	r8, #1
    6e94:	d006      	beq.n	6ea4 <_strtod_r+0x4ec>
    6e96:	4b45      	ldr	r3, [pc, #276]	; (6fac <_strtod_r+0x5f4>)
    6e98:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    6e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
    6ea0:	f7fe fd64 	bl	596c <__aeabi_dmul>
    6ea4:	3601      	adds	r6, #1
    6ea6:	ea4f 0868 	mov.w	r8, r8, asr #1
    6eaa:	e7ee      	b.n	6e8a <_strtod_r+0x4d2>
    6eac:	4b3f      	ldr	r3, [pc, #252]	; (6fac <_strtod_r+0x5f4>)
    6eae:	4682      	mov	sl, r0
    6eb0:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
    6eb4:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    6eb8:	4652      	mov	r2, sl
    6eba:	465b      	mov	r3, fp
    6ebc:	e9d6 0100 	ldrd	r0, r1, [r6]
    6ec0:	f7fe fd54 	bl	596c <__aeabi_dmul>
    6ec4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    6ec8:	468b      	mov	fp, r1
    6eca:	0d1b      	lsrs	r3, r3, #20
    6ecc:	4938      	ldr	r1, [pc, #224]	; (6fb0 <_strtod_r+0x5f8>)
    6ece:	051b      	lsls	r3, r3, #20
    6ed0:	428b      	cmp	r3, r1
    6ed2:	4682      	mov	sl, r0
    6ed4:	d8c0      	bhi.n	6e58 <_strtod_r+0x4a0>
    6ed6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
    6eda:	428b      	cmp	r3, r1
    6edc:	d906      	bls.n	6eec <_strtod_r+0x534>
    6ede:	2600      	movs	r6, #0
    6ee0:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 6fc0 <_strtod_r+0x608>
    6ee4:	9604      	str	r6, [sp, #16]
    6ee6:	f04f 3aff 	mov.w	sl, #4294967295
    6eea:	e07c      	b.n	6fe6 <_strtod_r+0x62e>
    6eec:	f10b 7b54 	add.w	fp, fp, #55574528	; 0x3500000
    6ef0:	e077      	b.n	6fe2 <_strtod_r+0x62a>
    6ef2:	d076      	beq.n	6fe2 <_strtod_r+0x62a>
    6ef4:	f1c8 0800 	rsb	r8, r8, #0
    6ef8:	f018 030f 	ands.w	r3, r8, #15
    6efc:	d00a      	beq.n	6f14 <_strtod_r+0x55c>
    6efe:	4a2a      	ldr	r2, [pc, #168]	; (6fa8 <_strtod_r+0x5f0>)
    6f00:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6f04:	4650      	mov	r0, sl
    6f06:	4659      	mov	r1, fp
    6f08:	e9d3 2300 	ldrd	r2, r3, [r3]
    6f0c:	f7fe fe58 	bl	5bc0 <__aeabi_ddiv>
    6f10:	4682      	mov	sl, r0
    6f12:	468b      	mov	fp, r1
    6f14:	ea5f 1828 	movs.w	r8, r8, asr #4
    6f18:	d063      	beq.n	6fe2 <_strtod_r+0x62a>
    6f1a:	f1b8 0f1f 	cmp.w	r8, #31
    6f1e:	dd08      	ble.n	6f32 <_strtod_r+0x57a>
    6f20:	f04f 0800 	mov.w	r8, #0
    6f24:	f8cd 800c 	str.w	r8, [sp, #12]
    6f28:	f8cd 801c 	str.w	r8, [sp, #28]
    6f2c:	f8cd 8014 	str.w	r8, [sp, #20]
    6f30:	e11e      	b.n	7170 <_strtod_r+0x7b8>
    6f32:	f018 0f10 	tst.w	r8, #16
    6f36:	bf14      	ite	ne
    6f38:	266a      	movne	r6, #106	; 0x6a
    6f3a:	2600      	moveq	r6, #0
    6f3c:	9604      	str	r6, [sp, #16]
    6f3e:	4e1d      	ldr	r6, [pc, #116]	; (6fb4 <_strtod_r+0x5fc>)
    6f40:	4650      	mov	r0, sl
    6f42:	4659      	mov	r1, fp
    6f44:	f1b8 0f00 	cmp.w	r8, #0
    6f48:	dd0a      	ble.n	6f60 <_strtod_r+0x5a8>
    6f4a:	f018 0f01 	tst.w	r8, #1
    6f4e:	d003      	beq.n	6f58 <_strtod_r+0x5a0>
    6f50:	e9d6 2300 	ldrd	r2, r3, [r6]
    6f54:	f7fe fd0a 	bl	596c <__aeabi_dmul>
    6f58:	ea4f 0868 	mov.w	r8, r8, asr #1
    6f5c:	3608      	adds	r6, #8
    6f5e:	e7f1      	b.n	6f44 <_strtod_r+0x58c>
    6f60:	9f04      	ldr	r7, [sp, #16]
    6f62:	4682      	mov	sl, r0
    6f64:	468b      	mov	fp, r1
    6f66:	b39f      	cbz	r7, 6fd0 <_strtod_r+0x618>
    6f68:	f3c1 530a 	ubfx	r3, r1, #20, #11
    6f6c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    6f70:	2b00      	cmp	r3, #0
    6f72:	dd2d      	ble.n	6fd0 <_strtod_r+0x618>
    6f74:	2b1f      	cmp	r3, #31
    6f76:	dd25      	ble.n	6fc4 <_strtod_r+0x60c>
    6f78:	2b34      	cmp	r3, #52	; 0x34
    6f7a:	f04f 0a00 	mov.w	sl, #0
    6f7e:	dd02      	ble.n	6f86 <_strtod_r+0x5ce>
    6f80:	f04f 7b5c 	mov.w	fp, #57671680	; 0x3700000
    6f84:	e024      	b.n	6fd0 <_strtod_r+0x618>
    6f86:	3b20      	subs	r3, #32
    6f88:	f04f 31ff 	mov.w	r1, #4294967295
    6f8c:	fa01 f303 	lsl.w	r3, r1, r3
    6f90:	ea03 0b0b 	and.w	fp, r3, fp
    6f94:	e01c      	b.n	6fd0 <_strtod_r+0x618>
    6f96:	bf00      	nop
    6f98:	0000a335 	.word	0x0000a335
    6f9c:	0000a62f 	.word	0x0000a62f
    6fa0:	0000a331 	.word	0x0000a331
    6fa4:	0000a3ac 	.word	0x0000a3ac
    6fa8:	0000a530 	.word	0x0000a530
    6fac:	0000a5f8 	.word	0x0000a5f8
    6fb0:	7ca00000 	.word	0x7ca00000
    6fb4:	0000a370 	.word	0x0000a370
    6fb8:	7ff00000 	.word	0x7ff00000
    6fbc:	fff80000 	.word	0xfff80000
    6fc0:	7fefffff 	.word	0x7fefffff
    6fc4:	f04f 32ff 	mov.w	r2, #4294967295
    6fc8:	fa02 f303 	lsl.w	r3, r2, r3
    6fcc:	ea03 0a00 	and.w	sl, r3, r0
    6fd0:	4650      	mov	r0, sl
    6fd2:	4659      	mov	r1, fp
    6fd4:	2200      	movs	r2, #0
    6fd6:	2300      	movs	r3, #0
    6fd8:	f7fe ff30 	bl	5e3c <__aeabi_dcmpeq>
    6fdc:	2800      	cmp	r0, #0
    6fde:	d19f      	bne.n	6f20 <_strtod_r+0x568>
    6fe0:	e001      	b.n	6fe6 <_strtod_r+0x62e>
    6fe2:	2700      	movs	r7, #0
    6fe4:	9704      	str	r7, [sp, #16]
    6fe6:	9e03      	ldr	r6, [sp, #12]
    6fe8:	9600      	str	r6, [sp, #0]
    6fea:	4648      	mov	r0, r9
    6fec:	9907      	ldr	r1, [sp, #28]
    6fee:	4622      	mov	r2, r4
    6ff0:	462b      	mov	r3, r5
    6ff2:	f001 f8d5 	bl	81a0 <__s2b>
    6ff6:	9007      	str	r0, [sp, #28]
    6ff8:	2800      	cmp	r0, #0
    6ffa:	f43f af2d 	beq.w	6e58 <_strtod_r+0x4a0>
    6ffe:	9f06      	ldr	r7, [sp, #24]
    7000:	427b      	negs	r3, r7
    7002:	2f00      	cmp	r7, #0
    7004:	bfa8      	it	ge
    7006:	2300      	movge	r3, #0
    7008:	f04f 0800 	mov.w	r8, #0
    700c:	930e      	str	r3, [sp, #56]	; 0x38
    700e:	f8cd 800c 	str.w	r8, [sp, #12]
    7012:	9e07      	ldr	r6, [sp, #28]
    7014:	4648      	mov	r0, r9
    7016:	6871      	ldr	r1, [r6, #4]
    7018:	f001 f83c 	bl	8094 <_Balloc>
    701c:	9005      	str	r0, [sp, #20]
    701e:	2800      	cmp	r0, #0
    7020:	f43f af22 	beq.w	6e68 <_strtod_r+0x4b0>
    7024:	6932      	ldr	r2, [r6, #16]
    7026:	3202      	adds	r2, #2
    7028:	f106 010c 	add.w	r1, r6, #12
    702c:	0092      	lsls	r2, r2, #2
    702e:	300c      	adds	r0, #12
    7030:	f7ff fb32 	bl	6698 <memcpy>
    7034:	ab1b      	add	r3, sp, #108	; 0x6c
    7036:	9300      	str	r3, [sp, #0]
    7038:	ab1c      	add	r3, sp, #112	; 0x70
    703a:	9301      	str	r3, [sp, #4]
    703c:	4648      	mov	r0, r9
    703e:	4652      	mov	r2, sl
    7040:	465b      	mov	r3, fp
    7042:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
    7046:	f001 fb6c 	bl	8722 <__d2b>
    704a:	901a      	str	r0, [sp, #104]	; 0x68
    704c:	2800      	cmp	r0, #0
    704e:	f43f af0b 	beq.w	6e68 <_strtod_r+0x4b0>
    7052:	4648      	mov	r0, r9
    7054:	2101      	movs	r1, #1
    7056:	f001 f932 	bl	82be <__i2b>
    705a:	9003      	str	r0, [sp, #12]
    705c:	2800      	cmp	r0, #0
    705e:	f43f af03 	beq.w	6e68 <_strtod_r+0x4b0>
    7062:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    7064:	f8dd c018 	ldr.w	ip, [sp, #24]
    7068:	2b00      	cmp	r3, #0
    706a:	ea2c 77ec 	bic.w	r7, ip, ip, asr #31
    706e:	f2c0 808b 	blt.w	7188 <_strtod_r+0x7d0>
    7072:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    7074:	463a      	mov	r2, r7
    7076:	441c      	add	r4, r3
    7078:	9e04      	ldr	r6, [sp, #16]
    707a:	9d1c      	ldr	r5, [sp, #112]	; 0x70
    707c:	1b9b      	subs	r3, r3, r6
    707e:	1959      	adds	r1, r3, r5
    7080:	f46f 737f 	mvn.w	r3, #1020	; 0x3fc
    7084:	4299      	cmp	r1, r3
    7086:	f1c5 0536 	rsb	r5, r5, #54	; 0x36
    708a:	f280 8087 	bge.w	719c <_strtod_r+0x7e4>
    708e:	1a5b      	subs	r3, r3, r1
    7090:	2b1f      	cmp	r3, #31
    7092:	ebc3 0505 	rsb	r5, r3, r5
    7096:	f04f 0001 	mov.w	r0, #1
    709a:	dc78      	bgt.n	718e <_strtod_r+0x7d6>
    709c:	4098      	lsls	r0, r3
    709e:	2300      	movs	r3, #0
    70a0:	9014      	str	r0, [sp, #80]	; 0x50
    70a2:	930f      	str	r3, [sp, #60]	; 0x3c
    70a4:	9804      	ldr	r0, [sp, #16]
    70a6:	1966      	adds	r6, r4, r5
    70a8:	4415      	add	r5, r2
    70aa:	42a6      	cmp	r6, r4
    70ac:	bfb4      	ite	lt
    70ae:	4633      	movlt	r3, r6
    70b0:	4623      	movge	r3, r4
    70b2:	4405      	add	r5, r0
    70b4:	42ab      	cmp	r3, r5
    70b6:	bfa8      	it	ge
    70b8:	462b      	movge	r3, r5
    70ba:	2b00      	cmp	r3, #0
    70bc:	dd02      	ble.n	70c4 <_strtod_r+0x70c>
    70be:	1af6      	subs	r6, r6, r3
    70c0:	1aed      	subs	r5, r5, r3
    70c2:	1ae4      	subs	r4, r4, r3
    70c4:	990e      	ldr	r1, [sp, #56]	; 0x38
    70c6:	2900      	cmp	r1, #0
    70c8:	d16f      	bne.n	71aa <_strtod_r+0x7f2>
    70ca:	2e00      	cmp	r6, #0
    70cc:	f300 8087 	bgt.w	71de <_strtod_r+0x826>
    70d0:	2f00      	cmp	r7, #0
    70d2:	f040 808e 	bne.w	71f2 <_strtod_r+0x83a>
    70d6:	2d00      	cmp	r5, #0
    70d8:	f300 8095 	bgt.w	7206 <_strtod_r+0x84e>
    70dc:	2c00      	cmp	r4, #0
    70de:	f300 809c 	bgt.w	721a <_strtod_r+0x862>
    70e2:	4648      	mov	r0, r9
    70e4:	991a      	ldr	r1, [sp, #104]	; 0x68
    70e6:	9a05      	ldr	r2, [sp, #20]
    70e8:	f001 fa48 	bl	857c <__mdiff>
    70ec:	4680      	mov	r8, r0
    70ee:	2800      	cmp	r0, #0
    70f0:	f43f aeba 	beq.w	6e68 <_strtod_r+0x4b0>
    70f4:	2300      	movs	r3, #0
    70f6:	68c6      	ldr	r6, [r0, #12]
    70f8:	9903      	ldr	r1, [sp, #12]
    70fa:	60c3      	str	r3, [r0, #12]
    70fc:	9608      	str	r6, [sp, #32]
    70fe:	f001 fa20 	bl	8542 <__mcmp>
    7102:	2800      	cmp	r0, #0
    7104:	f280 8098 	bge.w	7238 <_strtod_r+0x880>
    7108:	2e00      	cmp	r6, #0
    710a:	f040 8220 	bne.w	754e <_strtod_r+0xb96>
    710e:	f1ba 0f00 	cmp.w	sl, #0
    7112:	f040 821c 	bne.w	754e <_strtod_r+0xb96>
    7116:	f3cb 0313 	ubfx	r3, fp, #0, #20
    711a:	2b00      	cmp	r3, #0
    711c:	f040 8217 	bne.w	754e <_strtod_r+0xb96>
    7120:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
    7124:	0d1b      	lsrs	r3, r3, #20
    7126:	051b      	lsls	r3, r3, #20
    7128:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    712c:	f240 820f 	bls.w	754e <_strtod_r+0xb96>
    7130:	f8d8 3014 	ldr.w	r3, [r8, #20]
    7134:	2b00      	cmp	r3, #0
    7136:	d07a      	beq.n	722e <_strtod_r+0x876>
    7138:	4641      	mov	r1, r8
    713a:	2201      	movs	r2, #1
    713c:	4648      	mov	r0, r9
    713e:	f001 f9ad 	bl	849c <__lshift>
    7142:	9903      	ldr	r1, [sp, #12]
    7144:	4680      	mov	r8, r0
    7146:	f001 f9fc 	bl	8542 <__mcmp>
    714a:	2800      	cmp	r0, #0
    714c:	f340 81ff 	ble.w	754e <_strtod_r+0xb96>
    7150:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
    7154:	9f04      	ldr	r7, [sp, #16]
    7156:	0d1b      	lsrs	r3, r3, #20
    7158:	051b      	lsls	r3, r3, #20
    715a:	2f00      	cmp	r7, #0
    715c:	f000 809c 	beq.w	7298 <_strtod_r+0x8e0>
    7160:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    7164:	f200 8098 	bhi.w	7298 <_strtod_r+0x8e0>
    7168:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
    716c:	f200 81f1 	bhi.w	7552 <_strtod_r+0xb9a>
    7170:	9e07      	ldr	r6, [sp, #28]
    7172:	2322      	movs	r3, #34	; 0x22
    7174:	f04f 0a00 	mov.w	sl, #0
    7178:	f04f 0b00 	mov.w	fp, #0
    717c:	f8c9 3000 	str.w	r3, [r9]
    7180:	2e00      	cmp	r6, #0
    7182:	f040 81f7 	bne.w	7574 <_strtod_r+0xbbc>
    7186:	e209      	b.n	759c <_strtod_r+0xbe4>
    7188:	1afa      	subs	r2, r7, r3
    718a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    718c:	e774      	b.n	7078 <_strtod_r+0x6c0>
    718e:	4e84      	ldr	r6, [pc, #528]	; (73a0 <_strtod_r+0x9e8>)
    7190:	9014      	str	r0, [sp, #80]	; 0x50
    7192:	1a76      	subs	r6, r6, r1
    7194:	fa00 f606 	lsl.w	r6, r0, r6
    7198:	960f      	str	r6, [sp, #60]	; 0x3c
    719a:	e783      	b.n	70a4 <_strtod_r+0x6ec>
    719c:	2600      	movs	r6, #0
    719e:	f04f 0c01 	mov.w	ip, #1
    71a2:	960f      	str	r6, [sp, #60]	; 0x3c
    71a4:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
    71a8:	e77c      	b.n	70a4 <_strtod_r+0x6ec>
    71aa:	4648      	mov	r0, r9
    71ac:	9903      	ldr	r1, [sp, #12]
    71ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    71b0:	f001 f926 	bl	8400 <__pow5mult>
    71b4:	9003      	str	r0, [sp, #12]
    71b6:	2800      	cmp	r0, #0
    71b8:	f43f ae56 	beq.w	6e68 <_strtod_r+0x4b0>
    71bc:	4648      	mov	r0, r9
    71be:	9903      	ldr	r1, [sp, #12]
    71c0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    71c2:	f001 f885 	bl	82d0 <__multiply>
    71c6:	4603      	mov	r3, r0
    71c8:	2800      	cmp	r0, #0
    71ca:	f43f ae4d 	beq.w	6e68 <_strtod_r+0x4b0>
    71ce:	4648      	mov	r0, r9
    71d0:	991a      	ldr	r1, [sp, #104]	; 0x68
    71d2:	9302      	str	r3, [sp, #8]
    71d4:	f000 ff93 	bl	80fe <_Bfree>
    71d8:	9b02      	ldr	r3, [sp, #8]
    71da:	931a      	str	r3, [sp, #104]	; 0x68
    71dc:	e775      	b.n	70ca <_strtod_r+0x712>
    71de:	4648      	mov	r0, r9
    71e0:	991a      	ldr	r1, [sp, #104]	; 0x68
    71e2:	4632      	mov	r2, r6
    71e4:	f001 f95a 	bl	849c <__lshift>
    71e8:	901a      	str	r0, [sp, #104]	; 0x68
    71ea:	2800      	cmp	r0, #0
    71ec:	f47f af70 	bne.w	70d0 <_strtod_r+0x718>
    71f0:	e63a      	b.n	6e68 <_strtod_r+0x4b0>
    71f2:	4648      	mov	r0, r9
    71f4:	9905      	ldr	r1, [sp, #20]
    71f6:	463a      	mov	r2, r7
    71f8:	f001 f902 	bl	8400 <__pow5mult>
    71fc:	9005      	str	r0, [sp, #20]
    71fe:	2800      	cmp	r0, #0
    7200:	f47f af69 	bne.w	70d6 <_strtod_r+0x71e>
    7204:	e630      	b.n	6e68 <_strtod_r+0x4b0>
    7206:	4648      	mov	r0, r9
    7208:	9905      	ldr	r1, [sp, #20]
    720a:	462a      	mov	r2, r5
    720c:	f001 f946 	bl	849c <__lshift>
    7210:	9005      	str	r0, [sp, #20]
    7212:	2800      	cmp	r0, #0
    7214:	f47f af62 	bne.w	70dc <_strtod_r+0x724>
    7218:	e626      	b.n	6e68 <_strtod_r+0x4b0>
    721a:	4648      	mov	r0, r9
    721c:	9903      	ldr	r1, [sp, #12]
    721e:	4622      	mov	r2, r4
    7220:	f001 f93c 	bl	849c <__lshift>
    7224:	9003      	str	r0, [sp, #12]
    7226:	2800      	cmp	r0, #0
    7228:	f47f af5b 	bne.w	70e2 <_strtod_r+0x72a>
    722c:	e61c      	b.n	6e68 <_strtod_r+0x4b0>
    722e:	f8d8 3010 	ldr.w	r3, [r8, #16]
    7232:	2b01      	cmp	r3, #1
    7234:	dc80      	bgt.n	7138 <_strtod_r+0x780>
    7236:	e18a      	b.n	754e <_strtod_r+0xb96>
    7238:	d163      	bne.n	7302 <_strtod_r+0x94a>
    723a:	9f08      	ldr	r7, [sp, #32]
    723c:	f3cb 0313 	ubfx	r3, fp, #0, #20
    7240:	b32f      	cbz	r7, 728e <_strtod_r+0x8d6>
    7242:	4958      	ldr	r1, [pc, #352]	; (73a4 <_strtod_r+0x9ec>)
    7244:	428b      	cmp	r3, r1
    7246:	465a      	mov	r2, fp
    7248:	d12f      	bne.n	72aa <_strtod_r+0x8f2>
    724a:	9e04      	ldr	r6, [sp, #16]
    724c:	4651      	mov	r1, sl
    724e:	b16e      	cbz	r6, 726c <_strtod_r+0x8b4>
    7250:	4b55      	ldr	r3, [pc, #340]	; (73a8 <_strtod_r+0x9f0>)
    7252:	ea0b 0303 	and.w	r3, fp, r3
    7256:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    725a:	d807      	bhi.n	726c <_strtod_r+0x8b4>
    725c:	0d1b      	lsrs	r3, r3, #20
    725e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    7262:	f04f 30ff 	mov.w	r0, #4294967295
    7266:	fa00 f303 	lsl.w	r3, r0, r3
    726a:	e001      	b.n	7270 <_strtod_r+0x8b8>
    726c:	f04f 33ff 	mov.w	r3, #4294967295
    7270:	4299      	cmp	r1, r3
    7272:	d11a      	bne.n	72aa <_strtod_r+0x8f2>
    7274:	4b4d      	ldr	r3, [pc, #308]	; (73ac <_strtod_r+0x9f4>)
    7276:	429a      	cmp	r2, r3
    7278:	d102      	bne.n	7280 <_strtod_r+0x8c8>
    727a:	3101      	adds	r1, #1
    727c:	f43f adf4 	beq.w	6e68 <_strtod_r+0x4b0>
    7280:	4b49      	ldr	r3, [pc, #292]	; (73a8 <_strtod_r+0x9f0>)
    7282:	4013      	ands	r3, r2
    7284:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
    7288:	f04f 0a00 	mov.w	sl, #0
    728c:	e15f      	b.n	754e <_strtod_r+0xb96>
    728e:	b963      	cbnz	r3, 72aa <_strtod_r+0x8f2>
    7290:	f1ba 0f00 	cmp.w	sl, #0
    7294:	d109      	bne.n	72aa <_strtod_r+0x8f2>
    7296:	e75b      	b.n	7150 <_strtod_r+0x798>
    7298:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    729c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
    72a0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
    72a4:	f04f 3aff 	mov.w	sl, #4294967295
    72a8:	e151      	b.n	754e <_strtod_r+0xb96>
    72aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    72ac:	b113      	cbz	r3, 72b4 <_strtod_r+0x8fc>
    72ae:	ea13 0f0b 	tst.w	r3, fp
    72b2:	e002      	b.n	72ba <_strtod_r+0x902>
    72b4:	9e14      	ldr	r6, [sp, #80]	; 0x50
    72b6:	ea16 0f0a 	tst.w	r6, sl
    72ba:	f000 8148 	beq.w	754e <_strtod_r+0xb96>
    72be:	9f08      	ldr	r7, [sp, #32]
    72c0:	9a04      	ldr	r2, [sp, #16]
    72c2:	4650      	mov	r0, sl
    72c4:	4659      	mov	r1, fp
    72c6:	b157      	cbz	r7, 72de <_strtod_r+0x926>
    72c8:	f7ff fb54 	bl	6974 <sulp>
    72cc:	4602      	mov	r2, r0
    72ce:	460b      	mov	r3, r1
    72d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    72d4:	f7fe f998 	bl	5608 <__adddf3>
    72d8:	4682      	mov	sl, r0
    72da:	468b      	mov	fp, r1
    72dc:	e137      	b.n	754e <_strtod_r+0xb96>
    72de:	f7ff fb49 	bl	6974 <sulp>
    72e2:	4602      	mov	r2, r0
    72e4:	460b      	mov	r3, r1
    72e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    72ea:	f7fe f98b 	bl	5604 <__aeabi_dsub>
    72ee:	2200      	movs	r2, #0
    72f0:	2300      	movs	r3, #0
    72f2:	4682      	mov	sl, r0
    72f4:	468b      	mov	fp, r1
    72f6:	f7fe fda1 	bl	5e3c <__aeabi_dcmpeq>
    72fa:	2800      	cmp	r0, #0
    72fc:	f47f af38 	bne.w	7170 <_strtod_r+0x7b8>
    7300:	e125      	b.n	754e <_strtod_r+0xb96>
    7302:	4640      	mov	r0, r8
    7304:	9903      	ldr	r1, [sp, #12]
    7306:	f001 fa5e 	bl	87c6 <__ratio>
    730a:	2200      	movs	r2, #0
    730c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7310:	4604      	mov	r4, r0
    7312:	460d      	mov	r5, r1
    7314:	f7fe fda6 	bl	5e64 <__aeabi_dcmple>
    7318:	2800      	cmp	r0, #0
    731a:	d032      	beq.n	7382 <_strtod_r+0x9ca>
    731c:	9e08      	ldr	r6, [sp, #32]
    731e:	b126      	cbz	r6, 732a <_strtod_r+0x972>
    7320:	4f23      	ldr	r7, [pc, #140]	; (73b0 <_strtod_r+0x9f8>)
    7322:	2600      	movs	r6, #0
    7324:	4634      	mov	r4, r6
    7326:	463d      	mov	r5, r7
    7328:	e04c      	b.n	73c4 <_strtod_r+0xa0c>
    732a:	f1ba 0f00 	cmp.w	sl, #0
    732e:	d103      	bne.n	7338 <_strtod_r+0x980>
    7330:	f3cb 0313 	ubfx	r3, fp, #0, #20
    7334:	b93b      	cbnz	r3, 7346 <_strtod_r+0x98e>
    7336:	e00b      	b.n	7350 <_strtod_r+0x998>
    7338:	f1ba 0f01 	cmp.w	sl, #1
    733c:	d103      	bne.n	7346 <_strtod_r+0x98e>
    733e:	f1bb 0f00 	cmp.w	fp, #0
    7342:	f43f af15 	beq.w	7170 <_strtod_r+0x7b8>
    7346:	2600      	movs	r6, #0
    7348:	4f1a      	ldr	r7, [pc, #104]	; (73b4 <_strtod_r+0x9fc>)
    734a:	4d19      	ldr	r5, [pc, #100]	; (73b0 <_strtod_r+0x9f8>)
    734c:	2400      	movs	r4, #0
    734e:	e039      	b.n	73c4 <_strtod_r+0xa0c>
    7350:	4620      	mov	r0, r4
    7352:	4629      	mov	r1, r5
    7354:	2200      	movs	r2, #0
    7356:	4b16      	ldr	r3, [pc, #88]	; (73b0 <_strtod_r+0x9f8>)
    7358:	f7fe fd7a 	bl	5e50 <__aeabi_dcmplt>
    735c:	b940      	cbnz	r0, 7370 <_strtod_r+0x9b8>
    735e:	4620      	mov	r0, r4
    7360:	4629      	mov	r1, r5
    7362:	2200      	movs	r2, #0
    7364:	4b14      	ldr	r3, [pc, #80]	; (73b8 <_strtod_r+0xa00>)
    7366:	f7fe fb01 	bl	596c <__aeabi_dmul>
    736a:	4604      	mov	r4, r0
    736c:	460d      	mov	r5, r1
    736e:	e001      	b.n	7374 <_strtod_r+0x9bc>
    7370:	4d11      	ldr	r5, [pc, #68]	; (73b8 <_strtod_r+0xa00>)
    7372:	2400      	movs	r4, #0
    7374:	f105 4700 	add.w	r7, r5, #2147483648	; 0x80000000
    7378:	9416      	str	r4, [sp, #88]	; 0x58
    737a:	9717      	str	r7, [sp, #92]	; 0x5c
    737c:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
    7380:	e020      	b.n	73c4 <_strtod_r+0xa0c>
    7382:	4620      	mov	r0, r4
    7384:	4629      	mov	r1, r5
    7386:	2200      	movs	r2, #0
    7388:	4b0b      	ldr	r3, [pc, #44]	; (73b8 <_strtod_r+0xa00>)
    738a:	f7fe faef 	bl	596c <__aeabi_dmul>
    738e:	9e08      	ldr	r6, [sp, #32]
    7390:	4604      	mov	r4, r0
    7392:	460d      	mov	r5, r1
    7394:	b996      	cbnz	r6, 73bc <_strtod_r+0xa04>
    7396:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
    739a:	9010      	str	r0, [sp, #64]	; 0x40
    739c:	9711      	str	r7, [sp, #68]	; 0x44
    739e:	e00f      	b.n	73c0 <_strtod_r+0xa08>
    73a0:	fffffbe3 	.word	0xfffffbe3
    73a4:	000fffff 	.word	0x000fffff
    73a8:	7ff00000 	.word	0x7ff00000
    73ac:	7fefffff 	.word	0x7fefffff
    73b0:	3ff00000 	.word	0x3ff00000
    73b4:	bff00000 	.word	0xbff00000
    73b8:	3fe00000 	.word	0x3fe00000
    73bc:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
    73c0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
    73c4:	f02b 4c00 	bic.w	ip, fp, #2147483648	; 0x80000000
    73c8:	ea4f 5c1c 	mov.w	ip, ip, lsr #20
    73cc:	4b84      	ldr	r3, [pc, #528]	; (75e0 <_strtod_r+0xc28>)
    73ce:	ea4f 5c0c 	mov.w	ip, ip, lsl #20
    73d2:	459c      	cmp	ip, r3
    73d4:	d131      	bne.n	743a <_strtod_r+0xa82>
    73d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    73da:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
    73de:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    73e2:	4650      	mov	r0, sl
    73e4:	4659      	mov	r1, fp
    73e6:	f8cd c008 	str.w	ip, [sp, #8]
    73ea:	f001 f925 	bl	8638 <__ulp>
    73ee:	4602      	mov	r2, r0
    73f0:	460b      	mov	r3, r1
    73f2:	4630      	mov	r0, r6
    73f4:	4639      	mov	r1, r7
    73f6:	f7fe fab9 	bl	596c <__aeabi_dmul>
    73fa:	4602      	mov	r2, r0
    73fc:	460b      	mov	r3, r1
    73fe:	4650      	mov	r0, sl
    7400:	4659      	mov	r1, fp
    7402:	f7fe f901 	bl	5608 <__adddf3>
    7406:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    740a:	0d1b      	lsrs	r3, r3, #20
    740c:	4a75      	ldr	r2, [pc, #468]	; (75e4 <_strtod_r+0xc2c>)
    740e:	f8dd c008 	ldr.w	ip, [sp, #8]
    7412:	051b      	lsls	r3, r3, #20
    7414:	4293      	cmp	r3, r2
    7416:	4682      	mov	sl, r0
    7418:	d90c      	bls.n	7434 <_strtod_r+0xa7c>
    741a:	4b73      	ldr	r3, [pc, #460]	; (75e8 <_strtod_r+0xc30>)
    741c:	990d      	ldr	r1, [sp, #52]	; 0x34
    741e:	4299      	cmp	r1, r3
    7420:	d103      	bne.n	742a <_strtod_r+0xa72>
    7422:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7424:	3201      	adds	r2, #1
    7426:	f43f ad1f 	beq.w	6e68 <_strtod_r+0x4b0>
    742a:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 75e8 <_strtod_r+0xc30>
    742e:	f04f 3aff 	mov.w	sl, #4294967295
    7432:	e07b      	b.n	752c <_strtod_r+0xb74>
    7434:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
    7438:	e042      	b.n	74c0 <_strtod_r+0xb08>
    743a:	9b04      	ldr	r3, [sp, #16]
    743c:	b353      	cbz	r3, 7494 <_strtod_r+0xadc>
    743e:	f1bc 6fd4 	cmp.w	ip, #111149056	; 0x6a00000
    7442:	d827      	bhi.n	7494 <_strtod_r+0xadc>
    7444:	4620      	mov	r0, r4
    7446:	4629      	mov	r1, r5
    7448:	a35d      	add	r3, pc, #372	; (adr r3, 75c0 <_strtod_r+0xc08>)
    744a:	e9d3 2300 	ldrd	r2, r3, [r3]
    744e:	f8cd c008 	str.w	ip, [sp, #8]
    7452:	f7fe fd07 	bl	5e64 <__aeabi_dcmple>
    7456:	f8dd c008 	ldr.w	ip, [sp, #8]
    745a:	b1b8      	cbz	r0, 748c <_strtod_r+0xad4>
    745c:	4629      	mov	r1, r5
    745e:	4620      	mov	r0, r4
    7460:	f7fe fd46 	bl	5ef0 <__aeabi_d2uiz>
    7464:	2800      	cmp	r0, #0
    7466:	bf08      	it	eq
    7468:	2001      	moveq	r0, #1
    746a:	f7fe fa09 	bl	5880 <__aeabi_ui2d>
    746e:	9e08      	ldr	r6, [sp, #32]
    7470:	f8dd c008 	ldr.w	ip, [sp, #8]
    7474:	4604      	mov	r4, r0
    7476:	460d      	mov	r5, r1
    7478:	b926      	cbnz	r6, 7484 <_strtod_r+0xacc>
    747a:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
    747e:	9012      	str	r0, [sp, #72]	; 0x48
    7480:	9713      	str	r7, [sp, #76]	; 0x4c
    7482:	e001      	b.n	7488 <_strtod_r+0xad0>
    7484:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
    7488:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
    748c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
    7490:	ebcc 0703 	rsb	r7, ip, r3
    7494:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    7498:	f8cd c008 	str.w	ip, [sp, #8]
    749c:	f001 f8cc 	bl	8638 <__ulp>
    74a0:	4602      	mov	r2, r0
    74a2:	460b      	mov	r3, r1
    74a4:	4630      	mov	r0, r6
    74a6:	4639      	mov	r1, r7
    74a8:	f7fe fa60 	bl	596c <__aeabi_dmul>
    74ac:	4602      	mov	r2, r0
    74ae:	460b      	mov	r3, r1
    74b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    74b4:	f7fe f8a8 	bl	5608 <__adddf3>
    74b8:	f8dd c008 	ldr.w	ip, [sp, #8]
    74bc:	4682      	mov	sl, r0
    74be:	468b      	mov	fp, r1
    74c0:	9f04      	ldr	r7, [sp, #16]
    74c2:	2f00      	cmp	r7, #0
    74c4:	d132      	bne.n	752c <_strtod_r+0xb74>
    74c6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
    74ca:	0d1b      	lsrs	r3, r3, #20
    74cc:	051b      	lsls	r3, r3, #20
    74ce:	459c      	cmp	ip, r3
    74d0:	d12c      	bne.n	752c <_strtod_r+0xb74>
    74d2:	4629      	mov	r1, r5
    74d4:	4620      	mov	r0, r4
    74d6:	f7fe fce3 	bl	5ea0 <__aeabi_d2iz>
    74da:	f7fe f9e1 	bl	58a0 <__aeabi_i2d>
    74de:	4602      	mov	r2, r0
    74e0:	460b      	mov	r3, r1
    74e2:	4620      	mov	r0, r4
    74e4:	4629      	mov	r1, r5
    74e6:	f7fe f88d 	bl	5604 <__aeabi_dsub>
    74ea:	9f08      	ldr	r7, [sp, #32]
    74ec:	4604      	mov	r4, r0
    74ee:	460d      	mov	r5, r1
    74f0:	b92f      	cbnz	r7, 74fe <_strtod_r+0xb46>
    74f2:	f1ba 0f00 	cmp.w	sl, #0
    74f6:	d102      	bne.n	74fe <_strtod_r+0xb46>
    74f8:	f3cb 0613 	ubfx	r6, fp, #0, #20
    74fc:	b186      	cbz	r6, 7520 <_strtod_r+0xb68>
    74fe:	4620      	mov	r0, r4
    7500:	4629      	mov	r1, r5
    7502:	a331      	add	r3, pc, #196	; (adr r3, 75c8 <_strtod_r+0xc10>)
    7504:	e9d3 2300 	ldrd	r2, r3, [r3]
    7508:	f7fe fca2 	bl	5e50 <__aeabi_dcmplt>
    750c:	2800      	cmp	r0, #0
    750e:	d131      	bne.n	7574 <_strtod_r+0xbbc>
    7510:	4620      	mov	r0, r4
    7512:	4629      	mov	r1, r5
    7514:	a32e      	add	r3, pc, #184	; (adr r3, 75d0 <_strtod_r+0xc18>)
    7516:	e9d3 2300 	ldrd	r2, r3, [r3]
    751a:	f7fe fcb7 	bl	5e8c <__aeabi_dcmpgt>
    751e:	e004      	b.n	752a <_strtod_r+0xb72>
    7520:	a32d      	add	r3, pc, #180	; (adr r3, 75d8 <_strtod_r+0xc20>)
    7522:	e9d3 2300 	ldrd	r2, r3, [r3]
    7526:	f7fe fc93 	bl	5e50 <__aeabi_dcmplt>
    752a:	bb18      	cbnz	r0, 7574 <_strtod_r+0xbbc>
    752c:	4648      	mov	r0, r9
    752e:	991a      	ldr	r1, [sp, #104]	; 0x68
    7530:	f000 fde5 	bl	80fe <_Bfree>
    7534:	4648      	mov	r0, r9
    7536:	9905      	ldr	r1, [sp, #20]
    7538:	f000 fde1 	bl	80fe <_Bfree>
    753c:	4648      	mov	r0, r9
    753e:	9903      	ldr	r1, [sp, #12]
    7540:	f000 fddd 	bl	80fe <_Bfree>
    7544:	4648      	mov	r0, r9
    7546:	4641      	mov	r1, r8
    7548:	f000 fdd9 	bl	80fe <_Bfree>
    754c:	e561      	b.n	7012 <_strtod_r+0x65a>
    754e:	9e04      	ldr	r6, [sp, #16]
    7550:	b186      	cbz	r6, 7574 <_strtod_r+0xbbc>
    7552:	2000      	movs	r0, #0
    7554:	4f25      	ldr	r7, [pc, #148]	; (75ec <_strtod_r+0xc34>)
    7556:	900c      	str	r0, [sp, #48]	; 0x30
    7558:	970d      	str	r7, [sp, #52]	; 0x34
    755a:	4650      	mov	r0, sl
    755c:	4659      	mov	r1, fp
    755e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    7562:	f7fe fa03 	bl	596c <__aeabi_dmul>
    7566:	4682      	mov	sl, r0
    7568:	468b      	mov	fp, r1
    756a:	b919      	cbnz	r1, 7574 <_strtod_r+0xbbc>
    756c:	b910      	cbnz	r0, 7574 <_strtod_r+0xbbc>
    756e:	2322      	movs	r3, #34	; 0x22
    7570:	f8c9 3000 	str.w	r3, [r9]
    7574:	4648      	mov	r0, r9
    7576:	991a      	ldr	r1, [sp, #104]	; 0x68
    7578:	f000 fdc1 	bl	80fe <_Bfree>
    757c:	4648      	mov	r0, r9
    757e:	9905      	ldr	r1, [sp, #20]
    7580:	f000 fdbd 	bl	80fe <_Bfree>
    7584:	4648      	mov	r0, r9
    7586:	9903      	ldr	r1, [sp, #12]
    7588:	f000 fdb9 	bl	80fe <_Bfree>
    758c:	4648      	mov	r0, r9
    758e:	9907      	ldr	r1, [sp, #28]
    7590:	f000 fdb5 	bl	80fe <_Bfree>
    7594:	4648      	mov	r0, r9
    7596:	4641      	mov	r1, r8
    7598:	f000 fdb1 	bl	80fe <_Bfree>
    759c:	9e15      	ldr	r6, [sp, #84]	; 0x54
    759e:	b10e      	cbz	r6, 75a4 <_strtod_r+0xbec>
    75a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
    75a2:	6033      	str	r3, [r6, #0]
    75a4:	9f09      	ldr	r7, [sp, #36]	; 0x24
    75a6:	b11f      	cbz	r7, 75b0 <_strtod_r+0xbf8>
    75a8:	4650      	mov	r0, sl
    75aa:	f10b 4100 	add.w	r1, fp, #2147483648	; 0x80000000
    75ae:	e001      	b.n	75b4 <_strtod_r+0xbfc>
    75b0:	4650      	mov	r0, sl
    75b2:	4659      	mov	r1, fp
    75b4:	b01f      	add	sp, #124	; 0x7c
    75b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    75ba:	bf00      	nop
    75bc:	f3af 8000 	nop.w
    75c0:	ffc00000 	.word	0xffc00000
    75c4:	41dfffff 	.word	0x41dfffff
    75c8:	94a03595 	.word	0x94a03595
    75cc:	3fdfffff 	.word	0x3fdfffff
    75d0:	35afe535 	.word	0x35afe535
    75d4:	3fe00000 	.word	0x3fe00000
    75d8:	94a03595 	.word	0x94a03595
    75dc:	3fcfffff 	.word	0x3fcfffff
    75e0:	7fe00000 	.word	0x7fe00000
    75e4:	7c9fffff 	.word	0x7c9fffff
    75e8:	7fefffff 	.word	0x7fefffff
    75ec:	39500000 	.word	0x39500000

000075f0 <strtof>:
strtof():
    75f0:	460a      	mov	r2, r1
    75f2:	490a      	ldr	r1, [pc, #40]	; (761c <strtof+0x2c>)
    75f4:	b538      	push	{r3, r4, r5, lr}
    75f6:	4603      	mov	r3, r0
    75f8:	6808      	ldr	r0, [r1, #0]
    75fa:	4619      	mov	r1, r3
    75fc:	f7ff f9dc 	bl	69b8 <_strtod_r>
    7600:	4604      	mov	r4, r0
    7602:	460d      	mov	r5, r1
    7604:	f7fd ffd2 	bl	55ac <__fpclassifyd>
    7608:	b918      	cbnz	r0, 7612 <strtof+0x22>
    760a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    760e:	f001 b971 	b.w	88f4 <nanf>
    7612:	4620      	mov	r0, r4
    7614:	4629      	mov	r1, r5
    7616:	f7fe fc8b 	bl	5f30 <__aeabi_d2f>
    761a:	bd38      	pop	{r3, r4, r5, pc}
    761c:	1fff0b14 	.word	0x1fff0b14

00007620 <_strtol_r>:
_strtol_r():
    7620:	4684      	mov	ip, r0
    7622:	483f      	ldr	r0, [pc, #252]	; (7720 <_strtol_r+0x100>)
    7624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7628:	f8d0 8000 	ldr.w	r8, [r0]
    762c:	460e      	mov	r6, r1
    762e:	4634      	mov	r4, r6
    7630:	f814 5b01 	ldrb.w	r5, [r4], #1
    7634:	eb08 0005 	add.w	r0, r8, r5
    7638:	7840      	ldrb	r0, [r0, #1]
    763a:	f000 0008 	and.w	r0, r0, #8
    763e:	f000 07ff 	and.w	r7, r0, #255	; 0xff
    7642:	b108      	cbz	r0, 7648 <_strtol_r+0x28>
    7644:	4626      	mov	r6, r4
    7646:	e7f2      	b.n	762e <_strtol_r+0xe>
    7648:	2d2d      	cmp	r5, #45	; 0x2d
    764a:	d103      	bne.n	7654 <_strtol_r+0x34>
    764c:	1cb4      	adds	r4, r6, #2
    764e:	7875      	ldrb	r5, [r6, #1]
    7650:	2701      	movs	r7, #1
    7652:	e003      	b.n	765c <_strtol_r+0x3c>
    7654:	2d2b      	cmp	r5, #43	; 0x2b
    7656:	bf04      	itt	eq
    7658:	7875      	ldrbeq	r5, [r6, #1]
    765a:	1cb4      	addeq	r4, r6, #2
    765c:	f033 0010 	bics.w	r0, r3, #16
    7660:	d10d      	bne.n	767e <_strtol_r+0x5e>
    7662:	2d30      	cmp	r5, #48	; 0x30
    7664:	d108      	bne.n	7678 <_strtol_r+0x58>
    7666:	7820      	ldrb	r0, [r4, #0]
    7668:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    766c:	2858      	cmp	r0, #88	; 0x58
    766e:	d151      	bne.n	7714 <_strtol_r+0xf4>
    7670:	7865      	ldrb	r5, [r4, #1]
    7672:	2310      	movs	r3, #16
    7674:	3402      	adds	r4, #2
    7676:	e002      	b.n	767e <_strtol_r+0x5e>
    7678:	2b00      	cmp	r3, #0
    767a:	bf08      	it	eq
    767c:	230a      	moveq	r3, #10
    767e:	2f00      	cmp	r7, #0
    7680:	bf0c      	ite	eq
    7682:	f06f 4a00 	mvneq.w	sl, #2147483648	; 0x80000000
    7686:	f04f 4a00 	movne.w	sl, #2147483648	; 0x80000000
    768a:	fbba f9f3 	udiv	r9, sl, r3
    768e:	2600      	movs	r6, #0
    7690:	fb03 aa19 	mls	sl, r3, r9, sl
    7694:	4630      	mov	r0, r6
    7696:	eb08 0b05 	add.w	fp, r8, r5
    769a:	f89b b001 	ldrb.w	fp, [fp, #1]
    769e:	f01b 0f04 	tst.w	fp, #4
    76a2:	d001      	beq.n	76a8 <_strtol_r+0x88>
    76a4:	3d30      	subs	r5, #48	; 0x30
    76a6:	e00b      	b.n	76c0 <_strtol_r+0xa0>
    76a8:	f01b 0b03 	ands.w	fp, fp, #3
    76ac:	d01b      	beq.n	76e6 <_strtol_r+0xc6>
    76ae:	f1bb 0f01 	cmp.w	fp, #1
    76b2:	bf14      	ite	ne
    76b4:	f04f 0b57 	movne.w	fp, #87	; 0x57
    76b8:	f04f 0b37 	moveq.w	fp, #55	; 0x37
    76bc:	ebcb 0505 	rsb	r5, fp, r5
    76c0:	429d      	cmp	r5, r3
    76c2:	da10      	bge.n	76e6 <_strtol_r+0xc6>
    76c4:	f1b6 3fff 	cmp.w	r6, #4294967295
    76c8:	d00a      	beq.n	76e0 <_strtol_r+0xc0>
    76ca:	4548      	cmp	r0, r9
    76cc:	d806      	bhi.n	76dc <_strtol_r+0xbc>
    76ce:	d101      	bne.n	76d4 <_strtol_r+0xb4>
    76d0:	4555      	cmp	r5, sl
    76d2:	dc03      	bgt.n	76dc <_strtol_r+0xbc>
    76d4:	fb03 5000 	mla	r0, r3, r0, r5
    76d8:	2601      	movs	r6, #1
    76da:	e001      	b.n	76e0 <_strtol_r+0xc0>
    76dc:	f04f 36ff 	mov.w	r6, #4294967295
    76e0:	f814 5b01 	ldrb.w	r5, [r4], #1
    76e4:	e7d7      	b.n	7696 <_strtol_r+0x76>
    76e6:	1c73      	adds	r3, r6, #1
    76e8:	d10c      	bne.n	7704 <_strtol_r+0xe4>
    76ea:	2f00      	cmp	r7, #0
    76ec:	f04f 0322 	mov.w	r3, #34	; 0x22
    76f0:	bf0c      	ite	eq
    76f2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    76f6:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
    76fa:	f8cc 3000 	str.w	r3, [ip]
    76fe:	b92a      	cbnz	r2, 770c <_strtol_r+0xec>
    7700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7704:	b107      	cbz	r7, 7708 <_strtol_r+0xe8>
    7706:	4240      	negs	r0, r0
    7708:	b142      	cbz	r2, 771c <_strtol_r+0xfc>
    770a:	b106      	cbz	r6, 770e <_strtol_r+0xee>
    770c:	1e61      	subs	r1, r4, #1
    770e:	6011      	str	r1, [r2, #0]
    7710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7714:	2b00      	cmp	r3, #0
    7716:	bf08      	it	eq
    7718:	2308      	moveq	r3, #8
    771a:	e7b0      	b.n	767e <_strtol_r+0x5e>
    771c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7720:	1fff0b18 	.word	0x1fff0b18

00007724 <strtol>:
strtol():
    7724:	b530      	push	{r4, r5, lr}
    7726:	4613      	mov	r3, r2
    7728:	4a04      	ldr	r2, [pc, #16]	; (773c <strtol+0x18>)
    772a:	4605      	mov	r5, r0
    772c:	460c      	mov	r4, r1
    772e:	6810      	ldr	r0, [r2, #0]
    7730:	4629      	mov	r1, r5
    7732:	4622      	mov	r2, r4
    7734:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    7738:	f7ff bf72 	b.w	7620 <_strtol_r>
    773c:	1fff0b14 	.word	0x1fff0b14

00007740 <tolower>:
tolower():
    7740:	4b04      	ldr	r3, [pc, #16]	; (7754 <tolower+0x14>)
    7742:	681b      	ldr	r3, [r3, #0]
    7744:	4403      	add	r3, r0
    7746:	785b      	ldrb	r3, [r3, #1]
    7748:	f003 0303 	and.w	r3, r3, #3
    774c:	2b01      	cmp	r3, #1
    774e:	bf08      	it	eq
    7750:	3020      	addeq	r0, #32
    7752:	4770      	bx	lr
    7754:	1fff0b18 	.word	0x1fff0b18

00007758 <toupper>:
toupper():
    7758:	4b04      	ldr	r3, [pc, #16]	; (776c <toupper+0x14>)
    775a:	681b      	ldr	r3, [r3, #0]
    775c:	4403      	add	r3, r0
    775e:	785b      	ldrb	r3, [r3, #1]
    7760:	f003 0303 	and.w	r3, r3, #3
    7764:	2b02      	cmp	r3, #2
    7766:	bf08      	it	eq
    7768:	3820      	subeq	r0, #32
    776a:	4770      	bx	lr
    776c:	1fff0b18 	.word	0x1fff0b18

00007770 <_vdiprintf_r>:
_vdprintf_r():
    7770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7774:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
    7778:	461d      	mov	r5, r3
    777a:	f44f 7300 	mov.w	r3, #512	; 0x200
    777e:	460f      	mov	r7, r1
    7780:	4690      	mov	r8, r2
    7782:	9303      	str	r3, [sp, #12]
    7784:	4604      	mov	r4, r0
    7786:	b118      	cbz	r0, 7790 <_vdiprintf_r+0x20>
    7788:	6983      	ldr	r3, [r0, #24]
    778a:	b90b      	cbnz	r3, 7790 <_vdiprintf_r+0x20>
    778c:	f000 f8f8 	bl	7980 <__sinit>
    7790:	ae04      	add	r6, sp, #16
    7792:	9500      	str	r5, [sp, #0]
    7794:	4620      	mov	r0, r4
    7796:	4631      	mov	r1, r6
    7798:	aa03      	add	r2, sp, #12
    779a:	4643      	mov	r3, r8
    779c:	f001 f8f1 	bl	8982 <_vasniprintf_r>
    77a0:	4605      	mov	r5, r0
    77a2:	b170      	cbz	r0, 77c2 <_vdiprintf_r+0x52>
    77a4:	4620      	mov	r0, r4
    77a6:	4639      	mov	r1, r7
    77a8:	462a      	mov	r2, r5
    77aa:	9b03      	ldr	r3, [sp, #12]
    77ac:	f000 f81e 	bl	77ec <_write_r>
    77b0:	42b5      	cmp	r5, r6
    77b2:	9003      	str	r0, [sp, #12]
    77b4:	d003      	beq.n	77be <_vdiprintf_r+0x4e>
    77b6:	4620      	mov	r0, r4
    77b8:	4629      	mov	r1, r5
    77ba:	f7fe ff99 	bl	66f0 <_free_r>
    77be:	9803      	ldr	r0, [sp, #12]
    77c0:	e001      	b.n	77c6 <_vdiprintf_r+0x56>
    77c2:	f04f 30ff 	mov.w	r0, #4294967295
    77c6:	f50d 7d04 	add.w	sp, sp, #528	; 0x210
    77ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    77ce:	ffff b530 	vsli.32	d27, d16, #31

000077d0 <vdiprintf>:
vdiprintf():
    77d0:	b530      	push	{r4, r5, lr}
    77d2:	4613      	mov	r3, r2
    77d4:	4a04      	ldr	r2, [pc, #16]	; (77e8 <vdiprintf+0x18>)
    77d6:	4605      	mov	r5, r0
    77d8:	460c      	mov	r4, r1
    77da:	6810      	ldr	r0, [r2, #0]
    77dc:	4629      	mov	r1, r5
    77de:	4622      	mov	r2, r4
    77e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    77e4:	f7ff bfc4 	b.w	7770 <_vdiprintf_r>
    77e8:	1fff0b14 	.word	0x1fff0b14

000077ec <_write_r>:
_write_r():
    77ec:	b538      	push	{r3, r4, r5, lr}
    77ee:	4c07      	ldr	r4, [pc, #28]	; (780c <_write_r+0x20>)
    77f0:	4605      	mov	r5, r0
    77f2:	2000      	movs	r0, #0
    77f4:	6020      	str	r0, [r4, #0]
    77f6:	4608      	mov	r0, r1
    77f8:	4611      	mov	r1, r2
    77fa:	461a      	mov	r2, r3
    77fc:	f7fd f890 	bl	4920 <_write>
    7800:	1c43      	adds	r3, r0, #1
    7802:	d102      	bne.n	780a <_write_r+0x1e>
    7804:	6823      	ldr	r3, [r4, #0]
    7806:	b103      	cbz	r3, 780a <_write_r+0x1e>
    7808:	602b      	str	r3, [r5, #0]
    780a:	bd38      	pop	{r3, r4, r5, pc}
    780c:	1fff10f0 	.word	0x1fff10f0

00007810 <fcvtbuf>:
fcvtbuf():
    7810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7814:	b089      	sub	sp, #36	; 0x24
    7816:	469a      	mov	sl, r3
    7818:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
    781c:	4b2b      	ldr	r3, [pc, #172]	; (78cc <fcvtbuf+0xbc>)
    781e:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
    7822:	681e      	ldr	r6, [r3, #0]
    7824:	4604      	mov	r4, r0
    7826:	460d      	mov	r5, r1
    7828:	4691      	mov	r9, r2
    782a:	f1b8 0f00 	cmp.w	r8, #0
    782e:	d110      	bne.n	7852 <fcvtbuf+0x42>
    7830:	6b33      	ldr	r3, [r6, #48]	; 0x30
    7832:	3223      	adds	r2, #35	; 0x23
    7834:	4293      	cmp	r3, r2
    7836:	dc0a      	bgt.n	784e <fcvtbuf+0x3e>
    7838:	f109 0724 	add.w	r7, r9, #36	; 0x24
    783c:	4630      	mov	r0, r6
    783e:	6b71      	ldr	r1, [r6, #52]	; 0x34
    7840:	463a      	mov	r2, r7
    7842:	f001 f830 	bl	88a6 <_realloc_r>
    7846:	2800      	cmp	r0, #0
    7848:	d03d      	beq.n	78c6 <fcvtbuf+0xb6>
    784a:	6337      	str	r7, [r6, #48]	; 0x30
    784c:	6370      	str	r0, [r6, #52]	; 0x34
    784e:	f8d6 8034 	ldr.w	r8, [r6, #52]	; 0x34
    7852:	4620      	mov	r0, r4
    7854:	4629      	mov	r1, r5
    7856:	2200      	movs	r2, #0
    7858:	4b1d      	ldr	r3, [pc, #116]	; (78d0 <fcvtbuf+0xc0>)
    785a:	f7fe faf9 	bl	5e50 <__aeabi_dcmplt>
    785e:	af07      	add	r7, sp, #28
    7860:	b140      	cbz	r0, 7874 <fcvtbuf+0x64>
    7862:	4620      	mov	r0, r4
    7864:	4629      	mov	r1, r5
    7866:	2200      	movs	r2, #0
    7868:	4b1a      	ldr	r3, [pc, #104]	; (78d4 <fcvtbuf+0xc4>)
    786a:	f7fe fb0f 	bl	5e8c <__aeabi_dcmpgt>
    786e:	b108      	cbz	r0, 7874 <fcvtbuf+0x64>
    7870:	2302      	movs	r3, #2
    7872:	e000      	b.n	7876 <fcvtbuf+0x66>
    7874:	2303      	movs	r3, #3
    7876:	e88d 0e08 	stmia.w	sp, {r3, r9, sl, fp}
    787a:	9704      	str	r7, [sp, #16]
    787c:	462b      	mov	r3, r5
    787e:	4630      	mov	r0, r6
    7880:	4622      	mov	r2, r4
    7882:	f001 f94d 	bl	8b20 <_dtoa_r>
    7886:	f8da 1000 	ldr.w	r1, [sl]
    788a:	4249      	negs	r1, r1
    788c:	460b      	mov	r3, r1
    788e:	1a46      	subs	r6, r0, r1
    7890:	9d07      	ldr	r5, [sp, #28]
    7892:	441e      	add	r6, r3
    7894:	ebc1 0208 	rsb	r2, r1, r8
    7898:	42b5      	cmp	r5, r6
    789a:	f1c1 0400 	rsb	r4, r1, #0
    789e:	441a      	add	r2, r3
    78a0:	d905      	bls.n	78ae <fcvtbuf+0x9e>
    78a2:	1902      	adds	r2, r0, r4
    78a4:	4444      	add	r4, r8
    78a6:	5cd2      	ldrb	r2, [r2, r3]
    78a8:	54e2      	strb	r2, [r4, r3]
    78aa:	3301      	adds	r3, #1
    78ac:	e7ef      	b.n	788e <fcvtbuf+0x7e>
    78ae:	4610      	mov	r0, r2
    78b0:	1a19      	subs	r1, r3, r0
    78b2:	4411      	add	r1, r2
    78b4:	4549      	cmp	r1, r9
    78b6:	da03      	bge.n	78c0 <fcvtbuf+0xb0>
    78b8:	2130      	movs	r1, #48	; 0x30
    78ba:	f802 1b01 	strb.w	r1, [r2], #1
    78be:	e7f7      	b.n	78b0 <fcvtbuf+0xa0>
    78c0:	2300      	movs	r3, #0
    78c2:	7013      	strb	r3, [r2, #0]
    78c4:	4640      	mov	r0, r8
    78c6:	b009      	add	sp, #36	; 0x24
    78c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    78cc:	1fff0b14 	.word	0x1fff0b14
    78d0:	3ff00000 	.word	0x3ff00000
    78d4:	bff00000 	.word	0xbff00000

000078d8 <_cleanup_r>:
_cleanup_r():
    78d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    78da:	4607      	mov	r7, r0
    78dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
    78e0:	b194      	cbz	r4, 7908 <_cleanup_r+0x30>
    78e2:	68a5      	ldr	r5, [r4, #8]
    78e4:	6866      	ldr	r6, [r4, #4]
    78e6:	3e01      	subs	r6, #1
    78e8:	d40c      	bmi.n	7904 <_cleanup_r+0x2c>
    78ea:	89ab      	ldrh	r3, [r5, #12]
    78ec:	2b01      	cmp	r3, #1
    78ee:	d907      	bls.n	7900 <_cleanup_r+0x28>
    78f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    78f4:	3301      	adds	r3, #1
    78f6:	d003      	beq.n	7900 <_cleanup_r+0x28>
    78f8:	4638      	mov	r0, r7
    78fa:	4629      	mov	r1, r5
    78fc:	f001 ff54 	bl	97a8 <_fflush_r>
    7900:	3568      	adds	r5, #104	; 0x68
    7902:	e7f0      	b.n	78e6 <_cleanup_r+0xe>
    7904:	6824      	ldr	r4, [r4, #0]
    7906:	e7eb      	b.n	78e0 <_cleanup_r+0x8>
    7908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    790a:	ffff 2300 	vsubw.u<illegal width 64>	q9, <illegal reg q7.5>, d0

0000790c <std.isra.0>:
std.isra.0():
    790c:	2300      	movs	r3, #0
    790e:	b510      	push	{r4, lr}
    7910:	4604      	mov	r4, r0
    7912:	6003      	str	r3, [r0, #0]
    7914:	6043      	str	r3, [r0, #4]
    7916:	6083      	str	r3, [r0, #8]
    7918:	8181      	strh	r1, [r0, #12]
    791a:	6643      	str	r3, [r0, #100]	; 0x64
    791c:	81c2      	strh	r2, [r0, #14]
    791e:	6103      	str	r3, [r0, #16]
    7920:	6143      	str	r3, [r0, #20]
    7922:	6183      	str	r3, [r0, #24]
    7924:	4619      	mov	r1, r3
    7926:	305c      	adds	r0, #92	; 0x5c
    7928:	2208      	movs	r2, #8
    792a:	f7fe fed9 	bl	66e0 <memset>
    792e:	4b05      	ldr	r3, [pc, #20]	; (7944 <std.isra.0+0x38>)
    7930:	6263      	str	r3, [r4, #36]	; 0x24
    7932:	4b05      	ldr	r3, [pc, #20]	; (7948 <std.isra.0+0x3c>)
    7934:	62a3      	str	r3, [r4, #40]	; 0x28
    7936:	4b05      	ldr	r3, [pc, #20]	; (794c <std.isra.0+0x40>)
    7938:	62e3      	str	r3, [r4, #44]	; 0x2c
    793a:	4b05      	ldr	r3, [pc, #20]	; (7950 <std.isra.0+0x44>)
    793c:	6224      	str	r4, [r4, #32]
    793e:	6323      	str	r3, [r4, #48]	; 0x30
    7940:	bd10      	pop	{r4, pc}
    7942:	bf00      	nop
    7944:	000088fd 	.word	0x000088fd
    7948:	0000891f 	.word	0x0000891f
    794c:	00008957 	.word	0x00008957
    7950:	0000897b 	.word	0x0000897b

00007954 <__sfmoreglue>:
__sfmoreglue():
    7954:	b570      	push	{r4, r5, r6, lr}
    7956:	1e4b      	subs	r3, r1, #1
    7958:	2568      	movs	r5, #104	; 0x68
    795a:	435d      	muls	r5, r3
    795c:	460e      	mov	r6, r1
    795e:	f105 0174 	add.w	r1, r5, #116	; 0x74
    7962:	f7fe ff09 	bl	6778 <_malloc_r>
    7966:	4604      	mov	r4, r0
    7968:	b140      	cbz	r0, 797c <__sfmoreglue+0x28>
    796a:	2100      	movs	r1, #0
    796c:	e880 0042 	stmia.w	r0, {r1, r6}
    7970:	300c      	adds	r0, #12
    7972:	60a0      	str	r0, [r4, #8]
    7974:	f105 0268 	add.w	r2, r5, #104	; 0x68
    7978:	f7fe feb2 	bl	66e0 <memset>
    797c:	4620      	mov	r0, r4
    797e:	bd70      	pop	{r4, r5, r6, pc}

00007980 <__sinit>:
__sinit():
    7980:	6983      	ldr	r3, [r0, #24]
    7982:	b510      	push	{r4, lr}
    7984:	4604      	mov	r4, r0
    7986:	bb33      	cbnz	r3, 79d6 <__sinit+0x56>
    7988:	6483      	str	r3, [r0, #72]	; 0x48
    798a:	64c3      	str	r3, [r0, #76]	; 0x4c
    798c:	6503      	str	r3, [r0, #80]	; 0x50
    798e:	4b12      	ldr	r3, [pc, #72]	; (79d8 <__sinit+0x58>)
    7990:	4a12      	ldr	r2, [pc, #72]	; (79dc <__sinit+0x5c>)
    7992:	681b      	ldr	r3, [r3, #0]
    7994:	6282      	str	r2, [r0, #40]	; 0x28
    7996:	4298      	cmp	r0, r3
    7998:	bf04      	itt	eq
    799a:	2301      	moveq	r3, #1
    799c:	6183      	streq	r3, [r0, #24]
    799e:	f000 f81f 	bl	79e0 <__sfp>
    79a2:	6060      	str	r0, [r4, #4]
    79a4:	4620      	mov	r0, r4
    79a6:	f000 f81b 	bl	79e0 <__sfp>
    79aa:	60a0      	str	r0, [r4, #8]
    79ac:	4620      	mov	r0, r4
    79ae:	f000 f817 	bl	79e0 <__sfp>
    79b2:	2104      	movs	r1, #4
    79b4:	60e0      	str	r0, [r4, #12]
    79b6:	2200      	movs	r2, #0
    79b8:	6860      	ldr	r0, [r4, #4]
    79ba:	f7ff ffa7 	bl	790c <std.isra.0>
    79be:	68a0      	ldr	r0, [r4, #8]
    79c0:	2109      	movs	r1, #9
    79c2:	2201      	movs	r2, #1
    79c4:	f7ff ffa2 	bl	790c <std.isra.0>
    79c8:	68e0      	ldr	r0, [r4, #12]
    79ca:	2112      	movs	r1, #18
    79cc:	2202      	movs	r2, #2
    79ce:	f7ff ff9d 	bl	790c <std.isra.0>
    79d2:	2301      	movs	r3, #1
    79d4:	61a3      	str	r3, [r4, #24]
    79d6:	bd10      	pop	{r4, pc}
    79d8:	0000a36c 	.word	0x0000a36c
    79dc:	000078d9 	.word	0x000078d9

000079e0 <__sfp>:
__sfp():
    79e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    79e2:	4b1b      	ldr	r3, [pc, #108]	; (7a50 <__sfp+0x70>)
    79e4:	681e      	ldr	r6, [r3, #0]
    79e6:	69b3      	ldr	r3, [r6, #24]
    79e8:	4607      	mov	r7, r0
    79ea:	b913      	cbnz	r3, 79f2 <__sfp+0x12>
    79ec:	4630      	mov	r0, r6
    79ee:	f7ff ffc7 	bl	7980 <__sinit>
    79f2:	3648      	adds	r6, #72	; 0x48
    79f4:	68b4      	ldr	r4, [r6, #8]
    79f6:	6873      	ldr	r3, [r6, #4]
    79f8:	3b01      	subs	r3, #1
    79fa:	d404      	bmi.n	7a06 <__sfp+0x26>
    79fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    7a00:	b175      	cbz	r5, 7a20 <__sfp+0x40>
    7a02:	3468      	adds	r4, #104	; 0x68
    7a04:	e7f8      	b.n	79f8 <__sfp+0x18>
    7a06:	6833      	ldr	r3, [r6, #0]
    7a08:	b92b      	cbnz	r3, 7a16 <__sfp+0x36>
    7a0a:	4638      	mov	r0, r7
    7a0c:	2104      	movs	r1, #4
    7a0e:	f7ff ffa1 	bl	7954 <__sfmoreglue>
    7a12:	6030      	str	r0, [r6, #0]
    7a14:	b108      	cbz	r0, 7a1a <__sfp+0x3a>
    7a16:	6836      	ldr	r6, [r6, #0]
    7a18:	e7ec      	b.n	79f4 <__sfp+0x14>
    7a1a:	230c      	movs	r3, #12
    7a1c:	603b      	str	r3, [r7, #0]
    7a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7a20:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7a24:	81e3      	strh	r3, [r4, #14]
    7a26:	2301      	movs	r3, #1
    7a28:	81a3      	strh	r3, [r4, #12]
    7a2a:	6665      	str	r5, [r4, #100]	; 0x64
    7a2c:	6025      	str	r5, [r4, #0]
    7a2e:	60a5      	str	r5, [r4, #8]
    7a30:	6065      	str	r5, [r4, #4]
    7a32:	6125      	str	r5, [r4, #16]
    7a34:	6165      	str	r5, [r4, #20]
    7a36:	61a5      	str	r5, [r4, #24]
    7a38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    7a3c:	4629      	mov	r1, r5
    7a3e:	2208      	movs	r2, #8
    7a40:	f7fe fe4e 	bl	66e0 <memset>
    7a44:	6365      	str	r5, [r4, #52]	; 0x34
    7a46:	63a5      	str	r5, [r4, #56]	; 0x38
    7a48:	64a5      	str	r5, [r4, #72]	; 0x48
    7a4a:	64e5      	str	r5, [r4, #76]	; 0x4c
    7a4c:	4620      	mov	r0, r4
    7a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7a50:	0000a36c 	.word	0x0000a36c

00007a54 <rshift>:
rshift():
    7a54:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a56:	6906      	ldr	r6, [r0, #16]
    7a58:	114b      	asrs	r3, r1, #5
    7a5a:	42b3      	cmp	r3, r6
    7a5c:	f100 0214 	add.w	r2, r0, #20
    7a60:	da26      	bge.n	7ab0 <rshift+0x5c>
    7a62:	f011 011f 	ands.w	r1, r1, #31
    7a66:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    7a6a:	eb02 0483 	add.w	r4, r2, r3, lsl #2
    7a6e:	d101      	bne.n	7a74 <rshift+0x20>
    7a70:	4613      	mov	r3, r2
    7a72:	e016      	b.n	7aa2 <rshift+0x4e>
    7a74:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    7a78:	f1c1 0c20 	rsb	ip, r1, #32
    7a7c:	3404      	adds	r4, #4
    7a7e:	40cd      	lsrs	r5, r1
    7a80:	4613      	mov	r3, r2
    7a82:	42b4      	cmp	r4, r6
    7a84:	d209      	bcs.n	7a9a <rshift+0x46>
    7a86:	6827      	ldr	r7, [r4, #0]
    7a88:	fa07 f70c 	lsl.w	r7, r7, ip
    7a8c:	433d      	orrs	r5, r7
    7a8e:	f843 5b04 	str.w	r5, [r3], #4
    7a92:	f854 5b04 	ldr.w	r5, [r4], #4
    7a96:	40cd      	lsrs	r5, r1
    7a98:	e7f3      	b.n	7a82 <rshift+0x2e>
    7a9a:	601d      	str	r5, [r3, #0]
    7a9c:	b14d      	cbz	r5, 7ab2 <rshift+0x5e>
    7a9e:	3304      	adds	r3, #4
    7aa0:	e007      	b.n	7ab2 <rshift+0x5e>
    7aa2:	42b4      	cmp	r4, r6
    7aa4:	d205      	bcs.n	7ab2 <rshift+0x5e>
    7aa6:	f854 1b04 	ldr.w	r1, [r4], #4
    7aaa:	f843 1b04 	str.w	r1, [r3], #4
    7aae:	e7f8      	b.n	7aa2 <rshift+0x4e>
    7ab0:	4613      	mov	r3, r2
    7ab2:	1a9b      	subs	r3, r3, r2
    7ab4:	109b      	asrs	r3, r3, #2
    7ab6:	6103      	str	r3, [r0, #16]
    7ab8:	b903      	cbnz	r3, 7abc <rshift+0x68>
    7aba:	6143      	str	r3, [r0, #20]
    7abc:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007abe <__hexdig_fun>:
__hexdig_fun():
    7abe:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    7ac2:	2b09      	cmp	r3, #9
    7ac4:	d801      	bhi.n	7aca <__hexdig_fun+0xc>
    7ac6:	3820      	subs	r0, #32
    7ac8:	e00a      	b.n	7ae0 <__hexdig_fun+0x22>
    7aca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
    7ace:	2b05      	cmp	r3, #5
    7ad0:	d801      	bhi.n	7ad6 <__hexdig_fun+0x18>
    7ad2:	3847      	subs	r0, #71	; 0x47
    7ad4:	e004      	b.n	7ae0 <__hexdig_fun+0x22>
    7ad6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
    7ada:	2b05      	cmp	r3, #5
    7adc:	d802      	bhi.n	7ae4 <__hexdig_fun+0x26>
    7ade:	3827      	subs	r0, #39	; 0x27
    7ae0:	b2c0      	uxtb	r0, r0
    7ae2:	4770      	bx	lr
    7ae4:	2000      	movs	r0, #0
    7ae6:	4770      	bx	lr

00007ae8 <__gethex>:
__gethex():
    7ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7aec:	b089      	sub	sp, #36	; 0x24
    7aee:	4690      	mov	r8, r2
    7af0:	9105      	str	r1, [sp, #20]
    7af2:	9306      	str	r3, [sp, #24]
    7af4:	9003      	str	r0, [sp, #12]
    7af6:	f000 fac9 	bl	808c <_localeconv_r>
    7afa:	6800      	ldr	r0, [r0, #0]
    7afc:	9004      	str	r0, [sp, #16]
    7afe:	f7fe fec8 	bl	6892 <strlen>
    7b02:	9b04      	ldr	r3, [sp, #16]
    7b04:	9905      	ldr	r1, [sp, #20]
    7b06:	9002      	str	r0, [sp, #8]
    7b08:	4403      	add	r3, r0
    7b0a:	f04f 0b00 	mov.w	fp, #0
    7b0e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    7b12:	9307      	str	r3, [sp, #28]
    7b14:	680b      	ldr	r3, [r1, #0]
    7b16:	3302      	adds	r3, #2
    7b18:	461f      	mov	r7, r3
    7b1a:	f813 0b01 	ldrb.w	r0, [r3], #1
    7b1e:	2830      	cmp	r0, #48	; 0x30
    7b20:	d102      	bne.n	7b28 <__gethex+0x40>
    7b22:	f10b 0b01 	add.w	fp, fp, #1
    7b26:	e7f7      	b.n	7b18 <__gethex+0x30>
    7b28:	f7ff ffc9 	bl	7abe <__hexdig_fun>
    7b2c:	4606      	mov	r6, r0
    7b2e:	b9f8      	cbnz	r0, 7b70 <__gethex+0x88>
    7b30:	4638      	mov	r0, r7
    7b32:	9904      	ldr	r1, [sp, #16]
    7b34:	9a02      	ldr	r2, [sp, #8]
    7b36:	f7fe feb4 	bl	68a2 <strncmp>
    7b3a:	2800      	cmp	r0, #0
    7b3c:	d139      	bne.n	7bb2 <__gethex+0xca>
    7b3e:	9b02      	ldr	r3, [sp, #8]
    7b40:	9d02      	ldr	r5, [sp, #8]
    7b42:	5cf8      	ldrb	r0, [r7, r3]
    7b44:	443d      	add	r5, r7
    7b46:	f7ff ffba 	bl	7abe <__hexdig_fun>
    7b4a:	2800      	cmp	r0, #0
    7b4c:	d033      	beq.n	7bb6 <__gethex+0xce>
    7b4e:	462b      	mov	r3, r5
    7b50:	7818      	ldrb	r0, [r3, #0]
    7b52:	2830      	cmp	r0, #48	; 0x30
    7b54:	461f      	mov	r7, r3
    7b56:	f103 0301 	add.w	r3, r3, #1
    7b5a:	d0f9      	beq.n	7b50 <__gethex+0x68>
    7b5c:	f7ff ffaf 	bl	7abe <__hexdig_fun>
    7b60:	f1d0 0401 	rsbs	r4, r0, #1
    7b64:	bf38      	it	cc
    7b66:	2400      	movcc	r4, #0
    7b68:	462e      	mov	r6, r5
    7b6a:	f04f 0b01 	mov.w	fp, #1
    7b6e:	e001      	b.n	7b74 <__gethex+0x8c>
    7b70:	2400      	movs	r4, #0
    7b72:	4626      	mov	r6, r4
    7b74:	46b9      	mov	r9, r7
    7b76:	464d      	mov	r5, r9
    7b78:	f109 0901 	add.w	r9, r9, #1
    7b7c:	7828      	ldrb	r0, [r5, #0]
    7b7e:	f7ff ff9e 	bl	7abe <__hexdig_fun>
    7b82:	2800      	cmp	r0, #0
    7b84:	d1f7      	bne.n	7b76 <__gethex+0x8e>
    7b86:	4628      	mov	r0, r5
    7b88:	9904      	ldr	r1, [sp, #16]
    7b8a:	9a02      	ldr	r2, [sp, #8]
    7b8c:	f7fe fe89 	bl	68a2 <strncmp>
    7b90:	b958      	cbnz	r0, 7baa <__gethex+0xc2>
    7b92:	b95e      	cbnz	r6, 7bac <__gethex+0xc4>
    7b94:	9e02      	ldr	r6, [sp, #8]
    7b96:	442e      	add	r6, r5
    7b98:	46b1      	mov	r9, r6
    7b9a:	464d      	mov	r5, r9
    7b9c:	f109 0901 	add.w	r9, r9, #1
    7ba0:	7828      	ldrb	r0, [r5, #0]
    7ba2:	f7ff ff8c 	bl	7abe <__hexdig_fun>
    7ba6:	2800      	cmp	r0, #0
    7ba8:	d1f7      	bne.n	7b9a <__gethex+0xb2>
    7baa:	b136      	cbz	r6, 7bba <__gethex+0xd2>
    7bac:	1b76      	subs	r6, r6, r5
    7bae:	00b6      	lsls	r6, r6, #2
    7bb0:	e003      	b.n	7bba <__gethex+0xd2>
    7bb2:	463d      	mov	r5, r7
    7bb4:	e000      	b.n	7bb8 <__gethex+0xd0>
    7bb6:	4606      	mov	r6, r0
    7bb8:	2401      	movs	r4, #1
    7bba:	782b      	ldrb	r3, [r5, #0]
    7bbc:	2b50      	cmp	r3, #80	; 0x50
    7bbe:	d001      	beq.n	7bc4 <__gethex+0xdc>
    7bc0:	2b70      	cmp	r3, #112	; 0x70
    7bc2:	d134      	bne.n	7c2e <__gethex+0x146>
    7bc4:	786b      	ldrb	r3, [r5, #1]
    7bc6:	2b2b      	cmp	r3, #43	; 0x2b
    7bc8:	d005      	beq.n	7bd6 <__gethex+0xee>
    7bca:	2b2d      	cmp	r3, #45	; 0x2d
    7bcc:	d005      	beq.n	7bda <__gethex+0xf2>
    7bce:	f105 0901 	add.w	r9, r5, #1
    7bd2:	2100      	movs	r1, #0
    7bd4:	e004      	b.n	7be0 <__gethex+0xf8>
    7bd6:	2100      	movs	r1, #0
    7bd8:	e000      	b.n	7bdc <__gethex+0xf4>
    7bda:	2101      	movs	r1, #1
    7bdc:	f105 0902 	add.w	r9, r5, #2
    7be0:	f899 0000 	ldrb.w	r0, [r9]
    7be4:	9101      	str	r1, [sp, #4]
    7be6:	f7ff ff6a 	bl	7abe <__hexdig_fun>
    7bea:	1e43      	subs	r3, r0, #1
    7bec:	b2db      	uxtb	r3, r3
    7bee:	2b18      	cmp	r3, #24
    7bf0:	9901      	ldr	r1, [sp, #4]
    7bf2:	d81c      	bhi.n	7c2e <__gethex+0x146>
    7bf4:	f1a0 0a10 	sub.w	sl, r0, #16
    7bf8:	f109 0301 	add.w	r3, r9, #1
    7bfc:	4699      	mov	r9, r3
    7bfe:	3301      	adds	r3, #1
    7c00:	f899 0000 	ldrb.w	r0, [r9]
    7c04:	9101      	str	r1, [sp, #4]
    7c06:	9300      	str	r3, [sp, #0]
    7c08:	f7ff ff59 	bl	7abe <__hexdig_fun>
    7c0c:	1e42      	subs	r2, r0, #1
    7c0e:	b2d2      	uxtb	r2, r2
    7c10:	2a18      	cmp	r2, #24
    7c12:	9901      	ldr	r1, [sp, #4]
    7c14:	9b00      	ldr	r3, [sp, #0]
    7c16:	d805      	bhi.n	7c24 <__gethex+0x13c>
    7c18:	220a      	movs	r2, #10
    7c1a:	fb02 0a0a 	mla	sl, r2, sl, r0
    7c1e:	f1aa 0a10 	sub.w	sl, sl, #16
    7c22:	e7eb      	b.n	7bfc <__gethex+0x114>
    7c24:	b109      	cbz	r1, 7c2a <__gethex+0x142>
    7c26:	f1ca 0a00 	rsb	sl, sl, #0
    7c2a:	4456      	add	r6, sl
    7c2c:	e000      	b.n	7c30 <__gethex+0x148>
    7c2e:	46a9      	mov	r9, r5
    7c30:	9905      	ldr	r1, [sp, #20]
    7c32:	f8c1 9000 	str.w	r9, [r1]
    7c36:	b12c      	cbz	r4, 7c44 <__gethex+0x15c>
    7c38:	f1bb 0f00 	cmp.w	fp, #0
    7c3c:	bf0c      	ite	eq
    7c3e:	2006      	moveq	r0, #6
    7c40:	2000      	movne	r0, #0
    7c42:	e17d      	b.n	7f40 <__gethex+0x458>
    7c44:	1beb      	subs	r3, r5, r7
    7c46:	3b01      	subs	r3, #1
    7c48:	4621      	mov	r1, r4
    7c4a:	2b07      	cmp	r3, #7
    7c4c:	dd02      	ble.n	7c54 <__gethex+0x16c>
    7c4e:	3101      	adds	r1, #1
    7c50:	105b      	asrs	r3, r3, #1
    7c52:	e7fa      	b.n	7c4a <__gethex+0x162>
    7c54:	9803      	ldr	r0, [sp, #12]
    7c56:	f000 fa1d 	bl	8094 <_Balloc>
    7c5a:	f04f 0900 	mov.w	r9, #0
    7c5e:	f100 0a14 	add.w	sl, r0, #20
    7c62:	4604      	mov	r4, r0
    7c64:	4653      	mov	r3, sl
    7c66:	46cb      	mov	fp, r9
    7c68:	42bd      	cmp	r5, r7
    7c6a:	d933      	bls.n	7cd4 <__gethex+0x1ec>
    7c6c:	1e6a      	subs	r2, r5, #1
    7c6e:	9205      	str	r2, [sp, #20]
    7c70:	9907      	ldr	r1, [sp, #28]
    7c72:	f815 2c01 	ldrb.w	r2, [r5, #-1]
    7c76:	428a      	cmp	r2, r1
    7c78:	d009      	beq.n	7c8e <__gethex+0x1a6>
    7c7a:	f1bb 0f20 	cmp.w	fp, #32
    7c7e:	d117      	bne.n	7cb0 <__gethex+0x1c8>
    7c80:	f8c3 9000 	str.w	r9, [r3]
    7c84:	f04f 0900 	mov.w	r9, #0
    7c88:	3304      	adds	r3, #4
    7c8a:	46cb      	mov	fp, r9
    7c8c:	e010      	b.n	7cb0 <__gethex+0x1c8>
    7c8e:	9a02      	ldr	r2, [sp, #8]
    7c90:	9905      	ldr	r1, [sp, #20]
    7c92:	f1c2 0c01 	rsb	ip, r2, #1
    7c96:	448c      	add	ip, r1
    7c98:	45bc      	cmp	ip, r7
    7c9a:	d3ee      	bcc.n	7c7a <__gethex+0x192>
    7c9c:	4660      	mov	r0, ip
    7c9e:	9904      	ldr	r1, [sp, #16]
    7ca0:	e88d 1008 	stmia.w	sp, {r3, ip}
    7ca4:	f7fe fdfd 	bl	68a2 <strncmp>
    7ca8:	e89d 1008 	ldmia.w	sp, {r3, ip}
    7cac:	b180      	cbz	r0, 7cd0 <__gethex+0x1e8>
    7cae:	e7e4      	b.n	7c7a <__gethex+0x192>
    7cb0:	f815 0c01 	ldrb.w	r0, [r5, #-1]
    7cb4:	9300      	str	r3, [sp, #0]
    7cb6:	f7ff ff02 	bl	7abe <__hexdig_fun>
    7cba:	f000 000f 	and.w	r0, r0, #15
    7cbe:	fa00 f00b 	lsl.w	r0, r0, fp
    7cc2:	f8dd c014 	ldr.w	ip, [sp, #20]
    7cc6:	9b00      	ldr	r3, [sp, #0]
    7cc8:	ea49 0900 	orr.w	r9, r9, r0
    7ccc:	f10b 0b04 	add.w	fp, fp, #4
    7cd0:	4665      	mov	r5, ip
    7cd2:	e7c9      	b.n	7c68 <__gethex+0x180>
    7cd4:	f843 9b04 	str.w	r9, [r3], #4
    7cd8:	ebca 0303 	rsb	r3, sl, r3
    7cdc:	109b      	asrs	r3, r3, #2
    7cde:	6123      	str	r3, [r4, #16]
    7ce0:	4648      	mov	r0, r9
    7ce2:	015f      	lsls	r7, r3, #5
    7ce4:	f000 fa9e 	bl	8224 <__hi0bits>
    7ce8:	f8d8 5000 	ldr.w	r5, [r8]
    7cec:	1a38      	subs	r0, r7, r0
    7cee:	42a8      	cmp	r0, r5
    7cf0:	dd26      	ble.n	7d40 <__gethex+0x258>
    7cf2:	1b47      	subs	r7, r0, r5
    7cf4:	4639      	mov	r1, r7
    7cf6:	4620      	mov	r0, r4
    7cf8:	f000 fda3 	bl	8842 <__any_on>
    7cfc:	b1c8      	cbz	r0, 7d32 <__gethex+0x24a>
    7cfe:	1e7b      	subs	r3, r7, #1
    7d00:	115a      	asrs	r2, r3, #5
    7d02:	f003 011f 	and.w	r1, r3, #31
    7d06:	f04f 0901 	mov.w	r9, #1
    7d0a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
    7d0e:	fa09 f101 	lsl.w	r1, r9, r1
    7d12:	4211      	tst	r1, r2
    7d14:	d00e      	beq.n	7d34 <__gethex+0x24c>
    7d16:	454b      	cmp	r3, r9
    7d18:	dc02      	bgt.n	7d20 <__gethex+0x238>
    7d1a:	f04f 0902 	mov.w	r9, #2
    7d1e:	e009      	b.n	7d34 <__gethex+0x24c>
    7d20:	4620      	mov	r0, r4
    7d22:	1eb9      	subs	r1, r7, #2
    7d24:	f000 fd8d 	bl	8842 <__any_on>
    7d28:	2800      	cmp	r0, #0
    7d2a:	d0f6      	beq.n	7d1a <__gethex+0x232>
    7d2c:	f04f 0903 	mov.w	r9, #3
    7d30:	e000      	b.n	7d34 <__gethex+0x24c>
    7d32:	4681      	mov	r9, r0
    7d34:	4620      	mov	r0, r4
    7d36:	4639      	mov	r1, r7
    7d38:	f7ff fe8c 	bl	7a54 <rshift>
    7d3c:	443e      	add	r6, r7
    7d3e:	e00c      	b.n	7d5a <__gethex+0x272>
    7d40:	da09      	bge.n	7d56 <__gethex+0x26e>
    7d42:	1a2f      	subs	r7, r5, r0
    7d44:	4621      	mov	r1, r4
    7d46:	9803      	ldr	r0, [sp, #12]
    7d48:	463a      	mov	r2, r7
    7d4a:	f000 fba7 	bl	849c <__lshift>
    7d4e:	1bf6      	subs	r6, r6, r7
    7d50:	4604      	mov	r4, r0
    7d52:	f100 0a14 	add.w	sl, r0, #20
    7d56:	f04f 0900 	mov.w	r9, #0
    7d5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
    7d5e:	429e      	cmp	r6, r3
    7d60:	dd08      	ble.n	7d74 <__gethex+0x28c>
    7d62:	9803      	ldr	r0, [sp, #12]
    7d64:	4621      	mov	r1, r4
    7d66:	f000 f9ca 	bl	80fe <_Bfree>
    7d6a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    7d6c:	2300      	movs	r3, #0
    7d6e:	6013      	str	r3, [r2, #0]
    7d70:	20a3      	movs	r0, #163	; 0xa3
    7d72:	e0e5      	b.n	7f40 <__gethex+0x458>
    7d74:	f8d8 3004 	ldr.w	r3, [r8, #4]
    7d78:	429e      	cmp	r6, r3
    7d7a:	da54      	bge.n	7e26 <__gethex+0x33e>
    7d7c:	1b9e      	subs	r6, r3, r6
    7d7e:	42ae      	cmp	r6, r5
    7d80:	db2e      	blt.n	7de0 <__gethex+0x2f8>
    7d82:	f8d8 300c 	ldr.w	r3, [r8, #12]
    7d86:	2b02      	cmp	r3, #2
    7d88:	d01a      	beq.n	7dc0 <__gethex+0x2d8>
    7d8a:	2b03      	cmp	r3, #3
    7d8c:	d01c      	beq.n	7dc8 <__gethex+0x2e0>
    7d8e:	2b01      	cmp	r3, #1
    7d90:	d11d      	bne.n	7dce <__gethex+0x2e6>
    7d92:	42ae      	cmp	r6, r5
    7d94:	d11b      	bne.n	7dce <__gethex+0x2e6>
    7d96:	2d01      	cmp	r5, #1
    7d98:	dc0b      	bgt.n	7db2 <__gethex+0x2ca>
    7d9a:	9906      	ldr	r1, [sp, #24]
    7d9c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    7da0:	600b      	str	r3, [r1, #0]
    7da2:	2301      	movs	r3, #1
    7da4:	6123      	str	r3, [r4, #16]
    7da6:	f8ca 3000 	str.w	r3, [sl]
    7daa:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7dac:	2062      	movs	r0, #98	; 0x62
    7dae:	601c      	str	r4, [r3, #0]
    7db0:	e0c6      	b.n	7f40 <__gethex+0x458>
    7db2:	4620      	mov	r0, r4
    7db4:	1e69      	subs	r1, r5, #1
    7db6:	f000 fd44 	bl	8842 <__any_on>
    7dba:	2800      	cmp	r0, #0
    7dbc:	d1ed      	bne.n	7d9a <__gethex+0x2b2>
    7dbe:	e006      	b.n	7dce <__gethex+0x2e6>
    7dc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    7dc2:	2b00      	cmp	r3, #0
    7dc4:	d0e9      	beq.n	7d9a <__gethex+0x2b2>
    7dc6:	e002      	b.n	7dce <__gethex+0x2e6>
    7dc8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    7dca:	2b00      	cmp	r3, #0
    7dcc:	d1e5      	bne.n	7d9a <__gethex+0x2b2>
    7dce:	9803      	ldr	r0, [sp, #12]
    7dd0:	4621      	mov	r1, r4
    7dd2:	f000 f994 	bl	80fe <_Bfree>
    7dd6:	9912      	ldr	r1, [sp, #72]	; 0x48
    7dd8:	2300      	movs	r3, #0
    7dda:	600b      	str	r3, [r1, #0]
    7ddc:	2050      	movs	r0, #80	; 0x50
    7dde:	e0af      	b.n	7f40 <__gethex+0x458>
    7de0:	1e77      	subs	r7, r6, #1
    7de2:	f1b9 0f00 	cmp.w	r9, #0
    7de6:	d107      	bne.n	7df8 <__gethex+0x310>
    7de8:	2f00      	cmp	r7, #0
    7dea:	dd07      	ble.n	7dfc <__gethex+0x314>
    7dec:	4620      	mov	r0, r4
    7dee:	4639      	mov	r1, r7
    7df0:	f000 fd27 	bl	8842 <__any_on>
    7df4:	4681      	mov	r9, r0
    7df6:	e001      	b.n	7dfc <__gethex+0x314>
    7df8:	f04f 0901 	mov.w	r9, #1
    7dfc:	117b      	asrs	r3, r7, #5
    7dfe:	2201      	movs	r2, #1
    7e00:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
    7e04:	f007 071f 	and.w	r7, r7, #31
    7e08:	fa02 f707 	lsl.w	r7, r2, r7
    7e0c:	421f      	tst	r7, r3
    7e0e:	4631      	mov	r1, r6
    7e10:	4620      	mov	r0, r4
    7e12:	bf18      	it	ne
    7e14:	f049 0902 	orrne.w	r9, r9, #2
    7e18:	1bad      	subs	r5, r5, r6
    7e1a:	f7ff fe1b 	bl	7a54 <rshift>
    7e1e:	2702      	movs	r7, #2
    7e20:	f8d8 6004 	ldr.w	r6, [r8, #4]
    7e24:	e000      	b.n	7e28 <__gethex+0x340>
    7e26:	2701      	movs	r7, #1
    7e28:	f1b9 0f00 	cmp.w	r9, #0
    7e2c:	f000 8083 	beq.w	7f36 <__gethex+0x44e>
    7e30:	f8d8 300c 	ldr.w	r3, [r8, #12]
    7e34:	2b02      	cmp	r3, #2
    7e36:	d00e      	beq.n	7e56 <__gethex+0x36e>
    7e38:	2b03      	cmp	r3, #3
    7e3a:	d010      	beq.n	7e5e <__gethex+0x376>
    7e3c:	2b01      	cmp	r3, #1
    7e3e:	d178      	bne.n	7f32 <__gethex+0x44a>
    7e40:	f019 0f02 	tst.w	r9, #2
    7e44:	d075      	beq.n	7f32 <__gethex+0x44a>
    7e46:	f8da 3000 	ldr.w	r3, [sl]
    7e4a:	ea49 0903 	orr.w	r9, r9, r3
    7e4e:	f019 0f01 	tst.w	r9, #1
    7e52:	d107      	bne.n	7e64 <__gethex+0x37c>
    7e54:	e06d      	b.n	7f32 <__gethex+0x44a>
    7e56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    7e58:	f1c3 0301 	rsb	r3, r3, #1
    7e5c:	9313      	str	r3, [sp, #76]	; 0x4c
    7e5e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    7e60:	2b00      	cmp	r3, #0
    7e62:	d066      	beq.n	7f32 <__gethex+0x44a>
    7e64:	f8d4 9010 	ldr.w	r9, [r4, #16]
    7e68:	f104 0314 	add.w	r3, r4, #20
    7e6c:	ea4f 0a89 	mov.w	sl, r9, lsl #2
    7e70:	eb03 010a 	add.w	r1, r3, sl
    7e74:	4618      	mov	r0, r3
    7e76:	f853 2b04 	ldr.w	r2, [r3], #4
    7e7a:	f1b2 3fff 	cmp.w	r2, #4294967295
    7e7e:	d002      	beq.n	7e86 <__gethex+0x39e>
    7e80:	3201      	adds	r2, #1
    7e82:	6002      	str	r2, [r0, #0]
    7e84:	e021      	b.n	7eca <__gethex+0x3e2>
    7e86:	2200      	movs	r2, #0
    7e88:	428b      	cmp	r3, r1
    7e8a:	f843 2c04 	str.w	r2, [r3, #-4]
    7e8e:	d3f1      	bcc.n	7e74 <__gethex+0x38c>
    7e90:	68a3      	ldr	r3, [r4, #8]
    7e92:	4599      	cmp	r9, r3
    7e94:	db12      	blt.n	7ebc <__gethex+0x3d4>
    7e96:	6861      	ldr	r1, [r4, #4]
    7e98:	9803      	ldr	r0, [sp, #12]
    7e9a:	3101      	adds	r1, #1
    7e9c:	f000 f8fa 	bl	8094 <_Balloc>
    7ea0:	6922      	ldr	r2, [r4, #16]
    7ea2:	3202      	adds	r2, #2
    7ea4:	f104 010c 	add.w	r1, r4, #12
    7ea8:	4683      	mov	fp, r0
    7eaa:	0092      	lsls	r2, r2, #2
    7eac:	300c      	adds	r0, #12
    7eae:	f7fe fbf3 	bl	6698 <memcpy>
    7eb2:	4621      	mov	r1, r4
    7eb4:	9803      	ldr	r0, [sp, #12]
    7eb6:	f000 f922 	bl	80fe <_Bfree>
    7eba:	465c      	mov	r4, fp
    7ebc:	6923      	ldr	r3, [r4, #16]
    7ebe:	1c5a      	adds	r2, r3, #1
    7ec0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    7ec4:	6122      	str	r2, [r4, #16]
    7ec6:	2201      	movs	r2, #1
    7ec8:	615a      	str	r2, [r3, #20]
    7eca:	2f02      	cmp	r7, #2
    7ecc:	f104 0314 	add.w	r3, r4, #20
    7ed0:	d111      	bne.n	7ef6 <__gethex+0x40e>
    7ed2:	f8d8 2000 	ldr.w	r2, [r8]
    7ed6:	3a01      	subs	r2, #1
    7ed8:	4295      	cmp	r5, r2
    7eda:	d127      	bne.n	7f2c <__gethex+0x444>
    7edc:	116a      	asrs	r2, r5, #5
    7ede:	2101      	movs	r1, #1
    7ee0:	f005 051f 	and.w	r5, r5, #31
    7ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7ee8:	fa01 f505 	lsl.w	r5, r1, r5
    7eec:	421d      	tst	r5, r3
    7eee:	bf0c      	ite	eq
    7ef0:	2702      	moveq	r7, #2
    7ef2:	460f      	movne	r7, r1
    7ef4:	e01a      	b.n	7f2c <__gethex+0x444>
    7ef6:	6922      	ldr	r2, [r4, #16]
    7ef8:	454a      	cmp	r2, r9
    7efa:	dd0a      	ble.n	7f12 <__gethex+0x42a>
    7efc:	4620      	mov	r0, r4
    7efe:	2101      	movs	r1, #1
    7f00:	f7ff fda8 	bl	7a54 <rshift>
    7f04:	f8d8 3008 	ldr.w	r3, [r8, #8]
    7f08:	3601      	adds	r6, #1
    7f0a:	429e      	cmp	r6, r3
    7f0c:	f73f af29 	bgt.w	7d62 <__gethex+0x27a>
    7f10:	e00b      	b.n	7f2a <__gethex+0x442>
    7f12:	f015 051f 	ands.w	r5, r5, #31
    7f16:	d008      	beq.n	7f2a <__gethex+0x442>
    7f18:	4453      	add	r3, sl
    7f1a:	f1c5 0520 	rsb	r5, r5, #32
    7f1e:	f853 0c04 	ldr.w	r0, [r3, #-4]
    7f22:	f000 f97f 	bl	8224 <__hi0bits>
    7f26:	42a8      	cmp	r0, r5
    7f28:	dbe8      	blt.n	7efc <__gethex+0x414>
    7f2a:	2701      	movs	r7, #1
    7f2c:	f047 0720 	orr.w	r7, r7, #32
    7f30:	e001      	b.n	7f36 <__gethex+0x44e>
    7f32:	f047 0710 	orr.w	r7, r7, #16
    7f36:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7f38:	601c      	str	r4, [r3, #0]
    7f3a:	9b06      	ldr	r3, [sp, #24]
    7f3c:	4638      	mov	r0, r7
    7f3e:	601e      	str	r6, [r3, #0]
    7f40:	b009      	add	sp, #36	; 0x24
    7f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00007f46 <L_shift>:
L_shift():
    7f46:	f1c2 0208 	rsb	r2, r2, #8
    7f4a:	0092      	lsls	r2, r2, #2
    7f4c:	b570      	push	{r4, r5, r6, lr}
    7f4e:	f1c2 0420 	rsb	r4, r2, #32
    7f52:	6805      	ldr	r5, [r0, #0]
    7f54:	f850 3f04 	ldr.w	r3, [r0, #4]!
    7f58:	fa03 f604 	lsl.w	r6, r3, r4
    7f5c:	4335      	orrs	r5, r6
    7f5e:	40d3      	lsrs	r3, r2
    7f60:	4288      	cmp	r0, r1
    7f62:	f840 5c04 	str.w	r5, [r0, #-4]
    7f66:	6003      	str	r3, [r0, #0]
    7f68:	d3f3      	bcc.n	7f52 <L_shift+0xc>
    7f6a:	bd70      	pop	{r4, r5, r6, pc}

00007f6c <__hexnan>:
__hexnan():
    7f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7f70:	680b      	ldr	r3, [r1, #0]
    7f72:	b085      	sub	sp, #20
    7f74:	115e      	asrs	r6, r3, #5
    7f76:	9003      	str	r0, [sp, #12]
    7f78:	f013 031f 	ands.w	r3, r3, #31
    7f7c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    7f80:	9302      	str	r3, [sp, #8]
    7f82:	9b03      	ldr	r3, [sp, #12]
    7f84:	bf18      	it	ne
    7f86:	3604      	addne	r6, #4
    7f88:	f1a6 0804 	sub.w	r8, r6, #4
    7f8c:	4615      	mov	r5, r2
    7f8e:	f8d3 9000 	ldr.w	r9, [r3]
    7f92:	2200      	movs	r2, #0
    7f94:	f846 2c04 	str.w	r2, [r6, #-4]
    7f98:	4647      	mov	r7, r8
    7f9a:	4644      	mov	r4, r8
    7f9c:	4692      	mov	sl, r2
    7f9e:	4693      	mov	fp, r2
    7fa0:	f899 1001 	ldrb.w	r1, [r9, #1]
    7fa4:	2900      	cmp	r1, #0
    7fa6:	d03a      	beq.n	801e <__hexnan+0xb2>
    7fa8:	4608      	mov	r0, r1
    7faa:	e88d 0006 	stmia.w	sp, {r1, r2}
    7fae:	f7ff fd86 	bl	7abe <__hexdig_fun>
    7fb2:	e89d 0006 	ldmia.w	sp, {r1, r2}
    7fb6:	b9d8      	cbnz	r0, 7ff0 <__hexnan+0x84>
    7fb8:	2920      	cmp	r1, #32
    7fba:	d812      	bhi.n	7fe2 <__hexnan+0x76>
    7fbc:	45da      	cmp	sl, fp
    7fbe:	da2b      	bge.n	8018 <__hexnan+0xac>
    7fc0:	42bc      	cmp	r4, r7
    7fc2:	d205      	bcs.n	7fd0 <__hexnan+0x64>
    7fc4:	2a07      	cmp	r2, #7
    7fc6:	dc03      	bgt.n	7fd0 <__hexnan+0x64>
    7fc8:	4620      	mov	r0, r4
    7fca:	4639      	mov	r1, r7
    7fcc:	f7ff ffbb 	bl	7f46 <L_shift>
    7fd0:	42ac      	cmp	r4, r5
    7fd2:	d920      	bls.n	8016 <__hexnan+0xaa>
    7fd4:	1f27      	subs	r7, r4, #4
    7fd6:	2200      	movs	r2, #0
    7fd8:	f844 2c04 	str.w	r2, [r4, #-4]
    7fdc:	46da      	mov	sl, fp
    7fde:	463c      	mov	r4, r7
    7fe0:	e01a      	b.n	8018 <__hexnan+0xac>
    7fe2:	2929      	cmp	r1, #41	; 0x29
    7fe4:	d14c      	bne.n	8080 <__hexnan+0x114>
    7fe6:	9b03      	ldr	r3, [sp, #12]
    7fe8:	f109 0102 	add.w	r1, r9, #2
    7fec:	6019      	str	r1, [r3, #0]
    7fee:	e016      	b.n	801e <__hexnan+0xb2>
    7ff0:	3201      	adds	r2, #1
    7ff2:	2a08      	cmp	r2, #8
    7ff4:	f10b 0b01 	add.w	fp, fp, #1
    7ff8:	dd06      	ble.n	8008 <__hexnan+0x9c>
    7ffa:	42ac      	cmp	r4, r5
    7ffc:	d90c      	bls.n	8018 <__hexnan+0xac>
    7ffe:	2200      	movs	r2, #0
    8000:	f844 2c04 	str.w	r2, [r4, #-4]
    8004:	3c04      	subs	r4, #4
    8006:	2201      	movs	r2, #1
    8008:	6821      	ldr	r1, [r4, #0]
    800a:	f000 000f 	and.w	r0, r0, #15
    800e:	ea40 1101 	orr.w	r1, r0, r1, lsl #4
    8012:	6021      	str	r1, [r4, #0]
    8014:	e000      	b.n	8018 <__hexnan+0xac>
    8016:	2208      	movs	r2, #8
    8018:	f109 0901 	add.w	r9, r9, #1
    801c:	e7c0      	b.n	7fa0 <__hexnan+0x34>
    801e:	f1bb 0f00 	cmp.w	fp, #0
    8022:	d02d      	beq.n	8080 <__hexnan+0x114>
    8024:	42bc      	cmp	r4, r7
    8026:	d205      	bcs.n	8034 <__hexnan+0xc8>
    8028:	2a07      	cmp	r2, #7
    802a:	dc03      	bgt.n	8034 <__hexnan+0xc8>
    802c:	4620      	mov	r0, r4
    802e:	4639      	mov	r1, r7
    8030:	f7ff ff89 	bl	7f46 <L_shift>
    8034:	42ac      	cmp	r4, r5
    8036:	d90c      	bls.n	8052 <__hexnan+0xe6>
    8038:	462b      	mov	r3, r5
    803a:	f854 2b04 	ldr.w	r2, [r4], #4
    803e:	f843 2b04 	str.w	r2, [r3], #4
    8042:	4544      	cmp	r4, r8
    8044:	d9f9      	bls.n	803a <__hexnan+0xce>
    8046:	2200      	movs	r2, #0
    8048:	f843 2b04 	str.w	r2, [r3], #4
    804c:	4543      	cmp	r3, r8
    804e:	d9fa      	bls.n	8046 <__hexnan+0xda>
    8050:	e00d      	b.n	806e <__hexnan+0x102>
    8052:	9b02      	ldr	r3, [sp, #8]
    8054:	b15b      	cbz	r3, 806e <__hexnan+0x102>
    8056:	f1c3 0920 	rsb	r9, r3, #32
    805a:	f04f 33ff 	mov.w	r3, #4294967295
    805e:	fa23 f909 	lsr.w	r9, r3, r9
    8062:	f856 3c04 	ldr.w	r3, [r6, #-4]
    8066:	ea03 0309 	and.w	r3, r3, r9
    806a:	f846 3c04 	str.w	r3, [r6, #-4]
    806e:	f856 3c04 	ldr.w	r3, [r6, #-4]
    8072:	3e04      	subs	r6, #4
    8074:	b933      	cbnz	r3, 8084 <__hexnan+0x118>
    8076:	42b5      	cmp	r5, r6
    8078:	d1f9      	bne.n	806e <__hexnan+0x102>
    807a:	2301      	movs	r3, #1
    807c:	602b      	str	r3, [r5, #0]
    807e:	e001      	b.n	8084 <__hexnan+0x118>
    8080:	2004      	movs	r0, #4
    8082:	e000      	b.n	8086 <__hexnan+0x11a>
    8084:	2005      	movs	r0, #5
    8086:	b005      	add	sp, #20
    8088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000808c <_localeconv_r>:
_localeconv_r():
    808c:	4800      	ldr	r0, [pc, #0]	; (8090 <_localeconv_r+0x4>)
    808e:	4770      	bx	lr
    8090:	1fff0b1c 	.word	0x1fff0b1c

00008094 <_Balloc>:
_Balloc():
    8094:	b570      	push	{r4, r5, r6, lr}
    8096:	6a45      	ldr	r5, [r0, #36]	; 0x24
    8098:	4604      	mov	r4, r0
    809a:	460e      	mov	r6, r1
    809c:	b93d      	cbnz	r5, 80ae <_Balloc+0x1a>
    809e:	2010      	movs	r0, #16
    80a0:	f7fe faea 	bl	6678 <malloc>
    80a4:	6260      	str	r0, [r4, #36]	; 0x24
    80a6:	6045      	str	r5, [r0, #4]
    80a8:	6085      	str	r5, [r0, #8]
    80aa:	6005      	str	r5, [r0, #0]
    80ac:	60c5      	str	r5, [r0, #12]
    80ae:	6a65      	ldr	r5, [r4, #36]	; 0x24
    80b0:	68eb      	ldr	r3, [r5, #12]
    80b2:	b143      	cbz	r3, 80c6 <_Balloc+0x32>
    80b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    80b6:	68da      	ldr	r2, [r3, #12]
    80b8:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
    80bc:	b178      	cbz	r0, 80de <_Balloc+0x4a>
    80be:	6801      	ldr	r1, [r0, #0]
    80c0:	f842 1026 	str.w	r1, [r2, r6, lsl #2]
    80c4:	e017      	b.n	80f6 <_Balloc+0x62>
    80c6:	4620      	mov	r0, r4
    80c8:	2104      	movs	r1, #4
    80ca:	2221      	movs	r2, #33	; 0x21
    80cc:	f000 fbdd 	bl	888a <_calloc_r>
    80d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    80d2:	60e8      	str	r0, [r5, #12]
    80d4:	68db      	ldr	r3, [r3, #12]
    80d6:	2b00      	cmp	r3, #0
    80d8:	d1ec      	bne.n	80b4 <_Balloc+0x20>
    80da:	2000      	movs	r0, #0
    80dc:	bd70      	pop	{r4, r5, r6, pc}
    80de:	2101      	movs	r1, #1
    80e0:	fa01 f506 	lsl.w	r5, r1, r6
    80e4:	1d6a      	adds	r2, r5, #5
    80e6:	4620      	mov	r0, r4
    80e8:	0092      	lsls	r2, r2, #2
    80ea:	f000 fbce 	bl	888a <_calloc_r>
    80ee:	2800      	cmp	r0, #0
    80f0:	d0f3      	beq.n	80da <_Balloc+0x46>
    80f2:	6046      	str	r6, [r0, #4]
    80f4:	6085      	str	r5, [r0, #8]
    80f6:	2200      	movs	r2, #0
    80f8:	6102      	str	r2, [r0, #16]
    80fa:	60c2      	str	r2, [r0, #12]
    80fc:	bd70      	pop	{r4, r5, r6, pc}

000080fe <_Bfree>:
_Bfree():
    80fe:	b570      	push	{r4, r5, r6, lr}
    8100:	6a44      	ldr	r4, [r0, #36]	; 0x24
    8102:	4606      	mov	r6, r0
    8104:	460d      	mov	r5, r1
    8106:	b93c      	cbnz	r4, 8118 <_Bfree+0x1a>
    8108:	2010      	movs	r0, #16
    810a:	f7fe fab5 	bl	6678 <malloc>
    810e:	6270      	str	r0, [r6, #36]	; 0x24
    8110:	6044      	str	r4, [r0, #4]
    8112:	6084      	str	r4, [r0, #8]
    8114:	6004      	str	r4, [r0, #0]
    8116:	60c4      	str	r4, [r0, #12]
    8118:	b13d      	cbz	r5, 812a <_Bfree+0x2c>
    811a:	6a73      	ldr	r3, [r6, #36]	; 0x24
    811c:	686a      	ldr	r2, [r5, #4]
    811e:	68db      	ldr	r3, [r3, #12]
    8120:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    8124:	6029      	str	r1, [r5, #0]
    8126:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    812a:	bd70      	pop	{r4, r5, r6, pc}

0000812c <__multadd>:
__multadd():
    812c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8130:	460c      	mov	r4, r1
    8132:	461e      	mov	r6, r3
    8134:	690d      	ldr	r5, [r1, #16]
    8136:	4607      	mov	r7, r0
    8138:	3114      	adds	r1, #20
    813a:	2300      	movs	r3, #0
    813c:	6808      	ldr	r0, [r1, #0]
    813e:	fa1f fc80 	uxth.w	ip, r0
    8142:	0c00      	lsrs	r0, r0, #16
    8144:	fb02 6c0c 	mla	ip, r2, ip, r6
    8148:	4350      	muls	r0, r2
    814a:	eb00 401c 	add.w	r0, r0, ip, lsr #16
    814e:	3301      	adds	r3, #1
    8150:	fa1f fc8c 	uxth.w	ip, ip
    8154:	0c06      	lsrs	r6, r0, #16
    8156:	42ab      	cmp	r3, r5
    8158:	eb0c 4000 	add.w	r0, ip, r0, lsl #16
    815c:	f841 0b04 	str.w	r0, [r1], #4
    8160:	dbec      	blt.n	813c <__multadd+0x10>
    8162:	b1d6      	cbz	r6, 819a <__multadd+0x6e>
    8164:	68a3      	ldr	r3, [r4, #8]
    8166:	429d      	cmp	r5, r3
    8168:	db12      	blt.n	8190 <__multadd+0x64>
    816a:	6861      	ldr	r1, [r4, #4]
    816c:	4638      	mov	r0, r7
    816e:	3101      	adds	r1, #1
    8170:	f7ff ff90 	bl	8094 <_Balloc>
    8174:	6922      	ldr	r2, [r4, #16]
    8176:	3202      	adds	r2, #2
    8178:	f104 010c 	add.w	r1, r4, #12
    817c:	4680      	mov	r8, r0
    817e:	0092      	lsls	r2, r2, #2
    8180:	300c      	adds	r0, #12
    8182:	f7fe fa89 	bl	6698 <memcpy>
    8186:	4621      	mov	r1, r4
    8188:	4638      	mov	r0, r7
    818a:	f7ff ffb8 	bl	80fe <_Bfree>
    818e:	4644      	mov	r4, r8
    8190:	eb04 0385 	add.w	r3, r4, r5, lsl #2
    8194:	3501      	adds	r5, #1
    8196:	615e      	str	r6, [r3, #20]
    8198:	6125      	str	r5, [r4, #16]
    819a:	4620      	mov	r0, r4
    819c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000081a0 <__s2b>:
__s2b():
    81a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    81a4:	4614      	mov	r4, r2
    81a6:	4698      	mov	r8, r3
    81a8:	f103 0208 	add.w	r2, r3, #8
    81ac:	2309      	movs	r3, #9
    81ae:	460d      	mov	r5, r1
    81b0:	fb92 f2f3 	sdiv	r2, r2, r3
    81b4:	4606      	mov	r6, r0
    81b6:	2301      	movs	r3, #1
    81b8:	2100      	movs	r1, #0
    81ba:	429a      	cmp	r2, r3
    81bc:	dd02      	ble.n	81c4 <__s2b+0x24>
    81be:	005b      	lsls	r3, r3, #1
    81c0:	3101      	adds	r1, #1
    81c2:	e7fa      	b.n	81ba <__s2b+0x1a>
    81c4:	4630      	mov	r0, r6
    81c6:	f7ff ff65 	bl	8094 <_Balloc>
    81ca:	9b08      	ldr	r3, [sp, #32]
    81cc:	6143      	str	r3, [r0, #20]
    81ce:	2c09      	cmp	r4, #9
    81d0:	f04f 0301 	mov.w	r3, #1
    81d4:	4601      	mov	r1, r0
    81d6:	6103      	str	r3, [r0, #16]
    81d8:	dd11      	ble.n	81fe <__s2b+0x5e>
    81da:	f105 0909 	add.w	r9, r5, #9
    81de:	464f      	mov	r7, r9
    81e0:	4425      	add	r5, r4
    81e2:	f817 3b01 	ldrb.w	r3, [r7], #1
    81e6:	4630      	mov	r0, r6
    81e8:	220a      	movs	r2, #10
    81ea:	3b30      	subs	r3, #48	; 0x30
    81ec:	f7ff ff9e 	bl	812c <__multadd>
    81f0:	42af      	cmp	r7, r5
    81f2:	4601      	mov	r1, r0
    81f4:	d1f5      	bne.n	81e2 <__s2b+0x42>
    81f6:	eb09 0704 	add.w	r7, r9, r4
    81fa:	3f08      	subs	r7, #8
    81fc:	e002      	b.n	8204 <__s2b+0x64>
    81fe:	f105 070a 	add.w	r7, r5, #10
    8202:	2409      	movs	r4, #9
    8204:	4625      	mov	r5, r4
    8206:	4545      	cmp	r5, r8
    8208:	da09      	bge.n	821e <__s2b+0x7e>
    820a:	1b3b      	subs	r3, r7, r4
    820c:	4630      	mov	r0, r6
    820e:	5d5b      	ldrb	r3, [r3, r5]
    8210:	220a      	movs	r2, #10
    8212:	3b30      	subs	r3, #48	; 0x30
    8214:	f7ff ff8a 	bl	812c <__multadd>
    8218:	3501      	adds	r5, #1
    821a:	4601      	mov	r1, r0
    821c:	e7f3      	b.n	8206 <__s2b+0x66>
    821e:	4608      	mov	r0, r1
    8220:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00008224 <__hi0bits>:
__hi0bits():
    8224:	0c03      	lsrs	r3, r0, #16
    8226:	041b      	lsls	r3, r3, #16
    8228:	b913      	cbnz	r3, 8230 <__hi0bits+0xc>
    822a:	0400      	lsls	r0, r0, #16
    822c:	2310      	movs	r3, #16
    822e:	e000      	b.n	8232 <__hi0bits+0xe>
    8230:	2300      	movs	r3, #0
    8232:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    8236:	bf04      	itt	eq
    8238:	0200      	lsleq	r0, r0, #8
    823a:	3308      	addeq	r3, #8
    823c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    8240:	bf04      	itt	eq
    8242:	0100      	lsleq	r0, r0, #4
    8244:	3304      	addeq	r3, #4
    8246:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    824a:	bf04      	itt	eq
    824c:	0080      	lsleq	r0, r0, #2
    824e:	3302      	addeq	r3, #2
    8250:	2800      	cmp	r0, #0
    8252:	db03      	blt.n	825c <__hi0bits+0x38>
    8254:	0042      	lsls	r2, r0, #1
    8256:	d503      	bpl.n	8260 <__hi0bits+0x3c>
    8258:	1c58      	adds	r0, r3, #1
    825a:	4770      	bx	lr
    825c:	4618      	mov	r0, r3
    825e:	4770      	bx	lr
    8260:	2020      	movs	r0, #32
    8262:	4770      	bx	lr

00008264 <__lo0bits>:
__lo0bits():
    8264:	6803      	ldr	r3, [r0, #0]
    8266:	f013 0207 	ands.w	r2, r3, #7
    826a:	d00b      	beq.n	8284 <__lo0bits+0x20>
    826c:	07d9      	lsls	r1, r3, #31
    826e:	d422      	bmi.n	82b6 <__lo0bits+0x52>
    8270:	079a      	lsls	r2, r3, #30
    8272:	d503      	bpl.n	827c <__lo0bits+0x18>
    8274:	085b      	lsrs	r3, r3, #1
    8276:	6003      	str	r3, [r0, #0]
    8278:	2001      	movs	r0, #1
    827a:	4770      	bx	lr
    827c:	089b      	lsrs	r3, r3, #2
    827e:	6003      	str	r3, [r0, #0]
    8280:	2002      	movs	r0, #2
    8282:	4770      	bx	lr
    8284:	b299      	uxth	r1, r3
    8286:	b909      	cbnz	r1, 828c <__lo0bits+0x28>
    8288:	0c1b      	lsrs	r3, r3, #16
    828a:	2210      	movs	r2, #16
    828c:	f013 0fff 	tst.w	r3, #255	; 0xff
    8290:	bf04      	itt	eq
    8292:	0a1b      	lsreq	r3, r3, #8
    8294:	3208      	addeq	r2, #8
    8296:	0719      	lsls	r1, r3, #28
    8298:	bf04      	itt	eq
    829a:	091b      	lsreq	r3, r3, #4
    829c:	3204      	addeq	r2, #4
    829e:	0799      	lsls	r1, r3, #30
    82a0:	bf04      	itt	eq
    82a2:	089b      	lsreq	r3, r3, #2
    82a4:	3202      	addeq	r2, #2
    82a6:	07d9      	lsls	r1, r3, #31
    82a8:	d402      	bmi.n	82b0 <__lo0bits+0x4c>
    82aa:	085b      	lsrs	r3, r3, #1
    82ac:	d005      	beq.n	82ba <__lo0bits+0x56>
    82ae:	3201      	adds	r2, #1
    82b0:	6003      	str	r3, [r0, #0]
    82b2:	4610      	mov	r0, r2
    82b4:	4770      	bx	lr
    82b6:	2000      	movs	r0, #0
    82b8:	4770      	bx	lr
    82ba:	2020      	movs	r0, #32
    82bc:	4770      	bx	lr

000082be <__i2b>:
__i2b():
    82be:	b510      	push	{r4, lr}
    82c0:	460c      	mov	r4, r1
    82c2:	2101      	movs	r1, #1
    82c4:	f7ff fee6 	bl	8094 <_Balloc>
    82c8:	2201      	movs	r2, #1
    82ca:	6144      	str	r4, [r0, #20]
    82cc:	6102      	str	r2, [r0, #16]
    82ce:	bd10      	pop	{r4, pc}

000082d0 <__multiply>:
__multiply():
    82d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    82d4:	4616      	mov	r6, r2
    82d6:	690a      	ldr	r2, [r1, #16]
    82d8:	6933      	ldr	r3, [r6, #16]
    82da:	429a      	cmp	r2, r3
    82dc:	b085      	sub	sp, #20
    82de:	460d      	mov	r5, r1
    82e0:	da01      	bge.n	82e6 <__multiply+0x16>
    82e2:	4635      	mov	r5, r6
    82e4:	460e      	mov	r6, r1
    82e6:	f8d5 8010 	ldr.w	r8, [r5, #16]
    82ea:	6937      	ldr	r7, [r6, #16]
    82ec:	68ab      	ldr	r3, [r5, #8]
    82ee:	6869      	ldr	r1, [r5, #4]
    82f0:	eb08 0407 	add.w	r4, r8, r7
    82f4:	429c      	cmp	r4, r3
    82f6:	bfc8      	it	gt
    82f8:	3101      	addgt	r1, #1
    82fa:	f7ff fecb 	bl	8094 <_Balloc>
    82fe:	f100 0314 	add.w	r3, r0, #20
    8302:	eb03 0184 	add.w	r1, r3, r4, lsl #2
    8306:	9101      	str	r1, [sp, #4]
    8308:	461a      	mov	r2, r3
    830a:	f8dd a004 	ldr.w	sl, [sp, #4]
    830e:	4552      	cmp	r2, sl
    8310:	d203      	bcs.n	831a <__multiply+0x4a>
    8312:	2100      	movs	r1, #0
    8314:	f842 1b04 	str.w	r1, [r2], #4
    8318:	e7f7      	b.n	830a <__multiply+0x3a>
    831a:	f105 0114 	add.w	r1, r5, #20
    831e:	f106 0214 	add.w	r2, r6, #20
    8322:	eb01 0888 	add.w	r8, r1, r8, lsl #2
    8326:	eb02 0787 	add.w	r7, r2, r7, lsl #2
    832a:	f8cd 8008 	str.w	r8, [sp, #8]
    832e:	9703      	str	r7, [sp, #12]
    8330:	9e03      	ldr	r6, [sp, #12]
    8332:	42b2      	cmp	r2, r6
    8334:	4615      	mov	r5, r2
    8336:	d256      	bcs.n	83e6 <__multiply+0x116>
    8338:	f8b5 c000 	ldrh.w	ip, [r5]
    833c:	3204      	adds	r2, #4
    833e:	f1bc 0f00 	cmp.w	ip, #0
    8342:	d025      	beq.n	8390 <__multiply+0xc0>
    8344:	460f      	mov	r7, r1
    8346:	461d      	mov	r5, r3
    8348:	2600      	movs	r6, #0
    834a:	f857 9b04 	ldr.w	r9, [r7], #4
    834e:	f8d5 8000 	ldr.w	r8, [r5]
    8352:	fa1f fb89 	uxth.w	fp, r9
    8356:	fa1f fa88 	uxth.w	sl, r8
    835a:	fb0c aa0b 	mla	sl, ip, fp, sl
    835e:	ea4f 4919 	mov.w	r9, r9, lsr #16
    8362:	ea4f 4818 	mov.w	r8, r8, lsr #16
    8366:	44b2      	add	sl, r6
    8368:	fb0c 8809 	mla	r8, ip, r9, r8
    836c:	eb08 481a 	add.w	r8, r8, sl, lsr #16
    8370:	fa1f fa8a 	uxth.w	sl, sl
    8374:	ea4a 4a08 	orr.w	sl, sl, r8, lsl #16
    8378:	ea4f 4618 	mov.w	r6, r8, lsr #16
    837c:	f8dd 8008 	ldr.w	r8, [sp, #8]
    8380:	46ab      	mov	fp, r5
    8382:	45b8      	cmp	r8, r7
    8384:	f84b ab04 	str.w	sl, [fp], #4
    8388:	d901      	bls.n	838e <__multiply+0xbe>
    838a:	465d      	mov	r5, fp
    838c:	e7dd      	b.n	834a <__multiply+0x7a>
    838e:	606e      	str	r6, [r5, #4]
    8390:	f832 8c02 	ldrh.w	r8, [r2, #-2]
    8394:	f1b8 0f00 	cmp.w	r8, #0
    8398:	d023      	beq.n	83e2 <__multiply+0x112>
    839a:	681e      	ldr	r6, [r3, #0]
    839c:	460f      	mov	r7, r1
    839e:	461d      	mov	r5, r3
    83a0:	f04f 0900 	mov.w	r9, #0
    83a4:	f8b7 a000 	ldrh.w	sl, [r7]
    83a8:	f8b5 c002 	ldrh.w	ip, [r5, #2]
    83ac:	fb08 cc0a 	mla	ip, r8, sl, ip
    83b0:	44e1      	add	r9, ip
    83b2:	b2b6      	uxth	r6, r6
    83b4:	46ac      	mov	ip, r5
    83b6:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
    83ba:	f84c 6b04 	str.w	r6, [ip], #4
    83be:	f857 6b04 	ldr.w	r6, [r7], #4
    83c2:	f8b5 a004 	ldrh.w	sl, [r5, #4]
    83c6:	0c36      	lsrs	r6, r6, #16
    83c8:	fb08 a606 	mla	r6, r8, r6, sl
    83cc:	f8dd a008 	ldr.w	sl, [sp, #8]
    83d0:	eb06 4619 	add.w	r6, r6, r9, lsr #16
    83d4:	4557      	cmp	r7, sl
    83d6:	ea4f 4916 	mov.w	r9, r6, lsr #16
    83da:	d201      	bcs.n	83e0 <__multiply+0x110>
    83dc:	4665      	mov	r5, ip
    83de:	e7e1      	b.n	83a4 <__multiply+0xd4>
    83e0:	606e      	str	r6, [r5, #4]
    83e2:	3304      	adds	r3, #4
    83e4:	e7a4      	b.n	8330 <__multiply+0x60>
    83e6:	9b01      	ldr	r3, [sp, #4]
    83e8:	2c00      	cmp	r4, #0
    83ea:	dc03      	bgt.n	83f4 <__multiply+0x124>
    83ec:	6104      	str	r4, [r0, #16]
    83ee:	b005      	add	sp, #20
    83f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    83f4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    83f8:	2a00      	cmp	r2, #0
    83fa:	d1f7      	bne.n	83ec <__multiply+0x11c>
    83fc:	3c01      	subs	r4, #1
    83fe:	e7f3      	b.n	83e8 <__multiply+0x118>

00008400 <__pow5mult>:
__pow5mult():
    8400:	f012 0303 	ands.w	r3, r2, #3
    8404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8408:	4605      	mov	r5, r0
    840a:	460e      	mov	r6, r1
    840c:	4617      	mov	r7, r2
    840e:	d007      	beq.n	8420 <__pow5mult+0x20>
    8410:	3b01      	subs	r3, #1
    8412:	4a21      	ldr	r2, [pc, #132]	; (8498 <__pow5mult+0x98>)
    8414:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    8418:	2300      	movs	r3, #0
    841a:	f7ff fe87 	bl	812c <__multadd>
    841e:	4606      	mov	r6, r0
    8420:	10bf      	asrs	r7, r7, #2
    8422:	d035      	beq.n	8490 <__pow5mult+0x90>
    8424:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    8426:	b93c      	cbnz	r4, 8438 <__pow5mult+0x38>
    8428:	2010      	movs	r0, #16
    842a:	f7fe f925 	bl	6678 <malloc>
    842e:	6268      	str	r0, [r5, #36]	; 0x24
    8430:	6044      	str	r4, [r0, #4]
    8432:	6084      	str	r4, [r0, #8]
    8434:	6004      	str	r4, [r0, #0]
    8436:	60c4      	str	r4, [r0, #12]
    8438:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
    843c:	f8d8 4008 	ldr.w	r4, [r8, #8]
    8440:	b97c      	cbnz	r4, 8462 <__pow5mult+0x62>
    8442:	4628      	mov	r0, r5
    8444:	f240 2171 	movw	r1, #625	; 0x271
    8448:	f7ff ff39 	bl	82be <__i2b>
    844c:	2300      	movs	r3, #0
    844e:	f8c8 0008 	str.w	r0, [r8, #8]
    8452:	4604      	mov	r4, r0
    8454:	6003      	str	r3, [r0, #0]
    8456:	e004      	b.n	8462 <__pow5mult+0x62>
    8458:	107f      	asrs	r7, r7, #1
    845a:	d019      	beq.n	8490 <__pow5mult+0x90>
    845c:	6820      	ldr	r0, [r4, #0]
    845e:	b170      	cbz	r0, 847e <__pow5mult+0x7e>
    8460:	4604      	mov	r4, r0
    8462:	07fb      	lsls	r3, r7, #31
    8464:	d5f8      	bpl.n	8458 <__pow5mult+0x58>
    8466:	4631      	mov	r1, r6
    8468:	4622      	mov	r2, r4
    846a:	4628      	mov	r0, r5
    846c:	f7ff ff30 	bl	82d0 <__multiply>
    8470:	4631      	mov	r1, r6
    8472:	4680      	mov	r8, r0
    8474:	4628      	mov	r0, r5
    8476:	f7ff fe42 	bl	80fe <_Bfree>
    847a:	4646      	mov	r6, r8
    847c:	e7ec      	b.n	8458 <__pow5mult+0x58>
    847e:	4628      	mov	r0, r5
    8480:	4621      	mov	r1, r4
    8482:	4622      	mov	r2, r4
    8484:	f7ff ff24 	bl	82d0 <__multiply>
    8488:	2300      	movs	r3, #0
    848a:	6020      	str	r0, [r4, #0]
    848c:	6003      	str	r3, [r0, #0]
    848e:	e7e7      	b.n	8460 <__pow5mult+0x60>
    8490:	4630      	mov	r0, r6
    8492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8496:	bf00      	nop
    8498:	0000a620 	.word	0x0000a620

0000849c <__lshift>:
__lshift():
    849c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    84a0:	460c      	mov	r4, r1
    84a2:	ea4f 1a62 	mov.w	sl, r2, asr #5
    84a6:	6923      	ldr	r3, [r4, #16]
    84a8:	6849      	ldr	r1, [r1, #4]
    84aa:	eb0a 0903 	add.w	r9, sl, r3
    84ae:	68a3      	ldr	r3, [r4, #8]
    84b0:	4680      	mov	r8, r0
    84b2:	4615      	mov	r5, r2
    84b4:	f109 0701 	add.w	r7, r9, #1
    84b8:	429f      	cmp	r7, r3
    84ba:	dd02      	ble.n	84c2 <__lshift+0x26>
    84bc:	3101      	adds	r1, #1
    84be:	005b      	lsls	r3, r3, #1
    84c0:	e7fa      	b.n	84b8 <__lshift+0x1c>
    84c2:	4640      	mov	r0, r8
    84c4:	f7ff fde6 	bl	8094 <_Balloc>
    84c8:	2300      	movs	r3, #0
    84ca:	4606      	mov	r6, r0
    84cc:	f100 0214 	add.w	r2, r0, #20
    84d0:	4553      	cmp	r3, sl
    84d2:	da04      	bge.n	84de <__lshift+0x42>
    84d4:	2100      	movs	r1, #0
    84d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    84da:	3301      	adds	r3, #1
    84dc:	e7f8      	b.n	84d0 <__lshift+0x34>
    84de:	6920      	ldr	r0, [r4, #16]
    84e0:	ea2a 71ea 	bic.w	r1, sl, sl, asr #31
    84e4:	f104 0314 	add.w	r3, r4, #20
    84e8:	f015 0c1f 	ands.w	ip, r5, #31
    84ec:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    84f0:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
    84f4:	d016      	beq.n	8524 <__lshift+0x88>
    84f6:	f1cc 0a20 	rsb	sl, ip, #32
    84fa:	2500      	movs	r5, #0
    84fc:	6818      	ldr	r0, [r3, #0]
    84fe:	460a      	mov	r2, r1
    8500:	fa00 f00c 	lsl.w	r0, r0, ip
    8504:	4305      	orrs	r5, r0
    8506:	f842 5b04 	str.w	r5, [r2], #4
    850a:	f853 5b04 	ldr.w	r5, [r3], #4
    850e:	4573      	cmp	r3, lr
    8510:	fa25 f50a 	lsr.w	r5, r5, sl
    8514:	d201      	bcs.n	851a <__lshift+0x7e>
    8516:	4611      	mov	r1, r2
    8518:	e7f0      	b.n	84fc <__lshift+0x60>
    851a:	604d      	str	r5, [r1, #4]
    851c:	b145      	cbz	r5, 8530 <__lshift+0x94>
    851e:	f109 0702 	add.w	r7, r9, #2
    8522:	e005      	b.n	8530 <__lshift+0x94>
    8524:	f853 2b04 	ldr.w	r2, [r3], #4
    8528:	f841 2b04 	str.w	r2, [r1], #4
    852c:	4573      	cmp	r3, lr
    852e:	d3f9      	bcc.n	8524 <__lshift+0x88>
    8530:	3f01      	subs	r7, #1
    8532:	4640      	mov	r0, r8
    8534:	6137      	str	r7, [r6, #16]
    8536:	4621      	mov	r1, r4
    8538:	f7ff fde1 	bl	80fe <_Bfree>
    853c:	4630      	mov	r0, r6
    853e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00008542 <__mcmp>:
__mcmp():
    8542:	6902      	ldr	r2, [r0, #16]
    8544:	690b      	ldr	r3, [r1, #16]
    8546:	1ad2      	subs	r2, r2, r3
    8548:	b510      	push	{r4, lr}
    854a:	d113      	bne.n	8574 <__mcmp+0x32>
    854c:	009c      	lsls	r4, r3, #2
    854e:	3014      	adds	r0, #20
    8550:	f101 0214 	add.w	r2, r1, #20
    8554:	1903      	adds	r3, r0, r4
    8556:	4422      	add	r2, r4
    8558:	f853 4d04 	ldr.w	r4, [r3, #-4]!
    855c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
    8560:	428c      	cmp	r4, r1
    8562:	d003      	beq.n	856c <__mcmp+0x2a>
    8564:	d208      	bcs.n	8578 <__mcmp+0x36>
    8566:	f04f 30ff 	mov.w	r0, #4294967295
    856a:	bd10      	pop	{r4, pc}
    856c:	4298      	cmp	r0, r3
    856e:	d3f3      	bcc.n	8558 <__mcmp+0x16>
    8570:	2000      	movs	r0, #0
    8572:	bd10      	pop	{r4, pc}
    8574:	4610      	mov	r0, r2
    8576:	bd10      	pop	{r4, pc}
    8578:	2001      	movs	r0, #1
    857a:	bd10      	pop	{r4, pc}

0000857c <__mdiff>:
__mdiff():
    857c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8580:	4606      	mov	r6, r0
    8582:	460c      	mov	r4, r1
    8584:	4608      	mov	r0, r1
    8586:	4611      	mov	r1, r2
    8588:	4615      	mov	r5, r2
    858a:	f7ff ffda 	bl	8542 <__mcmp>
    858e:	1e07      	subs	r7, r0, #0
    8590:	d108      	bne.n	85a4 <__mdiff+0x28>
    8592:	4630      	mov	r0, r6
    8594:	4639      	mov	r1, r7
    8596:	f7ff fd7d 	bl	8094 <_Balloc>
    859a:	2301      	movs	r3, #1
    859c:	6103      	str	r3, [r0, #16]
    859e:	6147      	str	r7, [r0, #20]
    85a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    85a4:	db01      	blt.n	85aa <__mdiff+0x2e>
    85a6:	2700      	movs	r7, #0
    85a8:	e003      	b.n	85b2 <__mdiff+0x36>
    85aa:	4623      	mov	r3, r4
    85ac:	2701      	movs	r7, #1
    85ae:	462c      	mov	r4, r5
    85b0:	461d      	mov	r5, r3
    85b2:	6861      	ldr	r1, [r4, #4]
    85b4:	4630      	mov	r0, r6
    85b6:	f7ff fd6d 	bl	8094 <_Balloc>
    85ba:	6922      	ldr	r2, [r4, #16]
    85bc:	692b      	ldr	r3, [r5, #16]
    85be:	60c7      	str	r7, [r0, #12]
    85c0:	3414      	adds	r4, #20
    85c2:	f105 0614 	add.w	r6, r5, #20
    85c6:	eb06 0a83 	add.w	sl, r6, r3, lsl #2
    85ca:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
    85ce:	f100 0314 	add.w	r3, r0, #20
    85d2:	2100      	movs	r1, #0
    85d4:	f854 7b04 	ldr.w	r7, [r4], #4
    85d8:	f856 9b04 	ldr.w	r9, [r6], #4
    85dc:	fa11 f187 	uxtah	r1, r1, r7
    85e0:	fa1f f589 	uxth.w	r5, r9
    85e4:	ea4f 4919 	mov.w	r9, r9, lsr #16
    85e8:	ebc5 0801 	rsb	r8, r5, r1
    85ec:	ebc9 4717 	rsb	r7, r9, r7, lsr #16
    85f0:	eb07 4728 	add.w	r7, r7, r8, asr #16
    85f4:	fa1f f888 	uxth.w	r8, r8
    85f8:	1439      	asrs	r1, r7, #16
    85fa:	45b2      	cmp	sl, r6
    85fc:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
    8600:	4625      	mov	r5, r4
    8602:	f843 7b04 	str.w	r7, [r3], #4
    8606:	d8e5      	bhi.n	85d4 <__mdiff+0x58>
    8608:	4565      	cmp	r5, ip
    860a:	d20d      	bcs.n	8628 <__mdiff+0xac>
    860c:	f855 4b04 	ldr.w	r4, [r5], #4
    8610:	fa11 f684 	uxtah	r6, r1, r4
    8614:	0c24      	lsrs	r4, r4, #16
    8616:	eb04 4426 	add.w	r4, r4, r6, asr #16
    861a:	b2b6      	uxth	r6, r6
    861c:	1421      	asrs	r1, r4, #16
    861e:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
    8622:	f843 4b04 	str.w	r4, [r3], #4
    8626:	e7ef      	b.n	8608 <__mdiff+0x8c>
    8628:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    862c:	b909      	cbnz	r1, 8632 <__mdiff+0xb6>
    862e:	3a01      	subs	r2, #1
    8630:	e7fa      	b.n	8628 <__mdiff+0xac>
    8632:	6102      	str	r2, [r0, #16]
    8634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00008638 <__ulp>:
__ulp():
    8638:	4b0f      	ldr	r3, [pc, #60]	; (8678 <__ulp+0x40>)
    863a:	400b      	ands	r3, r1
    863c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    8640:	2b00      	cmp	r3, #0
    8642:	dd01      	ble.n	8648 <__ulp+0x10>
    8644:	4619      	mov	r1, r3
    8646:	e009      	b.n	865c <__ulp+0x24>
    8648:	425b      	negs	r3, r3
    864a:	151b      	asrs	r3, r3, #20
    864c:	2b13      	cmp	r3, #19
    864e:	f04f 0100 	mov.w	r1, #0
    8652:	dc05      	bgt.n	8660 <__ulp+0x28>
    8654:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    8658:	fa42 f103 	asr.w	r1, r2, r3
    865c:	2000      	movs	r0, #0
    865e:	4770      	bx	lr
    8660:	2b32      	cmp	r3, #50	; 0x32
    8662:	f04f 0201 	mov.w	r2, #1
    8666:	bfda      	itte	le
    8668:	f1c3 0333 	rsble	r3, r3, #51	; 0x33
    866c:	fa02 f303 	lslle.w	r3, r2, r3
    8670:	4613      	movgt	r3, r2
    8672:	4618      	mov	r0, r3
    8674:	4770      	bx	lr
    8676:	bf00      	nop
    8678:	7ff00000 	.word	0x7ff00000

0000867c <__b2d>:
__b2d():
    867c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8680:	6906      	ldr	r6, [r0, #16]
    8682:	f100 0714 	add.w	r7, r0, #20
    8686:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    868a:	4688      	mov	r8, r1
    868c:	f856 4c04 	ldr.w	r4, [r6, #-4]
    8690:	4620      	mov	r0, r4
    8692:	f7ff fdc7 	bl	8224 <__hi0bits>
    8696:	f1c0 0320 	rsb	r3, r0, #32
    869a:	280a      	cmp	r0, #10
    869c:	f1a6 0504 	sub.w	r5, r6, #4
    86a0:	f8c8 3000 	str.w	r3, [r8]
    86a4:	dc14      	bgt.n	86d0 <__b2d+0x54>
    86a6:	42bd      	cmp	r5, r7
    86a8:	f1c0 010b 	rsb	r1, r0, #11
    86ac:	bf88      	it	hi
    86ae:	f856 5c08 	ldrhi.w	r5, [r6, #-8]
    86b2:	fa24 fc01 	lsr.w	ip, r4, r1
    86b6:	bf98      	it	ls
    86b8:	2500      	movls	r5, #0
    86ba:	3015      	adds	r0, #21
    86bc:	f04c 537f 	orr.w	r3, ip, #1069547520	; 0x3fc00000
    86c0:	fa25 f101 	lsr.w	r1, r5, r1
    86c4:	4084      	lsls	r4, r0
    86c6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    86ca:	ea41 0204 	orr.w	r2, r1, r4
    86ce:	e024      	b.n	871a <__b2d+0x9e>
    86d0:	42bd      	cmp	r5, r7
    86d2:	bf86      	itte	hi
    86d4:	f1a6 0508 	subhi.w	r5, r6, #8
    86d8:	f856 1c08 	ldrhi.w	r1, [r6, #-8]
    86dc:	2100      	movls	r1, #0
    86de:	f1b0 060b 	subs.w	r6, r0, #11
    86e2:	d015      	beq.n	8710 <__b2d+0x94>
    86e4:	40b4      	lsls	r4, r6
    86e6:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
    86ea:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
    86ee:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
    86f2:	fa21 fc00 	lsr.w	ip, r1, r0
    86f6:	42bd      	cmp	r5, r7
    86f8:	ea44 030c 	orr.w	r3, r4, ip
    86fc:	bf8c      	ite	hi
    86fe:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
    8702:	2400      	movls	r4, #0
    8704:	fa24 f000 	lsr.w	r0, r4, r0
    8708:	40b1      	lsls	r1, r6
    870a:	ea40 0201 	orr.w	r2, r0, r1
    870e:	e004      	b.n	871a <__b2d+0x9e>
    8710:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
    8714:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    8718:	460a      	mov	r2, r1
    871a:	4610      	mov	r0, r2
    871c:	4619      	mov	r1, r3
    871e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008722 <__d2b>:
__d2b():
    8722:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    8726:	2101      	movs	r1, #1
    8728:	461d      	mov	r5, r3
    872a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    872e:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
    8732:	4614      	mov	r4, r2
    8734:	f7ff fcae 	bl	8094 <_Balloc>
    8738:	f3c5 570a 	ubfx	r7, r5, #20, #11
    873c:	4606      	mov	r6, r0
    873e:	f3c5 0313 	ubfx	r3, r5, #0, #20
    8742:	b10f      	cbz	r7, 8748 <__d2b+0x26>
    8744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    8748:	9301      	str	r3, [sp, #4]
    874a:	b1d4      	cbz	r4, 8782 <__d2b+0x60>
    874c:	a802      	add	r0, sp, #8
    874e:	f840 4d08 	str.w	r4, [r0, #-8]!
    8752:	4668      	mov	r0, sp
    8754:	f7ff fd86 	bl	8264 <__lo0bits>
    8758:	9b00      	ldr	r3, [sp, #0]
    875a:	b148      	cbz	r0, 8770 <__d2b+0x4e>
    875c:	9a01      	ldr	r2, [sp, #4]
    875e:	f1c0 0120 	rsb	r1, r0, #32
    8762:	fa02 f101 	lsl.w	r1, r2, r1
    8766:	430b      	orrs	r3, r1
    8768:	40c2      	lsrs	r2, r0
    876a:	6173      	str	r3, [r6, #20]
    876c:	9201      	str	r2, [sp, #4]
    876e:	e000      	b.n	8772 <__d2b+0x50>
    8770:	6173      	str	r3, [r6, #20]
    8772:	9b01      	ldr	r3, [sp, #4]
    8774:	61b3      	str	r3, [r6, #24]
    8776:	2b00      	cmp	r3, #0
    8778:	bf0c      	ite	eq
    877a:	2401      	moveq	r4, #1
    877c:	2402      	movne	r4, #2
    877e:	6134      	str	r4, [r6, #16]
    8780:	e007      	b.n	8792 <__d2b+0x70>
    8782:	a801      	add	r0, sp, #4
    8784:	f7ff fd6e 	bl	8264 <__lo0bits>
    8788:	2401      	movs	r4, #1
    878a:	9b01      	ldr	r3, [sp, #4]
    878c:	6173      	str	r3, [r6, #20]
    878e:	6134      	str	r4, [r6, #16]
    8790:	3020      	adds	r0, #32
    8792:	b13f      	cbz	r7, 87a4 <__d2b+0x82>
    8794:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
    8798:	4407      	add	r7, r0
    879a:	f8c9 7000 	str.w	r7, [r9]
    879e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
    87a2:	e00a      	b.n	87ba <__d2b+0x98>
    87a4:	eb06 0384 	add.w	r3, r6, r4, lsl #2
    87a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
    87ac:	f8c9 0000 	str.w	r0, [r9]
    87b0:	6918      	ldr	r0, [r3, #16]
    87b2:	f7ff fd37 	bl	8224 <__hi0bits>
    87b6:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
    87ba:	f8c8 0000 	str.w	r0, [r8]
    87be:	4630      	mov	r0, r6
    87c0:	b003      	add	sp, #12
    87c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000087c6 <__ratio>:
__ratio():
    87c6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    87ca:	460e      	mov	r6, r1
    87cc:	4669      	mov	r1, sp
    87ce:	4680      	mov	r8, r0
    87d0:	f7ff ff54 	bl	867c <__b2d>
    87d4:	460d      	mov	r5, r1
    87d6:	4604      	mov	r4, r0
    87d8:	a901      	add	r1, sp, #4
    87da:	4630      	mov	r0, r6
    87dc:	f7ff ff4e 	bl	867c <__b2d>
    87e0:	9f00      	ldr	r7, [sp, #0]
    87e2:	460b      	mov	r3, r1
    87e4:	9901      	ldr	r1, [sp, #4]
    87e6:	4602      	mov	r2, r0
    87e8:	1a7f      	subs	r7, r7, r1
    87ea:	f8d8 0010 	ldr.w	r0, [r8, #16]
    87ee:	6931      	ldr	r1, [r6, #16]
    87f0:	1a41      	subs	r1, r0, r1
    87f2:	eb07 1141 	add.w	r1, r7, r1, lsl #5
    87f6:	2900      	cmp	r1, #0
    87f8:	bfcc      	ite	gt
    87fa:	eb05 5501 	addgt.w	r5, r5, r1, lsl #20
    87fe:	eba3 5301 	suble.w	r3, r3, r1, lsl #20
    8802:	4620      	mov	r0, r4
    8804:	4629      	mov	r1, r5
    8806:	f7fd f9db 	bl	5bc0 <__aeabi_ddiv>
    880a:	b002      	add	sp, #8
    880c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008810 <__copybits>:
__copybits():
    8810:	b510      	push	{r4, lr}
    8812:	3901      	subs	r1, #1
    8814:	f102 0314 	add.w	r3, r2, #20
    8818:	1149      	asrs	r1, r1, #5
    881a:	6912      	ldr	r2, [r2, #16]
    881c:	3101      	adds	r1, #1
    881e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    8822:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    8826:	4293      	cmp	r3, r2
    8828:	d204      	bcs.n	8834 <__copybits+0x24>
    882a:	f853 4b04 	ldr.w	r4, [r3], #4
    882e:	f840 4b04 	str.w	r4, [r0], #4
    8832:	e7f8      	b.n	8826 <__copybits+0x16>
    8834:	4288      	cmp	r0, r1
    8836:	d203      	bcs.n	8840 <__copybits+0x30>
    8838:	2300      	movs	r3, #0
    883a:	f840 3b04 	str.w	r3, [r0], #4
    883e:	e7f9      	b.n	8834 <__copybits+0x24>
    8840:	bd10      	pop	{r4, pc}

00008842 <__any_on>:
__any_on():
    8842:	f100 0214 	add.w	r2, r0, #20
    8846:	6900      	ldr	r0, [r0, #16]
    8848:	114b      	asrs	r3, r1, #5
    884a:	4283      	cmp	r3, r0
    884c:	b510      	push	{r4, lr}
    884e:	dc0c      	bgt.n	886a <__any_on+0x28>
    8850:	da0c      	bge.n	886c <__any_on+0x2a>
    8852:	f011 011f 	ands.w	r1, r1, #31
    8856:	d009      	beq.n	886c <__any_on+0x2a>
    8858:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    885c:	fa20 f401 	lsr.w	r4, r0, r1
    8860:	fa04 f101 	lsl.w	r1, r4, r1
    8864:	4281      	cmp	r1, r0
    8866:	d10e      	bne.n	8886 <__any_on+0x44>
    8868:	e000      	b.n	886c <__any_on+0x2a>
    886a:	4603      	mov	r3, r0
    886c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8870:	4293      	cmp	r3, r2
    8872:	4619      	mov	r1, r3
    8874:	d905      	bls.n	8882 <__any_on+0x40>
    8876:	f851 1c04 	ldr.w	r1, [r1, #-4]
    887a:	3b04      	subs	r3, #4
    887c:	2900      	cmp	r1, #0
    887e:	d0f7      	beq.n	8870 <__any_on+0x2e>
    8880:	e001      	b.n	8886 <__any_on+0x44>
    8882:	2000      	movs	r0, #0
    8884:	bd10      	pop	{r4, pc}
    8886:	2001      	movs	r0, #1
    8888:	bd10      	pop	{r4, pc}

0000888a <_calloc_r>:
_calloc_r():
    888a:	b538      	push	{r3, r4, r5, lr}
    888c:	fb02 f401 	mul.w	r4, r2, r1
    8890:	4621      	mov	r1, r4
    8892:	f7fd ff71 	bl	6778 <_malloc_r>
    8896:	4605      	mov	r5, r0
    8898:	b118      	cbz	r0, 88a2 <_calloc_r+0x18>
    889a:	2100      	movs	r1, #0
    889c:	4622      	mov	r2, r4
    889e:	f7fd ff1f 	bl	66e0 <memset>
    88a2:	4628      	mov	r0, r5
    88a4:	bd38      	pop	{r3, r4, r5, pc}

000088a6 <_realloc_r>:
_realloc_r():
    88a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    88a8:	4606      	mov	r6, r0
    88aa:	4614      	mov	r4, r2
    88ac:	460d      	mov	r5, r1
    88ae:	b921      	cbnz	r1, 88ba <_realloc_r+0x14>
    88b0:	4611      	mov	r1, r2
    88b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    88b6:	f7fd bf5f 	b.w	6778 <_malloc_r>
    88ba:	b91a      	cbnz	r2, 88c4 <_realloc_r+0x1e>
    88bc:	f7fd ff18 	bl	66f0 <_free_r>
    88c0:	4620      	mov	r0, r4
    88c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    88c4:	f000 ffac 	bl	9820 <_malloc_usable_size_r>
    88c8:	42a0      	cmp	r0, r4
    88ca:	d20e      	bcs.n	88ea <_realloc_r+0x44>
    88cc:	4630      	mov	r0, r6
    88ce:	4621      	mov	r1, r4
    88d0:	f7fd ff52 	bl	6778 <_malloc_r>
    88d4:	4607      	mov	r7, r0
    88d6:	b150      	cbz	r0, 88ee <_realloc_r+0x48>
    88d8:	4629      	mov	r1, r5
    88da:	4622      	mov	r2, r4
    88dc:	f7fd fedc 	bl	6698 <memcpy>
    88e0:	4630      	mov	r0, r6
    88e2:	4629      	mov	r1, r5
    88e4:	f7fd ff04 	bl	66f0 <_free_r>
    88e8:	e001      	b.n	88ee <_realloc_r+0x48>
    88ea:	4628      	mov	r0, r5
    88ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    88ee:	4638      	mov	r0, r7
    88f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    88f2:	ffff 4800 	vtbl.8	d20, {d15}, d0

000088f4 <nanf>:
nanf():
    88f4:	4800      	ldr	r0, [pc, #0]	; (88f8 <nanf+0x4>)
    88f6:	4770      	bx	lr
    88f8:	7fc00000 	.word	0x7fc00000

000088fc <__sread>:
__sread():
    88fc:	b510      	push	{r4, lr}
    88fe:	460c      	mov	r4, r1
    8900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    8904:	f000 ff96 	bl	9834 <_read_r>
    8908:	2800      	cmp	r0, #0
    890a:	db03      	blt.n	8914 <__sread+0x18>
    890c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    890e:	4403      	add	r3, r0
    8910:	6563      	str	r3, [r4, #84]	; 0x54
    8912:	bd10      	pop	{r4, pc}
    8914:	89a3      	ldrh	r3, [r4, #12]
    8916:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    891a:	81a3      	strh	r3, [r4, #12]
    891c:	bd10      	pop	{r4, pc}

0000891e <__swrite>:
__swrite():
    891e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8922:	461d      	mov	r5, r3
    8924:	898b      	ldrh	r3, [r1, #12]
    8926:	05db      	lsls	r3, r3, #23
    8928:	4607      	mov	r7, r0
    892a:	460c      	mov	r4, r1
    892c:	4616      	mov	r6, r2
    892e:	d505      	bpl.n	893c <__swrite+0x1e>
    8930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    8934:	2200      	movs	r2, #0
    8936:	2302      	movs	r3, #2
    8938:	f000 ff60 	bl	97fc <_lseek_r>
    893c:	89a3      	ldrh	r3, [r4, #12]
    893e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    8942:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    8946:	81a3      	strh	r3, [r4, #12]
    8948:	4638      	mov	r0, r7
    894a:	4632      	mov	r2, r6
    894c:	462b      	mov	r3, r5
    894e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8952:	f7fe bf4b 	b.w	77ec <_write_r>

00008956 <__sseek>:
__sseek():
    8956:	b510      	push	{r4, lr}
    8958:	460c      	mov	r4, r1
    895a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    895e:	f000 ff4d 	bl	97fc <_lseek_r>
    8962:	1c43      	adds	r3, r0, #1
    8964:	89a3      	ldrh	r3, [r4, #12]
    8966:	d103      	bne.n	8970 <__sseek+0x1a>
    8968:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    896c:	81a3      	strh	r3, [r4, #12]
    896e:	bd10      	pop	{r4, pc}
    8970:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    8974:	81a3      	strh	r3, [r4, #12]
    8976:	6560      	str	r0, [r4, #84]	; 0x54
    8978:	bd10      	pop	{r4, pc}

0000897a <__sclose>:
__sclose():
    897a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    897e:	f000 b82f 	b.w	89e0 <_close_r>

00008982 <_vasniprintf_r>:
_vasniprintf_r():
    8982:	b530      	push	{r4, r5, lr}
    8984:	4615      	mov	r5, r2
    8986:	b09b      	sub	sp, #108	; 0x6c
    8988:	6814      	ldr	r4, [r2, #0]
    898a:	b129      	cbz	r1, 8998 <_vasniprintf_r+0x16>
    898c:	b124      	cbz	r4, 8998 <_vasniprintf_r+0x16>
    898e:	f44f 62c1 	mov.w	r2, #1544	; 0x608
    8992:	f8ad 200c 	strh.w	r2, [sp, #12]
    8996:	e005      	b.n	89a4 <_vasniprintf_r+0x22>
    8998:	f44f 7222 	mov.w	r2, #648	; 0x288
    899c:	2400      	movs	r4, #0
    899e:	f8ad 200c 	strh.w	r2, [sp, #12]
    89a2:	4621      	mov	r1, r4
    89a4:	2c00      	cmp	r4, #0
    89a6:	9100      	str	r1, [sp, #0]
    89a8:	9104      	str	r1, [sp, #16]
    89aa:	da03      	bge.n	89b4 <_vasniprintf_r+0x32>
    89ac:	238b      	movs	r3, #139	; 0x8b
    89ae:	6003      	str	r3, [r0, #0]
    89b0:	2000      	movs	r0, #0
    89b2:	e012      	b.n	89da <_vasniprintf_r+0x58>
    89b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    89b8:	f8ad 200e 	strh.w	r2, [sp, #14]
    89bc:	4669      	mov	r1, sp
    89be:	461a      	mov	r2, r3
    89c0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    89c2:	9402      	str	r4, [sp, #8]
    89c4:	9405      	str	r4, [sp, #20]
    89c6:	f000 ffa3 	bl	9910 <_svfiprintf_r>
    89ca:	1e03      	subs	r3, r0, #0
    89cc:	f04f 0000 	mov.w	r0, #0
    89d0:	db03      	blt.n	89da <_vasniprintf_r+0x58>
    89d2:	602b      	str	r3, [r5, #0]
    89d4:	9b00      	ldr	r3, [sp, #0]
    89d6:	7018      	strb	r0, [r3, #0]
    89d8:	9804      	ldr	r0, [sp, #16]
    89da:	b01b      	add	sp, #108	; 0x6c
    89dc:	bd30      	pop	{r4, r5, pc}
    89de:	ffff b538 	vsli.32	d27, d24, #31

000089e0 <_close_r>:
_close_r():
    89e0:	b538      	push	{r3, r4, r5, lr}
    89e2:	4c06      	ldr	r4, [pc, #24]	; (89fc <_close_r+0x1c>)
    89e4:	2300      	movs	r3, #0
    89e6:	4605      	mov	r5, r0
    89e8:	4608      	mov	r0, r1
    89ea:	6023      	str	r3, [r4, #0]
    89ec:	f7f7 ff3c 	bl	868 <_close>
    89f0:	1c43      	adds	r3, r0, #1
    89f2:	d102      	bne.n	89fa <_close_r+0x1a>
    89f4:	6823      	ldr	r3, [r4, #0]
    89f6:	b103      	cbz	r3, 89fa <_close_r+0x1a>
    89f8:	602b      	str	r3, [r5, #0]
    89fa:	bd38      	pop	{r3, r4, r5, pc}
    89fc:	1fff10f0 	.word	0x1fff10f0

00008a00 <quorem>:
quorem():
    8a00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8a04:	6903      	ldr	r3, [r0, #16]
    8a06:	690c      	ldr	r4, [r1, #16]
    8a08:	42a3      	cmp	r3, r4
    8a0a:	4680      	mov	r8, r0
    8a0c:	f2c0 8081 	blt.w	8b12 <quorem+0x112>
    8a10:	3c01      	subs	r4, #1
    8a12:	f101 0714 	add.w	r7, r1, #20
    8a16:	00a2      	lsls	r2, r4, #2
    8a18:	f100 0514 	add.w	r5, r0, #20
    8a1c:	4691      	mov	r9, r2
    8a1e:	9200      	str	r2, [sp, #0]
    8a20:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
    8a24:	442a      	add	r2, r5
    8a26:	9201      	str	r2, [sp, #4]
    8a28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
    8a2c:	3601      	adds	r6, #1
    8a2e:	fbb2 f6f6 	udiv	r6, r2, r6
    8a32:	44b9      	add	r9, r7
    8a34:	2e00      	cmp	r6, #0
    8a36:	d03a      	beq.n	8aae <quorem+0xae>
    8a38:	f04f 0e00 	mov.w	lr, #0
    8a3c:	463a      	mov	r2, r7
    8a3e:	4628      	mov	r0, r5
    8a40:	46f3      	mov	fp, lr
    8a42:	f852 cb04 	ldr.w	ip, [r2], #4
    8a46:	6803      	ldr	r3, [r0, #0]
    8a48:	fa1f fa8c 	uxth.w	sl, ip
    8a4c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
    8a50:	fb0a ea06 	mla	sl, sl, r6, lr
    8a54:	fb0c fc06 	mul.w	ip, ip, r6
    8a58:	eb0c 4c1a 	add.w	ip, ip, sl, lsr #16
    8a5c:	fa1f fa8a 	uxth.w	sl, sl
    8a60:	ebca 0a0b 	rsb	sl, sl, fp
    8a64:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    8a68:	fa1f fc8c 	uxth.w	ip, ip
    8a6c:	fa1a fa83 	uxtah	sl, sl, r3
    8a70:	ebcc 4c13 	rsb	ip, ip, r3, lsr #16
    8a74:	eb0c 4c2a 	add.w	ip, ip, sl, asr #16
    8a78:	fa1f fa8a 	uxth.w	sl, sl
    8a7c:	ea4a 4a0c 	orr.w	sl, sl, ip, lsl #16
    8a80:	454a      	cmp	r2, r9
    8a82:	ea4f 4b2c 	mov.w	fp, ip, asr #16
    8a86:	f840 ab04 	str.w	sl, [r0], #4
    8a8a:	d9da      	bls.n	8a42 <quorem+0x42>
    8a8c:	9a00      	ldr	r2, [sp, #0]
    8a8e:	58ab      	ldr	r3, [r5, r2]
    8a90:	b96b      	cbnz	r3, 8aae <quorem+0xae>
    8a92:	9a01      	ldr	r2, [sp, #4]
    8a94:	1f13      	subs	r3, r2, #4
    8a96:	42ab      	cmp	r3, r5
    8a98:	461a      	mov	r2, r3
    8a9a:	d802      	bhi.n	8aa2 <quorem+0xa2>
    8a9c:	f8c8 4010 	str.w	r4, [r8, #16]
    8aa0:	e005      	b.n	8aae <quorem+0xae>
    8aa2:	6812      	ldr	r2, [r2, #0]
    8aa4:	3b04      	subs	r3, #4
    8aa6:	2a00      	cmp	r2, #0
    8aa8:	d1f8      	bne.n	8a9c <quorem+0x9c>
    8aaa:	3c01      	subs	r4, #1
    8aac:	e7f3      	b.n	8a96 <quorem+0x96>
    8aae:	4640      	mov	r0, r8
    8ab0:	f7ff fd47 	bl	8542 <__mcmp>
    8ab4:	2800      	cmp	r0, #0
    8ab6:	db2a      	blt.n	8b0e <quorem+0x10e>
    8ab8:	3601      	adds	r6, #1
    8aba:	462b      	mov	r3, r5
    8abc:	2000      	movs	r0, #0
    8abe:	f857 cb04 	ldr.w	ip, [r7], #4
    8ac2:	681a      	ldr	r2, [r3, #0]
    8ac4:	fa1f f18c 	uxth.w	r1, ip
    8ac8:	1a41      	subs	r1, r0, r1
    8aca:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
    8ace:	fa11 f182 	uxtah	r1, r1, r2
    8ad2:	ebcc 4212 	rsb	r2, ip, r2, lsr #16
    8ad6:	eb02 4221 	add.w	r2, r2, r1, asr #16
    8ada:	b289      	uxth	r1, r1
    8adc:	1410      	asrs	r0, r2, #16
    8ade:	454f      	cmp	r7, r9
    8ae0:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
    8ae4:	f843 2b04 	str.w	r2, [r3], #4
    8ae8:	d9e9      	bls.n	8abe <quorem+0xbe>
    8aea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
    8aee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
    8af2:	b962      	cbnz	r2, 8b0e <quorem+0x10e>
    8af4:	3b04      	subs	r3, #4
    8af6:	42ab      	cmp	r3, r5
    8af8:	461a      	mov	r2, r3
    8afa:	d802      	bhi.n	8b02 <quorem+0x102>
    8afc:	f8c8 4010 	str.w	r4, [r8, #16]
    8b00:	e005      	b.n	8b0e <quorem+0x10e>
    8b02:	6812      	ldr	r2, [r2, #0]
    8b04:	3b04      	subs	r3, #4
    8b06:	2a00      	cmp	r2, #0
    8b08:	d1f8      	bne.n	8afc <quorem+0xfc>
    8b0a:	3c01      	subs	r4, #1
    8b0c:	e7f3      	b.n	8af6 <quorem+0xf6>
    8b0e:	4630      	mov	r0, r6
    8b10:	e000      	b.n	8b14 <quorem+0x114>
    8b12:	2000      	movs	r0, #0
    8b14:	b003      	add	sp, #12
    8b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8b1a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    8b1e:	ffff e92d 	vtbl.8	d30, {d15-d16}, d29

00008b20 <_dtoa_r>:
_dtoa_r():
    8b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8b24:	6a45      	ldr	r5, [r0, #36]	; 0x24
    8b26:	b09b      	sub	sp, #108	; 0x6c
    8b28:	4682      	mov	sl, r0
    8b2a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    8b2c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    8b30:	b945      	cbnz	r5, 8b44 <_dtoa_r+0x24>
    8b32:	2010      	movs	r0, #16
    8b34:	f7fd fda0 	bl	6678 <malloc>
    8b38:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
    8b3c:	6045      	str	r5, [r0, #4]
    8b3e:	6085      	str	r5, [r0, #8]
    8b40:	6005      	str	r5, [r0, #0]
    8b42:	60c5      	str	r5, [r0, #12]
    8b44:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
    8b48:	6819      	ldr	r1, [r3, #0]
    8b4a:	b161      	cbz	r1, 8b66 <_dtoa_r+0x46>
    8b4c:	685b      	ldr	r3, [r3, #4]
    8b4e:	604b      	str	r3, [r1, #4]
    8b50:	2201      	movs	r2, #1
    8b52:	fa02 f303 	lsl.w	r3, r2, r3
    8b56:	608b      	str	r3, [r1, #8]
    8b58:	4650      	mov	r0, sl
    8b5a:	f7ff fad0 	bl	80fe <_Bfree>
    8b5e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
    8b62:	2200      	movs	r2, #0
    8b64:	601a      	str	r2, [r3, #0]
    8b66:	9805      	ldr	r0, [sp, #20]
    8b68:	2800      	cmp	r0, #0
    8b6a:	da05      	bge.n	8b78 <_dtoa_r+0x58>
    8b6c:	2301      	movs	r3, #1
    8b6e:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
    8b72:	6023      	str	r3, [r4, #0]
    8b74:	9105      	str	r1, [sp, #20]
    8b76:	e001      	b.n	8b7c <_dtoa_r+0x5c>
    8b78:	2300      	movs	r3, #0
    8b7a:	6023      	str	r3, [r4, #0]
    8b7c:	9f05      	ldr	r7, [sp, #20]
    8b7e:	4a9c      	ldr	r2, [pc, #624]	; (8df0 <_dtoa_r+0x2d0>)
    8b80:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
    8b84:	0d1b      	lsrs	r3, r3, #20
    8b86:	051b      	lsls	r3, r3, #20
    8b88:	4293      	cmp	r3, r2
    8b8a:	d11d      	bne.n	8bc8 <_dtoa_r+0xa8>
    8b8c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8b8e:	f242 730f 	movw	r3, #9999	; 0x270f
    8b92:	6013      	str	r3, [r2, #0]
    8b94:	9b04      	ldr	r3, [sp, #16]
    8b96:	b943      	cbnz	r3, 8baa <_dtoa_r+0x8a>
    8b98:	4b96      	ldr	r3, [pc, #600]	; (8df4 <_dtoa_r+0x2d4>)
    8b9a:	4a97      	ldr	r2, [pc, #604]	; (8df8 <_dtoa_r+0x2d8>)
    8b9c:	f3c7 0013 	ubfx	r0, r7, #0, #20
    8ba0:	2800      	cmp	r0, #0
    8ba2:	bf0c      	ite	eq
    8ba4:	4610      	moveq	r0, r2
    8ba6:	4618      	movne	r0, r3
    8ba8:	e000      	b.n	8bac <_dtoa_r+0x8c>
    8baa:	4892      	ldr	r0, [pc, #584]	; (8df4 <_dtoa_r+0x2d4>)
    8bac:	9f28      	ldr	r7, [sp, #160]	; 0xa0
    8bae:	2f00      	cmp	r7, #0
    8bb0:	f000 8571 	beq.w	9696 <_dtoa_r+0xb76>
    8bb4:	78c3      	ldrb	r3, [r0, #3]
    8bb6:	b113      	cbz	r3, 8bbe <_dtoa_r+0x9e>
    8bb8:	f100 0308 	add.w	r3, r0, #8
    8bbc:	e000      	b.n	8bc0 <_dtoa_r+0xa0>
    8bbe:	1cc3      	adds	r3, r0, #3
    8bc0:	9f28      	ldr	r7, [sp, #160]	; 0xa0
    8bc2:	603b      	str	r3, [r7, #0]
    8bc4:	f000 bd67 	b.w	9696 <_dtoa_r+0xb76>
    8bc8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    8bcc:	2200      	movs	r2, #0
    8bce:	4620      	mov	r0, r4
    8bd0:	4629      	mov	r1, r5
    8bd2:	2300      	movs	r3, #0
    8bd4:	f7fd f932 	bl	5e3c <__aeabi_dcmpeq>
    8bd8:	4680      	mov	r8, r0
    8bda:	b158      	cbz	r0, 8bf4 <_dtoa_r+0xd4>
    8bdc:	9f26      	ldr	r7, [sp, #152]	; 0x98
    8bde:	2301      	movs	r3, #1
    8be0:	603b      	str	r3, [r7, #0]
    8be2:	9f28      	ldr	r7, [sp, #160]	; 0xa0
    8be4:	2f00      	cmp	r7, #0
    8be6:	f000 8553 	beq.w	9690 <_dtoa_r+0xb70>
    8bea:	4884      	ldr	r0, [pc, #528]	; (8dfc <_dtoa_r+0x2dc>)
    8bec:	6038      	str	r0, [r7, #0]
    8bee:	3801      	subs	r0, #1
    8bf0:	f000 bd51 	b.w	9696 <_dtoa_r+0xb76>
    8bf4:	ab19      	add	r3, sp, #100	; 0x64
    8bf6:	9300      	str	r3, [sp, #0]
    8bf8:	ab18      	add	r3, sp, #96	; 0x60
    8bfa:	9301      	str	r3, [sp, #4]
    8bfc:	4650      	mov	r0, sl
    8bfe:	4622      	mov	r2, r4
    8c00:	462b      	mov	r3, r5
    8c02:	f7ff fd8e 	bl	8722 <__d2b>
    8c06:	f3c7 560a 	ubfx	r6, r7, #20, #11
    8c0a:	4683      	mov	fp, r0
    8c0c:	b15e      	cbz	r6, 8c26 <_dtoa_r+0x106>
    8c0e:	f3c5 0313 	ubfx	r3, r5, #0, #20
    8c12:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
    8c16:	4620      	mov	r0, r4
    8c18:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
    8c1c:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
    8c20:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    8c24:	e01c      	b.n	8c60 <_dtoa_r+0x140>
    8c26:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8c28:	9e18      	ldr	r6, [sp, #96]	; 0x60
    8c2a:	441e      	add	r6, r3
    8c2c:	f46f 6382 	mvn.w	r3, #1040	; 0x410
    8c30:	429e      	cmp	r6, r3
    8c32:	db09      	blt.n	8c48 <_dtoa_r+0x128>
    8c34:	9904      	ldr	r1, [sp, #16]
    8c36:	331f      	adds	r3, #31
    8c38:	f206 4012 	addw	r0, r6, #1042	; 0x412
    8c3c:	1b9b      	subs	r3, r3, r6
    8c3e:	fa21 f000 	lsr.w	r0, r1, r0
    8c42:	409f      	lsls	r7, r3
    8c44:	4338      	orrs	r0, r7
    8c46:	e004      	b.n	8c52 <_dtoa_r+0x132>
    8c48:	486d      	ldr	r0, [pc, #436]	; (8e00 <_dtoa_r+0x2e0>)
    8c4a:	9a04      	ldr	r2, [sp, #16]
    8c4c:	1b80      	subs	r0, r0, r6
    8c4e:	fa02 f000 	lsl.w	r0, r2, r0
    8c52:	f7fc fe15 	bl	5880 <__aeabi_ui2d>
    8c56:	2701      	movs	r7, #1
    8c58:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
    8c5c:	3e01      	subs	r6, #1
    8c5e:	9715      	str	r7, [sp, #84]	; 0x54
    8c60:	2200      	movs	r2, #0
    8c62:	4b68      	ldr	r3, [pc, #416]	; (8e04 <_dtoa_r+0x2e4>)
    8c64:	f7fc fcce 	bl	5604 <__aeabi_dsub>
    8c68:	a35b      	add	r3, pc, #364	; (adr r3, 8dd8 <_dtoa_r+0x2b8>)
    8c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
    8c6e:	f7fc fe7d 	bl	596c <__aeabi_dmul>
    8c72:	a35b      	add	r3, pc, #364	; (adr r3, 8de0 <_dtoa_r+0x2c0>)
    8c74:	e9d3 2300 	ldrd	r2, r3, [r3]
    8c78:	f7fc fcc6 	bl	5608 <__adddf3>
    8c7c:	4604      	mov	r4, r0
    8c7e:	4630      	mov	r0, r6
    8c80:	460d      	mov	r5, r1
    8c82:	f7fc fe0d 	bl	58a0 <__aeabi_i2d>
    8c86:	a358      	add	r3, pc, #352	; (adr r3, 8de8 <_dtoa_r+0x2c8>)
    8c88:	e9d3 2300 	ldrd	r2, r3, [r3]
    8c8c:	f7fc fe6e 	bl	596c <__aeabi_dmul>
    8c90:	4602      	mov	r2, r0
    8c92:	460b      	mov	r3, r1
    8c94:	4620      	mov	r0, r4
    8c96:	4629      	mov	r1, r5
    8c98:	f7fc fcb6 	bl	5608 <__adddf3>
    8c9c:	4604      	mov	r4, r0
    8c9e:	460d      	mov	r5, r1
    8ca0:	f7fd f8fe 	bl	5ea0 <__aeabi_d2iz>
    8ca4:	4629      	mov	r1, r5
    8ca6:	4681      	mov	r9, r0
    8ca8:	2200      	movs	r2, #0
    8caa:	4620      	mov	r0, r4
    8cac:	2300      	movs	r3, #0
    8cae:	f7fd f8cf 	bl	5e50 <__aeabi_dcmplt>
    8cb2:	b158      	cbz	r0, 8ccc <_dtoa_r+0x1ac>
    8cb4:	4648      	mov	r0, r9
    8cb6:	f7fc fdf3 	bl	58a0 <__aeabi_i2d>
    8cba:	4602      	mov	r2, r0
    8cbc:	460b      	mov	r3, r1
    8cbe:	4620      	mov	r0, r4
    8cc0:	4629      	mov	r1, r5
    8cc2:	f7fd f8bb 	bl	5e3c <__aeabi_dcmpeq>
    8cc6:	b908      	cbnz	r0, 8ccc <_dtoa_r+0x1ac>
    8cc8:	f109 39ff 	add.w	r9, r9, #4294967295
    8ccc:	f1b9 0f16 	cmp.w	r9, #22
    8cd0:	d80d      	bhi.n	8cee <_dtoa_r+0x1ce>
    8cd2:	4b4d      	ldr	r3, [pc, #308]	; (8e08 <_dtoa_r+0x2e8>)
    8cd4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
    8cd8:	e9d3 0100 	ldrd	r0, r1, [r3]
    8cdc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    8ce0:	f7fd f8d4 	bl	5e8c <__aeabi_dcmpgt>
    8ce4:	b130      	cbz	r0, 8cf4 <_dtoa_r+0x1d4>
    8ce6:	f109 39ff 	add.w	r9, r9, #4294967295
    8cea:	2700      	movs	r7, #0
    8cec:	e000      	b.n	8cf0 <_dtoa_r+0x1d0>
    8cee:	2701      	movs	r7, #1
    8cf0:	9714      	str	r7, [sp, #80]	; 0x50
    8cf2:	e000      	b.n	8cf6 <_dtoa_r+0x1d6>
    8cf4:	9014      	str	r0, [sp, #80]	; 0x50
    8cf6:	9b18      	ldr	r3, [sp, #96]	; 0x60
    8cf8:	1b9e      	subs	r6, r3, r6
    8cfa:	3e01      	subs	r6, #1
    8cfc:	9609      	str	r6, [sp, #36]	; 0x24
    8cfe:	d504      	bpl.n	8d0a <_dtoa_r+0x1ea>
    8d00:	4277      	negs	r7, r6
    8d02:	9708      	str	r7, [sp, #32]
    8d04:	2700      	movs	r7, #0
    8d06:	9709      	str	r7, [sp, #36]	; 0x24
    8d08:	e001      	b.n	8d0e <_dtoa_r+0x1ee>
    8d0a:	2700      	movs	r7, #0
    8d0c:	9708      	str	r7, [sp, #32]
    8d0e:	f1b9 0f00 	cmp.w	r9, #0
    8d12:	db07      	blt.n	8d24 <_dtoa_r+0x204>
    8d14:	9f09      	ldr	r7, [sp, #36]	; 0x24
    8d16:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
    8d1a:	444f      	add	r7, r9
    8d1c:	9709      	str	r7, [sp, #36]	; 0x24
    8d1e:	2700      	movs	r7, #0
    8d20:	970e      	str	r7, [sp, #56]	; 0x38
    8d22:	e008      	b.n	8d36 <_dtoa_r+0x216>
    8d24:	9f08      	ldr	r7, [sp, #32]
    8d26:	ebc9 0707 	rsb	r7, r9, r7
    8d2a:	9708      	str	r7, [sp, #32]
    8d2c:	f1c9 0700 	rsb	r7, r9, #0
    8d30:	970e      	str	r7, [sp, #56]	; 0x38
    8d32:	2700      	movs	r7, #0
    8d34:	9711      	str	r7, [sp, #68]	; 0x44
    8d36:	9f24      	ldr	r7, [sp, #144]	; 0x90
    8d38:	2f09      	cmp	r7, #9
    8d3a:	d828      	bhi.n	8d8e <_dtoa_r+0x26e>
    8d3c:	2f05      	cmp	r7, #5
    8d3e:	bfc4      	itt	gt
    8d40:	3f04      	subgt	r7, #4
    8d42:	9724      	strgt	r7, [sp, #144]	; 0x90
    8d44:	9f24      	ldr	r7, [sp, #144]	; 0x90
    8d46:	f1a7 0302 	sub.w	r3, r7, #2
    8d4a:	bfcc      	ite	gt
    8d4c:	2500      	movgt	r5, #0
    8d4e:	2501      	movle	r5, #1
    8d50:	2b03      	cmp	r3, #3
    8d52:	d821      	bhi.n	8d98 <_dtoa_r+0x278>
    8d54:	e8df f003 	tbb	[pc, r3]
    8d58:	04020f06 	.word	0x04020f06
    8d5c:	2701      	movs	r7, #1
    8d5e:	e002      	b.n	8d66 <_dtoa_r+0x246>
    8d60:	2701      	movs	r7, #1
    8d62:	e009      	b.n	8d78 <_dtoa_r+0x258>
    8d64:	2700      	movs	r7, #0
    8d66:	970f      	str	r7, [sp, #60]	; 0x3c
    8d68:	9f25      	ldr	r7, [sp, #148]	; 0x94
    8d6a:	2f00      	cmp	r7, #0
    8d6c:	dd1e      	ble.n	8dac <_dtoa_r+0x28c>
    8d6e:	970b      	str	r7, [sp, #44]	; 0x2c
    8d70:	9707      	str	r7, [sp, #28]
    8d72:	463b      	mov	r3, r7
    8d74:	e01f      	b.n	8db6 <_dtoa_r+0x296>
    8d76:	2700      	movs	r7, #0
    8d78:	970f      	str	r7, [sp, #60]	; 0x3c
    8d7a:	9f25      	ldr	r7, [sp, #148]	; 0x94
    8d7c:	444f      	add	r7, r9
    8d7e:	970b      	str	r7, [sp, #44]	; 0x2c
    8d80:	3701      	adds	r7, #1
    8d82:	463b      	mov	r3, r7
    8d84:	9707      	str	r7, [sp, #28]
    8d86:	2b01      	cmp	r3, #1
    8d88:	bfb8      	it	lt
    8d8a:	2301      	movlt	r3, #1
    8d8c:	e013      	b.n	8db6 <_dtoa_r+0x296>
    8d8e:	2501      	movs	r5, #1
    8d90:	2700      	movs	r7, #0
    8d92:	9724      	str	r7, [sp, #144]	; 0x90
    8d94:	950f      	str	r5, [sp, #60]	; 0x3c
    8d96:	e001      	b.n	8d9c <_dtoa_r+0x27c>
    8d98:	2701      	movs	r7, #1
    8d9a:	970f      	str	r7, [sp, #60]	; 0x3c
    8d9c:	f04f 37ff 	mov.w	r7, #4294967295
    8da0:	970b      	str	r7, [sp, #44]	; 0x2c
    8da2:	9707      	str	r7, [sp, #28]
    8da4:	2700      	movs	r7, #0
    8da6:	2312      	movs	r3, #18
    8da8:	9725      	str	r7, [sp, #148]	; 0x94
    8daa:	e004      	b.n	8db6 <_dtoa_r+0x296>
    8dac:	2701      	movs	r7, #1
    8dae:	970b      	str	r7, [sp, #44]	; 0x2c
    8db0:	9707      	str	r7, [sp, #28]
    8db2:	463b      	mov	r3, r7
    8db4:	9725      	str	r7, [sp, #148]	; 0x94
    8db6:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
    8dba:	2200      	movs	r2, #0
    8dbc:	6062      	str	r2, [r4, #4]
    8dbe:	2104      	movs	r1, #4
    8dc0:	f101 0214 	add.w	r2, r1, #20
    8dc4:	429a      	cmp	r2, r3
    8dc6:	d821      	bhi.n	8e0c <_dtoa_r+0x2ec>
    8dc8:	6862      	ldr	r2, [r4, #4]
    8dca:	3201      	adds	r2, #1
    8dcc:	6062      	str	r2, [r4, #4]
    8dce:	0049      	lsls	r1, r1, #1
    8dd0:	e7f6      	b.n	8dc0 <_dtoa_r+0x2a0>
    8dd2:	bf00      	nop
    8dd4:	f3af 8000 	nop.w
    8dd8:	636f4361 	.word	0x636f4361
    8ddc:	3fd287a7 	.word	0x3fd287a7
    8de0:	8b60c8b3 	.word	0x8b60c8b3
    8de4:	3fc68a28 	.word	0x3fc68a28
    8de8:	509f79fb 	.word	0x509f79fb
    8dec:	3fd34413 	.word	0x3fd34413
    8df0:	7ff00000 	.word	0x7ff00000
    8df4:	0000a635 	.word	0x0000a635
    8df8:	0000a62c 	.word	0x0000a62c
    8dfc:	00009e61 	.word	0x00009e61
    8e00:	fffffbee 	.word	0xfffffbee
    8e04:	3ff80000 	.word	0x3ff80000
    8e08:	0000a530 	.word	0x0000a530
    8e0c:	4650      	mov	r0, sl
    8e0e:	6861      	ldr	r1, [r4, #4]
    8e10:	f7ff f940 	bl	8094 <_Balloc>
    8e14:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
    8e18:	9f07      	ldr	r7, [sp, #28]
    8e1a:	6020      	str	r0, [r4, #0]
    8e1c:	681b      	ldr	r3, [r3, #0]
    8e1e:	930a      	str	r3, [sp, #40]	; 0x28
    8e20:	2f0e      	cmp	r7, #14
    8e22:	f200 816b 	bhi.w	90fc <_dtoa_r+0x5dc>
    8e26:	2d00      	cmp	r5, #0
    8e28:	f000 8168 	beq.w	90fc <_dtoa_r+0x5dc>
    8e2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    8e30:	f1b9 0f00 	cmp.w	r9, #0
    8e34:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    8e38:	dd31      	ble.n	8e9e <_dtoa_r+0x37e>
    8e3a:	4a81      	ldr	r2, [pc, #516]	; (9040 <_dtoa_r+0x520>)
    8e3c:	f009 030f 	and.w	r3, r9, #15
    8e40:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    8e44:	e9d3 0100 	ldrd	r0, r1, [r3]
    8e48:	ea4f 1429 	mov.w	r4, r9, asr #4
    8e4c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    8e50:	06e0      	lsls	r0, r4, #27
    8e52:	d50c      	bpl.n	8e6e <_dtoa_r+0x34e>
    8e54:	4b7b      	ldr	r3, [pc, #492]	; (9044 <_dtoa_r+0x524>)
    8e56:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    8e5a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    8e5e:	f7fc feaf 	bl	5bc0 <__aeabi_ddiv>
    8e62:	f004 040f 	and.w	r4, r4, #15
    8e66:	e9cd 0104 	strd	r0, r1, [sp, #16]
    8e6a:	2703      	movs	r7, #3
    8e6c:	e000      	b.n	8e70 <_dtoa_r+0x350>
    8e6e:	2702      	movs	r7, #2
    8e70:	4d74      	ldr	r5, [pc, #464]	; (9044 <_dtoa_r+0x524>)
    8e72:	b16c      	cbz	r4, 8e90 <_dtoa_r+0x370>
    8e74:	07e1      	lsls	r1, r4, #31
    8e76:	d508      	bpl.n	8e8a <_dtoa_r+0x36a>
    8e78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    8e7c:	e9d5 2300 	ldrd	r2, r3, [r5]
    8e80:	f7fc fd74 	bl	596c <__aeabi_dmul>
    8e84:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    8e88:	3701      	adds	r7, #1
    8e8a:	1064      	asrs	r4, r4, #1
    8e8c:	3508      	adds	r5, #8
    8e8e:	e7f0      	b.n	8e72 <_dtoa_r+0x352>
    8e90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    8e94:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    8e98:	f7fc fe92 	bl	5bc0 <__aeabi_ddiv>
    8e9c:	e01b      	b.n	8ed6 <_dtoa_r+0x3b6>
    8e9e:	f1c9 0400 	rsb	r4, r9, #0
    8ea2:	b1dc      	cbz	r4, 8edc <_dtoa_r+0x3bc>
    8ea4:	4b66      	ldr	r3, [pc, #408]	; (9040 <_dtoa_r+0x520>)
    8ea6:	4d67      	ldr	r5, [pc, #412]	; (9044 <_dtoa_r+0x524>)
    8ea8:	f004 020f 	and.w	r2, r4, #15
    8eac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    8eb0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    8eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
    8eb8:	f7fc fd58 	bl	596c <__aeabi_dmul>
    8ebc:	1124      	asrs	r4, r4, #4
    8ebe:	2702      	movs	r7, #2
    8ec0:	b14c      	cbz	r4, 8ed6 <_dtoa_r+0x3b6>
    8ec2:	07e2      	lsls	r2, r4, #31
    8ec4:	d504      	bpl.n	8ed0 <_dtoa_r+0x3b0>
    8ec6:	e9d5 2300 	ldrd	r2, r3, [r5]
    8eca:	3701      	adds	r7, #1
    8ecc:	f7fc fd4e 	bl	596c <__aeabi_dmul>
    8ed0:	1064      	asrs	r4, r4, #1
    8ed2:	3508      	adds	r5, #8
    8ed4:	e7f4      	b.n	8ec0 <_dtoa_r+0x3a0>
    8ed6:	e9cd 0104 	strd	r0, r1, [sp, #16]
    8eda:	e000      	b.n	8ede <_dtoa_r+0x3be>
    8edc:	2702      	movs	r7, #2
    8ede:	9914      	ldr	r1, [sp, #80]	; 0x50
    8ee0:	b1e9      	cbz	r1, 8f1e <_dtoa_r+0x3fe>
    8ee2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    8ee6:	2200      	movs	r2, #0
    8ee8:	4620      	mov	r0, r4
    8eea:	4629      	mov	r1, r5
    8eec:	4b56      	ldr	r3, [pc, #344]	; (9048 <_dtoa_r+0x528>)
    8eee:	f7fc ffaf 	bl	5e50 <__aeabi_dcmplt>
    8ef2:	b1c8      	cbz	r0, 8f28 <_dtoa_r+0x408>
    8ef4:	9a07      	ldr	r2, [sp, #28]
    8ef6:	b1e2      	cbz	r2, 8f32 <_dtoa_r+0x412>
    8ef8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8efa:	2b00      	cmp	r3, #0
    8efc:	f340 80fa 	ble.w	90f4 <_dtoa_r+0x5d4>
    8f00:	f109 30ff 	add.w	r0, r9, #4294967295
    8f04:	9010      	str	r0, [sp, #64]	; 0x40
    8f06:	4629      	mov	r1, r5
    8f08:	4620      	mov	r0, r4
    8f0a:	2200      	movs	r2, #0
    8f0c:	4b4f      	ldr	r3, [pc, #316]	; (904c <_dtoa_r+0x52c>)
    8f0e:	f7fc fd2d 	bl	596c <__aeabi_dmul>
    8f12:	e9cd 0104 	strd	r0, r1, [sp, #16]
    8f16:	990b      	ldr	r1, [sp, #44]	; 0x2c
    8f18:	910c      	str	r1, [sp, #48]	; 0x30
    8f1a:	3701      	adds	r7, #1
    8f1c:	e00d      	b.n	8f3a <_dtoa_r+0x41a>
    8f1e:	9a07      	ldr	r2, [sp, #28]
    8f20:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
    8f24:	920c      	str	r2, [sp, #48]	; 0x30
    8f26:	e008      	b.n	8f3a <_dtoa_r+0x41a>
    8f28:	9b07      	ldr	r3, [sp, #28]
    8f2a:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
    8f2e:	930c      	str	r3, [sp, #48]	; 0x30
    8f30:	e003      	b.n	8f3a <_dtoa_r+0x41a>
    8f32:	9807      	ldr	r0, [sp, #28]
    8f34:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
    8f38:	900c      	str	r0, [sp, #48]	; 0x30
    8f3a:	4638      	mov	r0, r7
    8f3c:	f7fc fcb0 	bl	58a0 <__aeabi_i2d>
    8f40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    8f44:	f7fc fd12 	bl	596c <__aeabi_dmul>
    8f48:	2200      	movs	r2, #0
    8f4a:	4b41      	ldr	r3, [pc, #260]	; (9050 <_dtoa_r+0x530>)
    8f4c:	f7fc fb5c 	bl	5608 <__adddf3>
    8f50:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    8f52:	4604      	mov	r4, r0
    8f54:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
    8f58:	b9cf      	cbnz	r7, 8f8e <_dtoa_r+0x46e>
    8f5a:	2200      	movs	r2, #0
    8f5c:	4b3d      	ldr	r3, [pc, #244]	; (9054 <_dtoa_r+0x534>)
    8f5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    8f62:	f7fc fb4f 	bl	5604 <__aeabi_dsub>
    8f66:	4622      	mov	r2, r4
    8f68:	462b      	mov	r3, r5
    8f6a:	4606      	mov	r6, r0
    8f6c:	460f      	mov	r7, r1
    8f6e:	f7fc ff8d 	bl	5e8c <__aeabi_dcmpgt>
    8f72:	2800      	cmp	r0, #0
    8f74:	f040 8253 	bne.w	941e <_dtoa_r+0x8fe>
    8f78:	4622      	mov	r2, r4
    8f7a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
    8f7e:	4630      	mov	r0, r6
    8f80:	4639      	mov	r1, r7
    8f82:	f7fc ff65 	bl	5e50 <__aeabi_dcmplt>
    8f86:	2800      	cmp	r0, #0
    8f88:	f040 823f 	bne.w	940a <_dtoa_r+0x8ea>
    8f8c:	e0b2      	b.n	90f4 <_dtoa_r+0x5d4>
    8f8e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    8f90:	4b2b      	ldr	r3, [pc, #172]	; (9040 <_dtoa_r+0x520>)
    8f92:	1e7a      	subs	r2, r7, #1
    8f94:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    8f96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    8f9a:	2f00      	cmp	r7, #0
    8f9c:	d05e      	beq.n	905c <_dtoa_r+0x53c>
    8f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
    8fa2:	2000      	movs	r0, #0
    8fa4:	492c      	ldr	r1, [pc, #176]	; (9058 <_dtoa_r+0x538>)
    8fa6:	f7fc fe0b 	bl	5bc0 <__aeabi_ddiv>
    8faa:	4622      	mov	r2, r4
    8fac:	462b      	mov	r3, r5
    8fae:	f7fc fb29 	bl	5604 <__aeabi_dsub>
    8fb2:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    8fb6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    8fba:	4604      	mov	r4, r0
    8fbc:	460d      	mov	r5, r1
    8fbe:	4639      	mov	r1, r7
    8fc0:	4630      	mov	r0, r6
    8fc2:	f7fc ff6d 	bl	5ea0 <__aeabi_d2iz>
    8fc6:	9002      	str	r0, [sp, #8]
    8fc8:	f7fc fc6a 	bl	58a0 <__aeabi_i2d>
    8fcc:	4602      	mov	r2, r0
    8fce:	460b      	mov	r3, r1
    8fd0:	4630      	mov	r0, r6
    8fd2:	4639      	mov	r1, r7
    8fd4:	f7fc fb16 	bl	5604 <__aeabi_dsub>
    8fd8:	f8dd c008 	ldr.w	ip, [sp, #8]
    8fdc:	f10c 0330 	add.w	r3, ip, #48	; 0x30
    8fe0:	f808 3b01 	strb.w	r3, [r8], #1
    8fe4:	4622      	mov	r2, r4
    8fe6:	462b      	mov	r3, r5
    8fe8:	4606      	mov	r6, r0
    8fea:	460f      	mov	r7, r1
    8fec:	f7fc ff30 	bl	5e50 <__aeabi_dcmplt>
    8ff0:	2800      	cmp	r0, #0
    8ff2:	f040 833b 	bne.w	966c <_dtoa_r+0xb4c>
    8ff6:	4632      	mov	r2, r6
    8ff8:	463b      	mov	r3, r7
    8ffa:	2000      	movs	r0, #0
    8ffc:	4912      	ldr	r1, [pc, #72]	; (9048 <_dtoa_r+0x528>)
    8ffe:	f7fc fb01 	bl	5604 <__aeabi_dsub>
    9002:	4622      	mov	r2, r4
    9004:	462b      	mov	r3, r5
    9006:	f7fc ff23 	bl	5e50 <__aeabi_dcmplt>
    900a:	2800      	cmp	r0, #0
    900c:	f040 80d5 	bne.w	91ba <_dtoa_r+0x69a>
    9010:	980a      	ldr	r0, [sp, #40]	; 0x28
    9012:	990c      	ldr	r1, [sp, #48]	; 0x30
    9014:	ebc0 0308 	rsb	r3, r0, r8
    9018:	428b      	cmp	r3, r1
    901a:	da6b      	bge.n	90f4 <_dtoa_r+0x5d4>
    901c:	4620      	mov	r0, r4
    901e:	4629      	mov	r1, r5
    9020:	2200      	movs	r2, #0
    9022:	4b0a      	ldr	r3, [pc, #40]	; (904c <_dtoa_r+0x52c>)
    9024:	f7fc fca2 	bl	596c <__aeabi_dmul>
    9028:	2200      	movs	r2, #0
    902a:	4604      	mov	r4, r0
    902c:	460d      	mov	r5, r1
    902e:	4630      	mov	r0, r6
    9030:	4639      	mov	r1, r7
    9032:	4b06      	ldr	r3, [pc, #24]	; (904c <_dtoa_r+0x52c>)
    9034:	f7fc fc9a 	bl	596c <__aeabi_dmul>
    9038:	4606      	mov	r6, r0
    903a:	460f      	mov	r7, r1
    903c:	e7bf      	b.n	8fbe <_dtoa_r+0x49e>
    903e:	bf00      	nop
    9040:	0000a530 	.word	0x0000a530
    9044:	0000a5f8 	.word	0x0000a5f8
    9048:	3ff00000 	.word	0x3ff00000
    904c:	40240000 	.word	0x40240000
    9050:	401c0000 	.word	0x401c0000
    9054:	40140000 	.word	0x40140000
    9058:	3fe00000 	.word	0x3fe00000
    905c:	4622      	mov	r2, r4
    905e:	e9d3 0100 	ldrd	r0, r1, [r3]
    9062:	462b      	mov	r3, r5
    9064:	f7fc fc82 	bl	596c <__aeabi_dmul>
    9068:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    906c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    906e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    9070:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
    9074:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    9078:	4490      	add	r8, r2
    907a:	4639      	mov	r1, r7
    907c:	4630      	mov	r0, r6
    907e:	f7fc ff0f 	bl	5ea0 <__aeabi_d2iz>
    9082:	4605      	mov	r5, r0
    9084:	f7fc fc0c 	bl	58a0 <__aeabi_i2d>
    9088:	3530      	adds	r5, #48	; 0x30
    908a:	4602      	mov	r2, r0
    908c:	460b      	mov	r3, r1
    908e:	4630      	mov	r0, r6
    9090:	4639      	mov	r1, r7
    9092:	f7fc fab7 	bl	5604 <__aeabi_dsub>
    9096:	f804 5b01 	strb.w	r5, [r4], #1
    909a:	4544      	cmp	r4, r8
    909c:	4606      	mov	r6, r0
    909e:	460f      	mov	r7, r1
    90a0:	d121      	bne.n	90e6 <_dtoa_r+0x5c6>
    90a2:	2200      	movs	r2, #0
    90a4:	4b87      	ldr	r3, [pc, #540]	; (92c4 <_dtoa_r+0x7a4>)
    90a6:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
    90aa:	f7fc faad 	bl	5608 <__adddf3>
    90ae:	4602      	mov	r2, r0
    90b0:	460b      	mov	r3, r1
    90b2:	4630      	mov	r0, r6
    90b4:	4639      	mov	r1, r7
    90b6:	f7fc fee9 	bl	5e8c <__aeabi_dcmpgt>
    90ba:	2800      	cmp	r0, #0
    90bc:	d17d      	bne.n	91ba <_dtoa_r+0x69a>
    90be:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
    90c2:	2000      	movs	r0, #0
    90c4:	497f      	ldr	r1, [pc, #508]	; (92c4 <_dtoa_r+0x7a4>)
    90c6:	f7fc fa9d 	bl	5604 <__aeabi_dsub>
    90ca:	4602      	mov	r2, r0
    90cc:	460b      	mov	r3, r1
    90ce:	4630      	mov	r0, r6
    90d0:	4639      	mov	r1, r7
    90d2:	f7fc febd 	bl	5e50 <__aeabi_dcmplt>
    90d6:	b168      	cbz	r0, 90f4 <_dtoa_r+0x5d4>
    90d8:	46a0      	mov	r8, r4
    90da:	3c01      	subs	r4, #1
    90dc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
    90e0:	2b30      	cmp	r3, #48	; 0x30
    90e2:	d0f9      	beq.n	90d8 <_dtoa_r+0x5b8>
    90e4:	e2c2      	b.n	966c <_dtoa_r+0xb4c>
    90e6:	2200      	movs	r2, #0
    90e8:	4b77      	ldr	r3, [pc, #476]	; (92c8 <_dtoa_r+0x7a8>)
    90ea:	f7fc fc3f 	bl	596c <__aeabi_dmul>
    90ee:	4606      	mov	r6, r0
    90f0:	460f      	mov	r7, r1
    90f2:	e7c2      	b.n	907a <_dtoa_r+0x55a>
    90f4:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    90f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
    90fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
    90fe:	2b00      	cmp	r3, #0
    9100:	db7c      	blt.n	91fc <_dtoa_r+0x6dc>
    9102:	f1b9 0f0e 	cmp.w	r9, #14
    9106:	dc79      	bgt.n	91fc <_dtoa_r+0x6dc>
    9108:	4b70      	ldr	r3, [pc, #448]	; (92cc <_dtoa_r+0x7ac>)
    910a:	9f25      	ldr	r7, [sp, #148]	; 0x94
    910c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
    9110:	2f00      	cmp	r7, #0
    9112:	e9d3 4500 	ldrd	r4, r5, [r3]
    9116:	da14      	bge.n	9142 <_dtoa_r+0x622>
    9118:	9f07      	ldr	r7, [sp, #28]
    911a:	2f00      	cmp	r7, #0
    911c:	dc11      	bgt.n	9142 <_dtoa_r+0x622>
    911e:	f040 8176 	bne.w	940e <_dtoa_r+0x8ee>
    9122:	4620      	mov	r0, r4
    9124:	4629      	mov	r1, r5
    9126:	2200      	movs	r2, #0
    9128:	4b69      	ldr	r3, [pc, #420]	; (92d0 <_dtoa_r+0x7b0>)
    912a:	f7fc fc1f 	bl	596c <__aeabi_dmul>
    912e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    9132:	f7fc fea1 	bl	5e78 <__aeabi_dcmpge>
    9136:	9d07      	ldr	r5, [sp, #28]
    9138:	462c      	mov	r4, r5
    913a:	2800      	cmp	r0, #0
    913c:	f040 8169 	bne.w	9412 <_dtoa_r+0x8f2>
    9140:	e171      	b.n	9426 <_dtoa_r+0x906>
    9142:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    9146:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    914a:	4622      	mov	r2, r4
    914c:	462b      	mov	r3, r5
    914e:	4630      	mov	r0, r6
    9150:	4639      	mov	r1, r7
    9152:	f7fc fd35 	bl	5bc0 <__aeabi_ddiv>
    9156:	f7fc fea3 	bl	5ea0 <__aeabi_d2iz>
    915a:	9004      	str	r0, [sp, #16]
    915c:	f7fc fba0 	bl	58a0 <__aeabi_i2d>
    9160:	4622      	mov	r2, r4
    9162:	462b      	mov	r3, r5
    9164:	f7fc fc02 	bl	596c <__aeabi_dmul>
    9168:	4602      	mov	r2, r0
    916a:	460b      	mov	r3, r1
    916c:	4630      	mov	r0, r6
    916e:	4639      	mov	r1, r7
    9170:	f7fc fa48 	bl	5604 <__aeabi_dsub>
    9174:	9f04      	ldr	r7, [sp, #16]
    9176:	f107 0630 	add.w	r6, r7, #48	; 0x30
    917a:	f808 6b01 	strb.w	r6, [r8], #1
    917e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    9180:	ebc7 0608 	rsb	r6, r7, r8
    9184:	9f07      	ldr	r7, [sp, #28]
    9186:	42be      	cmp	r6, r7
    9188:	4602      	mov	r2, r0
    918a:	460b      	mov	r3, r1
    918c:	d129      	bne.n	91e2 <_dtoa_r+0x6c2>
    918e:	f7fc fa3b 	bl	5608 <__adddf3>
    9192:	4622      	mov	r2, r4
    9194:	462b      	mov	r3, r5
    9196:	4606      	mov	r6, r0
    9198:	460f      	mov	r7, r1
    919a:	f7fc fe77 	bl	5e8c <__aeabi_dcmpgt>
    919e:	b970      	cbnz	r0, 91be <_dtoa_r+0x69e>
    91a0:	4630      	mov	r0, r6
    91a2:	4639      	mov	r1, r7
    91a4:	4622      	mov	r2, r4
    91a6:	462b      	mov	r3, r5
    91a8:	f7fc fe48 	bl	5e3c <__aeabi_dcmpeq>
    91ac:	2800      	cmp	r0, #0
    91ae:	f000 825f 	beq.w	9670 <_dtoa_r+0xb50>
    91b2:	9f04      	ldr	r7, [sp, #16]
    91b4:	07fb      	lsls	r3, r7, #31
    91b6:	d402      	bmi.n	91be <_dtoa_r+0x69e>
    91b8:	e25a      	b.n	9670 <_dtoa_r+0xb50>
    91ba:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    91be:	4643      	mov	r3, r8
    91c0:	4698      	mov	r8, r3
    91c2:	3b01      	subs	r3, #1
    91c4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
    91c8:	2a39      	cmp	r2, #57	; 0x39
    91ca:	d106      	bne.n	91da <_dtoa_r+0x6ba>
    91cc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    91ce:	429f      	cmp	r7, r3
    91d0:	d1f6      	bne.n	91c0 <_dtoa_r+0x6a0>
    91d2:	2230      	movs	r2, #48	; 0x30
    91d4:	f109 0901 	add.w	r9, r9, #1
    91d8:	703a      	strb	r2, [r7, #0]
    91da:	781a      	ldrb	r2, [r3, #0]
    91dc:	3201      	adds	r2, #1
    91de:	701a      	strb	r2, [r3, #0]
    91e0:	e246      	b.n	9670 <_dtoa_r+0xb50>
    91e2:	2200      	movs	r2, #0
    91e4:	4b38      	ldr	r3, [pc, #224]	; (92c8 <_dtoa_r+0x7a8>)
    91e6:	f7fc fbc1 	bl	596c <__aeabi_dmul>
    91ea:	2200      	movs	r2, #0
    91ec:	2300      	movs	r3, #0
    91ee:	4606      	mov	r6, r0
    91f0:	460f      	mov	r7, r1
    91f2:	f7fc fe23 	bl	5e3c <__aeabi_dcmpeq>
    91f6:	2800      	cmp	r0, #0
    91f8:	d0a7      	beq.n	914a <_dtoa_r+0x62a>
    91fa:	e239      	b.n	9670 <_dtoa_r+0xb50>
    91fc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    91fe:	2f00      	cmp	r7, #0
    9200:	d030      	beq.n	9264 <_dtoa_r+0x744>
    9202:	9f24      	ldr	r7, [sp, #144]	; 0x90
    9204:	2f01      	cmp	r7, #1
    9206:	dc0a      	bgt.n	921e <_dtoa_r+0x6fe>
    9208:	9f15      	ldr	r7, [sp, #84]	; 0x54
    920a:	b117      	cbz	r7, 9212 <_dtoa_r+0x6f2>
    920c:	f203 4333 	addw	r3, r3, #1075	; 0x433
    9210:	e002      	b.n	9218 <_dtoa_r+0x6f8>
    9212:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9214:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    9218:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    921a:	9e08      	ldr	r6, [sp, #32]
    921c:	e016      	b.n	924c <_dtoa_r+0x72c>
    921e:	9f07      	ldr	r7, [sp, #28]
    9220:	1e7d      	subs	r5, r7, #1
    9222:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    9224:	42af      	cmp	r7, r5
    9226:	db01      	blt.n	922c <_dtoa_r+0x70c>
    9228:	1b7d      	subs	r5, r7, r5
    922a:	e006      	b.n	923a <_dtoa_r+0x71a>
    922c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    922e:	950e      	str	r5, [sp, #56]	; 0x38
    9230:	1beb      	subs	r3, r5, r7
    9232:	9f11      	ldr	r7, [sp, #68]	; 0x44
    9234:	441f      	add	r7, r3
    9236:	9711      	str	r7, [sp, #68]	; 0x44
    9238:	2500      	movs	r5, #0
    923a:	9f07      	ldr	r7, [sp, #28]
    923c:	2f00      	cmp	r7, #0
    923e:	da03      	bge.n	9248 <_dtoa_r+0x728>
    9240:	9808      	ldr	r0, [sp, #32]
    9242:	2300      	movs	r3, #0
    9244:	1bc6      	subs	r6, r0, r7
    9246:	e001      	b.n	924c <_dtoa_r+0x72c>
    9248:	9e08      	ldr	r6, [sp, #32]
    924a:	9b07      	ldr	r3, [sp, #28]
    924c:	9f08      	ldr	r7, [sp, #32]
    924e:	441f      	add	r7, r3
    9250:	9708      	str	r7, [sp, #32]
    9252:	9f09      	ldr	r7, [sp, #36]	; 0x24
    9254:	4650      	mov	r0, sl
    9256:	441f      	add	r7, r3
    9258:	2101      	movs	r1, #1
    925a:	9709      	str	r7, [sp, #36]	; 0x24
    925c:	f7ff f82f 	bl	82be <__i2b>
    9260:	4604      	mov	r4, r0
    9262:	e002      	b.n	926a <_dtoa_r+0x74a>
    9264:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    9266:	9e08      	ldr	r6, [sp, #32]
    9268:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    926a:	b16e      	cbz	r6, 9288 <_dtoa_r+0x768>
    926c:	9f09      	ldr	r7, [sp, #36]	; 0x24
    926e:	2f00      	cmp	r7, #0
    9270:	dd0a      	ble.n	9288 <_dtoa_r+0x768>
    9272:	463b      	mov	r3, r7
    9274:	9f08      	ldr	r7, [sp, #32]
    9276:	42b3      	cmp	r3, r6
    9278:	bfa8      	it	ge
    927a:	4633      	movge	r3, r6
    927c:	1aff      	subs	r7, r7, r3
    927e:	9708      	str	r7, [sp, #32]
    9280:	9f09      	ldr	r7, [sp, #36]	; 0x24
    9282:	1aff      	subs	r7, r7, r3
    9284:	1af6      	subs	r6, r6, r3
    9286:	9709      	str	r7, [sp, #36]	; 0x24
    9288:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    928a:	2f00      	cmp	r7, #0
    928c:	dd28      	ble.n	92e0 <_dtoa_r+0x7c0>
    928e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    9290:	b307      	cbz	r7, 92d4 <_dtoa_r+0x7b4>
    9292:	2d00      	cmp	r5, #0
    9294:	dd10      	ble.n	92b8 <_dtoa_r+0x798>
    9296:	4621      	mov	r1, r4
    9298:	462a      	mov	r2, r5
    929a:	4650      	mov	r0, sl
    929c:	f7ff f8b0 	bl	8400 <__pow5mult>
    92a0:	4604      	mov	r4, r0
    92a2:	465a      	mov	r2, fp
    92a4:	4621      	mov	r1, r4
    92a6:	4650      	mov	r0, sl
    92a8:	f7ff f812 	bl	82d0 <__multiply>
    92ac:	4659      	mov	r1, fp
    92ae:	4607      	mov	r7, r0
    92b0:	4650      	mov	r0, sl
    92b2:	f7fe ff24 	bl	80fe <_Bfree>
    92b6:	46bb      	mov	fp, r7
    92b8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    92ba:	1b7a      	subs	r2, r7, r5
    92bc:	d010      	beq.n	92e0 <_dtoa_r+0x7c0>
    92be:	4650      	mov	r0, sl
    92c0:	4659      	mov	r1, fp
    92c2:	e00a      	b.n	92da <_dtoa_r+0x7ba>
    92c4:	3fe00000 	.word	0x3fe00000
    92c8:	40240000 	.word	0x40240000
    92cc:	0000a530 	.word	0x0000a530
    92d0:	40140000 	.word	0x40140000
    92d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    92d6:	4650      	mov	r0, sl
    92d8:	4659      	mov	r1, fp
    92da:	f7ff f891 	bl	8400 <__pow5mult>
    92de:	4683      	mov	fp, r0
    92e0:	4650      	mov	r0, sl
    92e2:	2101      	movs	r1, #1
    92e4:	f7fe ffeb 	bl	82be <__i2b>
    92e8:	9f11      	ldr	r7, [sp, #68]	; 0x44
    92ea:	2f00      	cmp	r7, #0
    92ec:	4605      	mov	r5, r0
    92ee:	dd05      	ble.n	92fc <_dtoa_r+0x7dc>
    92f0:	4629      	mov	r1, r5
    92f2:	4650      	mov	r0, sl
    92f4:	463a      	mov	r2, r7
    92f6:	f7ff f883 	bl	8400 <__pow5mult>
    92fa:	4605      	mov	r5, r0
    92fc:	9f24      	ldr	r7, [sp, #144]	; 0x90
    92fe:	2f01      	cmp	r7, #1
    9300:	dc12      	bgt.n	9328 <_dtoa_r+0x808>
    9302:	9804      	ldr	r0, [sp, #16]
    9304:	b980      	cbnz	r0, 9328 <_dtoa_r+0x808>
    9306:	9905      	ldr	r1, [sp, #20]
    9308:	f3c1 0313 	ubfx	r3, r1, #0, #20
    930c:	b973      	cbnz	r3, 932c <_dtoa_r+0x80c>
    930e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
    9312:	0d3f      	lsrs	r7, r7, #20
    9314:	053f      	lsls	r7, r7, #20
    9316:	b157      	cbz	r7, 932e <_dtoa_r+0x80e>
    9318:	9f08      	ldr	r7, [sp, #32]
    931a:	3701      	adds	r7, #1
    931c:	9708      	str	r7, [sp, #32]
    931e:	9f09      	ldr	r7, [sp, #36]	; 0x24
    9320:	3701      	adds	r7, #1
    9322:	9709      	str	r7, [sp, #36]	; 0x24
    9324:	2701      	movs	r7, #1
    9326:	e002      	b.n	932e <_dtoa_r+0x80e>
    9328:	2700      	movs	r7, #0
    932a:	e000      	b.n	932e <_dtoa_r+0x80e>
    932c:	9f04      	ldr	r7, [sp, #16]
    932e:	9811      	ldr	r0, [sp, #68]	; 0x44
    9330:	b140      	cbz	r0, 9344 <_dtoa_r+0x824>
    9332:	692b      	ldr	r3, [r5, #16]
    9334:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    9338:	6918      	ldr	r0, [r3, #16]
    933a:	f7fe ff73 	bl	8224 <__hi0bits>
    933e:	f1c0 0020 	rsb	r0, r0, #32
    9342:	e000      	b.n	9346 <_dtoa_r+0x826>
    9344:	2001      	movs	r0, #1
    9346:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9348:	4403      	add	r3, r0
    934a:	f013 031f 	ands.w	r3, r3, #31
    934e:	d00f      	beq.n	9370 <_dtoa_r+0x850>
    9350:	f1c3 0220 	rsb	r2, r3, #32
    9354:	2a04      	cmp	r2, #4
    9356:	dd09      	ble.n	936c <_dtoa_r+0x84c>
    9358:	9908      	ldr	r1, [sp, #32]
    935a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    935c:	f1c3 031c 	rsb	r3, r3, #28
    9360:	4419      	add	r1, r3
    9362:	441a      	add	r2, r3
    9364:	9108      	str	r1, [sp, #32]
    9366:	441e      	add	r6, r3
    9368:	9209      	str	r2, [sp, #36]	; 0x24
    936a:	e009      	b.n	9380 <_dtoa_r+0x860>
    936c:	d008      	beq.n	9380 <_dtoa_r+0x860>
    936e:	4613      	mov	r3, r2
    9370:	9808      	ldr	r0, [sp, #32]
    9372:	9909      	ldr	r1, [sp, #36]	; 0x24
    9374:	331c      	adds	r3, #28
    9376:	4418      	add	r0, r3
    9378:	4419      	add	r1, r3
    937a:	9008      	str	r0, [sp, #32]
    937c:	441e      	add	r6, r3
    937e:	9109      	str	r1, [sp, #36]	; 0x24
    9380:	9a08      	ldr	r2, [sp, #32]
    9382:	2a00      	cmp	r2, #0
    9384:	dd04      	ble.n	9390 <_dtoa_r+0x870>
    9386:	4659      	mov	r1, fp
    9388:	4650      	mov	r0, sl
    938a:	f7ff f887 	bl	849c <__lshift>
    938e:	4683      	mov	fp, r0
    9390:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9392:	2b00      	cmp	r3, #0
    9394:	dd05      	ble.n	93a2 <_dtoa_r+0x882>
    9396:	4629      	mov	r1, r5
    9398:	4650      	mov	r0, sl
    939a:	461a      	mov	r2, r3
    939c:	f7ff f87e 	bl	849c <__lshift>
    93a0:	4605      	mov	r5, r0
    93a2:	9814      	ldr	r0, [sp, #80]	; 0x50
    93a4:	b1e0      	cbz	r0, 93e0 <_dtoa_r+0x8c0>
    93a6:	4658      	mov	r0, fp
    93a8:	4629      	mov	r1, r5
    93aa:	f7ff f8ca 	bl	8542 <__mcmp>
    93ae:	2800      	cmp	r0, #0
    93b0:	da16      	bge.n	93e0 <_dtoa_r+0x8c0>
    93b2:	4659      	mov	r1, fp
    93b4:	4650      	mov	r0, sl
    93b6:	220a      	movs	r2, #10
    93b8:	2300      	movs	r3, #0
    93ba:	f7fe feb7 	bl	812c <__multadd>
    93be:	990f      	ldr	r1, [sp, #60]	; 0x3c
    93c0:	f109 39ff 	add.w	r9, r9, #4294967295
    93c4:	4683      	mov	fp, r0
    93c6:	b149      	cbz	r1, 93dc <_dtoa_r+0x8bc>
    93c8:	4621      	mov	r1, r4
    93ca:	220a      	movs	r2, #10
    93cc:	4650      	mov	r0, sl
    93ce:	2300      	movs	r3, #0
    93d0:	f7fe feac 	bl	812c <__multadd>
    93d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    93d6:	9207      	str	r2, [sp, #28]
    93d8:	4604      	mov	r4, r0
    93da:	e001      	b.n	93e0 <_dtoa_r+0x8c0>
    93dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    93de:	9307      	str	r3, [sp, #28]
    93e0:	9807      	ldr	r0, [sp, #28]
    93e2:	2800      	cmp	r0, #0
    93e4:	dc29      	bgt.n	943a <_dtoa_r+0x91a>
    93e6:	9924      	ldr	r1, [sp, #144]	; 0x90
    93e8:	2902      	cmp	r1, #2
    93ea:	dd26      	ble.n	943a <_dtoa_r+0x91a>
    93ec:	b988      	cbnz	r0, 9412 <_dtoa_r+0x8f2>
    93ee:	4629      	mov	r1, r5
    93f0:	2205      	movs	r2, #5
    93f2:	9b07      	ldr	r3, [sp, #28]
    93f4:	4650      	mov	r0, sl
    93f6:	f7fe fe99 	bl	812c <__multadd>
    93fa:	4605      	mov	r5, r0
    93fc:	4629      	mov	r1, r5
    93fe:	4658      	mov	r0, fp
    9400:	f7ff f89f 	bl	8542 <__mcmp>
    9404:	2800      	cmp	r0, #0
    9406:	dc0e      	bgt.n	9426 <_dtoa_r+0x906>
    9408:	e003      	b.n	9412 <_dtoa_r+0x8f2>
    940a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    940c:	e000      	b.n	9410 <_dtoa_r+0x8f0>
    940e:	2500      	movs	r5, #0
    9410:	462c      	mov	r4, r5
    9412:	9f25      	ldr	r7, [sp, #148]	; 0x94
    9414:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    9418:	ea6f 0907 	mvn.w	r9, r7
    941c:	e00a      	b.n	9434 <_dtoa_r+0x914>
    941e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    9420:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    9424:	462c      	mov	r4, r5
    9426:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    9428:	2331      	movs	r3, #49	; 0x31
    942a:	f107 0801 	add.w	r8, r7, #1
    942e:	703b      	strb	r3, [r7, #0]
    9430:	f109 0901 	add.w	r9, r9, #1
    9434:	4627      	mov	r7, r4
    9436:	2400      	movs	r4, #0
    9438:	e107      	b.n	964a <_dtoa_r+0xb2a>
    943a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    943c:	2800      	cmp	r0, #0
    943e:	f000 80bb 	beq.w	95b8 <_dtoa_r+0xa98>
    9442:	2e00      	cmp	r6, #0
    9444:	dd05      	ble.n	9452 <_dtoa_r+0x932>
    9446:	4621      	mov	r1, r4
    9448:	4650      	mov	r0, sl
    944a:	4632      	mov	r2, r6
    944c:	f7ff f826 	bl	849c <__lshift>
    9450:	4604      	mov	r4, r0
    9452:	b19f      	cbz	r7, 947c <_dtoa_r+0x95c>
    9454:	6861      	ldr	r1, [r4, #4]
    9456:	4650      	mov	r0, sl
    9458:	f7fe fe1c 	bl	8094 <_Balloc>
    945c:	6922      	ldr	r2, [r4, #16]
    945e:	3202      	adds	r2, #2
    9460:	4606      	mov	r6, r0
    9462:	f104 010c 	add.w	r1, r4, #12
    9466:	0092      	lsls	r2, r2, #2
    9468:	300c      	adds	r0, #12
    946a:	f7fd f915 	bl	6698 <memcpy>
    946e:	4650      	mov	r0, sl
    9470:	4631      	mov	r1, r6
    9472:	2201      	movs	r2, #1
    9474:	f7ff f812 	bl	849c <__lshift>
    9478:	4607      	mov	r7, r0
    947a:	e000      	b.n	947e <_dtoa_r+0x95e>
    947c:	4627      	mov	r7, r4
    947e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    9480:	4629      	mov	r1, r5
    9482:	4658      	mov	r0, fp
    9484:	f7ff fabc 	bl	8a00 <quorem>
    9488:	4621      	mov	r1, r4
    948a:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    948e:	4680      	mov	r8, r0
    9490:	4658      	mov	r0, fp
    9492:	f8cd c008 	str.w	ip, [sp, #8]
    9496:	f7ff f854 	bl	8542 <__mcmp>
    949a:	463a      	mov	r2, r7
    949c:	9008      	str	r0, [sp, #32]
    949e:	4629      	mov	r1, r5
    94a0:	4650      	mov	r0, sl
    94a2:	f7ff f86b 	bl	857c <__mdiff>
    94a6:	68c3      	ldr	r3, [r0, #12]
    94a8:	f8dd c008 	ldr.w	ip, [sp, #8]
    94ac:	4602      	mov	r2, r0
    94ae:	b94b      	cbnz	r3, 94c4 <_dtoa_r+0x9a4>
    94b0:	4611      	mov	r1, r2
    94b2:	4658      	mov	r0, fp
    94b4:	9203      	str	r2, [sp, #12]
    94b6:	f7ff f844 	bl	8542 <__mcmp>
    94ba:	9a03      	ldr	r2, [sp, #12]
    94bc:	f8dd c008 	ldr.w	ip, [sp, #8]
    94c0:	4603      	mov	r3, r0
    94c2:	e000      	b.n	94c6 <_dtoa_r+0x9a6>
    94c4:	2301      	movs	r3, #1
    94c6:	4650      	mov	r0, sl
    94c8:	4611      	mov	r1, r2
    94ca:	9303      	str	r3, [sp, #12]
    94cc:	f8cd c008 	str.w	ip, [sp, #8]
    94d0:	f7fe fe15 	bl	80fe <_Bfree>
    94d4:	9b03      	ldr	r3, [sp, #12]
    94d6:	f8dd c008 	ldr.w	ip, [sp, #8]
    94da:	b963      	cbnz	r3, 94f6 <_dtoa_r+0x9d6>
    94dc:	9924      	ldr	r1, [sp, #144]	; 0x90
    94de:	b951      	cbnz	r1, 94f6 <_dtoa_r+0x9d6>
    94e0:	9804      	ldr	r0, [sp, #16]
    94e2:	f000 0201 	and.w	r2, r0, #1
    94e6:	b932      	cbnz	r2, 94f6 <_dtoa_r+0x9d6>
    94e8:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
    94ec:	d035      	beq.n	955a <_dtoa_r+0xa3a>
    94ee:	9b08      	ldr	r3, [sp, #32]
    94f0:	2b00      	cmp	r3, #0
    94f2:	dc24      	bgt.n	953e <_dtoa_r+0xa1e>
    94f4:	e025      	b.n	9542 <_dtoa_r+0xa22>
    94f6:	9808      	ldr	r0, [sp, #32]
    94f8:	2800      	cmp	r0, #0
    94fa:	da02      	bge.n	9502 <_dtoa_r+0x9e2>
    94fc:	2b00      	cmp	r3, #0
    94fe:	dc08      	bgt.n	9512 <_dtoa_r+0x9f2>
    9500:	e01f      	b.n	9542 <_dtoa_r+0xa22>
    9502:	d123      	bne.n	954c <_dtoa_r+0xa2c>
    9504:	9924      	ldr	r1, [sp, #144]	; 0x90
    9506:	bb09      	cbnz	r1, 954c <_dtoa_r+0xa2c>
    9508:	9804      	ldr	r0, [sp, #16]
    950a:	f000 0201 	and.w	r2, r0, #1
    950e:	b9ea      	cbnz	r2, 954c <_dtoa_r+0xa2c>
    9510:	e7f4      	b.n	94fc <_dtoa_r+0x9dc>
    9512:	4659      	mov	r1, fp
    9514:	2201      	movs	r2, #1
    9516:	4650      	mov	r0, sl
    9518:	f8cd c008 	str.w	ip, [sp, #8]
    951c:	f7fe ffbe 	bl	849c <__lshift>
    9520:	4629      	mov	r1, r5
    9522:	4683      	mov	fp, r0
    9524:	f7ff f80d 	bl	8542 <__mcmp>
    9528:	2800      	cmp	r0, #0
    952a:	f8dd c008 	ldr.w	ip, [sp, #8]
    952e:	dc03      	bgt.n	9538 <_dtoa_r+0xa18>
    9530:	d107      	bne.n	9542 <_dtoa_r+0xa22>
    9532:	f01c 0f01 	tst.w	ip, #1
    9536:	d004      	beq.n	9542 <_dtoa_r+0xa22>
    9538:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
    953c:	d00d      	beq.n	955a <_dtoa_r+0xa3a>
    953e:	f108 0c31 	add.w	ip, r8, #49	; 0x31
    9542:	f106 0801 	add.w	r8, r6, #1
    9546:	f886 c000 	strb.w	ip, [r6]
    954a:	e07e      	b.n	964a <_dtoa_r+0xb2a>
    954c:	2b00      	cmp	r3, #0
    954e:	f106 0801 	add.w	r8, r6, #1
    9552:	dd09      	ble.n	9568 <_dtoa_r+0xa48>
    9554:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
    9558:	d103      	bne.n	9562 <_dtoa_r+0xa42>
    955a:	2339      	movs	r3, #57	; 0x39
    955c:	7033      	strb	r3, [r6, #0]
    955e:	3601      	adds	r6, #1
    9560:	e05b      	b.n	961a <_dtoa_r+0xafa>
    9562:	f10c 0301 	add.w	r3, ip, #1
    9566:	e068      	b.n	963a <_dtoa_r+0xb1a>
    9568:	990a      	ldr	r1, [sp, #40]	; 0x28
    956a:	9a07      	ldr	r2, [sp, #28]
    956c:	4646      	mov	r6, r8
    956e:	ebc1 0308 	rsb	r3, r1, r8
    9572:	4293      	cmp	r3, r2
    9574:	f806 cc01 	strb.w	ip, [r6, #-1]
    9578:	d03c      	beq.n	95f4 <_dtoa_r+0xad4>
    957a:	4659      	mov	r1, fp
    957c:	220a      	movs	r2, #10
    957e:	2300      	movs	r3, #0
    9580:	4650      	mov	r0, sl
    9582:	f7fe fdd3 	bl	812c <__multadd>
    9586:	42bc      	cmp	r4, r7
    9588:	4683      	mov	fp, r0
    958a:	4621      	mov	r1, r4
    958c:	4650      	mov	r0, sl
    958e:	f04f 020a 	mov.w	r2, #10
    9592:	f04f 0300 	mov.w	r3, #0
    9596:	d104      	bne.n	95a2 <_dtoa_r+0xa82>
    9598:	f7fe fdc8 	bl	812c <__multadd>
    959c:	4604      	mov	r4, r0
    959e:	4607      	mov	r7, r0
    95a0:	e76e      	b.n	9480 <_dtoa_r+0x960>
    95a2:	f7fe fdc3 	bl	812c <__multadd>
    95a6:	4639      	mov	r1, r7
    95a8:	4604      	mov	r4, r0
    95aa:	220a      	movs	r2, #10
    95ac:	4650      	mov	r0, sl
    95ae:	2300      	movs	r3, #0
    95b0:	f7fe fdbc 	bl	812c <__multadd>
    95b4:	4607      	mov	r7, r0
    95b6:	e763      	b.n	9480 <_dtoa_r+0x960>
    95b8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    95ba:	4658      	mov	r0, fp
    95bc:	4629      	mov	r1, r5
    95be:	f7ff fa1f 	bl	8a00 <quorem>
    95c2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    95c4:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    95c8:	f807 c006 	strb.w	ip, [r7, r6]
    95cc:	9f07      	ldr	r7, [sp, #28]
    95ce:	3601      	adds	r6, #1
    95d0:	42be      	cmp	r6, r7
    95d2:	db07      	blt.n	95e4 <_dtoa_r+0xac4>
    95d4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    95d6:	2f01      	cmp	r7, #1
    95d8:	bfac      	ite	ge
    95da:	19f6      	addge	r6, r6, r7
    95dc:	3601      	addlt	r6, #1
    95de:	4627      	mov	r7, r4
    95e0:	2400      	movs	r4, #0
    95e2:	e007      	b.n	95f4 <_dtoa_r+0xad4>
    95e4:	4659      	mov	r1, fp
    95e6:	4650      	mov	r0, sl
    95e8:	220a      	movs	r2, #10
    95ea:	2300      	movs	r3, #0
    95ec:	f7fe fd9e 	bl	812c <__multadd>
    95f0:	4683      	mov	fp, r0
    95f2:	e7e2      	b.n	95ba <_dtoa_r+0xa9a>
    95f4:	4659      	mov	r1, fp
    95f6:	2201      	movs	r2, #1
    95f8:	4650      	mov	r0, sl
    95fa:	f8cd c008 	str.w	ip, [sp, #8]
    95fe:	f7fe ff4d 	bl	849c <__lshift>
    9602:	4629      	mov	r1, r5
    9604:	4683      	mov	fp, r0
    9606:	f7fe ff9c 	bl	8542 <__mcmp>
    960a:	2800      	cmp	r0, #0
    960c:	f8dd c008 	ldr.w	ip, [sp, #8]
    9610:	dc03      	bgt.n	961a <_dtoa_r+0xafa>
    9612:	d114      	bne.n	963e <_dtoa_r+0xb1e>
    9614:	f01c 0f01 	tst.w	ip, #1
    9618:	d011      	beq.n	963e <_dtoa_r+0xb1e>
    961a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
    961e:	2b39      	cmp	r3, #57	; 0x39
    9620:	46b0      	mov	r8, r6
    9622:	f106 36ff 	add.w	r6, r6, #4294967295
    9626:	d107      	bne.n	9638 <_dtoa_r+0xb18>
    9628:	980a      	ldr	r0, [sp, #40]	; 0x28
    962a:	42b0      	cmp	r0, r6
    962c:	d1f5      	bne.n	961a <_dtoa_r+0xafa>
    962e:	2331      	movs	r3, #49	; 0x31
    9630:	f109 0901 	add.w	r9, r9, #1
    9634:	7003      	strb	r3, [r0, #0]
    9636:	e008      	b.n	964a <_dtoa_r+0xb2a>
    9638:	3301      	adds	r3, #1
    963a:	7033      	strb	r3, [r6, #0]
    963c:	e005      	b.n	964a <_dtoa_r+0xb2a>
    963e:	46b0      	mov	r8, r6
    9640:	3e01      	subs	r6, #1
    9642:	f818 3c01 	ldrb.w	r3, [r8, #-1]
    9646:	2b30      	cmp	r3, #48	; 0x30
    9648:	d0f9      	beq.n	963e <_dtoa_r+0xb1e>
    964a:	4650      	mov	r0, sl
    964c:	4629      	mov	r1, r5
    964e:	f7fe fd56 	bl	80fe <_Bfree>
    9652:	b16f      	cbz	r7, 9670 <_dtoa_r+0xb50>
    9654:	b12c      	cbz	r4, 9662 <_dtoa_r+0xb42>
    9656:	42bc      	cmp	r4, r7
    9658:	d003      	beq.n	9662 <_dtoa_r+0xb42>
    965a:	4650      	mov	r0, sl
    965c:	4621      	mov	r1, r4
    965e:	f7fe fd4e 	bl	80fe <_Bfree>
    9662:	4650      	mov	r0, sl
    9664:	4639      	mov	r1, r7
    9666:	f7fe fd4a 	bl	80fe <_Bfree>
    966a:	e001      	b.n	9670 <_dtoa_r+0xb50>
    966c:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    9670:	4650      	mov	r0, sl
    9672:	4659      	mov	r1, fp
    9674:	f7fe fd43 	bl	80fe <_Bfree>
    9678:	2300      	movs	r3, #0
    967a:	9f26      	ldr	r7, [sp, #152]	; 0x98
    967c:	f888 3000 	strb.w	r3, [r8]
    9680:	f109 0301 	add.w	r3, r9, #1
    9684:	603b      	str	r3, [r7, #0]
    9686:	9f28      	ldr	r7, [sp, #160]	; 0xa0
    9688:	b127      	cbz	r7, 9694 <_dtoa_r+0xb74>
    968a:	f8c7 8000 	str.w	r8, [r7]
    968e:	e001      	b.n	9694 <_dtoa_r+0xb74>
    9690:	4802      	ldr	r0, [pc, #8]	; (969c <_dtoa_r+0xb7c>)
    9692:	e000      	b.n	9696 <_dtoa_r+0xb76>
    9694:	980a      	ldr	r0, [sp, #40]	; 0x28
    9696:	b01b      	add	sp, #108	; 0x6c
    9698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    969c:	00009e60 	.word	0x00009e60

000096a0 <__sflush_r>:
__sflush_r():
    96a0:	898a      	ldrh	r2, [r1, #12]
    96a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    96a6:	4605      	mov	r5, r0
    96a8:	0710      	lsls	r0, r2, #28
    96aa:	460c      	mov	r4, r1
    96ac:	d457      	bmi.n	975e <__sflush_r+0xbe>
    96ae:	684b      	ldr	r3, [r1, #4]
    96b0:	2b00      	cmp	r3, #0
    96b2:	dc02      	bgt.n	96ba <__sflush_r+0x1a>
    96b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    96b6:	2b00      	cmp	r3, #0
    96b8:	dd18      	ble.n	96ec <__sflush_r+0x4c>
    96ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    96bc:	b1b6      	cbz	r6, 96ec <__sflush_r+0x4c>
    96be:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    96c2:	2300      	movs	r3, #0
    96c4:	b292      	uxth	r2, r2
    96c6:	682f      	ldr	r7, [r5, #0]
    96c8:	602b      	str	r3, [r5, #0]
    96ca:	b10a      	cbz	r2, 96d0 <__sflush_r+0x30>
    96cc:	6d62      	ldr	r2, [r4, #84]	; 0x54
    96ce:	e010      	b.n	96f2 <__sflush_r+0x52>
    96d0:	6a21      	ldr	r1, [r4, #32]
    96d2:	4628      	mov	r0, r5
    96d4:	2301      	movs	r3, #1
    96d6:	47b0      	blx	r6
    96d8:	1c41      	adds	r1, r0, #1
    96da:	4602      	mov	r2, r0
    96dc:	d109      	bne.n	96f2 <__sflush_r+0x52>
    96de:	682b      	ldr	r3, [r5, #0]
    96e0:	b13b      	cbz	r3, 96f2 <__sflush_r+0x52>
    96e2:	2b1d      	cmp	r3, #29
    96e4:	d001      	beq.n	96ea <__sflush_r+0x4a>
    96e6:	2b16      	cmp	r3, #22
    96e8:	d146      	bne.n	9778 <__sflush_r+0xd8>
    96ea:	602f      	str	r7, [r5, #0]
    96ec:	2000      	movs	r0, #0
    96ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    96f2:	89a3      	ldrh	r3, [r4, #12]
    96f4:	075b      	lsls	r3, r3, #29
    96f6:	d505      	bpl.n	9704 <__sflush_r+0x64>
    96f8:	6863      	ldr	r3, [r4, #4]
    96fa:	1ad2      	subs	r2, r2, r3
    96fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    96fe:	b10b      	cbz	r3, 9704 <__sflush_r+0x64>
    9700:	6c23      	ldr	r3, [r4, #64]	; 0x40
    9702:	1ad2      	subs	r2, r2, r3
    9704:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    9706:	6a21      	ldr	r1, [r4, #32]
    9708:	4628      	mov	r0, r5
    970a:	2300      	movs	r3, #0
    970c:	47b0      	blx	r6
    970e:	1c46      	adds	r6, r0, #1
    9710:	89a2      	ldrh	r2, [r4, #12]
    9712:	d105      	bne.n	9720 <__sflush_r+0x80>
    9714:	682b      	ldr	r3, [r5, #0]
    9716:	b11b      	cbz	r3, 9720 <__sflush_r+0x80>
    9718:	2b1d      	cmp	r3, #29
    971a:	d001      	beq.n	9720 <__sflush_r+0x80>
    971c:	2b16      	cmp	r3, #22
    971e:	d119      	bne.n	9754 <__sflush_r+0xb4>
    9720:	2300      	movs	r3, #0
    9722:	6063      	str	r3, [r4, #4]
    9724:	04d1      	lsls	r1, r2, #19
    9726:	6923      	ldr	r3, [r4, #16]
    9728:	6023      	str	r3, [r4, #0]
    972a:	d504      	bpl.n	9736 <__sflush_r+0x96>
    972c:	1c42      	adds	r2, r0, #1
    972e:	d101      	bne.n	9734 <__sflush_r+0x94>
    9730:	682b      	ldr	r3, [r5, #0]
    9732:	b903      	cbnz	r3, 9736 <__sflush_r+0x96>
    9734:	6560      	str	r0, [r4, #84]	; 0x54
    9736:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9738:	602f      	str	r7, [r5, #0]
    973a:	2900      	cmp	r1, #0
    973c:	d0d6      	beq.n	96ec <__sflush_r+0x4c>
    973e:	f104 0344 	add.w	r3, r4, #68	; 0x44
    9742:	4299      	cmp	r1, r3
    9744:	d002      	beq.n	974c <__sflush_r+0xac>
    9746:	4628      	mov	r0, r5
    9748:	f7fc ffd2 	bl	66f0 <_free_r>
    974c:	2000      	movs	r0, #0
    974e:	6360      	str	r0, [r4, #52]	; 0x34
    9750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9754:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    9758:	81a2      	strh	r2, [r4, #12]
    975a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    975e:	690e      	ldr	r6, [r1, #16]
    9760:	2e00      	cmp	r6, #0
    9762:	d0c3      	beq.n	96ec <__sflush_r+0x4c>
    9764:	680b      	ldr	r3, [r1, #0]
    9766:	600e      	str	r6, [r1, #0]
    9768:	ebc6 0803 	rsb	r8, r6, r3
    976c:	0793      	lsls	r3, r2, #30
    976e:	bf0c      	ite	eq
    9770:	694b      	ldreq	r3, [r1, #20]
    9772:	2300      	movne	r3, #0
    9774:	608b      	str	r3, [r1, #8]
    9776:	e012      	b.n	979e <__sflush_r+0xfe>
    9778:	89a3      	ldrh	r3, [r4, #12]
    977a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    977e:	81a3      	strh	r3, [r4, #12]
    9780:	f04f 30ff 	mov.w	r0, #4294967295
    9784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9788:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    978a:	6a21      	ldr	r1, [r4, #32]
    978c:	4628      	mov	r0, r5
    978e:	4632      	mov	r2, r6
    9790:	4643      	mov	r3, r8
    9792:	47b8      	blx	r7
    9794:	2800      	cmp	r0, #0
    9796:	ddef      	ble.n	9778 <__sflush_r+0xd8>
    9798:	4406      	add	r6, r0
    979a:	ebc0 0808 	rsb	r8, r0, r8
    979e:	f1b8 0f00 	cmp.w	r8, #0
    97a2:	dcf1      	bgt.n	9788 <__sflush_r+0xe8>
    97a4:	e7a2      	b.n	96ec <__sflush_r+0x4c>
    97a6:	ffff b538 	vsli.32	d27, d24, #31

000097a8 <_fflush_r>:
_fflush_r():
    97a8:	b538      	push	{r3, r4, r5, lr}
    97aa:	690b      	ldr	r3, [r1, #16]
    97ac:	4605      	mov	r5, r0
    97ae:	460c      	mov	r4, r1
    97b0:	b1db      	cbz	r3, 97ea <_fflush_r+0x42>
    97b2:	b118      	cbz	r0, 97bc <_fflush_r+0x14>
    97b4:	6983      	ldr	r3, [r0, #24]
    97b6:	b90b      	cbnz	r3, 97bc <_fflush_r+0x14>
    97b8:	f7fe f8e2 	bl	7980 <__sinit>
    97bc:	4b0c      	ldr	r3, [pc, #48]	; (97f0 <_fflush_r+0x48>)
    97be:	429c      	cmp	r4, r3
    97c0:	d101      	bne.n	97c6 <_fflush_r+0x1e>
    97c2:	686c      	ldr	r4, [r5, #4]
    97c4:	e008      	b.n	97d8 <_fflush_r+0x30>
    97c6:	4b0b      	ldr	r3, [pc, #44]	; (97f4 <_fflush_r+0x4c>)
    97c8:	429c      	cmp	r4, r3
    97ca:	d101      	bne.n	97d0 <_fflush_r+0x28>
    97cc:	68ac      	ldr	r4, [r5, #8]
    97ce:	e003      	b.n	97d8 <_fflush_r+0x30>
    97d0:	4b09      	ldr	r3, [pc, #36]	; (97f8 <_fflush_r+0x50>)
    97d2:	429c      	cmp	r4, r3
    97d4:	bf08      	it	eq
    97d6:	68ec      	ldreq	r4, [r5, #12]
    97d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    97dc:	b12b      	cbz	r3, 97ea <_fflush_r+0x42>
    97de:	4628      	mov	r0, r5
    97e0:	4621      	mov	r1, r4
    97e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    97e6:	f7ff bf5b 	b.w	96a0 <__sflush_r>
    97ea:	2000      	movs	r0, #0
    97ec:	bd38      	pop	{r3, r4, r5, pc}
    97ee:	bf00      	nop
    97f0:	0000a4c4 	.word	0x0000a4c4
    97f4:	0000a4e4 	.word	0x0000a4e4
    97f8:	0000a504 	.word	0x0000a504

000097fc <_lseek_r>:
_lseek_r():
    97fc:	b538      	push	{r3, r4, r5, lr}
    97fe:	4c07      	ldr	r4, [pc, #28]	; (981c <_lseek_r+0x20>)
    9800:	4605      	mov	r5, r0
    9802:	2000      	movs	r0, #0
    9804:	6020      	str	r0, [r4, #0]
    9806:	4608      	mov	r0, r1
    9808:	4611      	mov	r1, r2
    980a:	461a      	mov	r2, r3
    980c:	f7f7 f836 	bl	87c <_lseek>
    9810:	1c43      	adds	r3, r0, #1
    9812:	d102      	bne.n	981a <_lseek_r+0x1e>
    9814:	6823      	ldr	r3, [r4, #0]
    9816:	b103      	cbz	r3, 981a <_lseek_r+0x1e>
    9818:	602b      	str	r3, [r5, #0]
    981a:	bd38      	pop	{r3, r4, r5, pc}
    981c:	1fff10f0 	.word	0x1fff10f0

00009820 <_malloc_usable_size_r>:
_malloc_usable_size_r():
    9820:	f851 0c04 	ldr.w	r0, [r1, #-4]
    9824:	2800      	cmp	r0, #0
    9826:	da02      	bge.n	982e <_malloc_usable_size_r+0xe>
    9828:	3904      	subs	r1, #4
    982a:	580b      	ldr	r3, [r1, r0]
    982c:	4418      	add	r0, r3
    982e:	3804      	subs	r0, #4
    9830:	4770      	bx	lr
    9832:	ffff b538 	vsli.32	d27, d24, #31

00009834 <_read_r>:
_read_r():
    9834:	b538      	push	{r3, r4, r5, lr}
    9836:	4c07      	ldr	r4, [pc, #28]	; (9854 <_read_r+0x20>)
    9838:	4605      	mov	r5, r0
    983a:	2000      	movs	r0, #0
    983c:	6020      	str	r0, [r4, #0]
    983e:	4608      	mov	r0, r1
    9840:	4611      	mov	r1, r2
    9842:	461a      	mov	r2, r3
    9844:	f7f7 f80e 	bl	864 <_read>
    9848:	1c43      	adds	r3, r0, #1
    984a:	d102      	bne.n	9852 <_read_r+0x1e>
    984c:	6823      	ldr	r3, [r4, #0]
    984e:	b103      	cbz	r3, 9852 <_read_r+0x1e>
    9850:	602b      	str	r3, [r5, #0]
    9852:	bd38      	pop	{r3, r4, r5, pc}
    9854:	1fff10f0 	.word	0x1fff10f0

00009858 <__ssputs_r>:
__ssputs_r():
    9858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    985c:	688d      	ldr	r5, [r1, #8]
    985e:	42ab      	cmp	r3, r5
    9860:	4681      	mov	r9, r0
    9862:	460c      	mov	r4, r1
    9864:	4692      	mov	sl, r2
    9866:	461f      	mov	r7, r3
    9868:	d343      	bcc.n	98f2 <__ssputs_r+0x9a>
    986a:	898b      	ldrh	r3, [r1, #12]
    986c:	f413 6f90 	tst.w	r3, #1152	; 0x480
    9870:	d03d      	beq.n	98ee <__ssputs_r+0x96>
    9872:	6826      	ldr	r6, [r4, #0]
    9874:	6909      	ldr	r1, [r1, #16]
    9876:	ebc1 0806 	rsb	r8, r1, r6
    987a:	6966      	ldr	r6, [r4, #20]
    987c:	2202      	movs	r2, #2
    987e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    9882:	fb96 f6f2 	sdiv	r6, r6, r2
    9886:	f108 0201 	add.w	r2, r8, #1
    988a:	443a      	add	r2, r7
    988c:	4296      	cmp	r6, r2
    988e:	bf38      	it	cc
    9890:	4616      	movcc	r6, r2
    9892:	055b      	lsls	r3, r3, #21
    9894:	d50f      	bpl.n	98b6 <__ssputs_r+0x5e>
    9896:	4631      	mov	r1, r6
    9898:	f7fc ff6e 	bl	6778 <_malloc_r>
    989c:	4605      	mov	r5, r0
    989e:	b198      	cbz	r0, 98c8 <__ssputs_r+0x70>
    98a0:	6921      	ldr	r1, [r4, #16]
    98a2:	4642      	mov	r2, r8
    98a4:	f7fc fef8 	bl	6698 <memcpy>
    98a8:	89a3      	ldrh	r3, [r4, #12]
    98aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    98ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    98b2:	81a3      	strh	r3, [r4, #12]
    98b4:	e013      	b.n	98de <__ssputs_r+0x86>
    98b6:	4632      	mov	r2, r6
    98b8:	f7fe fff5 	bl	88a6 <_realloc_r>
    98bc:	4605      	mov	r5, r0
    98be:	b970      	cbnz	r0, 98de <__ssputs_r+0x86>
    98c0:	4648      	mov	r0, r9
    98c2:	6921      	ldr	r1, [r4, #16]
    98c4:	f7fc ff14 	bl	66f0 <_free_r>
    98c8:	230c      	movs	r3, #12
    98ca:	f8c9 3000 	str.w	r3, [r9]
    98ce:	89a3      	ldrh	r3, [r4, #12]
    98d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    98d4:	81a3      	strh	r3, [r4, #12]
    98d6:	f04f 30ff 	mov.w	r0, #4294967295
    98da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    98de:	6125      	str	r5, [r4, #16]
    98e0:	6166      	str	r6, [r4, #20]
    98e2:	4445      	add	r5, r8
    98e4:	ebc8 0606 	rsb	r6, r8, r6
    98e8:	6025      	str	r5, [r4, #0]
    98ea:	60a6      	str	r6, [r4, #8]
    98ec:	463d      	mov	r5, r7
    98ee:	42af      	cmp	r7, r5
    98f0:	d200      	bcs.n	98f4 <__ssputs_r+0x9c>
    98f2:	463d      	mov	r5, r7
    98f4:	462a      	mov	r2, r5
    98f6:	6820      	ldr	r0, [r4, #0]
    98f8:	4651      	mov	r1, sl
    98fa:	f7fc fed6 	bl	66aa <memmove>
    98fe:	68a3      	ldr	r3, [r4, #8]
    9900:	1b5b      	subs	r3, r3, r5
    9902:	60a3      	str	r3, [r4, #8]
    9904:	6823      	ldr	r3, [r4, #0]
    9906:	441d      	add	r5, r3
    9908:	6025      	str	r5, [r4, #0]
    990a:	2000      	movs	r0, #0
    990c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00009910 <_svfiprintf_r>:
_svfprintf_r():
    9910:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9914:	b09d      	sub	sp, #116	; 0x74
    9916:	4607      	mov	r7, r0
    9918:	9303      	str	r3, [sp, #12]
    991a:	898b      	ldrh	r3, [r1, #12]
    991c:	061c      	lsls	r4, r3, #24
    991e:	460d      	mov	r5, r1
    9920:	4616      	mov	r6, r2
    9922:	d50c      	bpl.n	993e <_svfiprintf_r+0x2e>
    9924:	690b      	ldr	r3, [r1, #16]
    9926:	b953      	cbnz	r3, 993e <_svfiprintf_r+0x2e>
    9928:	2140      	movs	r1, #64	; 0x40
    992a:	f7fc ff25 	bl	6778 <_malloc_r>
    992e:	6028      	str	r0, [r5, #0]
    9930:	6128      	str	r0, [r5, #16]
    9932:	b910      	cbnz	r0, 993a <_svfiprintf_r+0x2a>
    9934:	230c      	movs	r3, #12
    9936:	603b      	str	r3, [r7, #0]
    9938:	e0c8      	b.n	9acc <_svfiprintf_r+0x1bc>
    993a:	2340      	movs	r3, #64	; 0x40
    993c:	616b      	str	r3, [r5, #20]
    993e:	2300      	movs	r3, #0
    9940:	9309      	str	r3, [sp, #36]	; 0x24
    9942:	2320      	movs	r3, #32
    9944:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    9948:	2330      	movs	r3, #48	; 0x30
    994a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    994e:	4633      	mov	r3, r6
    9950:	461c      	mov	r4, r3
    9952:	f813 2b01 	ldrb.w	r2, [r3], #1
    9956:	b91a      	cbnz	r2, 9960 <_svfiprintf_r+0x50>
    9958:	ebb4 0906 	subs.w	r9, r4, r6
    995c:	d00f      	beq.n	997e <_svfiprintf_r+0x6e>
    995e:	e002      	b.n	9966 <_svfiprintf_r+0x56>
    9960:	2a25      	cmp	r2, #37	; 0x25
    9962:	d1f5      	bne.n	9950 <_svfiprintf_r+0x40>
    9964:	e7f8      	b.n	9958 <_svfiprintf_r+0x48>
    9966:	4638      	mov	r0, r7
    9968:	4629      	mov	r1, r5
    996a:	4632      	mov	r2, r6
    996c:	464b      	mov	r3, r9
    996e:	f7ff ff73 	bl	9858 <__ssputs_r>
    9972:	3001      	adds	r0, #1
    9974:	f000 80a5 	beq.w	9ac2 <_svfiprintf_r+0x1b2>
    9978:	9b09      	ldr	r3, [sp, #36]	; 0x24
    997a:	444b      	add	r3, r9
    997c:	9309      	str	r3, [sp, #36]	; 0x24
    997e:	7823      	ldrb	r3, [r4, #0]
    9980:	2b00      	cmp	r3, #0
    9982:	f000 809e 	beq.w	9ac2 <_svfiprintf_r+0x1b2>
    9986:	2300      	movs	r3, #0
    9988:	f04f 32ff 	mov.w	r2, #4294967295
    998c:	9304      	str	r3, [sp, #16]
    998e:	9307      	str	r3, [sp, #28]
    9990:	9205      	str	r2, [sp, #20]
    9992:	9306      	str	r3, [sp, #24]
    9994:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    9998:	931a      	str	r3, [sp, #104]	; 0x68
    999a:	f104 0901 	add.w	r9, r4, #1
    999e:	464c      	mov	r4, r9
    99a0:	4e4d      	ldr	r6, [pc, #308]	; (9ad8 <_svfiprintf_r+0x1c8>)
    99a2:	7821      	ldrb	r1, [r4, #0]
    99a4:	4630      	mov	r0, r6
    99a6:	2205      	movs	r2, #5
    99a8:	f000 fa26 	bl	9df8 <memchr>
    99ac:	f109 0901 	add.w	r9, r9, #1
    99b0:	9b04      	ldr	r3, [sp, #16]
    99b2:	b128      	cbz	r0, 99c0 <_svfiprintf_r+0xb0>
    99b4:	1b86      	subs	r6, r0, r6
    99b6:	2001      	movs	r0, #1
    99b8:	40b0      	lsls	r0, r6
    99ba:	4303      	orrs	r3, r0
    99bc:	9304      	str	r3, [sp, #16]
    99be:	e7ee      	b.n	999e <_svfiprintf_r+0x8e>
    99c0:	06d9      	lsls	r1, r3, #27
    99c2:	bf44      	itt	mi
    99c4:	2220      	movmi	r2, #32
    99c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    99ca:	071a      	lsls	r2, r3, #28
    99cc:	bf44      	itt	mi
    99ce:	222b      	movmi	r2, #43	; 0x2b
    99d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    99d4:	7822      	ldrb	r2, [r4, #0]
    99d6:	2a2a      	cmp	r2, #42	; 0x2a
    99d8:	d002      	beq.n	99e0 <_svfiprintf_r+0xd0>
    99da:	9b07      	ldr	r3, [sp, #28]
    99dc:	4621      	mov	r1, r4
    99de:	e00e      	b.n	99fe <_svfiprintf_r+0xee>
    99e0:	9a03      	ldr	r2, [sp, #12]
    99e2:	1d11      	adds	r1, r2, #4
    99e4:	6812      	ldr	r2, [r2, #0]
    99e6:	9103      	str	r1, [sp, #12]
    99e8:	2a00      	cmp	r2, #0
    99ea:	db01      	blt.n	99f0 <_svfiprintf_r+0xe0>
    99ec:	9207      	str	r2, [sp, #28]
    99ee:	e004      	b.n	99fa <_svfiprintf_r+0xea>
    99f0:	4252      	negs	r2, r2
    99f2:	f043 0302 	orr.w	r3, r3, #2
    99f6:	9207      	str	r2, [sp, #28]
    99f8:	9304      	str	r3, [sp, #16]
    99fa:	3401      	adds	r4, #1
    99fc:	e00a      	b.n	9a14 <_svfiprintf_r+0x104>
    99fe:	460c      	mov	r4, r1
    9a00:	3101      	adds	r1, #1
    9a02:	7822      	ldrb	r2, [r4, #0]
    9a04:	3a30      	subs	r2, #48	; 0x30
    9a06:	2a09      	cmp	r2, #9
    9a08:	d803      	bhi.n	9a12 <_svfiprintf_r+0x102>
    9a0a:	200a      	movs	r0, #10
    9a0c:	fb00 2303 	mla	r3, r0, r3, r2
    9a10:	e7f5      	b.n	99fe <_svfiprintf_r+0xee>
    9a12:	9307      	str	r3, [sp, #28]
    9a14:	7823      	ldrb	r3, [r4, #0]
    9a16:	2b2e      	cmp	r3, #46	; 0x2e
    9a18:	d11a      	bne.n	9a50 <_svfiprintf_r+0x140>
    9a1a:	7863      	ldrb	r3, [r4, #1]
    9a1c:	2b2a      	cmp	r3, #42	; 0x2a
    9a1e:	d10a      	bne.n	9a36 <_svfiprintf_r+0x126>
    9a20:	9b03      	ldr	r3, [sp, #12]
    9a22:	1d1a      	adds	r2, r3, #4
    9a24:	681b      	ldr	r3, [r3, #0]
    9a26:	9203      	str	r2, [sp, #12]
    9a28:	2b00      	cmp	r3, #0
    9a2a:	f104 0402 	add.w	r4, r4, #2
    9a2e:	bfb8      	it	lt
    9a30:	f04f 33ff 	movlt.w	r3, #4294967295
    9a34:	e00b      	b.n	9a4e <_svfiprintf_r+0x13e>
    9a36:	1c61      	adds	r1, r4, #1
    9a38:	2300      	movs	r3, #0
    9a3a:	460c      	mov	r4, r1
    9a3c:	3101      	adds	r1, #1
    9a3e:	7822      	ldrb	r2, [r4, #0]
    9a40:	3a30      	subs	r2, #48	; 0x30
    9a42:	2a09      	cmp	r2, #9
    9a44:	d803      	bhi.n	9a4e <_svfiprintf_r+0x13e>
    9a46:	200a      	movs	r0, #10
    9a48:	fb00 2303 	mla	r3, r0, r3, r2
    9a4c:	e7f5      	b.n	9a3a <_svfiprintf_r+0x12a>
    9a4e:	9305      	str	r3, [sp, #20]
    9a50:	4e22      	ldr	r6, [pc, #136]	; (9adc <_svfiprintf_r+0x1cc>)
    9a52:	7821      	ldrb	r1, [r4, #0]
    9a54:	4630      	mov	r0, r6
    9a56:	2203      	movs	r2, #3
    9a58:	f000 f9ce 	bl	9df8 <memchr>
    9a5c:	b130      	cbz	r0, 9a6c <_svfiprintf_r+0x15c>
    9a5e:	1b86      	subs	r6, r0, r6
    9a60:	9b04      	ldr	r3, [sp, #16]
    9a62:	2040      	movs	r0, #64	; 0x40
    9a64:	40b0      	lsls	r0, r6
    9a66:	4303      	orrs	r3, r0
    9a68:	9304      	str	r3, [sp, #16]
    9a6a:	3401      	adds	r4, #1
    9a6c:	7821      	ldrb	r1, [r4, #0]
    9a6e:	481c      	ldr	r0, [pc, #112]	; (9ae0 <_svfiprintf_r+0x1d0>)
    9a70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    9a74:	2206      	movs	r2, #6
    9a76:	1c66      	adds	r6, r4, #1
    9a78:	f000 f9be 	bl	9df8 <memchr>
    9a7c:	b188      	cbz	r0, 9aa2 <_svfiprintf_r+0x192>
    9a7e:	4b19      	ldr	r3, [pc, #100]	; (9ae4 <_svfiprintf_r+0x1d4>)
    9a80:	b933      	cbnz	r3, 9a90 <_svfiprintf_r+0x180>
    9a82:	9b03      	ldr	r3, [sp, #12]
    9a84:	3307      	adds	r3, #7
    9a86:	f023 0307 	bic.w	r3, r3, #7
    9a8a:	3308      	adds	r3, #8
    9a8c:	9303      	str	r3, [sp, #12]
    9a8e:	e014      	b.n	9aba <_svfiprintf_r+0x1aa>
    9a90:	ab03      	add	r3, sp, #12
    9a92:	9300      	str	r3, [sp, #0]
    9a94:	4638      	mov	r0, r7
    9a96:	a904      	add	r1, sp, #16
    9a98:	462a      	mov	r2, r5
    9a9a:	4b13      	ldr	r3, [pc, #76]	; (9ae8 <_svfiprintf_r+0x1d8>)
    9a9c:	f3af 8000 	nop.w
    9aa0:	e007      	b.n	9ab2 <_svfiprintf_r+0x1a2>
    9aa2:	ab03      	add	r3, sp, #12
    9aa4:	9300      	str	r3, [sp, #0]
    9aa6:	4638      	mov	r0, r7
    9aa8:	a904      	add	r1, sp, #16
    9aaa:	462a      	mov	r2, r5
    9aac:	4b0e      	ldr	r3, [pc, #56]	; (9ae8 <_svfiprintf_r+0x1d8>)
    9aae:	f000 f88f 	bl	9bd0 <_printf_i>
    9ab2:	f1b0 3fff 	cmp.w	r0, #4294967295
    9ab6:	4680      	mov	r8, r0
    9ab8:	d003      	beq.n	9ac2 <_svfiprintf_r+0x1b2>
    9aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9abc:	4443      	add	r3, r8
    9abe:	9309      	str	r3, [sp, #36]	; 0x24
    9ac0:	e745      	b.n	994e <_svfiprintf_r+0x3e>
    9ac2:	89ab      	ldrh	r3, [r5, #12]
    9ac4:	065b      	lsls	r3, r3, #25
    9ac6:	d401      	bmi.n	9acc <_svfiprintf_r+0x1bc>
    9ac8:	9809      	ldr	r0, [sp, #36]	; 0x24
    9aca:	e001      	b.n	9ad0 <_svfiprintf_r+0x1c0>
    9acc:	f04f 30ff 	mov.w	r0, #4294967295
    9ad0:	b01d      	add	sp, #116	; 0x74
    9ad2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    9ad6:	bf00      	nop
    9ad8:	0000a639 	.word	0x0000a639
    9adc:	0000a63f 	.word	0x0000a63f
    9ae0:	0000a643 	.word	0x0000a643
    9ae4:	00000000 	.word	0x00000000
    9ae8:	00009859 	.word	0x00009859

00009aec <_printf_common>:
_printf_common():
    9aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9af0:	4615      	mov	r5, r2
    9af2:	461f      	mov	r7, r3
    9af4:	688a      	ldr	r2, [r1, #8]
    9af6:	690b      	ldr	r3, [r1, #16]
    9af8:	f8dd 8020 	ldr.w	r8, [sp, #32]
    9afc:	429a      	cmp	r2, r3
    9afe:	bfa8      	it	ge
    9b00:	4613      	movge	r3, r2
    9b02:	602b      	str	r3, [r5, #0]
    9b04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    9b08:	4606      	mov	r6, r0
    9b0a:	460c      	mov	r4, r1
    9b0c:	b10a      	cbz	r2, 9b12 <_printf_common+0x26>
    9b0e:	3301      	adds	r3, #1
    9b10:	602b      	str	r3, [r5, #0]
    9b12:	6823      	ldr	r3, [r4, #0]
    9b14:	0699      	lsls	r1, r3, #26
    9b16:	d502      	bpl.n	9b1e <_printf_common+0x32>
    9b18:	682b      	ldr	r3, [r5, #0]
    9b1a:	3302      	adds	r3, #2
    9b1c:	602b      	str	r3, [r5, #0]
    9b1e:	6823      	ldr	r3, [r4, #0]
    9b20:	f013 0906 	ands.w	r9, r3, #6
    9b24:	d01d      	beq.n	9b62 <_printf_common+0x76>
    9b26:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    9b2a:	6822      	ldr	r2, [r4, #0]
    9b2c:	3300      	adds	r3, #0
    9b2e:	bf18      	it	ne
    9b30:	2301      	movne	r3, #1
    9b32:	0692      	lsls	r2, r2, #26
    9b34:	d51f      	bpl.n	9b76 <_printf_common+0x8a>
    9b36:	18e1      	adds	r1, r4, r3
    9b38:	1c5a      	adds	r2, r3, #1
    9b3a:	2030      	movs	r0, #48	; 0x30
    9b3c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    9b40:	4422      	add	r2, r4
    9b42:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    9b46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    9b4a:	3302      	adds	r3, #2
    9b4c:	e013      	b.n	9b76 <_printf_common+0x8a>
    9b4e:	4630      	mov	r0, r6
    9b50:	4639      	mov	r1, r7
    9b52:	f104 0219 	add.w	r2, r4, #25
    9b56:	2301      	movs	r3, #1
    9b58:	47c0      	blx	r8
    9b5a:	3001      	adds	r0, #1
    9b5c:	d007      	beq.n	9b6e <_printf_common+0x82>
    9b5e:	f109 0901 	add.w	r9, r9, #1
    9b62:	68e2      	ldr	r2, [r4, #12]
    9b64:	682b      	ldr	r3, [r5, #0]
    9b66:	1ad3      	subs	r3, r2, r3
    9b68:	4599      	cmp	r9, r3
    9b6a:	dbf0      	blt.n	9b4e <_printf_common+0x62>
    9b6c:	e7db      	b.n	9b26 <_printf_common+0x3a>
    9b6e:	f04f 30ff 	mov.w	r0, #4294967295
    9b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9b76:	4630      	mov	r0, r6
    9b78:	4639      	mov	r1, r7
    9b7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
    9b7e:	47c0      	blx	r8
    9b80:	3001      	adds	r0, #1
    9b82:	d0f4      	beq.n	9b6e <_printf_common+0x82>
    9b84:	6823      	ldr	r3, [r4, #0]
    9b86:	682a      	ldr	r2, [r5, #0]
    9b88:	68e1      	ldr	r1, [r4, #12]
    9b8a:	f003 0306 	and.w	r3, r3, #6
    9b8e:	2b04      	cmp	r3, #4
    9b90:	bf08      	it	eq
    9b92:	ebc2 0501 	rsbeq	r5, r2, r1
    9b96:	6923      	ldr	r3, [r4, #16]
    9b98:	68a2      	ldr	r2, [r4, #8]
    9b9a:	bf0c      	ite	eq
    9b9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    9ba0:	2500      	movne	r5, #0
    9ba2:	429a      	cmp	r2, r3
    9ba4:	bfc4      	itt	gt
    9ba6:	ebc3 0302 	rsbgt	r3, r3, r2
    9baa:	18ed      	addgt	r5, r5, r3
    9bac:	f04f 0900 	mov.w	r9, #0
    9bb0:	45a9      	cmp	r9, r5
    9bb2:	da0a      	bge.n	9bca <_printf_common+0xde>
    9bb4:	4630      	mov	r0, r6
    9bb6:	4639      	mov	r1, r7
    9bb8:	f104 021a 	add.w	r2, r4, #26
    9bbc:	2301      	movs	r3, #1
    9bbe:	47c0      	blx	r8
    9bc0:	3001      	adds	r0, #1
    9bc2:	d0d4      	beq.n	9b6e <_printf_common+0x82>
    9bc4:	f109 0901 	add.w	r9, r9, #1
    9bc8:	e7f2      	b.n	9bb0 <_printf_common+0xc4>
    9bca:	2000      	movs	r0, #0
    9bcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00009bd0 <_printf_i>:
_printf_i():
    9bd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    9bd4:	7e0e      	ldrb	r6, [r1, #24]
    9bd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    9bd8:	2e6e      	cmp	r6, #110	; 0x6e
    9bda:	4680      	mov	r8, r0
    9bdc:	460c      	mov	r4, r1
    9bde:	4691      	mov	r9, r2
    9be0:	469a      	mov	sl, r3
    9be2:	f101 0043 	add.w	r0, r1, #67	; 0x43
    9be6:	f000 80a5 	beq.w	9d34 <_printf_i+0x164>
    9bea:	d811      	bhi.n	9c10 <_printf_i+0x40>
    9bec:	2e63      	cmp	r6, #99	; 0x63
    9bee:	d022      	beq.n	9c36 <_printf_i+0x66>
    9bf0:	d809      	bhi.n	9c06 <_printf_i+0x36>
    9bf2:	2e00      	cmp	r6, #0
    9bf4:	f000 80af 	beq.w	9d56 <_printf_i+0x186>
    9bf8:	2e58      	cmp	r6, #88	; 0x58
    9bfa:	f040 80bf 	bne.w	9d7c <_printf_i+0x1ac>
    9bfe:	f881 6045 	strb.w	r6, [r1, #69]	; 0x45
    9c02:	4a7b      	ldr	r2, [pc, #492]	; (9df0 <_printf_i+0x220>)
    9c04:	e04f      	b.n	9ca6 <_printf_i+0xd6>
    9c06:	2e64      	cmp	r6, #100	; 0x64
    9c08:	d01e      	beq.n	9c48 <_printf_i+0x78>
    9c0a:	2e69      	cmp	r6, #105	; 0x69
    9c0c:	d01c      	beq.n	9c48 <_printf_i+0x78>
    9c0e:	e0b5      	b.n	9d7c <_printf_i+0x1ac>
    9c10:	2e73      	cmp	r6, #115	; 0x73
    9c12:	f000 80a4 	beq.w	9d5e <_printf_i+0x18e>
    9c16:	d809      	bhi.n	9c2c <_printf_i+0x5c>
    9c18:	2e6f      	cmp	r6, #111	; 0x6f
    9c1a:	d02b      	beq.n	9c74 <_printf_i+0xa4>
    9c1c:	2e70      	cmp	r6, #112	; 0x70
    9c1e:	f040 80ad 	bne.w	9d7c <_printf_i+0x1ac>
    9c22:	680b      	ldr	r3, [r1, #0]
    9c24:	f043 0320 	orr.w	r3, r3, #32
    9c28:	600b      	str	r3, [r1, #0]
    9c2a:	e038      	b.n	9c9e <_printf_i+0xce>
    9c2c:	2e75      	cmp	r6, #117	; 0x75
    9c2e:	d021      	beq.n	9c74 <_printf_i+0xa4>
    9c30:	2e78      	cmp	r6, #120	; 0x78
    9c32:	d034      	beq.n	9c9e <_printf_i+0xce>
    9c34:	e0a2      	b.n	9d7c <_printf_i+0x1ac>
    9c36:	682b      	ldr	r3, [r5, #0]
    9c38:	1d1a      	adds	r2, r3, #4
    9c3a:	681b      	ldr	r3, [r3, #0]
    9c3c:	602a      	str	r2, [r5, #0]
    9c3e:	f101 0742 	add.w	r7, r1, #66	; 0x42
    9c42:	f881 3042 	strb.w	r3, [r1, #66]	; 0x42
    9c46:	e09d      	b.n	9d84 <_printf_i+0x1b4>
    9c48:	6822      	ldr	r2, [r4, #0]
    9c4a:	682b      	ldr	r3, [r5, #0]
    9c4c:	f012 0f80 	tst.w	r2, #128	; 0x80
    9c50:	d003      	beq.n	9c5a <_printf_i+0x8a>
    9c52:	1d1a      	adds	r2, r3, #4
    9c54:	602a      	str	r2, [r5, #0]
    9c56:	681d      	ldr	r5, [r3, #0]
    9c58:	e005      	b.n	9c66 <_printf_i+0x96>
    9c5a:	0651      	lsls	r1, r2, #25
    9c5c:	d5f9      	bpl.n	9c52 <_printf_i+0x82>
    9c5e:	1d1a      	adds	r2, r3, #4
    9c60:	602a      	str	r2, [r5, #0]
    9c62:	f9b3 5000 	ldrsh.w	r5, [r3]
    9c66:	2d00      	cmp	r5, #0
    9c68:	da39      	bge.n	9cde <_printf_i+0x10e>
    9c6a:	232d      	movs	r3, #45	; 0x2d
    9c6c:	426d      	negs	r5, r5
    9c6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    9c72:	e034      	b.n	9cde <_printf_i+0x10e>
    9c74:	6822      	ldr	r2, [r4, #0]
    9c76:	682b      	ldr	r3, [r5, #0]
    9c78:	f012 0f80 	tst.w	r2, #128	; 0x80
    9c7c:	d003      	beq.n	9c86 <_printf_i+0xb6>
    9c7e:	1d1a      	adds	r2, r3, #4
    9c80:	602a      	str	r2, [r5, #0]
    9c82:	681d      	ldr	r5, [r3, #0]
    9c84:	e004      	b.n	9c90 <_printf_i+0xc0>
    9c86:	0652      	lsls	r2, r2, #25
    9c88:	d5f9      	bpl.n	9c7e <_printf_i+0xae>
    9c8a:	1d1a      	adds	r2, r3, #4
    9c8c:	602a      	str	r2, [r5, #0]
    9c8e:	881d      	ldrh	r5, [r3, #0]
    9c90:	7e23      	ldrb	r3, [r4, #24]
    9c92:	4a57      	ldr	r2, [pc, #348]	; (9df0 <_printf_i+0x220>)
    9c94:	2b6f      	cmp	r3, #111	; 0x6f
    9c96:	bf14      	ite	ne
    9c98:	230a      	movne	r3, #10
    9c9a:	2308      	moveq	r3, #8
    9c9c:	e01b      	b.n	9cd6 <_printf_i+0x106>
    9c9e:	2378      	movs	r3, #120	; 0x78
    9ca0:	4a54      	ldr	r2, [pc, #336]	; (9df4 <_printf_i+0x224>)
    9ca2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    9ca6:	6823      	ldr	r3, [r4, #0]
    9ca8:	6829      	ldr	r1, [r5, #0]
    9caa:	f013 0f80 	tst.w	r3, #128	; 0x80
    9cae:	f101 0604 	add.w	r6, r1, #4
    9cb2:	602e      	str	r6, [r5, #0]
    9cb4:	d001      	beq.n	9cba <_printf_i+0xea>
    9cb6:	680d      	ldr	r5, [r1, #0]
    9cb8:	e002      	b.n	9cc0 <_printf_i+0xf0>
    9cba:	065f      	lsls	r7, r3, #25
    9cbc:	d5fb      	bpl.n	9cb6 <_printf_i+0xe6>
    9cbe:	880d      	ldrh	r5, [r1, #0]
    9cc0:	07de      	lsls	r6, r3, #31
    9cc2:	bf44      	itt	mi
    9cc4:	f043 0320 	orrmi.w	r3, r3, #32
    9cc8:	6023      	strmi	r3, [r4, #0]
    9cca:	b91d      	cbnz	r5, 9cd4 <_printf_i+0x104>
    9ccc:	6823      	ldr	r3, [r4, #0]
    9cce:	f023 0320 	bic.w	r3, r3, #32
    9cd2:	6023      	str	r3, [r4, #0]
    9cd4:	2310      	movs	r3, #16
    9cd6:	2100      	movs	r1, #0
    9cd8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    9cdc:	e001      	b.n	9ce2 <_printf_i+0x112>
    9cde:	4a44      	ldr	r2, [pc, #272]	; (9df0 <_printf_i+0x220>)
    9ce0:	230a      	movs	r3, #10
    9ce2:	6866      	ldr	r6, [r4, #4]
    9ce4:	60a6      	str	r6, [r4, #8]
    9ce6:	2e00      	cmp	r6, #0
    9ce8:	db03      	blt.n	9cf2 <_printf_i+0x122>
    9cea:	6821      	ldr	r1, [r4, #0]
    9cec:	f021 0104 	bic.w	r1, r1, #4
    9cf0:	6021      	str	r1, [r4, #0]
    9cf2:	b905      	cbnz	r5, 9cf6 <_printf_i+0x126>
    9cf4:	b16e      	cbz	r6, 9d12 <_printf_i+0x142>
    9cf6:	f104 0142 	add.w	r1, r4, #66	; 0x42
    9cfa:	fbb5 f6f3 	udiv	r6, r5, r3
    9cfe:	fb03 5516 	mls	r5, r3, r6, r5
    9d02:	460f      	mov	r7, r1
    9d04:	5d55      	ldrb	r5, [r2, r5]
    9d06:	f801 5901 	strb.w	r5, [r1], #-1
    9d0a:	4635      	mov	r5, r6
    9d0c:	2e00      	cmp	r6, #0
    9d0e:	d1f4      	bne.n	9cfa <_printf_i+0x12a>
    9d10:	e000      	b.n	9d14 <_printf_i+0x144>
    9d12:	4607      	mov	r7, r0
    9d14:	2b08      	cmp	r3, #8
    9d16:	d10a      	bne.n	9d2e <_printf_i+0x15e>
    9d18:	6823      	ldr	r3, [r4, #0]
    9d1a:	07dd      	lsls	r5, r3, #31
    9d1c:	d507      	bpl.n	9d2e <_printf_i+0x15e>
    9d1e:	6862      	ldr	r2, [r4, #4]
    9d20:	6923      	ldr	r3, [r4, #16]
    9d22:	429a      	cmp	r2, r3
    9d24:	dc03      	bgt.n	9d2e <_printf_i+0x15e>
    9d26:	2330      	movs	r3, #48	; 0x30
    9d28:	f807 3c01 	strb.w	r3, [r7, #-1]
    9d2c:	3f01      	subs	r7, #1
    9d2e:	1bc0      	subs	r0, r0, r7
    9d30:	6120      	str	r0, [r4, #16]
    9d32:	e02c      	b.n	9d8e <_printf_i+0x1be>
    9d34:	6809      	ldr	r1, [r1, #0]
    9d36:	682b      	ldr	r3, [r5, #0]
    9d38:	6962      	ldr	r2, [r4, #20]
    9d3a:	f011 0f80 	tst.w	r1, #128	; 0x80
    9d3e:	d004      	beq.n	9d4a <_printf_i+0x17a>
    9d40:	1d19      	adds	r1, r3, #4
    9d42:	6029      	str	r1, [r5, #0]
    9d44:	681b      	ldr	r3, [r3, #0]
    9d46:	601a      	str	r2, [r3, #0]
    9d48:	e005      	b.n	9d56 <_printf_i+0x186>
    9d4a:	0649      	lsls	r1, r1, #25
    9d4c:	d5f8      	bpl.n	9d40 <_printf_i+0x170>
    9d4e:	1d19      	adds	r1, r3, #4
    9d50:	6029      	str	r1, [r5, #0]
    9d52:	681b      	ldr	r3, [r3, #0]
    9d54:	801a      	strh	r2, [r3, #0]
    9d56:	2300      	movs	r3, #0
    9d58:	6123      	str	r3, [r4, #16]
    9d5a:	4607      	mov	r7, r0
    9d5c:	e017      	b.n	9d8e <_printf_i+0x1be>
    9d5e:	682b      	ldr	r3, [r5, #0]
    9d60:	1d1a      	adds	r2, r3, #4
    9d62:	602a      	str	r2, [r5, #0]
    9d64:	681f      	ldr	r7, [r3, #0]
    9d66:	4638      	mov	r0, r7
    9d68:	f7fc fd93 	bl	6892 <strlen>
    9d6c:	6863      	ldr	r3, [r4, #4]
    9d6e:	6120      	str	r0, [r4, #16]
    9d70:	4298      	cmp	r0, r3
    9d72:	bf88      	it	hi
    9d74:	6123      	strhi	r3, [r4, #16]
    9d76:	6923      	ldr	r3, [r4, #16]
    9d78:	6063      	str	r3, [r4, #4]
    9d7a:	e005      	b.n	9d88 <_printf_i+0x1b8>
    9d7c:	f104 0742 	add.w	r7, r4, #66	; 0x42
    9d80:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
    9d84:	2301      	movs	r3, #1
    9d86:	6123      	str	r3, [r4, #16]
    9d88:	2300      	movs	r3, #0
    9d8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    9d8e:	f8cd a000 	str.w	sl, [sp]
    9d92:	4640      	mov	r0, r8
    9d94:	4621      	mov	r1, r4
    9d96:	aa03      	add	r2, sp, #12
    9d98:	464b      	mov	r3, r9
    9d9a:	f7ff fea7 	bl	9aec <_printf_common>
    9d9e:	3001      	adds	r0, #1
    9da0:	d102      	bne.n	9da8 <_printf_i+0x1d8>
    9da2:	f04f 30ff 	mov.w	r0, #4294967295
    9da6:	e01f      	b.n	9de8 <_printf_i+0x218>
    9da8:	4640      	mov	r0, r8
    9daa:	4649      	mov	r1, r9
    9dac:	463a      	mov	r2, r7
    9dae:	6923      	ldr	r3, [r4, #16]
    9db0:	47d0      	blx	sl
    9db2:	3001      	adds	r0, #1
    9db4:	d0f5      	beq.n	9da2 <_printf_i+0x1d2>
    9db6:	6823      	ldr	r3, [r4, #0]
    9db8:	079b      	lsls	r3, r3, #30
    9dba:	d405      	bmi.n	9dc8 <_printf_i+0x1f8>
    9dbc:	68e0      	ldr	r0, [r4, #12]
    9dbe:	9b03      	ldr	r3, [sp, #12]
    9dc0:	4298      	cmp	r0, r3
    9dc2:	bfb8      	it	lt
    9dc4:	4618      	movlt	r0, r3
    9dc6:	e00f      	b.n	9de8 <_printf_i+0x218>
    9dc8:	2500      	movs	r5, #0
    9dca:	68e2      	ldr	r2, [r4, #12]
    9dcc:	9b03      	ldr	r3, [sp, #12]
    9dce:	1ad3      	subs	r3, r2, r3
    9dd0:	429d      	cmp	r5, r3
    9dd2:	daf3      	bge.n	9dbc <_printf_i+0x1ec>
    9dd4:	4640      	mov	r0, r8
    9dd6:	4649      	mov	r1, r9
    9dd8:	f104 0219 	add.w	r2, r4, #25
    9ddc:	2301      	movs	r3, #1
    9dde:	47d0      	blx	sl
    9de0:	3001      	adds	r0, #1
    9de2:	d0de      	beq.n	9da2 <_printf_i+0x1d2>
    9de4:	3501      	adds	r5, #1
    9de6:	e7f0      	b.n	9dca <_printf_i+0x1fa>
    9de8:	b004      	add	sp, #16
    9dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9dee:	bf00      	nop
    9df0:	0000a64a 	.word	0x0000a64a
    9df4:	0000a65b 	.word	0x0000a65b

00009df8 <memchr>:
memchr():
    9df8:	b510      	push	{r4, lr}
    9dfa:	b2c9      	uxtb	r1, r1
    9dfc:	4402      	add	r2, r0
    9dfe:	4290      	cmp	r0, r2
    9e00:	4603      	mov	r3, r0
    9e02:	d006      	beq.n	9e12 <memchr+0x1a>
    9e04:	781c      	ldrb	r4, [r3, #0]
    9e06:	428c      	cmp	r4, r1
    9e08:	f100 0001 	add.w	r0, r0, #1
    9e0c:	d1f7      	bne.n	9dfe <memchr+0x6>
    9e0e:	4618      	mov	r0, r3
    9e10:	bd10      	pop	{r4, pc}
    9e12:	2000      	movs	r0, #0
    9e14:	bd10      	pop	{r4, pc}

00009e16 <pin2sc1a>:
$d():
    9e16:	0e05 0908 0c0d 0706 040f 9303 8f8e 0e05     ................
    9e26:	0908 0c0d 0706 040f ffff ffff ffff 8eff     ................
    9e36:	118f 8412 8685 9187 ffff ffff ffff ffff     ................
    9e46:	8aff ff8b ffff ffff ffff ffff ffff ffff     ................
    9e56:	9303 9717 8101 921a 0031 0030 ffff          ........1.0...

00009e64 <digital_pin_to_info_PGM>:
    9e64:	0840 43fe a040 4004 0844 43fe a044 4004     @..C@..@D..CD..@
    9e74:	1800 43fe c000 4004 0030 43fe 9030 4004     ...C...@0..C0..@
    9e84:	0034 43fe 9034 4004 181c 43fe c01c 4004     4..C4..@...C...@
    9e94:	1810 43fe c010 4004 1808 43fe c008 4004     ...C...@...C...@
    9ea4:	180c 43fe c00c 4004 100c 43fe b00c 4004     ...C...@...C...@
    9eb4:	1010 43fe b010 4004 1018 43fe b018 4004     ...C...@...C...@
    9ec4:	101c 43fe b01c 4004 1014 43fe b014 4004     ...C...@...C...@
    9ed4:	1804 43fe c004 4004 1000 43fe b000 4004     ...C...@...C...@
    9ee4:	0800 43fe a000 4004 0804 43fe a004 4004     ...C...@...C...@
    9ef4:	080c 43fe a00c 4004 0808 43fe a008 4004     ...C...@...C...@
    9f04:	1814 43fe c014 4004 1818 43fe c018 4004     ...C...@...C...@
    9f14:	1004 43fe b004 4004 1008 43fe b008 4004     ...C...@...C...@
    9f24:	2068 43fe d068 4004 0014 43fe 9014 4004     h .Ch..@...C...@
    9f34:	0038 43fe 9038 4004 003c 43fe 903c 4004     8..C8..@<..C<..@
    9f44:	0040 43fe 9040 4004 0848 43fe a048 4004     @..C@..@H..CH..@
    9f54:	084c 43fe a04c 4004 0828 43fe a028 4004     L..CL..@(..C(..@
    9f64:	082c 43fe a02c 4004 2060 43fe d060 4004     ,..C,..@` .C`..@
    9f74:	2064 43fe d064 4004 1020 43fe b020 4004     d .Cd..@ ..C ..@
    9f84:	1024 43fe b024 4004 1028 43fe b028 4004     $..C$..@(..C(..@
    9f94:	102c 43fe b02c 4004 0044 43fe 9044 4004     ,..C,..@D..CD..@
    9fa4:	0070 43fe 9070 4004 0074 43fe 9074 4004     p..Cp..@t..Ct..@
    9fb4:	0068 43fe 9068 4004 0850 43fe a050 4004     h..Ch..@P..CP..@
    9fc4:	0858 43fe a058 4004 085c 43fe a05c 4004     X..CX..@\..C\..@
    9fd4:	0854 43fe a054 4004 1820 43fe c020 4004     T..CT..@ ..C ..@
    9fe4:	1824 43fe c024 4004 0810 43fe a010 4004     $..C$..@...C...@
    9ff4:	0814 43fe a014 4004 1838 43fe c038 4004     ...C...@8..C8..@
    a004:	1834 43fe c034 4004 1830 43fe c030 4004     4..C4..@0..C0..@
    a014:	183c 43fe c03c 4004 182c 43fe c02c 4004     <..C<..@,..C,..@
    a024:	2028 43fe d028 4004 202c 43fe d02c 4004     ( .C(..@, .C,..@
    a034:	2000 43fe d000 4004 2004 43fe d004 4004     . .C...@. .C...@
    a044:	2008 43fe d008 4004 200c 43fe d00c 4004     . .C...@. .C...@
    a054:	2010 43fe d010 4004 2014 43fe d014 4004     . .C...@. .C...@

0000a064 <usb_endpoint_config_table>:
    a064:	1500 1519                                   ....

0000a068 <usb_descriptor_list>:
    a068:	0100 0000 0a9b 1fff 0012 0000 0200 0000     ................
    a078:	0a58 1fff 0043 0000 0300 0000 0a54 1fff     X...C.......T...
    a088:	0000 0000 0301 0409 0a3c 1fff 0000 0000     ........<.......
    a098:	0302 0409 0a26 1fff 0000 0000 0303 0409     ....&...........
    a0a8:	0a10 1fff 0000 0000 0000 0000 0000 0000     ................
    a0b8:	0000 0000 ffff ffff                         ........

0000a0c0 <_ZTV14HardwareSerial>:
	...
    a0c8:	428d 0000 42a5 0000 4275 0000 427d 0000     .B...B..uB..}B..
    a0d8:	4279 0000 4281 0000 4209 0000 421d 0000     yB...B...B...B..
    a0e8:	423d 0000 4241 0000 4247 0000 424d 0000     =B..AB..GB..MB..
    a0f8:	4255 0000 4265 0000 4285 0000 4289 0000     UB..eB...B...B..
    a108:	41d9 0000 41e5 0000 41f1 0000 41fd 0000     .A...A...A...A..
    a118:	42b5 0000 4299 0000                         .B...B..

0000a120 <_ZTV15HardwareSerial2>:
	...
    a128:	43a1 0000 43b9 0000 4389 0000 4391 0000     .C...C...C...C..
    a138:	438d 0000 4395 0000 431d 0000 4331 0000     .C...C...C..1C..
    a148:	4351 0000 4355 0000 435b 0000 4361 0000     QC..UC..[C..aC..
    a158:	4369 0000 4379 0000 4399 0000 439d 0000     iC..yC...C...C..
    a168:	42eb 0000 42f7 0000 4303 0000 430f 0000     .B...B...C...C..
    a178:	43c9 0000 43ad 0000                         .C...C..

0000a180 <_ZTV15HardwareSerial3>:
	...
    a188:	44b5 0000 44cd 0000 449d 0000 44a5 0000     .D...D...D...D..
    a198:	44a1 0000 44a9 0000 4431 0000 4445 0000     .D...D..1D..ED..
    a1a8:	4465 0000 4469 0000 446f 0000 4475 0000     eD..iD..oD..uD..
    a1b8:	447d 0000 448d 0000 44ad 0000 44b1 0000     }D...D...D...D..
    a1c8:	43ff 0000 440b 0000 4417 0000 4423 0000     .C...D...D..#D..
    a1d8:	44dd 0000 44c1 0000                         .D...D..

0000a1e0 <_ZTV15HardwareSerial4>:
	...
    a1e8:	45c9 0000 45e1 0000 45b1 0000 45b9 0000     .E...E...E...E..
    a1f8:	45b5 0000 45bd 0000 4545 0000 4559 0000     .E...E..EE..YE..
    a208:	4579 0000 457d 0000 4583 0000 4589 0000     yE..}E...E...E..
    a218:	4591 0000 45a1 0000 45c1 0000 45c5 0000     .E...E...E...E..
    a228:	4513 0000 451f 0000 452b 0000 4537 0000     .E...E..+E..7E..
    a238:	45f1 0000 45d5 0000                         .E...E..

0000a240 <_ZTV15HardwareSerial5>:
	...
    a248:	46dd 0000 46f5 0000 46c5 0000 46cd 0000     .F...F...F...F..
    a258:	46c9 0000 46d1 0000 4659 0000 466d 0000     .F...F..YF..mF..
    a268:	468d 0000 4691 0000 4697 0000 469d 0000     .F...F...F...F..
    a278:	46a5 0000 46b5 0000 46d5 0000 46d9 0000     .F...F...F...F..
    a288:	4627 0000 4633 0000 463f 0000 464b 0000     'F..3F..?F..KF..
    a298:	4705 0000 46e9 0000                         .G...F..

0000a2a0 <_ZTV15HardwareSerial6>:
	...
    a2a8:	47d5 0000 47ed 0000 47bd 0000 47c5 0000     .G...G...G...G..
    a2b8:	47c1 0000 47c9 0000 476b 0000 4771 0000     .G...G..kG..qG..
    a2c8:	4785 0000 4789 0000 478f 0000 4795 0000     .G...G...G...G..
    a2d8:	479d 0000 47ad 0000 47cd 0000 47d1 0000     .G...G...G...G..
    a2e8:	473b 0000 4747 0000 4753 0000 475f 0000     ;G..GG..SG.._G..
    a2f8:	47fd 0000 47e1 0000 7453 7261 6974 676e     .G...G..Starting
    a308:	6e20 776f 0a21 2500 0a64 ff00 ffff ffff      now!..%d.......
    a318:	0a0d 0000 0000 0000                         ........

0000a320 <_ZTV5Print>:
	...
    a328:	0885 0000 48a1 0000 616e 006e 6e69 0066     .....H..nan.inf.
    a338:	766f 0066 ffff ffff                         ovf.....

0000a340 <_ZTV16usb_serial_class>:
	...
    a348:	4b67 0000 4b6d 0000 4b53 0000 4b57 0000     gK..mK..SK..WK..
    a358:	4b5b 0000 4b5f 0000 4b63 0000 0000 0000     [K.._K..cK......
    a368:	0043 ffff                                   C...

0000a36c <_global_impure_ptr>:
    a36c:	0ab4 1fff                                   ....

0000a370 <tinytens>:
    a370:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
    a380:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
    a390:	6f43 64ac 0628 1168                         Co.d(.h.

0000a398 <fpi.5246>:
    a398:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
    a3a8:	0000 0000                                   ....

0000a3ac <fpinan.5282>:
    a3ac:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
    a3bc:	0000 0000                                   ....

0000a3c0 <_ctype_>:
    a3c0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
    a3d0:	2020 2020 2020 2020 2020 2020 2020 2020                     
    a3e0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
    a3f0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
    a400:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
    a410:	0101 0101 0101 0101 0101 0101 1010 1010     ................
    a420:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
    a430:	0202 0202 0202 0202 0202 0202 1010 1010     ................
    a440:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
    a4c0:	ff00 ffff                                   ....

0000a4c4 <__sf_fake_stdin>:
	...

0000a4e4 <__sf_fake_stdout>:
	...

0000a504 <__sf_fake_stderr>:
	...
    a524:	4f50 4953 0058 002e ffff ffff               POSIX.......

0000a530 <__mprec_tens>:
    a530:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
    a540:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
    a550:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
    a560:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
    a570:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
    a580:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
    a590:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
    a5a0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
    a5b0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
    a5c0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
    a5d0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
    a5e0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
    a5f0:	9db4 79d9 7843 44ea                         ...yCx.D

0000a5f8 <__mprec_bigtens>:
    a5f8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
    a608:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
    a618:	bf3c 7f73 4fdd 7515                         <.s..O.u

0000a620 <p05.5281>:
    a620:	0005 0000 0019 0000 007d 0000 6e49 6966     ........}...Infi
    a630:	696e 7974 4e00 4e61 2300 302d 202b 6800     nity.NaN.#-0+ .h
    a640:	4c6c 6500 6766 4645 0047 3130 3332 3534     lL.efgEFG.012345
    a650:	3736 3938 4241 4443 4645 3000 3231 3433     6789ABCDEF.01234
    a660:	3635 3837 6139 6362 6564 0066               56789abcdef.

0000a66c <_init>:
$t():
    a66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a66e:	bf00      	nop
    a670:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a672:	bc08      	pop	{r3}
    a674:	469e      	mov	lr, r3
    a676:	4770      	bx	lr

0000a678 <__init_array_start>:
$d():
    a678:	00000435 	.word	0x00000435
    a67c:	000042cd 	.word	0x000042cd
    a680:	000043e1 	.word	0x000043e1
    a684:	000044f5 	.word	0x000044f5
    a688:	00004609 	.word	0x00004609
    a68c:	0000471d 	.word	0x0000471d
    a690:	00004815 	.word	0x00004815
    a694:	00004b75 	.word	0x00004b75

Disassembly of section .data:

1fff0760 <port_E_isr>:
port_E_isr():
C:\Teensy\Projects\HelloWorld/pins_teensy.c:294
#if defined(KINETISK)
PORT_ISR_FUNCTION_CLZ(A)
PORT_ISR_FUNCTION_CLZ(B)
PORT_ISR_FUNCTION_CLZ(C)
PORT_ISR_FUNCTION_CLZ(D)
PORT_ISR_FUNCTION_CLZ(E)
1fff0760:	4b08      	ldr	r3, [pc, #32]	; (1fff0784 <port_E_isr+0x24>)
1fff0762:	b510      	push	{r4, lr}
1fff0764:	681c      	ldr	r4, [r3, #0]
1fff0766:	601c      	str	r4, [r3, #0]
1fff0768:	b154      	cbz	r4, 1fff0780 <port_E_isr+0x20>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:294 (discriminator 2)
1fff076a:	fa94 f2a4 	rbit	r2, r4
1fff076e:	fab2 f282 	clz	r2, r2
1fff0772:	4b05      	ldr	r3, [pc, #20]	; (1fff0788 <port_E_isr+0x28>)
1fff0774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
1fff0778:	4798      	blx	r3
1fff077a:	1e63      	subs	r3, r4, #1
1fff077c:	401c      	ands	r4, r3
1fff077e:	d1f4      	bne.n	1fff076a <port_E_isr+0xa>
1fff0780:	bd10      	pop	{r4, pc}
1fff0782:	bf00      	nop
1fff0784:	4004d0a0 	.word	0x4004d0a0
1fff0788:	1fff0850 	.word	0x1fff0850

1fff078c <port_D_isr>:
port_D_isr():
C:\Teensy\Projects\HelloWorld/pins_teensy.c:293

#if defined(KINETISK)
PORT_ISR_FUNCTION_CLZ(A)
PORT_ISR_FUNCTION_CLZ(B)
PORT_ISR_FUNCTION_CLZ(C)
PORT_ISR_FUNCTION_CLZ(D)
1fff078c:	4b08      	ldr	r3, [pc, #32]	; (1fff07b0 <port_D_isr+0x24>)
1fff078e:	b510      	push	{r4, lr}
1fff0790:	681c      	ldr	r4, [r3, #0]
1fff0792:	601c      	str	r4, [r3, #0]
1fff0794:	b15c      	cbz	r4, 1fff07ae <port_D_isr+0x22>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:293 (discriminator 2)
1fff0796:	fa94 f3a4 	rbit	r3, r4
1fff079a:	4a06      	ldr	r2, [pc, #24]	; (1fff07b4 <port_D_isr+0x28>)
1fff079c:	fab3 f383 	clz	r3, r3
1fff07a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
1fff07a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
1fff07a6:	4798      	blx	r3
1fff07a8:	1e63      	subs	r3, r4, #1
1fff07aa:	401c      	ands	r4, r3
1fff07ac:	d1f3      	bne.n	1fff0796 <port_D_isr+0xa>
1fff07ae:	bd10      	pop	{r4, pc}
1fff07b0:	4004c0a0 	.word	0x4004c0a0
1fff07b4:	1fff0850 	.word	0x1fff0850

1fff07b8 <port_C_isr>:
port_C_isr():
C:\Teensy\Projects\HelloWorld/pins_teensy.c:292
// END PORT_ISR_FUNCTION_CLZ

#if defined(KINETISK)
PORT_ISR_FUNCTION_CLZ(A)
PORT_ISR_FUNCTION_CLZ(B)
PORT_ISR_FUNCTION_CLZ(C)
1fff07b8:	4b09      	ldr	r3, [pc, #36]	; (1fff07e0 <port_C_isr+0x28>)
1fff07ba:	b510      	push	{r4, lr}
1fff07bc:	681c      	ldr	r4, [r3, #0]
1fff07be:	601c      	str	r4, [r3, #0]
1fff07c0:	b164      	cbz	r4, 1fff07dc <port_C_isr+0x24>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:292 (discriminator 2)
1fff07c2:	fa94 f3a4 	rbit	r3, r4
1fff07c6:	4a07      	ldr	r2, [pc, #28]	; (1fff07e4 <port_C_isr+0x2c>)
1fff07c8:	fab3 f383 	clz	r3, r3
1fff07cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
1fff07d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
1fff07d4:	4798      	blx	r3
1fff07d6:	1e63      	subs	r3, r4, #1
1fff07d8:	401c      	ands	r4, r3
1fff07da:	d1f2      	bne.n	1fff07c2 <port_C_isr+0xa>
1fff07dc:	bd10      	pop	{r4, pc}
1fff07de:	bf00      	nop
1fff07e0:	4004b0a0 	.word	0x4004b0a0
1fff07e4:	1fff0850 	.word	0x1fff0850

1fff07e8 <port_B_isr>:
port_B_isr():
C:\Teensy\Projects\HelloWorld/pins_teensy.c:291
	}
// END PORT_ISR_FUNCTION_CLZ

#if defined(KINETISK)
PORT_ISR_FUNCTION_CLZ(A)
PORT_ISR_FUNCTION_CLZ(B)
1fff07e8:	4b09      	ldr	r3, [pc, #36]	; (1fff0810 <port_B_isr+0x28>)
1fff07ea:	b510      	push	{r4, lr}
1fff07ec:	681c      	ldr	r4, [r3, #0]
1fff07ee:	601c      	str	r4, [r3, #0]
1fff07f0:	b164      	cbz	r4, 1fff080c <port_B_isr+0x24>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:291 (discriminator 2)
1fff07f2:	fa94 f3a4 	rbit	r3, r4
1fff07f6:	4a07      	ldr	r2, [pc, #28]	; (1fff0814 <port_B_isr+0x2c>)
1fff07f8:	fab3 f383 	clz	r3, r3
1fff07fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
1fff0800:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
1fff0804:	4798      	blx	r3
1fff0806:	1e63      	subs	r3, r4, #1
1fff0808:	401c      	ands	r4, r3
1fff080a:	d1f2      	bne.n	1fff07f2 <port_B_isr+0xa>
1fff080c:	bd10      	pop	{r4, pc}
1fff080e:	bf00      	nop
1fff0810:	4004a0a0 	.word	0x4004a0a0
1fff0814:	1fff0850 	.word	0x1fff0850

1fff0818 <port_A_isr>:
port_A_isr():
C:\Teensy\Projects\HelloWorld/pins_teensy.c:290
		}                                                     \
	}
// END PORT_ISR_FUNCTION_CLZ

#if defined(KINETISK)
PORT_ISR_FUNCTION_CLZ(A)
1fff0818:	4b09      	ldr	r3, [pc, #36]	; (1fff0840 <port_A_isr+0x28>)
1fff081a:	b510      	push	{r4, lr}
1fff081c:	681c      	ldr	r4, [r3, #0]
1fff081e:	601c      	str	r4, [r3, #0]
1fff0820:	b164      	cbz	r4, 1fff083c <port_A_isr+0x24>
C:\Teensy\Projects\HelloWorld/pins_teensy.c:290 (discriminator 2)
1fff0822:	fa94 f3a4 	rbit	r3, r4
1fff0826:	4a07      	ldr	r2, [pc, #28]	; (1fff0844 <port_A_isr+0x2c>)
1fff0828:	fab3 f383 	clz	r3, r3
1fff082c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
1fff0830:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
1fff0834:	4798      	blx	r3
1fff0836:	1e63      	subs	r3, r4, #1
1fff0838:	401c      	ands	r4, r3
1fff083a:	d1f2      	bne.n	1fff0822 <port_A_isr+0xa>
1fff083c:	bd10      	pop	{r4, pc}
1fff083e:	bf00      	nop
1fff0840:	400490a0 	.word	0x400490a0
1fff0844:	1fff0850 	.word	0x1fff0850

1fff0848 <analog_config_bits>:
$d():
1fff0848:	0000040a                                         .

1fff0849 <analog_num_average>:
1fff0849:	f4000004                                         ...

1fff084c <__brkval>:
1fff084c:	1fff10f4                                ....

1fff0850 <isr_table_portE>:
1fff0850:	00000b45 00000b45 00000b45 00000b45     E...E...E...E...
1fff0860:	00000b45 00000b45 00000b45 00000b45     E...E...E...E...
1fff0870:	00000b45 00000b45 00000b45 00000b45     E...E...E...E...
1fff0880:	00000b45 00000b45 00000b45 00000b45     E...E...E...E...
1fff0890:	00000b45 00000b45 00000b45 00000b45     E...E...E...E...
1fff08a0:	00000b45 00000b45 00000b45 00000b45     E...E...E...E...
1fff08b0:	00000b45 00000b45 00000b45              E...E...E...

1fff08bc <isr_table_portD>:
1fff08bc:	00000b45 00000b45 00000b45 00000b45     E...E...E...E...
1fff08cc:	00000b45 00000b45 00000b45 00000b45     E...E...E...E...
1fff08dc:	00000b45 00000b45 00000b45 00000b45     E...E...E...E...
1fff08ec:	00000b45 00000b45 00000b45 00000b45     E...E...E...E...

1fff08fc <isr_table_portC>:
1fff08fc:	00000b45 00000b45 00000b45 00000b45     E...E...E...E...
1fff090c:	00000b45 00000b45 00000b45 00000b45     E...E...E...E...
1fff091c:	00000b45 00000b45 00000b45 00000b45     E...E...E...E...

1fff092c <isr_table_portB>:
1fff092c:	00000b45 00000b45 00000b45 00000b45     E...E...E...E...
1fff093c:	00000b45 00000b45 00000b45 00000b45     E...E...E...E...
1fff094c:	00000b45 00000b45 00000b45 00000b45     E...E...E...E...
1fff095c:	00000b45 00000b45 00000b45 00000b45     E...E...E...E...
1fff096c:	00000b45 00000b45 00000b45 00000b45     E...E...E...E...
1fff097c:	00000b45 00000b45 00000b45 00000b45     E...E...E...E...

1fff098c <isr_table_portA>:
1fff098c:	00000b45 00000b45 00000b45 00000b45     E...E...E...E...
1fff099c:	00000b45 00000b45 00000b45 00000b45     E...E...E...E...
1fff09ac:	00000b45 00000b45 00000b45 00000b45     E...E...E...E...
1fff09bc:	00000b45 00000b45 00000b45 00000b45     E...E...E...E...
1fff09cc:	00000b45 00000b45 00000b45 00000b45     E...E...E...E...
1fff09dc:	00000b45 00000b45 00000b45 00000b45     E...E...E...E...
1fff09ec:	00000b45 00000b45 00000b45 00000b45     E...E...E...E...
1fff09fc:	00000b45 00000b45                       E...E...

1fff0a04 <analog_write_res>:
1fff0a04:	00000008                                ....

1fff0a08 <tx_pin_num>:
1fff0a08:	080a0901                                         .

1fff0a09 <rx_pin_num>:
1fff0a09:	1f080a09                                         .

1fff0a0a <tx_pin_num>:
1fff0a0a:	201f080a                                         .

1fff0a0b <tx_pin_num>:
1fff0a0b:	21201f08                                         .

1fff0a0c <rx_pin_num>:
1fff0a0c:	3021201f                                         .

1fff0a0d <tx_pin_num>:
1fff0a0d:	0c302120                                          

1fff0a0e <tx_pin_num>:
1fff0a0e:	030c3021                                         !

1fff0a0f <tx_pin_num>:
1fff0a0f:	00030c30                                         0

1fff0a10 <usb_string_serial_number_default>:
1fff0a10:	0000030c 00000000 00000000 00000000     ................
1fff0a20:	00000000 03160000                                ......

1fff0a26 <usb_string_product_name_default>:
1fff0a26:	00550316 00420053 00530020 00720065     ..U.S.B. .S.e.r.
1fff0a36:	00610069 0318006c                                i.a.l.

1fff0a3c <usb_string_manufacturer_name_default>:
1fff0a3c:	00540318 00650065 0073006e 00640079     ..T.e.e.n.s.y.d.
1fff0a4c:	00690075 006f006e                       u.i.n.o.

1fff0a54 <string0>:
1fff0a54:	04090304                                ....

1fff0a58 <config_descriptor>:
1fff0a58:	00430209 c0000102 00040932 02020100     ..C.....2.......
1fff0a68:	24050001 05011000 01010124 06022404     ...$....$....$..
1fff0a78:	00062405 82050701 40001003 00010409     .$.........@....
1fff0a88:	00000a02 03050700 00004002 02840507     .........@......
1fff0a98:	12000040                                         @..

1fff0a9b <device_descriptor>:
1fff0a9b:	01010112 40000002 048316c0 02010200     .......@........
1fff0aab:	00000103 ffffff00                                .....

1fff0ab0 <usb_buffer_available>:
1fff0ab0:	ffffffff                                ....

1fff0ab4 <impure_data>:
1fff0ab4:	00000000 0000a4c4 0000a4e4 0000a504     ................
	...
1fff0ad4:	0000a368 00000000 00000000 00000000     h...............
	...

1fff0b14 <_impure_ptr>:
1fff0b14:	1fff0ab4                                ....

1fff0b18 <__ctype_ptr__>:
1fff0b18:	0000a3c0                                ....

1fff0b1c <lconv>:
1fff0b1c:	0000a52a 0000a30e 0000a30e 0000a30e     *...............
1fff0b2c:	0000a30e 0000a30e 0000a30e 0000a30e     ................
1fff0b3c:	0000a30e 0000a30e ffffffff ffffffff     ................
1fff0b4c:	ffffffff 0000ffff                       ........
